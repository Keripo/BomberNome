
bmac_server.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000a2  00800200  00006096  0000610a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006096  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000408  008002a2  00006138  000061ac  2**0
                  ALLOC
  3 .stab         0000eebc  00000000  00000000  000061ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00005da8  00000000  00000000  00015068  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__ctors_end>
       4:	0c 94 42 2a 	jmp	0x5484	; 0x5484 <__vector_1>
       8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
       c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      10:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      14:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      18:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      1c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      20:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      24:	0c 94 70 2a 	jmp	0x54e0	; 0x54e0 <__vector_9>
      28:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      2c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      30:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      34:	0c 94 23 28 	jmp	0x5046	; 0x5046 <__vector_13>
      38:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      3c:	0c 94 23 28 	jmp	0x5046	; 0x5046 <__vector_13>
      40:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      44:	0c 94 56 28 	jmp	0x50ac	; 0x50ac <__vector_17>
      48:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      4c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      50:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      54:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      58:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      5c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      60:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      64:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      68:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      6c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      70:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      74:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      78:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      7c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      80:	0c 94 60 28 	jmp	0x50c0	; 0x50c0 <__vector_32>
      84:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      88:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      8c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      90:	0c 94 f7 16 	jmp	0x2dee	; 0x2dee <__vector_36>
      94:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      98:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      9c:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      a0:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      a4:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      a8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      ac:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      b0:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      b4:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      b8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      bc:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      c0:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      c4:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      c8:	0c 94 06 02 	jmp	0x40c	; 0x40c <__bad_interrupt>
      cc:	84 1a       	sub	r8, r20
      ce:	88 1a       	sub	r8, r24
      d0:	8a 1a       	sub	r8, r26
      d2:	8c 1a       	sub	r8, r28
      d4:	8e 1a       	sub	r8, r30
      d6:	90 1a       	sub	r9, r16
      d8:	95 1a       	sub	r9, r21
      da:	92 1a       	sub	r9, r18
      dc:	98 1a       	sub	r9, r24
      de:	9b 1a       	sub	r9, r27
      e0:	9e 1a       	sub	r9, r30
      e2:	a4 1a       	sub	r10, r20
      e4:	a7 1a       	sub	r10, r23
      e6:	aa 1a       	sub	r10, r26
      e8:	ad 1a       	sub	r10, r29
      ea:	a1 1a       	sub	r10, r17
      ec:	82 1a       	sub	r8, r18
      ee:	86 1a       	sub	r8, r22

000000f0 <__c.2340>:
      f0:	45 52 52 4f 52 20 73 65 74 74 69 6e 67 20 62 6d     ERROR setting bm
     100:	61 63 20 72 61 74 65 0d 0a 00                       ac rate...

0000010a <__c.2625>:
     10a:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     11a:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     12a:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

00000136 <__c.2623>:
     136:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     146:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     156:	61 69 6c 65 64 0d 0a 00                             ailed...

0000015e <__c.2621>:
     15e:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     16e:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     17e:	61 69 6c 65 64 0d 0a 00                             ailed...

00000186 <__c.2733>:
     186:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 52     CC2420 ERROR:  R
     196:	65 6c 65 61 73 65 20 6f 66 20 73 65 6d 61 70 68     elease of semaph
     1a6:	6f 72 65 20 66 61 69 6c 65 64 0d 0a 00              ore failed...

000001b3 <__c.2671>:
     1b3:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 41     CC2420 ERROR:  A
     1c3:	63 63 65 73 73 20 74 6f 20 73 65 6d 61 70 68 6f     ccess to semapho
     1d3:	72 65 20 66 61 69 6c 65 64 0d 0a 00                 re failed...

000001df <__c.2381>:
     1df:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000001e6 <__c.2378>:
     1e6:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1f6:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

00000201 <__c.2375>:
     201:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     211:	20 53 69 67 6e 61 6c 00                              Signal.

00000219 <__c.2372>:
     219:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     229:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

00000239 <__c.2369>:
     239:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     249:	72 6f 72 00                                         ror.

0000024d <__c.2366>:
     24d:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

0000025e <__c.2363>:
     25e:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

0000026d <__c.2360>:
     26d:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     27d:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

00000288 <__c.2357>:
     288:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

00000294 <__c.2354>:
     294:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     2a4:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     2b4:	20 6f 6b 3f 00                                       ok?.

000002b9 <__c.2351>:
     2b9:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2c9:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002d7 <__c.2348>:
     2d7:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     2e7:	72 74 00                                            rt.

000002ea <__c.2345>:
     2ea:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     2fa:	49 44 00                                            ID.

000002fd <__c.2342>:
     2fd:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     30d:	20 57 61 6b 65 75 70 00                              Wakeup.

00000315 <__c.2339>:
     315:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     325:	6c 61 74 65 64 00                                   lated.

0000032b <__c.2336>:
     32b:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     33b:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

00000346 <__c.2333>:
     346:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     356:	69 6e 74 65 72 00                                   inter.

0000035c <__c.2330>:
     35c:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     36c:	6c 6f 77 00                                         low.

00000370 <__c.2326>:
     370:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     380:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     390:	6e 6f 75 67 68 21 00                                nough!.

00000397 <__c.2323>:
     397:	29 3a 20 00                                         ): .

0000039b <__c.2321>:
     39b:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000003a7 <__c.2254>:
     3a7:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000003b6 <__c.2047>:
     3b6:	45 46 47 65 66 67 00                                EFGefg.

000003bd <__c.2041>:
     3bd:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.
	...

000003ce <__ctors_end>:
     3ce:	11 24       	eor	r1, r1
     3d0:	1f be       	out	0x3f, r1	; 63
     3d2:	cf ef       	ldi	r28, 0xFF	; 255
     3d4:	d1 e2       	ldi	r29, 0x21	; 33
     3d6:	de bf       	out	0x3e, r29	; 62
     3d8:	cd bf       	out	0x3d, r28	; 61

000003da <__do_copy_data>:
     3da:	12 e0       	ldi	r17, 0x02	; 2
     3dc:	a0 e0       	ldi	r26, 0x00	; 0
     3de:	b2 e0       	ldi	r27, 0x02	; 2
     3e0:	e6 e9       	ldi	r30, 0x96	; 150
     3e2:	f0 e6       	ldi	r31, 0x60	; 96
     3e4:	00 e0       	ldi	r16, 0x00	; 0
     3e6:	0b bf       	out	0x3b, r16	; 59
     3e8:	02 c0       	rjmp	.+4      	; 0x3ee <__do_copy_data+0x14>
     3ea:	07 90       	elpm	r0, Z+
     3ec:	0d 92       	st	X+, r0
     3ee:	a2 3a       	cpi	r26, 0xA2	; 162
     3f0:	b1 07       	cpc	r27, r17
     3f2:	d9 f7       	brne	.-10     	; 0x3ea <__do_copy_data+0x10>

000003f4 <__do_clear_bss>:
     3f4:	16 e0       	ldi	r17, 0x06	; 6
     3f6:	a2 ea       	ldi	r26, 0xA2	; 162
     3f8:	b2 e0       	ldi	r27, 0x02	; 2
     3fa:	01 c0       	rjmp	.+2      	; 0x3fe <.do_clear_bss_start>

000003fc <.do_clear_bss_loop>:
     3fc:	1d 92       	st	X+, r1

000003fe <.do_clear_bss_start>:
     3fe:	aa 3a       	cpi	r26, 0xAA	; 170
     400:	b1 07       	cpc	r27, r17
     402:	e1 f7       	brne	.-8      	; 0x3fc <.do_clear_bss_loop>
     404:	0e 94 8f 03 	call	0x71e	; 0x71e <main>
     408:	0c 94 4a 30 	jmp	0x6094	; 0x6094 <_exit>

0000040c <__bad_interrupt>:
     40c:	0c 94 8e 28 	jmp	0x511c	; 0x511c <__vector_default>

00000410 <nrk_create_taskset>:
	PIN_TASK.offset.secs = 0;
	PIN_TASK.offset.nano_secs = 0;
	nrk_activate_task (&PIN_TASK);
*/

	RX_TASK.task = rx_task;
     410:	81 e6       	ldi	r24, 0x61	; 97
     412:	92 e0       	ldi	r25, 0x02	; 2
     414:	90 93 f3 03 	sts	0x03F3, r25
     418:	80 93 f2 03 	sts	0x03F2, r24
	RX_TASK.Ptos = (void *) &rx_task_stack[NRK_APP_STACKSIZE - 1];
     41c:	87 e4       	ldi	r24, 0x47	; 71
     41e:	93 e0       	ldi	r25, 0x03	; 3
     420:	90 93 ef 03 	sts	0x03EF, r25
     424:	80 93 ee 03 	sts	0x03EE, r24
	RX_TASK.Pbos = (void *) &rx_task_stack[0];
     428:	88 ec       	ldi	r24, 0xC8	; 200
     42a:	92 e0       	ldi	r25, 0x02	; 2
     42c:	90 93 f1 03 	sts	0x03F1, r25
     430:	80 93 f0 03 	sts	0x03F0, r24
	RX_TASK.prio = 2;
     434:	82 e0       	ldi	r24, 0x02	; 2
     436:	80 93 f5 03 	sts	0x03F5, r24
	RX_TASK.FirstActivation = TRUE;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	80 93 f4 03 	sts	0x03F4, r24
	RX_TASK.Type = BASIC_TASK;
     440:	80 93 f6 03 	sts	0x03F6, r24
	RX_TASK.SchType = PREEMPTIVE;
     444:	80 93 f7 03 	sts	0x03F7, r24
	RX_TASK.period.secs = 0;
     448:	10 92 f8 03 	sts	0x03F8, r1
     44c:	10 92 f9 03 	sts	0x03F9, r1
     450:	10 92 fa 03 	sts	0x03FA, r1
     454:	10 92 fb 03 	sts	0x03FB, r1
	RX_TASK.period.nano_secs = 40 * NANOS_PER_MS;;
     458:	80 e0       	ldi	r24, 0x00	; 0
     45a:	9a e5       	ldi	r25, 0x5A	; 90
     45c:	a2 e6       	ldi	r26, 0x62	; 98
     45e:	b2 e0       	ldi	r27, 0x02	; 2
     460:	80 93 fc 03 	sts	0x03FC, r24
     464:	90 93 fd 03 	sts	0x03FD, r25
     468:	a0 93 fe 03 	sts	0x03FE, r26
     46c:	b0 93 ff 03 	sts	0x03FF, r27
	RX_TASK.cpu_reserve.secs = 0;
     470:	10 92 00 04 	sts	0x0400, r1
     474:	10 92 01 04 	sts	0x0401, r1
     478:	10 92 02 04 	sts	0x0402, r1
     47c:	10 92 03 04 	sts	0x0403, r1
	RX_TASK.cpu_reserve.nano_secs = 40 * NANOS_PER_MS;;
     480:	80 93 04 04 	sts	0x0404, r24
     484:	90 93 05 04 	sts	0x0405, r25
     488:	a0 93 06 04 	sts	0x0406, r26
     48c:	b0 93 07 04 	sts	0x0407, r27
	RX_TASK.offset.secs = 0;
     490:	10 92 08 04 	sts	0x0408, r1
     494:	10 92 09 04 	sts	0x0409, r1
     498:	10 92 0a 04 	sts	0x040A, r1
     49c:	10 92 0b 04 	sts	0x040B, r1
	RX_TASK.offset.nano_secs = 0;
     4a0:	10 92 0c 04 	sts	0x040C, r1
     4a4:	10 92 0d 04 	sts	0x040D, r1
     4a8:	10 92 0e 04 	sts	0x040E, r1
     4ac:	10 92 0f 04 	sts	0x040F, r1
	nrk_activate_task (&RX_TASK);
     4b0:	8d ee       	ldi	r24, 0xED	; 237
     4b2:	93 e0       	ldi	r25, 0x03	; 3
     4b4:	0e 94 07 22 	call	0x440e	; 0x440e <nrk_activate_task>

	printf ("Create done\r\n");
     4b8:	80 e0       	ldi	r24, 0x00	; 0
     4ba:	92 e0       	ldi	r25, 0x02	; 2
     4bc:	0e 94 ca 2d 	call	0x5b94	; 0x5b94 <puts>
     4c0:	08 95       	ret

000004c2 <rx_task>:
		nrk_wait_until_next_period ();
	}
}

void rx_task ()
{
     4c2:	8f 92       	push	r8
     4c4:	9f 92       	push	r9
     4c6:	af 92       	push	r10
     4c8:	bf 92       	push	r11
     4ca:	cf 92       	push	r12
     4cc:	df 92       	push	r13
     4ce:	ef 92       	push	r14
     4d0:	ff 92       	push	r15
     4d2:	0f 93       	push	r16
     4d4:	1f 93       	push	r17
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
     4da:	cd b7       	in	r28, 0x3d	; 61
     4dc:	de b7       	in	r29, 0x3e	; 62
     4de:	2a 97       	sbiw	r28, 0x0a	; 10
     4e0:	0f b6       	in	r0, 0x3f	; 63
     4e2:	f8 94       	cli
     4e4:	de bf       	out	0x3e, r29	; 62
     4e6:	0f be       	out	0x3f, r0	; 63
     4e8:	cd bf       	out	0x3d, r28	; 61
	uint8_t i, len;
	int8_t rssi, val;
	uint8_t *local_rx_buf;
	nrk_time_t check_period;
	printf ("rx_task PID=%d\r\n", nrk_get_pid ());
     4ea:	0e 94 09 20 	call	0x4012	; 0x4012 <nrk_get_pid>
     4ee:	99 27       	eor	r25, r25
     4f0:	9f 93       	push	r25
     4f2:	8f 93       	push	r24
     4f4:	8d e0       	ldi	r24, 0x0D	; 13
     4f6:	92 e0       	ldi	r25, 0x02	; 2
     4f8:	9f 93       	push	r25
     4fa:	8f 93       	push	r24
     4fc:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <printf>

	// init bmac on channel 25 
	bmac_init (25);
     500:	89 e1       	ldi	r24, 0x19	; 25
     502:	0e 94 3a 06 	call	0xc74	; 0xc74 <bmac_init>

	// By default the RX check rate is 100ms
	// below shows how to change that
	check_period.secs=0;
     506:	1b 82       	std	Y+3, r1	; 0x03
     508:	1c 82       	std	Y+4, r1	; 0x04
     50a:	1d 82       	std	Y+5, r1	; 0x05
     50c:	1e 82       	std	Y+6, r1	; 0x06
	check_period.nano_secs=40*NANOS_PER_MS; // Fastest we could safely go
     50e:	80 e0       	ldi	r24, 0x00	; 0
     510:	9a e5       	ldi	r25, 0x5A	; 90
     512:	a2 e6       	ldi	r26, 0x62	; 98
     514:	b2 e0       	ldi	r27, 0x02	; 2
     516:	8f 83       	std	Y+7, r24	; 0x07
     518:	98 87       	std	Y+8, r25	; 0x08
     51a:	a9 87       	std	Y+9, r26	; 0x09
     51c:	ba 87       	std	Y+10, r27	; 0x0a
	val=bmac_set_rx_check_rate(check_period);
     51e:	2b 81       	ldd	r18, Y+3	; 0x03
     520:	3c 81       	ldd	r19, Y+4	; 0x04
     522:	4d 81       	ldd	r20, Y+5	; 0x05
     524:	5e 81       	ldd	r21, Y+6	; 0x06
     526:	6f 81       	ldd	r22, Y+7	; 0x07
     528:	78 85       	ldd	r23, Y+8	; 0x08
     52a:	89 85       	ldd	r24, Y+9	; 0x09
     52c:	9a 85       	ldd	r25, Y+10	; 0x0a
     52e:	0e 94 08 04 	call	0x810	; 0x810 <bmac_set_rx_check_rate>
	// bmac will try to receive fainter packets.  If the value is set
	// too high or too low performance will suffer greatly.
	// bmac_set_cca_thresh(-45); 


	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	8f 3f       	cpi	r24, 0xFF	; 255
     53c:	21 f4       	brne	.+8      	; 0x546 <rx_task+0x84>
     53e:	80 ef       	ldi	r24, 0xF0	; 240
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <nrk_kprintf>
	// This sets the next RX buffer.
	// This can be called at anytime before releaseing the packet
	// if you wish to do a zero-copy buffer switch
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
     546:	64 e7       	ldi	r22, 0x74	; 116
     548:	87 e7       	ldi	r24, 0x77	; 119
     54a:	93 e0       	ldi	r25, 0x03	; 3
     54c:	0e 94 d0 03 	call	0x7a0	; 0x7a0 <bmac_rx_pkt_set_buffer>

	bmac_auto_ack_disable();
     550:	0e 94 0e 07 	call	0xe1c	; 0xe1c <bmac_auto_ack_disable>

	//set port direction as output
	nrk_gpio_direction(NRK_DEBUG_3,NRK_PIN_OUTPUT);//PD.1
     554:	e0 90 32 02 	lds	r14, 0x0232
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	8e 2d       	mov	r24, r14
     55c:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <nrk_gpio_direction>
	nrk_gpio_direction(NRK_DEBUG_2,NRK_PIN_OUTPUT);//PD.0
     560:	f0 90 31 02 	lds	r15, 0x0231
     564:	61 e0       	ldi	r22, 0x01	; 1
     566:	8f 2d       	mov	r24, r15
     568:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <nrk_gpio_direction>
	nrk_gpio_direction(NRK_DEBUG_0,NRK_PIN_OUTPUT);//PA.3
     56c:	00 91 26 02 	lds	r16, 0x0226
     570:	61 e0       	ldi	r22, 0x01	; 1
     572:	80 2f       	mov	r24, r16
     574:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <nrk_gpio_direction>
	nrk_gpio_direction(NRK_DEBUG_1,NRK_PIN_OUTPUT);//PA.4
     578:	10 91 27 02 	lds	r17, 0x0227
     57c:	61 e0       	ldi	r22, 0x01	; 1
     57e:	81 2f       	mov	r24, r17
     580:	0e 94 d4 14 	call	0x29a8	; 0x29a8 <nrk_gpio_direction>
	while (1) {
		// Wait until an RX packet is received
		val = bmac_wait_until_rx_pkt ();
		// Get the RX packet 
		//nrk_led_set (ORANGE_LED);
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
     584:	92 e0       	ldi	r25, 0x02	; 2
     586:	89 2e       	mov	r8, r25
     588:	91 2c       	mov	r9, r1
     58a:	8c 0e       	add	r8, r28
     58c:	9d 1e       	adc	r9, r29
     58e:	5e 01       	movw	r10, r28
     590:	08 94       	sec
     592:	a1 1c       	adc	r10, r1
     594:	b1 1c       	adc	r11, r1
		
		printf ("%c=%c\r\n", rx_buf[0], rx_buf[2]);
     596:	8e e1       	ldi	r24, 0x1E	; 30
     598:	c8 2e       	mov	r12, r24
     59a:	82 e0       	ldi	r24, 0x02	; 2
     59c:	d8 2e       	mov	r13, r24
	nrk_gpio_direction(NRK_DEBUG_0,NRK_PIN_OUTPUT);//PA.3
	nrk_gpio_direction(NRK_DEBUG_1,NRK_PIN_OUTPUT);//PA.4

	while (1) {
		// Wait until an RX packet is received
		val = bmac_wait_until_rx_pkt ();
     59e:	0e 94 03 06 	call	0xc06	; 0xc06 <bmac_wait_until_rx_pkt>
		// Get the RX packet 
		//nrk_led_set (ORANGE_LED);
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
     5a2:	b4 01       	movw	r22, r8
     5a4:	c5 01       	movw	r24, r10
     5a6:	0e 94 70 07 	call	0xee0	; 0xee0 <bmac_rx_pkt_get>
		
		printf ("%c=%c\r\n", rx_buf[0], rx_buf[2]);
     5aa:	80 91 79 03 	lds	r24, 0x0379
     5ae:	99 27       	eor	r25, r25
     5b0:	9f 93       	push	r25
     5b2:	8f 93       	push	r24
     5b4:	80 91 77 03 	lds	r24, 0x0377
     5b8:	99 27       	eor	r25, r25
     5ba:	9f 93       	push	r25
     5bc:	8f 93       	push	r24
     5be:	df 92       	push	r13
     5c0:	cf 92       	push	r12
     5c2:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <printf>
		
		switch(rx_buf[0]) {
     5c6:	8d b7       	in	r24, 0x3d	; 61
     5c8:	9e b7       	in	r25, 0x3e	; 62
     5ca:	06 96       	adiw	r24, 0x06	; 6
     5cc:	0f b6       	in	r0, 0x3f	; 63
     5ce:	f8 94       	cli
     5d0:	9e bf       	out	0x3e, r25	; 62
     5d2:	0f be       	out	0x3f, r0	; 63
     5d4:	8d bf       	out	0x3d, r24	; 61
     5d6:	80 91 77 03 	lds	r24, 0x0377
     5da:	81 34       	cpi	r24, 0x41	; 65
     5dc:	19 f0       	breq	.+6      	; 0x5e4 <rx_task+0x122>
     5de:	82 34       	cpi	r24, 0x42	; 66
     5e0:	81 f4       	brne	.+32     	; 0x602 <rx_task+0x140>
     5e2:	08 c0       	rjmp	.+16     	; 0x5f4 <rx_task+0x132>
			case 'A': // ~0xxx
				nrk_led_clr(RED_LED);
     5e4:	83 e0       	ldi	r24, 0x03	; 3
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 19 16 	call	0x2c32	; 0x2c32 <nrk_led_clr>
				nrk_gpio_set(NRK_DEBUG_3);
     5ec:	8e 2d       	mov	r24, r14
     5ee:	0e 94 80 12 	call	0x2500	; 0x2500 <nrk_gpio_set>
     5f2:	07 c0       	rjmp	.+14     	; 0x602 <rx_task+0x140>
				break;
			case 'B': // ~1xxx
				nrk_led_set(RED_LED);
     5f4:	83 e0       	ldi	r24, 0x03	; 3
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <nrk_led_set>
				nrk_gpio_clr(NRK_DEBUG_3);
     5fc:	8e 2d       	mov	r24, r14
     5fe:	0e 94 05 13 	call	0x260a	; 0x260a <nrk_gpio_clr>
				break;
		}

		switch(rx_buf[2]) {
     602:	80 91 79 03 	lds	r24, 0x0379
     606:	8c 34       	cpi	r24, 0x4C	; 76
     608:	09 f4       	brne	.+2      	; 0x60c <rx_task+0x14a>
     60a:	44 c0       	rjmp	.+136    	; 0x694 <rx_task+0x1d2>
     60c:	8d 34       	cpi	r24, 0x4D	; 77
     60e:	48 f4       	brcc	.+18     	; 0x622 <rx_task+0x160>
     610:	82 34       	cpi	r24, 0x42	; 66
     612:	09 f4       	brne	.+2      	; 0x616 <rx_task+0x154>
     614:	5f c0       	rjmp	.+190    	; 0x6d4 <rx_task+0x212>
     616:	84 34       	cpi	r24, 0x44	; 68
     618:	79 f1       	breq	.+94     	; 0x678 <rx_task+0x1b6>
     61a:	8d 32       	cpi	r24, 0x2D	; 45
     61c:	09 f0       	breq	.+2      	; 0x620 <rx_task+0x15e>
     61e:	6f c0       	rjmp	.+222    	; 0x6fe <rx_task+0x23c>
     620:	07 c0       	rjmp	.+14     	; 0x630 <rx_task+0x16e>
     622:	82 35       	cpi	r24, 0x52	; 82
     624:	09 f4       	brne	.+2      	; 0x628 <rx_task+0x166>
     626:	48 c0       	rjmp	.+144    	; 0x6b8 <rx_task+0x1f6>
     628:	85 35       	cpi	r24, 0x55	; 85
     62a:	09 f0       	breq	.+2      	; 0x62e <rx_task+0x16c>
     62c:	68 c0       	rjmp	.+208    	; 0x6fe <rx_task+0x23c>
     62e:	0e c0       	rjmp	.+28     	; 0x64c <rx_task+0x18a>
			case '-': // ~x000
				nrk_gpio_set(NRK_DEBUG_0);
     630:	80 2f       	mov	r24, r16
     632:	0e 94 80 12 	call	0x2500	; 0x2500 <nrk_gpio_set>
				nrk_gpio_set(NRK_DEBUG_1);
     636:	81 2f       	mov	r24, r17
     638:	0e 94 80 12 	call	0x2500	; 0x2500 <nrk_gpio_set>
				nrk_gpio_set(NRK_DEBUG_2);
     63c:	8f 2d       	mov	r24, r15
     63e:	0e 94 80 12 	call	0x2500	; 0x2500 <nrk_gpio_set>
				nrk_led_clr(ORANGE_LED);
     642:	80 e0       	ldi	r24, 0x00	; 0
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 19 16 	call	0x2c32	; 0x2c32 <nrk_led_clr>
     64a:	0d c0       	rjmp	.+26     	; 0x666 <rx_task+0x1a4>
				nrk_led_clr(BLUE_LED);
				nrk_led_clr(GREEN_LED);
				break;
			case 'U': // ~x001
				nrk_gpio_clr(NRK_DEBUG_0);
     64c:	80 2f       	mov	r24, r16
     64e:	0e 94 05 13 	call	0x260a	; 0x260a <nrk_gpio_clr>
				nrk_gpio_set(NRK_DEBUG_1);
     652:	81 2f       	mov	r24, r17
     654:	0e 94 80 12 	call	0x2500	; 0x2500 <nrk_gpio_set>
				nrk_gpio_set(NRK_DEBUG_2);
     658:	8f 2d       	mov	r24, r15
     65a:	0e 94 80 12 	call	0x2500	; 0x2500 <nrk_gpio_set>
				nrk_led_set(ORANGE_LED);
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	90 e0       	ldi	r25, 0x00	; 0
     662:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <nrk_led_set>
				nrk_led_clr(BLUE_LED);
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	90 e0       	ldi	r25, 0x00	; 0
     66a:	0e 94 19 16 	call	0x2c32	; 0x2c32 <nrk_led_clr>
				nrk_led_clr(GREEN_LED);
     66e:	82 e0       	ldi	r24, 0x02	; 2
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	0e 94 19 16 	call	0x2c32	; 0x2c32 <nrk_led_clr>
     676:	43 c0       	rjmp	.+134    	; 0x6fe <rx_task+0x23c>
				break;
			case 'D': // ~x010
				nrk_gpio_set(NRK_DEBUG_0);
     678:	80 2f       	mov	r24, r16
     67a:	0e 94 80 12 	call	0x2500	; 0x2500 <nrk_gpio_set>
				nrk_gpio_clr(NRK_DEBUG_1);
     67e:	81 2f       	mov	r24, r17
     680:	0e 94 05 13 	call	0x260a	; 0x260a <nrk_gpio_clr>
				nrk_gpio_set(NRK_DEBUG_2);
     684:	8f 2d       	mov	r24, r15
     686:	0e 94 80 12 	call	0x2500	; 0x2500 <nrk_gpio_set>
				nrk_led_clr(ORANGE_LED);
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	0e 94 19 16 	call	0x2c32	; 0x2c32 <nrk_led_clr>
     692:	0d c0       	rjmp	.+26     	; 0x6ae <rx_task+0x1ec>
				nrk_led_set(BLUE_LED);
				nrk_led_clr(GREEN_LED);
				break;
			case 'L': // ~x011
				nrk_gpio_clr(NRK_DEBUG_0);
     694:	80 2f       	mov	r24, r16
     696:	0e 94 05 13 	call	0x260a	; 0x260a <nrk_gpio_clr>
				nrk_gpio_clr(NRK_DEBUG_1);
     69a:	81 2f       	mov	r24, r17
     69c:	0e 94 05 13 	call	0x260a	; 0x260a <nrk_gpio_clr>
				nrk_gpio_set(NRK_DEBUG_2);
     6a0:	8f 2d       	mov	r24, r15
     6a2:	0e 94 80 12 	call	0x2500	; 0x2500 <nrk_gpio_set>
				nrk_led_set(ORANGE_LED);
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <nrk_led_set>
				nrk_led_set(BLUE_LED);
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <nrk_led_set>
     6b6:	db cf       	rjmp	.-74     	; 0x66e <rx_task+0x1ac>
				nrk_led_clr(GREEN_LED);
				break;
			case 'R': // ~x100
				nrk_gpio_set(NRK_DEBUG_0);
     6b8:	80 2f       	mov	r24, r16
     6ba:	0e 94 80 12 	call	0x2500	; 0x2500 <nrk_gpio_set>
				nrk_gpio_set(NRK_DEBUG_1);
     6be:	81 2f       	mov	r24, r17
     6c0:	0e 94 80 12 	call	0x2500	; 0x2500 <nrk_gpio_set>
				nrk_gpio_clr(NRK_DEBUG_2);
     6c4:	8f 2d       	mov	r24, r15
     6c6:	0e 94 05 13 	call	0x260a	; 0x260a <nrk_gpio_clr>
				nrk_led_clr(ORANGE_LED);
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	0e 94 19 16 	call	0x2c32	; 0x2c32 <nrk_led_clr>
     6d2:	0d c0       	rjmp	.+26     	; 0x6ee <rx_task+0x22c>
				nrk_led_clr(BLUE_LED);
				nrk_led_set(GREEN_LED);
				break;
			case 'B': // ~x101
				nrk_gpio_clr(NRK_DEBUG_0);
     6d4:	80 2f       	mov	r24, r16
     6d6:	0e 94 05 13 	call	0x260a	; 0x260a <nrk_gpio_clr>
				nrk_gpio_set(NRK_DEBUG_1);
     6da:	81 2f       	mov	r24, r17
     6dc:	0e 94 80 12 	call	0x2500	; 0x2500 <nrk_gpio_set>
				nrk_gpio_clr(NRK_DEBUG_2);
     6e0:	8f 2d       	mov	r24, r15
     6e2:	0e 94 05 13 	call	0x260a	; 0x260a <nrk_gpio_clr>
				nrk_led_set(ORANGE_LED);
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <nrk_led_set>
				nrk_led_clr(BLUE_LED);
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	0e 94 19 16 	call	0x2c32	; 0x2c32 <nrk_led_clr>
				nrk_led_set(GREEN_LED);
     6f6:	82 e0       	ldi	r24, 0x02	; 2
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <nrk_led_set>
		
		
		//nrk_led_clr (ORANGE_LED);
		//nrk_led_toggle (BLUE_LED);
		// Release the RX buffer so future packets can arrive 
		bmac_rx_pkt_release ();
     6fe:	0e 94 ff 03 	call	0x7fe	; 0x7fe <bmac_rx_pkt_release>
     702:	4d cf       	rjmp	.-358    	; 0x59e <rx_task+0xdc>

00000704 <pin_task>:
}

void pin_task ()
{
	while(1) {
		nrk_led_toggle (RED_LED);
     704:	83 e0       	ldi	r24, 0x03	; 3
     706:	90 e0       	ldi	r25, 0x00	; 0
     708:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <nrk_led_toggle>
		nrk_wait_until_next_period ();
     70c:	0e 94 c9 21 	call	0x4392	; 0x4392 <nrk_wait_until_next_period>
		nrk_led_toggle (BLUE_LED);
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <nrk_led_toggle>
		nrk_wait_until_next_period ();
     718:	0e 94 c9 21 	call	0x4392	; 0x4392 <nrk_wait_until_next_period>
     71c:	f3 cf       	rjmp	.-26     	; 0x704 <pin_task>

0000071e <main>:
void nrk_create_taskset ();

uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];

int main ()
{
     71e:	cf ef       	ldi	r28, 0xFF	; 255
     720:	d1 e2       	ldi	r29, 0x21	; 33
     722:	de bf       	out	0x3e, r29	; 62
     724:	cd bf       	out	0x3d, r28	; 61
	uint16_t div;
	nrk_setup_ports ();
     726:	0e 94 79 12 	call	0x24f2	; 0x24f2 <nrk_setup_ports>
	nrk_setup_uart (UART_BAUDRATE_115K2);
     72a:	87 e0       	ldi	r24, 0x07	; 7
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <nrk_setup_uart>

	nrk_init ();
     732:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <nrk_init>

	nrk_led_clr (0);
     736:	80 e0       	ldi	r24, 0x00	; 0
     738:	90 e0       	ldi	r25, 0x00	; 0
     73a:	0e 94 19 16 	call	0x2c32	; 0x2c32 <nrk_led_clr>
	nrk_led_clr (1);
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	0e 94 19 16 	call	0x2c32	; 0x2c32 <nrk_led_clr>
	nrk_led_clr (2);
     746:	82 e0       	ldi	r24, 0x02	; 2
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	0e 94 19 16 	call	0x2c32	; 0x2c32 <nrk_led_clr>
	nrk_led_clr (3);
     74e:	83 e0       	ldi	r24, 0x03	; 3
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 19 16 	call	0x2c32	; 0x2c32 <nrk_led_clr>

	nrk_time_set (0, 0);
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	40 e0       	ldi	r20, 0x00	; 0
     75c:	50 e0       	ldi	r21, 0x00	; 0
     75e:	60 e0       	ldi	r22, 0x00	; 0
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 6b 23 	call	0x46d6	; 0x46d6 <nrk_time_set>

	bmac_task_config ();
     76a:	0e 94 65 04 	call	0x8ca	; 0x8ca <bmac_task_config>

	nrk_create_taskset ();
     76e:	0e 94 08 02 	call	0x410	; 0x410 <nrk_create_taskset>
	nrk_start ();
     772:	0e 94 0c 19 	call	0x3218	; 0x3218 <nrk_start>

	return 0;
}
     776:	80 e0       	ldi	r24, 0x00	; 0
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	0c 94 4a 30 	jmp	0x6094	; 0x6094 <_exit>

0000077e <rf_rx_callback>:
	nrk_init ();

	nrk_led_clr (0);
	nrk_led_clr (1);
	nrk_led_clr (2);
	nrk_led_clr (3);
     77e:	08 95       	ret

00000780 <bmac_tx_reserve_set>:
	}
}

void rx_task ()
{
	uint8_t i, len;
     780:	8f ef       	ldi	r24, 0xFF	; 255
     782:	9f ef       	ldi	r25, 0xFF	; 255
     784:	08 95       	ret

00000786 <bmac_tx_reserve_get>:
	// init bmac on channel 25 
	bmac_init (25);

	// By default the RX check rate is 100ms
	// below shows how to change that
	check_period.secs=0;
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	90 e0       	ldi	r25, 0x00	; 0
     78a:	08 95       	ret

0000078c <bmac_addr_decode_dest_mac>:
		//nrk_led_set (ORANGE_LED);
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
		
		printf ("%c=%c\r\n", rx_buf[0], rx_buf[2]);
		
		switch(rx_buf[0]) {
     78c:	90 93 49 03 	sts	0x0349, r25
     790:	80 93 48 03 	sts	0x0348, r24
			case 'A': // ~0xxx
				nrk_led_clr(RED_LED);
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	08 95       	ret

0000079a <bmac_set_cca_active>:
				nrk_led_set(BLUE_LED);
				nrk_led_clr(GREEN_LED);
				break;
			case 'L': // ~x011
				nrk_gpio_clr(NRK_DEBUG_0);
				nrk_gpio_clr(NRK_DEBUG_1);
     79a:	80 93 a2 02 	sts	0x02A2, r24
     79e:	08 95       	ret

000007a0 <bmac_rx_pkt_set_buffer>:
		// Release the RX buffer so future packets can arrive 
		bmac_rx_pkt_release ();
	}

}

     7a0:	00 97       	sbiw	r24, 0x00	; 0
     7a2:	19 f4       	brne	.+6      	; 0x7aa <bmac_rx_pkt_set_buffer+0xa>
     7a4:	8f ef       	ldi	r24, 0xFF	; 255
     7a6:	9f ef       	ldi	r25, 0xFF	; 255
     7a8:	08 95       	ret
void nrk_create_taskset ()
     7aa:	90 93 16 05 	sts	0x0516, r25
     7ae:	80 93 15 05 	sts	0x0515, r24
{
     7b2:	60 93 14 05 	sts	0x0514, r22
/*
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	80 93 ae 05 	sts	0x05AE, r24
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	90 e0       	ldi	r25, 0x00	; 0
	PIN_TASK.task = pin_task;
	PIN_TASK.Ptos = (void *) &pin_task_stack[NRK_APP_STACKSIZE - 1];
     7c0:	08 95       	ret

000007c2 <bmac_tx_pkt_nonblocking>:
     7c2:	9c 01       	movw	r18, r24
     7c4:	80 91 a0 05 	lds	r24, 0x05A0
     7c8:	81 30       	cpi	r24, 0x01	; 1
     7ca:	19 f4       	brne	.+6      	; 0x7d2 <bmac_tx_pkt_nonblocking+0x10>
     7cc:	8f ef       	ldi	r24, 0xFF	; 255
     7ce:	9f ef       	ldi	r25, 0xFF	; 255
     7d0:	08 95       	ret
     7d2:	81 e0       	ldi	r24, 0x01	; 1
     7d4:	80 93 a0 05 	sts	0x05A0, r24
     7d8:	30 93 4c 03 	sts	0x034C, r19
     7dc:	20 93 4b 03 	sts	0x034B, r18
     7e0:	60 93 4a 03 	sts	0x034A, r22
     7e4:	81 e0       	ldi	r24, 0x01	; 1
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	08 95       	ret

000007ea <bmac_rx_pkt_ready>:
     7ea:	20 e0       	ldi	r18, 0x00	; 0
     7ec:	30 e0       	ldi	r19, 0x00	; 0
     7ee:	80 91 ae 05 	lds	r24, 0x05AE
     7f2:	88 23       	and	r24, r24
     7f4:	11 f4       	brne	.+4      	; 0x7fa <bmac_rx_pkt_ready+0x10>
     7f6:	21 e0       	ldi	r18, 0x01	; 1
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	c9 01       	movw	r24, r18
     7fc:	08 95       	ret

000007fe <bmac_rx_pkt_release>:
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	80 93 ae 05 	sts	0x05AE, r24
     804:	81 e0       	ldi	r24, 0x01	; 1
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	08 95       	ret

0000080a <bmac_disable>:
     80a:	10 92 9f 05 	sts	0x059F, r1
     80e:	08 95       	ret

00000810 <bmac_set_rx_check_rate>:
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	cd b7       	in	r28, 0x3d	; 61
     816:	de b7       	in	r29, 0x3e	; 62
     818:	28 97       	sbiw	r28, 0x08	; 8
     81a:	0f b6       	in	r0, 0x3f	; 63
     81c:	f8 94       	cli
     81e:	de bf       	out	0x3e, r29	; 62
     820:	0f be       	out	0x3f, r0	; 63
     822:	cd bf       	out	0x3d, r28	; 61
     824:	29 83       	std	Y+1, r18	; 0x01
     826:	3a 83       	std	Y+2, r19	; 0x02
     828:	4b 83       	std	Y+3, r20	; 0x03
     82a:	5c 83       	std	Y+4, r21	; 0x04
     82c:	6d 83       	std	Y+5, r22	; 0x05
     82e:	7e 83       	std	Y+6, r23	; 0x06
     830:	8f 83       	std	Y+7, r24	; 0x07
     832:	98 87       	std	Y+8, r25	; 0x08
     834:	2d 81       	ldd	r18, Y+5	; 0x05
     836:	3e 81       	ldd	r19, Y+6	; 0x06
     838:	4f 81       	ldd	r20, Y+7	; 0x07
     83a:	58 85       	ldd	r21, Y+8	; 0x08
     83c:	89 81       	ldd	r24, Y+1	; 0x01
     83e:	9a 81       	ldd	r25, Y+2	; 0x02
     840:	ab 81       	ldd	r26, Y+3	; 0x03
     842:	bc 81       	ldd	r27, Y+4	; 0x04
     844:	00 97       	sbiw	r24, 0x00	; 0
     846:	a1 05       	cpc	r26, r1
     848:	b1 05       	cpc	r27, r1
     84a:	59 f4       	brne	.+22     	; 0x862 <bmac_set_rx_check_rate+0x52>
     84c:	20 30       	cpi	r18, 0x00	; 0
     84e:	6d e2       	ldi	r22, 0x2D	; 45
     850:	36 07       	cpc	r19, r22
     852:	61 e3       	ldi	r22, 0x31	; 49
     854:	46 07       	cpc	r20, r22
     856:	61 e0       	ldi	r22, 0x01	; 1
     858:	56 07       	cpc	r21, r22
     85a:	18 f4       	brcc	.+6      	; 0x862 <bmac_set_rx_check_rate+0x52>
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	9f ef       	ldi	r25, 0xFF	; 255
     860:	12 c0       	rjmp	.+36     	; 0x886 <bmac_set_rx_check_rate+0x76>
     862:	80 93 a2 05 	sts	0x05A2, r24
     866:	90 93 a3 05 	sts	0x05A3, r25
     86a:	a0 93 a4 05 	sts	0x05A4, r26
     86e:	b0 93 a5 05 	sts	0x05A5, r27
     872:	20 93 a6 05 	sts	0x05A6, r18
     876:	30 93 a7 05 	sts	0x05A7, r19
     87a:	40 93 a8 05 	sts	0x05A8, r20
     87e:	50 93 a9 05 	sts	0x05A9, r21
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	28 96       	adiw	r28, 0x08	; 8
     888:	0f b6       	in	r0, 0x3f	; 63
     88a:	f8 94       	cli
     88c:	de bf       	out	0x3e, r29	; 62
     88e:	0f be       	out	0x3f, r0	; 63
     890:	cd bf       	out	0x3d, r28	; 61
     892:	df 91       	pop	r29
     894:	cf 91       	pop	r28
     896:	08 95       	ret

00000898 <bmac_started>:
     898:	80 91 9e 05 	lds	r24, 0x059E
     89c:	99 27       	eor	r25, r25
     89e:	87 fd       	sbrc	r24, 7
     8a0:	90 95       	com	r25
     8a2:	08 95       	ret

000008a4 <_b_pow>:
     8a4:	82 30       	cpi	r24, 0x02	; 2
     8a6:	18 f4       	brcc	.+6      	; 0x8ae <_b_pow+0xa>
     8a8:	81 e0       	ldi	r24, 0x01	; 1
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	08 95       	ret
     8ae:	88 30       	cpi	r24, 0x08	; 8
     8b0:	08 f0       	brcs	.+2      	; 0x8b4 <_b_pow+0x10>
     8b2:	86 e0       	ldi	r24, 0x06	; 6
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	20 e0       	ldi	r18, 0x00	; 0
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	99 0f       	add	r25, r25
     8bc:	2f 5f       	subi	r18, 0xFF	; 255
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
     8c0:	28 17       	cp	r18, r24
     8c2:	d8 f3       	brcs	.-10     	; 0x8ba <_b_pow+0x16>
     8c4:	89 2f       	mov	r24, r25
     8c6:	99 27       	eor	r25, r25
     8c8:	08 95       	ret

000008ca <bmac_task_config>:
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	04 ea       	ldi	r16, 0xA4	; 164
     8d0:	12 e0       	ldi	r17, 0x02	; 2
     8d2:	6d e1       	ldi	r22, 0x1D	; 29
     8d4:	77 e0       	ldi	r23, 0x07	; 7
     8d6:	c8 01       	movw	r24, r16
     8d8:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <nrk_task_set_entry_function>
     8dc:	40 e8       	ldi	r20, 0x80	; 128
     8de:	50 e0       	ldi	r21, 0x00	; 0
     8e0:	60 e9       	ldi	r22, 0x90	; 144
     8e2:	74 e0       	ldi	r23, 0x04	; 4
     8e4:	c8 01       	movw	r24, r16
     8e6:	0e 94 4c 2b 	call	0x5698	; 0x5698 <nrk_task_set_stk>
     8ea:	84 e1       	ldi	r24, 0x14	; 20
     8ec:	80 93 ac 02 	sts	0x02AC, r24
     8f0:	81 e0       	ldi	r24, 0x01	; 1
     8f2:	80 93 ab 02 	sts	0x02AB, r24
     8f6:	80 93 ad 02 	sts	0x02AD, r24
     8fa:	80 93 ae 02 	sts	0x02AE, r24
     8fe:	10 92 af 02 	sts	0x02AF, r1
     902:	10 92 b0 02 	sts	0x02B0, r1
     906:	10 92 b1 02 	sts	0x02B1, r1
     90a:	10 92 b2 02 	sts	0x02B2, r1
     90e:	80 e0       	ldi	r24, 0x00	; 0
     910:	9d e2       	ldi	r25, 0x2D	; 45
     912:	a1 e3       	ldi	r26, 0x31	; 49
     914:	b1 e0       	ldi	r27, 0x01	; 1
     916:	80 93 b3 02 	sts	0x02B3, r24
     91a:	90 93 b4 02 	sts	0x02B4, r25
     91e:	a0 93 b5 02 	sts	0x02B5, r26
     922:	b0 93 b6 02 	sts	0x02B6, r27
     926:	8a e0       	ldi	r24, 0x0A	; 10
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	a0 e0       	ldi	r26, 0x00	; 0
     92c:	b0 e0       	ldi	r27, 0x00	; 0
     92e:	80 93 b7 02 	sts	0x02B7, r24
     932:	90 93 b8 02 	sts	0x02B8, r25
     936:	a0 93 b9 02 	sts	0x02B9, r26
     93a:	b0 93 ba 02 	sts	0x02BA, r27
     93e:	10 92 bb 02 	sts	0x02BB, r1
     942:	10 92 bc 02 	sts	0x02BC, r1
     946:	10 92 bd 02 	sts	0x02BD, r1
     94a:	10 92 be 02 	sts	0x02BE, r1
     94e:	10 92 bf 02 	sts	0x02BF, r1
     952:	10 92 c0 02 	sts	0x02C0, r1
     956:	10 92 c1 02 	sts	0x02C1, r1
     95a:	10 92 c2 02 	sts	0x02C2, r1
     95e:	10 92 c3 02 	sts	0x02C3, r1
     962:	10 92 c4 02 	sts	0x02C4, r1
     966:	10 92 c5 02 	sts	0x02C5, r1
     96a:	10 92 c6 02 	sts	0x02C6, r1
     96e:	c8 01       	movw	r24, r16
     970:	0e 94 07 22 	call	0x440e	; 0x440e <nrk_activate_task>
     974:	1f 91       	pop	r17
     976:	0f 91       	pop	r16
     978:	08 95       	ret

0000097a <bmac_enable>:
     97a:	81 e0       	ldi	r24, 0x01	; 1
     97c:	80 93 9f 05 	sts	0x059F, r24
     980:	80 91 c7 02 	lds	r24, 0x02C7
     984:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <nrk_event_signal>
     988:	08 95       	ret

0000098a <_bmac_channel_check>:
     98a:	0f 93       	push	r16
     98c:	1f 93       	push	r17
     98e:	0e 94 13 0c 	call	0x1826	; 0x1826 <rf_polling_rx_on>
     992:	8a ef       	ldi	r24, 0xFA	; 250
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <nrk_spin_wait_us>
     99a:	09 b1       	in	r16, 0x09	; 9
     99c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <rf_rx_off>
     9a0:	11 27       	eor	r17, r17
     9a2:	84 e0       	ldi	r24, 0x04	; 4
     9a4:	16 95       	lsr	r17
     9a6:	07 95       	ror	r16
     9a8:	8a 95       	dec	r24
     9aa:	e1 f7       	brne	.-8      	; 0x9a4 <_bmac_channel_check+0x1a>
     9ac:	c8 01       	movw	r24, r16
     9ae:	81 70       	andi	r24, 0x01	; 1
     9b0:	90 70       	andi	r25, 0x00	; 0
     9b2:	1f 91       	pop	r17
     9b4:	0f 91       	pop	r16
     9b6:	08 95       	ret

000009b8 <_bmac_tx>:
     9b8:	ef 92       	push	r14
     9ba:	ff 92       	push	r15
     9bc:	0f 93       	push	r16
     9be:	1f 93       	push	r17
     9c0:	80 91 a2 02 	lds	r24, 0x02A2
     9c4:	88 23       	and	r24, r24
     9c6:	09 f4       	brne	.+2      	; 0x9ca <_bmac_tx+0x12>
     9c8:	63 c0       	rjmp	.+198    	; 0xa90 <_bmac_tx+0xd8>
     9ca:	20 91 a2 05 	lds	r18, 0x05A2
     9ce:	30 91 a3 05 	lds	r19, 0x05A3
     9d2:	40 91 a4 05 	lds	r20, 0x05A4
     9d6:	50 91 a5 05 	lds	r21, 0x05A5
     9da:	60 91 a6 05 	lds	r22, 0x05A6
     9de:	70 91 a7 05 	lds	r23, 0x05A7
     9e2:	80 91 a8 05 	lds	r24, 0x05A8
     9e6:	90 91 a9 05 	lds	r25, 0x05A9
     9ea:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <_nrk_time_to_ticks>
     9ee:	8c 01       	movw	r16, r24
     9f0:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <rand>
     9f4:	6a e0       	ldi	r22, 0x0A	; 10
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	0e 94 af 2f 	call	0x5f5e	; 0x5f5e <__divmodhi4>
     9fc:	bc 01       	movw	r22, r24
     9fe:	6f 5f       	subi	r22, 0xFF	; 255
     a00:	7f 4f       	sbci	r23, 0xFF	; 255
     a02:	c8 01       	movw	r24, r16
     a04:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <__udivmodhi4>
     a08:	cb 01       	movw	r24, r22
     a0a:	0e 94 34 21 	call	0x4268	; 0x4268 <nrk_wait_until_ticks>
     a0e:	ff 24       	eor	r15, r15
     a10:	f3 94       	inc	r15
     a12:	0e 94 c5 04 	call	0x98a	; 0x98a <_bmac_channel_check>
     a16:	e8 2e       	mov	r14, r24
     a18:	81 e0       	ldi	r24, 0x01	; 1
     a1a:	e8 16       	cp	r14, r24
     a1c:	c9 f1       	breq	.+114    	; 0xa90 <_bmac_tx+0xd8>
     a1e:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <rand>
     a22:	8c 01       	movw	r16, r24
     a24:	8f 2d       	mov	r24, r15
     a26:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_b_pow>
     a2a:	68 2f       	mov	r22, r24
     a2c:	77 27       	eor	r23, r23
     a2e:	c8 01       	movw	r24, r16
     a30:	0e 94 af 2f 	call	0x5f5e	; 0x5f5e <__divmodhi4>
     a34:	99 27       	eor	r25, r25
     a36:	0e 94 96 21 	call	0x432c	; 0x432c <nrk_wait_until_next_n_periods>
     a3a:	20 91 a2 05 	lds	r18, 0x05A2
     a3e:	30 91 a3 05 	lds	r19, 0x05A3
     a42:	40 91 a4 05 	lds	r20, 0x05A4
     a46:	50 91 a5 05 	lds	r21, 0x05A5
     a4a:	60 91 a6 05 	lds	r22, 0x05A6
     a4e:	70 91 a7 05 	lds	r23, 0x05A7
     a52:	80 91 a8 05 	lds	r24, 0x05A8
     a56:	90 91 a9 05 	lds	r25, 0x05A9
     a5a:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <_nrk_time_to_ticks>
     a5e:	8c 01       	movw	r16, r24
     a60:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <rand>
     a64:	6a e0       	ldi	r22, 0x0A	; 10
     a66:	70 e0       	ldi	r23, 0x00	; 0
     a68:	0e 94 af 2f 	call	0x5f5e	; 0x5f5e <__divmodhi4>
     a6c:	bc 01       	movw	r22, r24
     a6e:	6f 5f       	subi	r22, 0xFF	; 255
     a70:	7f 4f       	sbci	r23, 0xFF	; 255
     a72:	c8 01       	movw	r24, r16
     a74:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <__udivmodhi4>
     a78:	cb 01       	movw	r24, r22
     a7a:	0e 94 34 21 	call	0x4268	; 0x4268 <nrk_wait_until_ticks>
     a7e:	ee 20       	and	r14, r14
     a80:	39 f4       	brne	.+14     	; 0xa90 <_bmac_tx+0xd8>
     a82:	f3 94       	inc	r15
     a84:	86 e0       	ldi	r24, 0x06	; 6
     a86:	8f 15       	cp	r24, r15
     a88:	20 f6       	brcc	.-120    	; 0xa12 <_bmac_tx+0x5a>
     a8a:	96 e0       	ldi	r25, 0x06	; 6
     a8c:	f9 2e       	mov	r15, r25
     a8e:	c1 cf       	rjmp	.-126    	; 0xa12 <_bmac_tx+0x5a>
     a90:	0e 94 44 09 	call	0x1288	; 0x1288 <rf_test_mode>
     a94:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <rf_carrier_on>
     a98:	20 91 a2 05 	lds	r18, 0x05A2
     a9c:	30 91 a3 05 	lds	r19, 0x05A3
     aa0:	40 91 a4 05 	lds	r20, 0x05A4
     aa4:	50 91 a5 05 	lds	r21, 0x05A5
     aa8:	60 91 a6 05 	lds	r22, 0x05A6
     aac:	70 91 a7 05 	lds	r23, 0x05A7
     ab0:	80 91 a8 05 	lds	r24, 0x05A8
     ab4:	90 91 a9 05 	lds	r25, 0x05A9
     ab8:	0e 94 1a 20 	call	0x4034	; 0x4034 <nrk_wait>
     abc:	0e 94 e7 08 	call	0x11ce	; 0x11ce <rf_carrier_off>
     ac0:	0e 94 0f 09 	call	0x121e	; 0x121e <rf_data_mode>
     ac4:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <rf_rx_off>
     ac8:	88 e4       	ldi	r24, 0x48	; 72
     aca:	93 e0       	ldi	r25, 0x03	; 3
     acc:	0e 94 7a 0c 	call	0x18f4	; 0x18f4 <rf_tx_packet>
     ad0:	80 93 aa 05 	sts	0x05AA, r24
     ad4:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <rf_rx_off>
     ad8:	10 92 a0 05 	sts	0x05A0, r1
     adc:	80 91 9a 05 	lds	r24, 0x059A
     ae0:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <nrk_event_signal>
     ae4:	81 e0       	ldi	r24, 0x01	; 1
     ae6:	90 e0       	ldi	r25, 0x00	; 0
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	ff 90       	pop	r15
     aee:	ef 90       	pop	r14
     af0:	08 95       	ret

00000af2 <_bmac_rx>:
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	60 91 ac 05 	lds	r22, 0x05AC
     afa:	80 e1       	ldi	r24, 0x10	; 16
     afc:	95 e0       	ldi	r25, 0x05	; 5
     afe:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <rf_set_rx>
     b02:	0e 94 13 0c 	call	0x1826	; 0x1826 <rf_polling_rx_on>
     b06:	10 e0       	ldi	r17, 0x00	; 0
     b08:	15 c0       	rjmp	.+42     	; 0xb34 <_bmac_rx+0x42>
     b0a:	1f 5f       	subi	r17, 0xFF	; 255
     b0c:	20 91 a2 05 	lds	r18, 0x05A2
     b10:	30 91 a3 05 	lds	r19, 0x05A3
     b14:	40 91 a4 05 	lds	r20, 0x05A4
     b18:	50 91 a5 05 	lds	r21, 0x05A5
     b1c:	60 91 a6 05 	lds	r22, 0x05A6
     b20:	70 91 a7 05 	lds	r23, 0x05A7
     b24:	80 91 a8 05 	lds	r24, 0x05A8
     b28:	90 91 a9 05 	lds	r25, 0x05A9
     b2c:	0e 94 1a 20 	call	0x4034	; 0x4034 <nrk_wait>
     b30:	14 30       	cpi	r17, 0x04	; 4
     b32:	61 f0       	breq	.+24     	; 0xb4c <_bmac_rx+0x5a>
     b34:	0e 94 b6 08 	call	0x116c	; 0x116c <rf_rx_check_fifop>
     b38:	88 23       	and	r24, r24
     b3a:	39 f3       	breq	.-50     	; 0xb0a <_bmac_rx+0x18>
     b3c:	0a c0       	rjmp	.+20     	; 0xb52 <_bmac_rx+0x60>
     b3e:	1f 5f       	subi	r17, 0xFF	; 255
     b40:	84 e6       	ldi	r24, 0x64	; 100
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <nrk_spin_wait_us>
     b48:	13 33       	cpi	r17, 0x33	; 51
     b4a:	21 f4       	brne	.+8      	; 0xb54 <_bmac_rx+0x62>
     b4c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <rf_rx_off>
     b50:	0a c0       	rjmp	.+20     	; 0xb66 <_bmac_rx+0x74>
     b52:	10 e0       	ldi	r17, 0x00	; 0
     b54:	0e 94 a4 09 	call	0x1348	; 0x1348 <rf_polling_rx_packet>
     b58:	08 2f       	mov	r16, r24
     b5a:	88 23       	and	r24, r24
     b5c:	81 f3       	breq	.-32     	; 0xb3e <_bmac_rx+0x4c>
     b5e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <rf_rx_off>
     b62:	01 30       	cpi	r16, 0x01	; 1
     b64:	19 f0       	breq	.+6      	; 0xb6c <_bmac_rx+0x7a>
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	04 c0       	rjmp	.+8      	; 0xb74 <_bmac_rx+0x82>
     b6c:	10 92 ae 05 	sts	0x05AE, r1
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	08 95       	ret

00000b7a <bmac_get_tx_done_signal>:
     b7a:	80 91 9a 05 	lds	r24, 0x059A
     b7e:	0e 94 89 1c 	call	0x3912	; 0x3912 <nrk_signal_register>
     b82:	80 91 9a 05 	lds	r24, 0x059A
     b86:	99 27       	eor	r25, r25
     b88:	87 fd       	sbrc	r24, 7
     b8a:	90 95       	com	r25
     b8c:	08 95       	ret

00000b8e <bmac_get_rx_pkt_signal>:
     b8e:	80 91 76 03 	lds	r24, 0x0376
     b92:	0e 94 89 1c 	call	0x3912	; 0x3912 <nrk_signal_register>
     b96:	80 91 76 03 	lds	r24, 0x0376
     b9a:	99 27       	eor	r25, r25
     b9c:	87 fd       	sbrc	r24, 7
     b9e:	90 95       	com	r25
     ba0:	08 95       	ret

00000ba2 <bmac_tx_pkt>:
     ba2:	1f 93       	push	r17
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	ec 01       	movw	r28, r24
     baa:	16 2f       	mov	r17, r22
     bac:	80 91 a0 05 	lds	r24, 0x05A0
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	19 f1       	breq	.+70     	; 0xbfa <bmac_tx_pkt+0x58>
     bb4:	80 91 9a 05 	lds	r24, 0x059A
     bb8:	0e 94 89 1c 	call	0x3912	; 0x3912 <nrk_signal_register>
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	80 93 a0 05 	sts	0x05A0, r24
     bc2:	d0 93 4c 03 	sts	0x034C, r29
     bc6:	c0 93 4b 03 	sts	0x034B, r28
     bca:	10 93 4a 03 	sts	0x034A, r17
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	00 90 9a 05 	lds	r0, 0x059A
     bda:	04 c0       	rjmp	.+8      	; 0xbe4 <bmac_tx_pkt+0x42>
     bdc:	66 0f       	add	r22, r22
     bde:	77 1f       	adc	r23, r23
     be0:	88 1f       	adc	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	0a 94       	dec	r0
     be6:	d2 f7       	brpl	.-12     	; 0xbdc <bmac_tx_pkt+0x3a>
     be8:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <nrk_event_wait>
     bec:	80 91 aa 05 	lds	r24, 0x05AA
     bf0:	88 23       	and	r24, r24
     bf2:	19 f0       	breq	.+6      	; 0xbfa <bmac_tx_pkt+0x58>
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	02 c0       	rjmp	.+4      	; 0xbfe <bmac_tx_pkt+0x5c>
     bfa:	8f ef       	ldi	r24, 0xFF	; 255
     bfc:	9f ef       	ldi	r25, 0xFF	; 255
     bfe:	df 91       	pop	r29
     c00:	cf 91       	pop	r28
     c02:	1f 91       	pop	r17
     c04:	08 95       	ret

00000c06 <bmac_wait_until_rx_pkt>:
				nrk_gpio_clr(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
				nrk_led_set(GREEN_LED);
				break;
		}
     c06:	80 91 76 03 	lds	r24, 0x0376
     c0a:	0e 94 89 1c 	call	0x3912	; 0x3912 <nrk_signal_register>
		
     c0e:	61 e0       	ldi	r22, 0x01	; 1
     c10:	70 e0       	ldi	r23, 0x00	; 0
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	90 e0       	ldi	r25, 0x00	; 0
     c16:	00 90 76 03 	lds	r0, 0x0376
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <bmac_wait_until_rx_pkt+0x1e>
     c1c:	66 0f       	add	r22, r22
     c1e:	77 1f       	adc	r23, r23
     c20:	88 1f       	adc	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	0a 94       	dec	r0
     c26:	d2 f7       	brpl	.-12     	; 0xc1c <bmac_wait_until_rx_pkt+0x16>
     c28:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <nrk_event_wait>
		
		//nrk_led_clr (ORANGE_LED);
		//nrk_led_toggle (BLUE_LED);
     c2c:	00 90 76 03 	lds	r0, 0x0376
     c30:	04 c0       	rjmp	.+8      	; 0xc3a <bmac_wait_until_rx_pkt+0x34>
     c32:	96 95       	lsr	r25
     c34:	87 95       	ror	r24
     c36:	77 95       	ror	r23
     c38:	67 95       	ror	r22
     c3a:	0a 94       	dec	r0
     c3c:	d2 f7       	brpl	.-12     	; 0xc32 <bmac_wait_until_rx_pkt+0x2c>
     c3e:	60 fd       	sbrc	r22, 0
     c40:	03 c0       	rjmp	.+6      	; 0xc48 <bmac_wait_until_rx_pkt+0x42>
     c42:	8f ef       	ldi	r24, 0xFF	; 255
     c44:	9f ef       	ldi	r25, 0xFF	; 255
     c46:	08 95       	ret
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
		// Release the RX buffer so future packets can arrive 
		bmac_rx_pkt_release ();
     c4c:	08 95       	ret

00000c4e <bmac_set_channel>:
				break;
			case 'R': // ~x100
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_clr(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
     c4e:	68 2f       	mov	r22, r24
				nrk_led_clr(BLUE_LED);
     c50:	8b 31       	cpi	r24, 0x1B	; 27
     c52:	18 f0       	brcs	.+6      	; 0xc5a <bmac_set_channel+0xc>
     c54:	8f ef       	ldi	r24, 0xFF	; 255
     c56:	9f ef       	ldi	r25, 0xFF	; 255
     c58:	08 95       	ret
				nrk_led_set(GREEN_LED);
     c5a:	80 93 ac 05 	sts	0x05AC, r24
				break;
     c5e:	20 e0       	ldi	r18, 0x00	; 0
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	4f ef       	ldi	r20, 0xFF	; 255
     c64:	5f ef       	ldi	r21, 0xFF	; 255
     c66:	80 e1       	ldi	r24, 0x10	; 16
     c68:	95 e0       	ldi	r25, 0x05	; 5
     c6a:	0e 94 26 11 	call	0x224c	; 0x224c <rf_init>
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	90 e0       	ldi	r25, 0x00	; 0
			case 'B': // ~x101
				nrk_gpio_clr(NRK_DEBUG_0);
     c72:	08 95       	ret

00000c74 <bmac_init>:
/*
	PIN_TASK.task = pin_task;
	PIN_TASK.Ptos = (void *) &pin_task_stack[NRK_APP_STACKSIZE - 1];
	PIN_TASK.Pbos = (void *) &pin_task_stack[0];
	PIN_TASK.prio = 1;
	PIN_TASK.FirstActivation = TRUE;
     c74:	1f 93       	push	r17
     c76:	18 2f       	mov	r17, r24
	PIN_TASK.Type = BASIC_TASK;
     c78:	8f ef       	ldi	r24, 0xFF	; 255
     c7a:	80 93 9b 05 	sts	0x059B, r24
	PIN_TASK.SchType = PREEMPTIVE;
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	80 93 a2 02 	sts	0x02A2, r24
	PIN_TASK.period.secs = 3;
     c84:	10 92 a2 05 	sts	0x05A2, r1
     c88:	10 92 a3 05 	sts	0x05A3, r1
     c8c:	10 92 a4 05 	sts	0x05A4, r1
     c90:	10 92 a5 05 	sts	0x05A5, r1
	PIN_TASK.period.nano_secs = 100 * NANOS_PER_MS;
     c94:	80 e0       	ldi	r24, 0x00	; 0
     c96:	91 ee       	ldi	r25, 0xE1	; 225
     c98:	a5 ef       	ldi	r26, 0xF5	; 245
     c9a:	b5 e0       	ldi	r27, 0x05	; 5
     c9c:	80 93 a6 05 	sts	0x05A6, r24
     ca0:	90 93 a7 05 	sts	0x05A7, r25
     ca4:	a0 93 a8 05 	sts	0x05A8, r26
     ca8:	b0 93 a9 05 	sts	0x05A9, r27
	PIN_TASK.cpu_reserve.secs = 0;
     cac:	0e 94 00 1c 	call	0x3800	; 0x3800 <nrk_signal_create>
     cb0:	80 93 76 03 	sts	0x0376, r24
	PIN_TASK.cpu_reserve.nano_secs = 50 * NANOS_PER_MS;
     cb4:	8f 3f       	cpi	r24, 0xFF	; 255
     cb6:	19 f4       	brne	.+6      	; 0xcbe <bmac_init+0x4a>
	PIN_TASK.offset.secs = 0;
	PIN_TASK.offset.nano_secs = 0;
     cb8:	8e e5       	ldi	r24, 0x5E	; 94
     cba:	91 e0       	ldi	r25, 0x01	; 1
     cbc:	08 c0       	rjmp	.+16     	; 0xcce <bmac_init+0x5a>
	nrk_activate_task (&PIN_TASK);
*/

	RX_TASK.task = rx_task;
     cbe:	0e 94 00 1c 	call	0x3800	; 0x3800 <nrk_signal_create>
     cc2:	80 93 9a 05 	sts	0x059A, r24
	RX_TASK.Ptos = (void *) &rx_task_stack[NRK_APP_STACKSIZE - 1];
     cc6:	8f 3f       	cpi	r24, 0xFF	; 255
     cc8:	79 f4       	brne	.+30     	; 0xce8 <bmac_init+0x74>
	RX_TASK.Pbos = (void *) &rx_task_stack[0];
	RX_TASK.prio = 2;
     cca:	86 e3       	ldi	r24, 0x36	; 54
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <nrk_kprintf>
	RX_TASK.FirstActivation = TRUE;
     cd2:	e0 91 7c 06 	lds	r30, 0x067C
     cd6:	f0 91 7d 06 	lds	r31, 0x067D
     cda:	60 85       	ldd	r22, Z+8	; 0x08
     cdc:	8e e0       	ldi	r24, 0x0E	; 14
     cde:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <nrk_kernel_error_add>
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	9f ef       	ldi	r25, 0xFF	; 255
     ce6:	5b c0       	rjmp	.+182    	; 0xd9e <bmac_init+0x12a>
	RX_TASK.Type = BASIC_TASK;
	RX_TASK.SchType = PREEMPTIVE;
	RX_TASK.period.secs = 0;
     ce8:	0e 94 00 1c 	call	0x3800	; 0x3800 <nrk_signal_create>
     cec:	80 93 c7 02 	sts	0x02C7, r24
	RX_TASK.period.nano_secs = 40 * NANOS_PER_MS;;
     cf0:	8f 3f       	cpi	r24, 0xFF	; 255
     cf2:	19 f4       	brne	.+6      	; 0xcfa <bmac_init+0x86>
	RX_TASK.cpu_reserve.secs = 0;
	RX_TASK.cpu_reserve.nano_secs = 40 * NANOS_PER_MS;;
     cf4:	8a e0       	ldi	r24, 0x0A	; 10
     cf6:	91 e0       	ldi	r25, 0x01	; 1
     cf8:	ea cf       	rjmp	.-44     	; 0xcce <bmac_init+0x5a>
	RX_TASK.offset.secs = 0;
	RX_TASK.offset.nano_secs = 0;
	nrk_activate_task (&RX_TASK);

	printf ("Create done\r\n");
}
     cfa:	10 92 a0 05 	sts	0x05A0, r1
     cfe:	10 92 ae 05 	sts	0x05AE, r1
     d02:	10 92 16 05 	sts	0x0516, r1
     d06:	10 92 15 05 	sts	0x0515, r1
     d0a:	10 92 14 05 	sts	0x0514, r1
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	4f ef       	ldi	r20, 0xFF	; 255
     d14:	5f ef       	ldi	r21, 0xFF	; 255
     d16:	61 2f       	mov	r22, r17
     d18:	80 e1       	ldi	r24, 0x10	; 16
     d1a:	95 e0       	ldi	r25, 0x05	; 5
     d1c:	0e 94 26 11 	call	0x224c	; 0x224c <rf_init>
     d20:	10 93 ac 05 	sts	0x05AC, r17
     d24:	40 98       	cbi	0x08, 0	; 8
     d26:	83 e1       	ldi	r24, 0x13	; 19
     d28:	8e bd       	out	0x2e, r24	; 46
     d2a:	0d b4       	in	r0, 0x2d	; 45
     d2c:	07 fe       	sbrs	r0, 7
     d2e:	fd cf       	rjmp	.-6      	; 0xd2a <bmac_init+0xb6>
     d30:	85 ee       	ldi	r24, 0xE5	; 229
     d32:	8e bd       	out	0x2e, r24	; 46
     d34:	0d b4       	in	r0, 0x2d	; 45
     d36:	07 fe       	sbrs	r0, 7
     d38:	fd cf       	rjmp	.-6      	; 0xd34 <bmac_init+0xc0>
     d3a:	80 e8       	ldi	r24, 0x80	; 128
     d3c:	8e bd       	out	0x2e, r24	; 46
     d3e:	0d b4       	in	r0, 0x2d	; 45
     d40:	07 fe       	sbrs	r0, 7
     d42:	fd cf       	rjmp	.-6      	; 0xd3e <bmac_init+0xca>
     d44:	40 9a       	sbi	0x08, 0	; 8
     d46:	40 98       	cbi	0x08, 0	; 8
     d48:	85 e1       	ldi	r24, 0x15	; 21
     d4a:	8e bd       	out	0x2e, r24	; 46
     d4c:	0d b4       	in	r0, 0x2d	; 45
     d4e:	07 fe       	sbrs	r0, 7
     d50:	fd cf       	rjmp	.-6      	; 0xd4c <bmac_init+0xd8>
     d52:	80 e8       	ldi	r24, 0x80	; 128
     d54:	8e bd       	out	0x2e, r24	; 46
     d56:	0d b4       	in	r0, 0x2d	; 45
     d58:	07 fe       	sbrs	r0, 7
     d5a:	fd cf       	rjmp	.-6      	; 0xd56 <bmac_init+0xe2>
     d5c:	8f ef       	ldi	r24, 0xFF	; 255
     d5e:	8e bd       	out	0x2e, r24	; 46
     d60:	0d b4       	in	r0, 0x2d	; 45
     d62:	07 fe       	sbrs	r0, 7
     d64:	fd cf       	rjmp	.-6      	; 0xd60 <bmac_init+0xec>
     d66:	40 9a       	sbi	0x08, 0	; 8
     d68:	40 98       	cbi	0x08, 0	; 8
     d6a:	87 e1       	ldi	r24, 0x17	; 23
     d6c:	8e bd       	out	0x2e, r24	; 46
     d6e:	0d b4       	in	r0, 0x2d	; 45
     d70:	07 fe       	sbrs	r0, 7
     d72:	fd cf       	rjmp	.-6      	; 0xd6e <bmac_init+0xfa>
     d74:	8a e0       	ldi	r24, 0x0A	; 10
     d76:	8e bd       	out	0x2e, r24	; 46
     d78:	0d b4       	in	r0, 0x2d	; 45
     d7a:	07 fe       	sbrs	r0, 7
     d7c:	fd cf       	rjmp	.-6      	; 0xd78 <bmac_init+0x104>
     d7e:	86 e5       	ldi	r24, 0x56	; 86
     d80:	8e bd       	out	0x2e, r24	; 46
     d82:	0d b4       	in	r0, 0x2d	; 45
     d84:	07 fe       	sbrs	r0, 7
     d86:	fd cf       	rjmp	.-6      	; 0xd82 <bmac_init+0x10e>
     d88:	40 9a       	sbi	0x08, 0	; 8
     d8a:	83 ed       	ldi	r24, 0xD3	; 211
     d8c:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <rf_set_cca_thresh>
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	80 93 9e 05 	sts	0x059E, r24
     d96:	80 93 9f 05 	sts	0x059F, r24
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	1f 91       	pop	r17
     da0:	08 95       	ret

00000da2 <bmac_set_cca_thresh>:
				nrk_gpio_clr(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
				nrk_led_set(BLUE_LED);
				nrk_led_clr(GREEN_LED);
				break;
     da2:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <rf_set_cca_thresh>
			case 'R': // ~x100
				nrk_gpio_set(NRK_DEBUG_0);
     da6:	81 e0       	ldi	r24, 0x01	; 1
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	08 95       	ret

00000dac <bmac_set_rf_power>:
				nrk_led_clr(GREEN_LED);
				break;
			case 'D': // ~x010
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_clr(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
     dac:	80 32       	cpi	r24, 0x20	; 32
     dae:	18 f0       	brcs	.+6      	; 0xdb6 <bmac_set_rf_power+0xa>
     db0:	8f ef       	ldi	r24, 0xFF	; 255
     db2:	9f ef       	ldi	r25, 0xFF	; 255
     db4:	08 95       	ret
				nrk_led_clr(ORANGE_LED);
     db6:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <rf_tx_power>
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
				nrk_led_set(BLUE_LED);
				nrk_led_clr(GREEN_LED);
     dbe:	08 95       	ret

00000dc0 <bmac_encryption_disable>:
				break;
			case 'U': // ~x001
				nrk_gpio_clr(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
     dc0:	0e 94 22 08 	call	0x1044	; 0x1044 <rf_security_disable>
				nrk_led_clr(BLUE_LED);
				nrk_led_clr(GREEN_LED);
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	08 95       	ret

00000dca <bmac_encryption_enable>:
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
				nrk_led_clr(GREEN_LED);
     dca:	0e 94 fc 07 	call	0xff8	; 0xff8 <rf_security_enable>
				break;
			case 'U': // ~x001
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	08 95       	ret

00000dd4 <bmac_encryption_set_key>:
				nrk_led_set(RED_LED);
				nrk_gpio_clr(NRK_DEBUG_3);
				break;
		}

		switch(rx_buf[2]) {
     dd4:	60 31       	cpi	r22, 0x10	; 16
     dd6:	19 f0       	breq	.+6      	; 0xdde <bmac_encryption_set_key+0xa>
     dd8:	8f ef       	ldi	r24, 0xFF	; 255
     dda:	9f ef       	ldi	r25, 0xFF	; 255
     ddc:	08 95       	ret
			case '-': // ~x000
     dde:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <rf_security_set_key>
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	90 e0       	ldi	r25, 0x00	; 0
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
     de6:	08 95       	ret

00000de8 <bmac_rx_pkt_is_encrypted>:
			case 'A': // ~0xxx
				nrk_led_clr(RED_LED);
				nrk_gpio_set(NRK_DEBUG_3);
				break;
			case 'B': // ~1xxx
				nrk_led_set(RED_LED);
     de8:	0e 94 b1 07 	call	0xf62	; 0xf62 <rf_security_last_pkt_status>
				nrk_gpio_clr(NRK_DEBUG_3);
     dec:	99 27       	eor	r25, r25
     dee:	87 fd       	sbrc	r24, 7
     df0:	90 95       	com	r25
     df2:	08 95       	ret

00000df4 <bmac_addr_decode_set_my_mac>:
	nrk_gpio_direction(NRK_DEBUG_1,NRK_PIN_OUTPUT);//PA.4

	while (1) {
		// Wait until an RX packet is received
		val = bmac_wait_until_rx_pkt ();
		// Get the RX packet 
     df4:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <rf_addr_decode_set_my_mac>
		//nrk_led_set (ORANGE_LED);
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	08 95       	ret

00000dfe <bmac_addr_decode_enable>:
	bmac_auto_ack_disable();

	//set port direction as output
	nrk_gpio_direction(NRK_DEBUG_3,NRK_PIN_OUTPUT);//PD.1
	nrk_gpio_direction(NRK_DEBUG_2,NRK_PIN_OUTPUT);//PD.0
	nrk_gpio_direction(NRK_DEBUG_0,NRK_PIN_OUTPUT);//PA.3
     dfe:	0e 94 3b 08 	call	0x1076	; 0x1076 <rf_addr_decode_enable>
	nrk_gpio_direction(NRK_DEBUG_1,NRK_PIN_OUTPUT);//PA.4

     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	08 95       	ret

00000e08 <bmac_addr_decode_disable>:
	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
	// This sets the next RX buffer.
	// This can be called at anytime before releaseing the packet
	// if you wish to do a zero-copy buffer switch
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);

     e08:	0e 94 56 08 	call	0x10ac	; 0x10ac <rf_addr_decode_disable>
	bmac_auto_ack_disable();

     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	08 95       	ret

00000e12 <bmac_auto_ack_enable>:
	// receive with a very strong signal.  Setting this lower means
	// bmac will try to receive fainter packets.  If the value is set
	// too high or too low performance will suffer greatly.
	// bmac_set_cca_thresh(-45); 


     e12:	0e 94 71 08 	call	0x10e2	; 0x10e2 <rf_auto_ack_enable>
	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
	// This sets the next RX buffer.
     e16:	81 e0       	ldi	r24, 0x01	; 1
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	08 95       	ret

00000e1c <bmac_auto_ack_disable>:
	check_period.secs=0;
	check_period.nano_secs=40*NANOS_PER_MS; // Fastest we could safely go
	val=bmac_set_rx_check_rate(check_period);

	// The default Clear Channel Assement RSSI threshold is -45
	// Setting this value higher means that you will only trigger
     e1c:	0e 94 8f 08 	call	0x111e	; 0x111e <rf_auto_ack_disable>
	// receive with a very strong signal.  Setting this lower means
	// bmac will try to receive fainter packets.  If the value is set
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	08 95       	ret

00000e26 <bmac_encryption_set_ctr_counter>:
	nrk_time_set (0, 0);

	bmac_task_config ();

	nrk_create_taskset ();
	nrk_start ();
     e26:	64 30       	cpi	r22, 0x04	; 4
     e28:	19 f0       	breq	.+6      	; 0xe30 <bmac_encryption_set_ctr_counter+0xa>
     e2a:	8f ef       	ldi	r24, 0xFF	; 255
     e2c:	9f ef       	ldi	r25, 0xFF	; 255
     e2e:	08 95       	ret

     e30:	0e 94 b5 07 	call	0xf6a	; 0xf6a <rf_security_set_ctr_counter>
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
	return 0;
}
     e38:	08 95       	ret

00000e3a <bmac_nw_task>:
     e3a:	02 c0       	rjmp	.+4      	; 0xe40 <bmac_nw_task+0x6>
     e3c:	0e 94 c9 21 	call	0x4392	; 0x4392 <nrk_wait_until_next_period>
     e40:	80 91 9e 05 	lds	r24, 0x059E
     e44:	88 23       	and	r24, r24
     e46:	d1 f3       	breq	.-12     	; 0xe3c <bmac_nw_task+0x2>
     e48:	80 91 c7 02 	lds	r24, 0x02C7
     e4c:	0e 94 89 1c 	call	0x3912	; 0x3912 <nrk_signal_register>
     e50:	80 91 9f 05 	lds	r24, 0x059F
     e54:	88 23       	and	r24, r24
     e56:	49 f1       	breq	.+82     	; 0xeaa <bmac_nw_task+0x70>
     e58:	80 91 ae 05 	lds	r24, 0x05AE
     e5c:	81 30       	cpi	r24, 0x01	; 1
     e5e:	61 f4       	brne	.+24     	; 0xe78 <bmac_nw_task+0x3e>
     e60:	0e 94 c5 04 	call	0x98a	; 0x98a <_bmac_channel_check>
     e64:	88 23       	and	r24, r24
     e66:	41 f4       	brne	.+16     	; 0xe78 <bmac_nw_task+0x3e>
     e68:	0e 94 79 05 	call	0xaf2	; 0xaf2 <_bmac_rx>
     e6c:	81 30       	cpi	r24, 0x01	; 1
     e6e:	21 f4       	brne	.+8      	; 0xe78 <bmac_nw_task+0x3e>
     e70:	80 91 76 03 	lds	r24, 0x0376
     e74:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <nrk_event_signal>
     e78:	80 91 a0 05 	lds	r24, 0x05A0
     e7c:	81 30       	cpi	r24, 0x01	; 1
     e7e:	11 f4       	brne	.+4      	; 0xe84 <bmac_nw_task+0x4a>
     e80:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <_bmac_tx>
     e84:	20 91 a2 05 	lds	r18, 0x05A2
     e88:	30 91 a3 05 	lds	r19, 0x05A3
     e8c:	40 91 a4 05 	lds	r20, 0x05A4
     e90:	50 91 a5 05 	lds	r21, 0x05A5
     e94:	60 91 a6 05 	lds	r22, 0x05A6
     e98:	70 91 a7 05 	lds	r23, 0x05A7
     e9c:	80 91 a8 05 	lds	r24, 0x05A8
     ea0:	90 91 a9 05 	lds	r25, 0x05A9
     ea4:	0e 94 1a 20 	call	0x4034	; 0x4034 <nrk_wait>
     ea8:	d3 cf       	rjmp	.-90     	; 0xe50 <bmac_nw_task+0x16>
     eaa:	61 e0       	ldi	r22, 0x01	; 1
     eac:	70 e0       	ldi	r23, 0x00	; 0
     eae:	80 e0       	ldi	r24, 0x00	; 0
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	00 90 c7 02 	lds	r0, 0x02C7
     eb6:	04 c0       	rjmp	.+8      	; 0xec0 <bmac_nw_task+0x86>
     eb8:	66 0f       	add	r22, r22
     eba:	77 1f       	adc	r23, r23
     ebc:	88 1f       	adc	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	0a 94       	dec	r0
     ec2:	d2 f7       	brpl	.-12     	; 0xeb8 <bmac_nw_task+0x7e>
     ec4:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <nrk_event_wait>
     ec8:	00 90 c7 02 	lds	r0, 0x02C7
     ecc:	04 c0       	rjmp	.+8      	; 0xed6 <bmac_nw_task+0x9c>
     ece:	96 95       	lsr	r25
     ed0:	87 95       	ror	r24
     ed2:	77 95       	ror	r23
     ed4:	67 95       	ror	r22
     ed6:	0a 94       	dec	r0
     ed8:	d2 f7       	brpl	.-12     	; 0xece <bmac_nw_task+0x94>
     eda:	60 fd       	sbrc	r22, 0
     edc:	b9 cf       	rjmp	.-142    	; 0xe50 <bmac_nw_task+0x16>
     ede:	e5 cf       	rjmp	.-54     	; 0xeaa <bmac_nw_task+0x70>

00000ee0 <bmac_rx_pkt_get>:
     ee0:	fc 01       	movw	r30, r24
     ee2:	db 01       	movw	r26, r22
     ee4:	80 91 ae 05 	lds	r24, 0x05AE
     ee8:	88 23       	and	r24, r24
     eea:	29 f0       	breq	.+10     	; 0xef6 <bmac_rx_pkt_get+0x16>
     eec:	10 82       	st	Z, r1
     eee:	1c 92       	st	X, r1
     ef0:	80 e0       	ldi	r24, 0x00	; 0
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	08 95       	ret
     ef6:	80 91 13 05 	lds	r24, 0x0513
     efa:	80 83       	st	Z, r24
     efc:	80 91 18 05 	lds	r24, 0x0518
     f00:	8c 93       	st	X, r24
     f02:	80 91 15 05 	lds	r24, 0x0515
     f06:	90 91 16 05 	lds	r25, 0x0516
     f0a:	08 95       	ret

00000f0c <halRfSetChannel>:
//-------------------------------------------------------------------------------------------------------
void halRfSetChannel(uint8_t channel) {
	uint16_t f;
	
	// Derive frequency programming from the given channel number
	f = (uint16_t) (channel - 11); // Subtract the base channel 
     f0c:	99 27       	eor	r25, r25
	f = f + (f << 2);    		 // Multiply with 5, which is the channel spacing
     f0e:	9c 01       	movw	r18, r24
     f10:	26 5a       	subi	r18, 0xA6	; 166
     f12:	3e 4b       	sbci	r19, 0xBE	; 190
     f14:	0b 97       	sbiw	r24, 0x0b	; 11
	f = f + 357 + 0x4000;		 // 357 is 2405-2048, 0x4000 is LOCK_THR = 1
     f16:	88 0f       	add	r24, r24
     f18:	99 1f       	adc	r25, r25
     f1a:	88 0f       	add	r24, r24
     f1c:	99 1f       	adc	r25, r25
     f1e:	28 0f       	add	r18, r24
     f20:	39 1f       	adc	r19, r25
	
    // Write it to the CC2420
	DISABLE_GLOBAL_INT();
     f22:	f8 94       	cli
	FASTSPI_SETREG(CC2420_FSCTRL, f);
     f24:	40 98       	cbi	0x08, 0	; 8
     f26:	88 e1       	ldi	r24, 0x18	; 24
     f28:	8e bd       	out	0x2e, r24	; 46
     f2a:	0d b4       	in	r0, 0x2d	; 45
     f2c:	07 fe       	sbrs	r0, 7
     f2e:	fd cf       	rjmp	.-6      	; 0xf2a <halRfSetChannel+0x1e>
     f30:	83 2f       	mov	r24, r19
     f32:	99 27       	eor	r25, r25
     f34:	8e bd       	out	0x2e, r24	; 46
     f36:	0d b4       	in	r0, 0x2d	; 45
     f38:	07 fe       	sbrs	r0, 7
     f3a:	fd cf       	rjmp	.-6      	; 0xf36 <halRfSetChannel+0x2a>
     f3c:	2e bd       	out	0x2e, r18	; 46
     f3e:	0d b4       	in	r0, 0x2d	; 45
     f40:	07 fe       	sbrs	r0, 7
     f42:	fd cf       	rjmp	.-6      	; 0xf3e <halRfSetChannel+0x32>
     f44:	40 9a       	sbi	0x08, 0	; 8
	ENABLE_GLOBAL_INT();
     f46:	78 94       	sei
     f48:	08 95       	ret

00000f4a <halRfWaitForCrystalOscillator>:
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
     f4a:	f8 94       	cli
	    FASTSPI_UPD_STATUS(spiStatusByte);
     f4c:	40 98       	cbi	0x08, 0	; 8
     f4e:	1e bc       	out	0x2e, r1	; 46
     f50:	0d b4       	in	r0, 0x2d	; 45
     f52:	07 fe       	sbrs	r0, 7
     f54:	fd cf       	rjmp	.-6      	; 0xf50 <halRfWaitForCrystalOscillator+0x6>
     f56:	8e b5       	in	r24, 0x2e	; 46
     f58:	40 9a       	sbi	0x08, 0	; 8
	    ENABLE_GLOBAL_INT();
     f5a:	78 94       	sei
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
     f5c:	86 ff       	sbrs	r24, 6
     f5e:	f5 cf       	rjmp	.-22     	; 0xf4a <halRfWaitForCrystalOscillator>
     f60:	08 95       	ret

00000f62 <rf_security_last_pkt_status>:
	uint16_t div;
	nrk_setup_ports ();
	nrk_setup_uart (UART_BAUDRATE_115K2);

	nrk_init ();

     f62:	80 91 c4 05 	lds	r24, 0x05C4
	nrk_led_clr (0);
	nrk_led_clr (1);
     f66:	99 27       	eor	r25, r25
     f68:	08 95       	ret

00000f6a <rf_security_set_ctr_counter>:
	nrk_led_clr (2);
	nrk_led_clr (3);

	nrk_time_set (0, 0);
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	dc 01       	movw	r26, r24

	bmac_task_config ();

     f70:	40 98       	cbi	0x08, 0	; 8
     f72:	89 ec       	ldi	r24, 0xC9	; 201
     f74:	8e bd       	out	0x2e, r24	; 46
     f76:	0d b4       	in	r0, 0x2d	; 45
     f78:	07 fe       	sbrs	r0, 7
     f7a:	fd cf       	rjmp	.-6      	; 0xf76 <rf_security_set_ctr_counter+0xc>
     f7c:	80 e8       	ldi	r24, 0x80	; 128
     f7e:	8e bd       	out	0x2e, r24	; 46
     f80:	0d b4       	in	r0, 0x2d	; 45
     f82:	07 fe       	sbrs	r0, 7
     f84:	fd cf       	rjmp	.-6      	; 0xf80 <rf_security_set_ctr_counter+0x16>
     f86:	92 e0       	ldi	r25, 0x02	; 2
     f88:	91 50       	subi	r25, 0x01	; 1
     f8a:	fd 01       	movw	r30, r26
     f8c:	e9 0f       	add	r30, r25
     f8e:	f1 1d       	adc	r31, r1
     f90:	80 81       	ld	r24, Z
     f92:	8e bd       	out	0x2e, r24	; 46
     f94:	0d b4       	in	r0, 0x2d	; 45
     f96:	07 fe       	sbrs	r0, 7
     f98:	fd cf       	rjmp	.-6      	; 0xf94 <rf_security_set_ctr_counter+0x2a>
     f9a:	99 23       	and	r25, r25
     f9c:	a9 f7       	brne	.-22     	; 0xf88 <rf_security_set_ctr_counter+0x1e>
     f9e:	40 9a       	sbi	0x08, 0	; 8
	nrk_create_taskset ();
     fa0:	40 98       	cbi	0x08, 0	; 8
     fa2:	8b ec       	ldi	r24, 0xCB	; 203
     fa4:	8e bd       	out	0x2e, r24	; 46
     fa6:	0d b4       	in	r0, 0x2d	; 45
     fa8:	07 fe       	sbrs	r0, 7
     faa:	fd cf       	rjmp	.-6      	; 0xfa6 <rf_security_set_ctr_counter+0x3c>
     fac:	80 e8       	ldi	r24, 0x80	; 128
     fae:	8e bd       	out	0x2e, r24	; 46
     fb0:	0d b4       	in	r0, 0x2d	; 45
     fb2:	07 fe       	sbrs	r0, 7
     fb4:	fd cf       	rjmp	.-6      	; 0xfb0 <rf_security_set_ctr_counter+0x46>
     fb6:	92 e0       	ldi	r25, 0x02	; 2
     fb8:	9d 01       	movw	r18, r26
     fba:	2e 5f       	subi	r18, 0xFE	; 254
     fbc:	3f 4f       	sbci	r19, 0xFF	; 255
     fbe:	e9 01       	movw	r28, r18
     fc0:	91 50       	subi	r25, 0x01	; 1
     fc2:	f9 01       	movw	r30, r18
     fc4:	e9 0f       	add	r30, r25
     fc6:	f1 1d       	adc	r31, r1
     fc8:	80 81       	ld	r24, Z
     fca:	8e bd       	out	0x2e, r24	; 46
     fcc:	0d b4       	in	r0, 0x2d	; 45
     fce:	07 fe       	sbrs	r0, 7
     fd0:	fd cf       	rjmp	.-6      	; 0xfcc <rf_security_set_ctr_counter+0x62>
     fd2:	99 23       	and	r25, r25
     fd4:	a1 f7       	brne	.-24     	; 0xfbe <rf_security_set_ctr_counter+0x54>
     fd6:	40 9a       	sbi	0x08, 0	; 8
	nrk_start ();
     fd8:	8c 91       	ld	r24, X
     fda:	80 93 c5 05 	sts	0x05C5, r24

     fde:	fd 01       	movw	r30, r26
     fe0:	81 81       	ldd	r24, Z+1	; 0x01
     fe2:	80 93 c6 05 	sts	0x05C6, r24
	return 0;
     fe6:	88 81       	ld	r24, Y
     fe8:	80 93 c7 05 	sts	0x05C7, r24
}
     fec:	83 81       	ldd	r24, Z+3	; 0x03
     fee:	80 93 c8 05 	sts	0x05C8, r24
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	08 95       	ret

00000ff8 <rf_security_enable>:
	// The default Clear Channel Assement RSSI threshold is -45
	// Setting this value higher means that you will only trigger
	// receive with a very strong signal.  Setting this lower means
	// bmac will try to receive fainter packets.  If the value is set
	// too high or too low performance will suffer greatly.
	// bmac_set_cca_thresh(-45); 
     ff8:	40 98       	cbi	0x08, 0	; 8
     ffa:	89 e1       	ldi	r24, 0x19	; 25
     ffc:	8e bd       	out	0x2e, r24	; 46
     ffe:	0d b4       	in	r0, 0x2d	; 45
    1000:	07 fe       	sbrs	r0, 7
    1002:	fd cf       	rjmp	.-6      	; 0xffe <rf_security_enable+0x6>
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	8e bd       	out	0x2e, r24	; 46
    1008:	0d b4       	in	r0, 0x2d	; 45
    100a:	07 fe       	sbrs	r0, 7
    100c:	fd cf       	rjmp	.-6      	; 0x1008 <rf_security_enable+0x10>
    100e:	86 e0       	ldi	r24, 0x06	; 6
    1010:	8e bd       	out	0x2e, r24	; 46
    1012:	0d b4       	in	r0, 0x2d	; 45
    1014:	07 fe       	sbrs	r0, 7
    1016:	fd cf       	rjmp	.-6      	; 0x1012 <rf_security_enable+0x1a>
    1018:	40 9a       	sbi	0x08, 0	; 8

    101a:	40 98       	cbi	0x08, 0	; 8
    101c:	8a e1       	ldi	r24, 0x1A	; 26
    101e:	8e bd       	out	0x2e, r24	; 46
    1020:	0d b4       	in	r0, 0x2d	; 45
    1022:	07 fe       	sbrs	r0, 7
    1024:	fd cf       	rjmp	.-6      	; 0x1020 <rf_security_enable+0x28>
    1026:	8e e0       	ldi	r24, 0x0E	; 14
    1028:	8e bd       	out	0x2e, r24	; 46
    102a:	0d b4       	in	r0, 0x2d	; 45
    102c:	07 fe       	sbrs	r0, 7
    102e:	fd cf       	rjmp	.-6      	; 0x102a <rf_security_enable+0x32>
    1030:	8e e0       	ldi	r24, 0x0E	; 14
    1032:	8e bd       	out	0x2e, r24	; 46
    1034:	0d b4       	in	r0, 0x2d	; 45
    1036:	07 fe       	sbrs	r0, 7
    1038:	fd cf       	rjmp	.-6      	; 0x1034 <rf_security_enable+0x3c>
    103a:	40 9a       	sbi	0x08, 0	; 8

	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	80 93 b5 05 	sts	0x05B5, r24
    1042:	08 95       	ret

00001044 <rf_security_disable>:
	// This can be called at anytime before releaseing the packet
	// if you wish to do a zero-copy buffer switch
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);

	bmac_auto_ack_disable();

    1044:	40 98       	cbi	0x08, 0	; 8
    1046:	89 e1       	ldi	r24, 0x19	; 25
    1048:	8e bd       	out	0x2e, r24	; 46
    104a:	0d b4       	in	r0, 0x2d	; 45
    104c:	07 fe       	sbrs	r0, 7
    104e:	fd cf       	rjmp	.-6      	; 0x104a <rf_security_disable+0x6>
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	8e bd       	out	0x2e, r24	; 46
    1054:	0d b4       	in	r0, 0x2d	; 45
    1056:	07 fe       	sbrs	r0, 7
    1058:	fd cf       	rjmp	.-6      	; 0x1054 <rf_security_disable+0x10>
    105a:	84 ec       	ldi	r24, 0xC4	; 196
    105c:	8e bd       	out	0x2e, r24	; 46
    105e:	0d b4       	in	r0, 0x2d	; 45
    1060:	07 fe       	sbrs	r0, 7
    1062:	fd cf       	rjmp	.-6      	; 0x105e <rf_security_disable+0x1a>
    1064:	40 9a       	sbi	0x08, 0	; 8
	//set port direction as output
    1066:	10 92 b5 05 	sts	0x05B5, r1
    106a:	08 95       	ret

0000106c <rf_get_sem>:
	while (1) {
		// Wait until an RX packet is received
		val = bmac_wait_until_rx_pkt ();
		// Get the RX packet 
		//nrk_led_set (ORANGE_LED);
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
    106c:	80 91 b3 05 	lds	r24, 0x05B3
    1070:	90 91 b4 05 	lds	r25, 0x05B4
    1074:	08 95       	ret

00001076 <rf_addr_decode_enable>:
				nrk_gpio_clr(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
				nrk_led_clr(GREEN_LED);
    1076:	20 91 b6 05 	lds	r18, 0x05B6
    107a:	30 91 b7 05 	lds	r19, 0x05B7
    107e:	38 60       	ori	r19, 0x08	; 8
    1080:	30 93 b7 05 	sts	0x05B7, r19
    1084:	20 93 b6 05 	sts	0x05B6, r18
				break;
    1088:	40 98       	cbi	0x08, 0	; 8
    108a:	81 e1       	ldi	r24, 0x11	; 17
    108c:	8e bd       	out	0x2e, r24	; 46
    108e:	0d b4       	in	r0, 0x2d	; 45
    1090:	07 fe       	sbrs	r0, 7
    1092:	fd cf       	rjmp	.-6      	; 0x108e <rf_addr_decode_enable+0x18>
    1094:	83 2f       	mov	r24, r19
    1096:	99 27       	eor	r25, r25
    1098:	8e bd       	out	0x2e, r24	; 46
    109a:	0d b4       	in	r0, 0x2d	; 45
    109c:	07 fe       	sbrs	r0, 7
    109e:	fd cf       	rjmp	.-6      	; 0x109a <rf_addr_decode_enable+0x24>
    10a0:	2e bd       	out	0x2e, r18	; 46
    10a2:	0d b4       	in	r0, 0x2d	; 45
    10a4:	07 fe       	sbrs	r0, 7
    10a6:	fd cf       	rjmp	.-6      	; 0x10a2 <rf_addr_decode_enable+0x2c>
    10a8:	40 9a       	sbi	0x08, 0	; 8
    10aa:	08 95       	ret

000010ac <rf_addr_decode_disable>:
			case 'D': // ~x010
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_clr(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
    10ac:	20 91 b6 05 	lds	r18, 0x05B6
    10b0:	30 91 b7 05 	lds	r19, 0x05B7
    10b4:	37 7f       	andi	r19, 0xF7	; 247
    10b6:	30 93 b7 05 	sts	0x05B7, r19
    10ba:	20 93 b6 05 	sts	0x05B6, r18
				nrk_led_set(BLUE_LED);
    10be:	40 98       	cbi	0x08, 0	; 8
    10c0:	81 e1       	ldi	r24, 0x11	; 17
    10c2:	8e bd       	out	0x2e, r24	; 46
    10c4:	0d b4       	in	r0, 0x2d	; 45
    10c6:	07 fe       	sbrs	r0, 7
    10c8:	fd cf       	rjmp	.-6      	; 0x10c4 <rf_addr_decode_disable+0x18>
    10ca:	83 2f       	mov	r24, r19
    10cc:	99 27       	eor	r25, r25
    10ce:	8e bd       	out	0x2e, r24	; 46
    10d0:	0d b4       	in	r0, 0x2d	; 45
    10d2:	07 fe       	sbrs	r0, 7
    10d4:	fd cf       	rjmp	.-6      	; 0x10d0 <rf_addr_decode_disable+0x24>
    10d6:	2e bd       	out	0x2e, r18	; 46
    10d8:	0d b4       	in	r0, 0x2d	; 45
    10da:	07 fe       	sbrs	r0, 7
    10dc:	fd cf       	rjmp	.-6      	; 0x10d8 <rf_addr_decode_disable+0x2c>
    10de:	40 9a       	sbi	0x08, 0	; 8
    10e0:	08 95       	ret

000010e2 <rf_auto_ack_enable>:
				nrk_led_clr(GREEN_LED);
				break;
			case 'L': // ~x011
				nrk_gpio_clr(NRK_DEBUG_0);
				nrk_gpio_clr(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	80 93 c3 05 	sts	0x05C3, r24
				nrk_led_set(ORANGE_LED);
    10e8:	20 91 b6 05 	lds	r18, 0x05B6
    10ec:	30 91 b7 05 	lds	r19, 0x05B7
    10f0:	20 61       	ori	r18, 0x10	; 16
    10f2:	30 93 b7 05 	sts	0x05B7, r19
    10f6:	20 93 b6 05 	sts	0x05B6, r18
				nrk_led_set(BLUE_LED);
    10fa:	40 98       	cbi	0x08, 0	; 8
    10fc:	81 e1       	ldi	r24, 0x11	; 17
    10fe:	8e bd       	out	0x2e, r24	; 46
    1100:	0d b4       	in	r0, 0x2d	; 45
    1102:	07 fe       	sbrs	r0, 7
    1104:	fd cf       	rjmp	.-6      	; 0x1100 <rf_auto_ack_enable+0x1e>
    1106:	83 2f       	mov	r24, r19
    1108:	99 27       	eor	r25, r25
    110a:	8e bd       	out	0x2e, r24	; 46
    110c:	0d b4       	in	r0, 0x2d	; 45
    110e:	07 fe       	sbrs	r0, 7
    1110:	fd cf       	rjmp	.-6      	; 0x110c <rf_auto_ack_enable+0x2a>
    1112:	2e bd       	out	0x2e, r18	; 46
    1114:	0d b4       	in	r0, 0x2d	; 45
    1116:	07 fe       	sbrs	r0, 7
    1118:	fd cf       	rjmp	.-6      	; 0x1114 <rf_auto_ack_enable+0x32>
    111a:	40 9a       	sbi	0x08, 0	; 8
    111c:	08 95       	ret

0000111e <rf_auto_ack_disable>:
				nrk_led_clr(GREEN_LED);
				break;
			case 'R': // ~x100
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
    111e:	10 92 c3 05 	sts	0x05C3, r1
				nrk_gpio_clr(NRK_DEBUG_2);
    1122:	20 91 b6 05 	lds	r18, 0x05B6
    1126:	30 91 b7 05 	lds	r19, 0x05B7
    112a:	2f 7e       	andi	r18, 0xEF	; 239
    112c:	30 93 b7 05 	sts	0x05B7, r19
    1130:	20 93 b6 05 	sts	0x05B6, r18
				nrk_led_clr(ORANGE_LED);
    1134:	40 98       	cbi	0x08, 0	; 8
    1136:	81 e1       	ldi	r24, 0x11	; 17
    1138:	8e bd       	out	0x2e, r24	; 46
    113a:	0d b4       	in	r0, 0x2d	; 45
    113c:	07 fe       	sbrs	r0, 7
    113e:	fd cf       	rjmp	.-6      	; 0x113a <rf_auto_ack_disable+0x1c>
    1140:	83 2f       	mov	r24, r19
    1142:	99 27       	eor	r25, r25
    1144:	8e bd       	out	0x2e, r24	; 46
    1146:	0d b4       	in	r0, 0x2d	; 45
    1148:	07 fe       	sbrs	r0, 7
    114a:	fd cf       	rjmp	.-6      	; 0x1146 <rf_auto_ack_disable+0x28>
    114c:	2e bd       	out	0x2e, r18	; 46
    114e:	0d b4       	in	r0, 0x2d	; 45
    1150:	07 fe       	sbrs	r0, 7
    1152:	fd cf       	rjmp	.-6      	; 0x114e <rf_auto_ack_disable+0x30>
    1154:	40 9a       	sbi	0x08, 0	; 8
    1156:	08 95       	ret

00001158 <rf_busy>:
    1158:	89 b1       	in	r24, 0x09	; 9
    115a:	99 27       	eor	r25, r25
    115c:	66 e0       	ldi	r22, 0x06	; 6
    115e:	96 95       	lsr	r25
    1160:	87 95       	ror	r24
    1162:	6a 95       	dec	r22
    1164:	e1 f7       	brne	.-8      	; 0x115e <rf_busy+0x6>
    1166:	81 70       	andi	r24, 0x01	; 1
    1168:	90 70       	andi	r25, 0x00	; 0
    116a:	08 95       	ret

0000116c <rf_rx_check_fifop>:
    116c:	8c b1       	in	r24, 0x0c	; 12
    116e:	99 27       	eor	r25, r25
    1170:	87 fd       	sbrc	r24, 7
    1172:	90 95       	com	r25
    1174:	88 27       	eor	r24, r24
    1176:	99 0f       	add	r25, r25
    1178:	88 1f       	adc	r24, r24
    117a:	99 27       	eor	r25, r25
    117c:	08 95       	ret

0000117e <rf_rx_check_sfd>:
    117e:	89 b1       	in	r24, 0x09	; 9
    1180:	99 27       	eor	r25, r25
    1182:	e6 e0       	ldi	r30, 0x06	; 6
    1184:	96 95       	lsr	r25
    1186:	87 95       	ror	r24
    1188:	ea 95       	dec	r30
    118a:	e1 f7       	brne	.-8      	; 0x1184 <rf_rx_check_sfd+0x6>
    118c:	81 70       	andi	r24, 0x01	; 1
    118e:	90 70       	andi	r25, 0x00	; 0
    1190:	08 95       	ret

00001192 <rf_rx_packet>:
    1192:	80 91 c9 05 	lds	r24, 0x05C9
    1196:	88 23       	and	r24, r24
    1198:	19 f4       	brne	.+6      	; 0x11a0 <rf_rx_packet+0xe>
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	08 95       	ret
    11a0:	80 91 c9 05 	lds	r24, 0x05C9
    11a4:	10 92 c9 05 	sts	0x05C9, r1
    11a8:	99 27       	eor	r25, r25
    11aa:	87 fd       	sbrc	r24, 7
    11ac:	90 95       	com	r25
    11ae:	08 95       	ret

000011b0 <rf_flush_rx_fifo>:
    11b0:	40 98       	cbi	0x08, 0	; 8
    11b2:	88 e0       	ldi	r24, 0x08	; 8
    11b4:	8e bd       	out	0x2e, r24	; 46
    11b6:	0d b4       	in	r0, 0x2d	; 45
    11b8:	07 fe       	sbrs	r0, 7
    11ba:	fd cf       	rjmp	.-6      	; 0x11b6 <rf_flush_rx_fifo+0x6>
    11bc:	40 9a       	sbi	0x08, 0	; 8
    11be:	40 98       	cbi	0x08, 0	; 8
    11c0:	88 e0       	ldi	r24, 0x08	; 8
    11c2:	8e bd       	out	0x2e, r24	; 46
    11c4:	0d b4       	in	r0, 0x2d	; 45
    11c6:	07 fe       	sbrs	r0, 7
    11c8:	fd cf       	rjmp	.-6      	; 0x11c4 <rf_flush_rx_fifo+0x14>
    11ca:	40 9a       	sbi	0x08, 0	; 8
    11cc:	08 95       	ret

000011ce <rf_carrier_off>:
    11ce:	80 91 b3 05 	lds	r24, 0x05B3
    11d2:	90 91 b4 05 	lds	r25, 0x05B4
    11d6:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <nrk_sem_pend>
    11da:	40 98       	cbi	0x08, 0	; 8
    11dc:	86 e0       	ldi	r24, 0x06	; 6
    11de:	8e bd       	out	0x2e, r24	; 46
    11e0:	0d b4       	in	r0, 0x2d	; 45
    11e2:	07 fe       	sbrs	r0, 7
    11e4:	fd cf       	rjmp	.-6      	; 0x11e0 <rf_carrier_off+0x12>
    11e6:	40 9a       	sbi	0x08, 0	; 8
    11e8:	80 91 b3 05 	lds	r24, 0x05B3
    11ec:	90 91 b4 05 	lds	r25, 0x05B4
    11f0:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    11f4:	08 95       	ret

000011f6 <rf_carrier_on>:
    11f6:	80 91 b3 05 	lds	r24, 0x05B3
    11fa:	90 91 b4 05 	lds	r25, 0x05B4
    11fe:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <nrk_sem_pend>
    1202:	40 98       	cbi	0x08, 0	; 8
    1204:	84 e0       	ldi	r24, 0x04	; 4
    1206:	8e bd       	out	0x2e, r24	; 46
    1208:	0d b4       	in	r0, 0x2d	; 45
    120a:	07 fe       	sbrs	r0, 7
    120c:	fd cf       	rjmp	.-6      	; 0x1208 <rf_carrier_on+0x12>
    120e:	40 9a       	sbi	0x08, 0	; 8
    1210:	80 91 b3 05 	lds	r24, 0x05B3
    1214:	90 91 b4 05 	lds	r25, 0x05B4
    1218:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    121c:	08 95       	ret

0000121e <rf_data_mode>:
    121e:	80 91 b3 05 	lds	r24, 0x05B3
    1222:	90 91 b4 05 	lds	r25, 0x05B4
    1226:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <nrk_sem_pend>
    122a:	40 98       	cbi	0x08, 0	; 8
    122c:	86 e0       	ldi	r24, 0x06	; 6
    122e:	8e bd       	out	0x2e, r24	; 46
    1230:	0d b4       	in	r0, 0x2d	; 45
    1232:	07 fe       	sbrs	r0, 7
    1234:	fd cf       	rjmp	.-6      	; 0x1230 <rf_data_mode+0x12>
    1236:	40 9a       	sbi	0x08, 0	; 8
    1238:	40 98       	cbi	0x08, 0	; 8
    123a:	82 e1       	ldi	r24, 0x12	; 18
    123c:	8e bd       	out	0x2e, r24	; 46
    123e:	0d b4       	in	r0, 0x2d	; 45
    1240:	07 fe       	sbrs	r0, 7
    1242:	fd cf       	rjmp	.-6      	; 0x123e <rf_data_mode+0x20>
    1244:	85 e0       	ldi	r24, 0x05	; 5
    1246:	8e bd       	out	0x2e, r24	; 46
    1248:	0d b4       	in	r0, 0x2d	; 45
    124a:	07 fe       	sbrs	r0, 7
    124c:	fd cf       	rjmp	.-6      	; 0x1248 <rf_data_mode+0x2a>
    124e:	1e bc       	out	0x2e, r1	; 46
    1250:	0d b4       	in	r0, 0x2d	; 45
    1252:	07 fe       	sbrs	r0, 7
    1254:	fd cf       	rjmp	.-6      	; 0x1250 <rf_data_mode+0x32>
    1256:	40 9a       	sbi	0x08, 0	; 8
    1258:	40 98       	cbi	0x08, 0	; 8
    125a:	8e e2       	ldi	r24, 0x2E	; 46
    125c:	8e bd       	out	0x2e, r24	; 46
    125e:	0d b4       	in	r0, 0x2d	; 45
    1260:	07 fe       	sbrs	r0, 7
    1262:	fd cf       	rjmp	.-6      	; 0x125e <rf_data_mode+0x40>
    1264:	1e bc       	out	0x2e, r1	; 46
    1266:	0d b4       	in	r0, 0x2d	; 45
    1268:	07 fe       	sbrs	r0, 7
    126a:	fd cf       	rjmp	.-6      	; 0x1266 <rf_data_mode+0x48>
    126c:	1e bc       	out	0x2e, r1	; 46
    126e:	0d b4       	in	r0, 0x2d	; 45
    1270:	07 fe       	sbrs	r0, 7
    1272:	fd cf       	rjmp	.-6      	; 0x126e <rf_data_mode+0x50>
    1274:	40 9a       	sbi	0x08, 0	; 8
    1276:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <rf_flush_rx_fifo>
    127a:	80 91 b3 05 	lds	r24, 0x05B3
    127e:	90 91 b4 05 	lds	r25, 0x05B4
    1282:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    1286:	08 95       	ret

00001288 <rf_test_mode>:
    1288:	80 91 b3 05 	lds	r24, 0x05B3
    128c:	90 91 b4 05 	lds	r25, 0x05B4
    1290:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <nrk_sem_pend>
    1294:	40 98       	cbi	0x08, 0	; 8
    1296:	86 e0       	ldi	r24, 0x06	; 6
    1298:	8e bd       	out	0x2e, r24	; 46
    129a:	0d b4       	in	r0, 0x2d	; 45
    129c:	07 fe       	sbrs	r0, 7
    129e:	fd cf       	rjmp	.-6      	; 0x129a <rf_test_mode+0x12>
    12a0:	40 9a       	sbi	0x08, 0	; 8
    12a2:	40 98       	cbi	0x08, 0	; 8
    12a4:	82 e1       	ldi	r24, 0x12	; 18
    12a6:	8e bd       	out	0x2e, r24	; 46
    12a8:	0d b4       	in	r0, 0x2d	; 45
    12aa:	07 fe       	sbrs	r0, 7
    12ac:	fd cf       	rjmp	.-6      	; 0x12a8 <rf_test_mode+0x20>
    12ae:	85 e0       	ldi	r24, 0x05	; 5
    12b0:	8e bd       	out	0x2e, r24	; 46
    12b2:	0d b4       	in	r0, 0x2d	; 45
    12b4:	07 fe       	sbrs	r0, 7
    12b6:	fd cf       	rjmp	.-6      	; 0x12b2 <rf_test_mode+0x2a>
    12b8:	88 e0       	ldi	r24, 0x08	; 8
    12ba:	8e bd       	out	0x2e, r24	; 46
    12bc:	0d b4       	in	r0, 0x2d	; 45
    12be:	07 fe       	sbrs	r0, 7
    12c0:	fd cf       	rjmp	.-6      	; 0x12bc <rf_test_mode+0x34>
    12c2:	40 9a       	sbi	0x08, 0	; 8
    12c4:	40 98       	cbi	0x08, 0	; 8
    12c6:	8e e2       	ldi	r24, 0x2E	; 46
    12c8:	8e bd       	out	0x2e, r24	; 46
    12ca:	0d b4       	in	r0, 0x2d	; 45
    12cc:	07 fe       	sbrs	r0, 7
    12ce:	fd cf       	rjmp	.-6      	; 0x12ca <rf_test_mode+0x42>
    12d0:	88 e1       	ldi	r24, 0x18	; 24
    12d2:	8e bd       	out	0x2e, r24	; 46
    12d4:	0d b4       	in	r0, 0x2d	; 45
    12d6:	07 fe       	sbrs	r0, 7
    12d8:	fd cf       	rjmp	.-6      	; 0x12d4 <rf_test_mode+0x4c>
    12da:	1e bc       	out	0x2e, r1	; 46
    12dc:	0d b4       	in	r0, 0x2d	; 45
    12de:	07 fe       	sbrs	r0, 7
    12e0:	fd cf       	rjmp	.-6      	; 0x12dc <rf_test_mode+0x54>
    12e2:	40 9a       	sbi	0x08, 0	; 8
    12e4:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <rf_flush_rx_fifo>
    12e8:	80 91 b3 05 	lds	r24, 0x05B3
    12ec:	90 91 b4 05 	lds	r25, 0x05B4
    12f0:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    12f4:	08 95       	ret

000012f6 <rf_set_cca_thresh>:
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	08 2f       	mov	r16, r24
    12fc:	80 91 b3 05 	lds	r24, 0x05B3
    1300:	90 91 b4 05 	lds	r25, 0x05B4
    1304:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <nrk_sem_pend>
    1308:	11 27       	eor	r17, r17
    130a:	07 fd       	sbrc	r16, 7
    130c:	10 95       	com	r17
    130e:	30 2f       	mov	r19, r16
    1310:	22 27       	eor	r18, r18
    1312:	20 68       	ori	r18, 0x80	; 128
    1314:	40 98       	cbi	0x08, 0	; 8
    1316:	83 e1       	ldi	r24, 0x13	; 19
    1318:	8e bd       	out	0x2e, r24	; 46
    131a:	0d b4       	in	r0, 0x2d	; 45
    131c:	07 fe       	sbrs	r0, 7
    131e:	fd cf       	rjmp	.-6      	; 0x131a <rf_set_cca_thresh+0x24>
    1320:	83 2f       	mov	r24, r19
    1322:	99 27       	eor	r25, r25
    1324:	8e bd       	out	0x2e, r24	; 46
    1326:	0d b4       	in	r0, 0x2d	; 45
    1328:	07 fe       	sbrs	r0, 7
    132a:	fd cf       	rjmp	.-6      	; 0x1326 <rf_set_cca_thresh+0x30>
    132c:	2e bd       	out	0x2e, r18	; 46
    132e:	0d b4       	in	r0, 0x2d	; 45
    1330:	07 fe       	sbrs	r0, 7
    1332:	fd cf       	rjmp	.-6      	; 0x132e <rf_set_cca_thresh+0x38>
    1334:	40 9a       	sbi	0x08, 0	; 8
    1336:	80 91 b3 05 	lds	r24, 0x05B3
    133a:	90 91 b4 05 	lds	r25, 0x05B4
    133e:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    1342:	1f 91       	pop	r17
    1344:	0f 91       	pop	r16
    1346:	08 95       	ret

00001348 <rf_polling_rx_packet>:
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	24 97       	sbiw	r28, 0x04	; 4
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	de bf       	out	0x3e, r29	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	cd bf       	out	0x3d, r28	; 61
    135c:	80 91 b3 05 	lds	r24, 0x05B3
    1360:	90 91 b4 05 	lds	r25, 0x05B4
    1364:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <nrk_sem_pend>
    1368:	67 9b       	sbis	0x0c, 7	; 12
    136a:	34 c2       	rjmp	.+1128   	; 0x17d4 <rf_polling_rx_packet+0x48c>
    136c:	10 92 c4 05 	sts	0x05C4, r1
    1370:	67 9b       	sbis	0x0c, 7	; 12
    1372:	25 c0       	rjmp	.+74     	; 0x13be <rf_polling_rx_packet+0x76>
    1374:	31 99       	sbic	0x06, 1	; 6
    1376:	23 c0       	rjmp	.+70     	; 0x13be <rf_polling_rx_packet+0x76>
    1378:	40 98       	cbi	0x08, 0	; 8
    137a:	8f e7       	ldi	r24, 0x7F	; 127
    137c:	8e bd       	out	0x2e, r24	; 46
    137e:	0d b4       	in	r0, 0x2d	; 45
    1380:	07 fe       	sbrs	r0, 7
    1382:	fd cf       	rjmp	.-6      	; 0x137e <rf_polling_rx_packet+0x36>
    1384:	1e bc       	out	0x2e, r1	; 46
    1386:	0d b4       	in	r0, 0x2d	; 45
    1388:	07 fe       	sbrs	r0, 7
    138a:	fd cf       	rjmp	.-6      	; 0x1386 <rf_polling_rx_packet+0x3e>
    138c:	8e b5       	in	r24, 0x2e	; 46
    138e:	40 9a       	sbi	0x08, 0	; 8
    1390:	40 98       	cbi	0x08, 0	; 8
    1392:	88 e0       	ldi	r24, 0x08	; 8
    1394:	8e bd       	out	0x2e, r24	; 46
    1396:	0d b4       	in	r0, 0x2d	; 45
    1398:	07 fe       	sbrs	r0, 7
    139a:	fd cf       	rjmp	.-6      	; 0x1396 <rf_polling_rx_packet+0x4e>
    139c:	40 9a       	sbi	0x08, 0	; 8
    139e:	40 98       	cbi	0x08, 0	; 8
    13a0:	88 e0       	ldi	r24, 0x08	; 8
    13a2:	8e bd       	out	0x2e, r24	; 46
    13a4:	0d b4       	in	r0, 0x2d	; 45
    13a6:	07 fe       	sbrs	r0, 7
    13a8:	fd cf       	rjmp	.-6      	; 0x13a4 <rf_polling_rx_packet+0x5c>
    13aa:	40 9a       	sbi	0x08, 0	; 8
    13ac:	80 91 b3 05 	lds	r24, 0x05B3
    13b0:	90 91 b4 05 	lds	r25, 0x05B4
    13b4:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    13b8:	8f ef       	ldi	r24, 0xFF	; 255
    13ba:	9f ef       	ldi	r25, 0xFF	; 255
    13bc:	13 c2       	rjmp	.+1062   	; 0x17e4 <rf_polling_rx_packet+0x49c>
    13be:	40 98       	cbi	0x08, 0	; 8
    13c0:	8f e7       	ldi	r24, 0x7F	; 127
    13c2:	8e bd       	out	0x2e, r24	; 46
    13c4:	0d b4       	in	r0, 0x2d	; 45
    13c6:	07 fe       	sbrs	r0, 7
    13c8:	fd cf       	rjmp	.-6      	; 0x13c4 <rf_polling_rx_packet+0x7c>
    13ca:	1e bc       	out	0x2e, r1	; 46
    13cc:	0d b4       	in	r0, 0x2d	; 45
    13ce:	07 fe       	sbrs	r0, 7
    13d0:	fd cf       	rjmp	.-6      	; 0x13cc <rf_polling_rx_packet+0x84>
    13d2:	4e b5       	in	r20, 0x2e	; 46
    13d4:	40 9a       	sbi	0x08, 0	; 8
    13d6:	4f 77       	andi	r20, 0x7F	; 127
    13d8:	19 f5       	brne	.+70     	; 0x1420 <rf_polling_rx_packet+0xd8>
    13da:	40 98       	cbi	0x08, 0	; 8
    13dc:	8f e7       	ldi	r24, 0x7F	; 127
    13de:	8e bd       	out	0x2e, r24	; 46
    13e0:	0d b4       	in	r0, 0x2d	; 45
    13e2:	07 fe       	sbrs	r0, 7
    13e4:	fd cf       	rjmp	.-6      	; 0x13e0 <rf_polling_rx_packet+0x98>
    13e6:	1e bc       	out	0x2e, r1	; 46
    13e8:	0d b4       	in	r0, 0x2d	; 45
    13ea:	07 fe       	sbrs	r0, 7
    13ec:	fd cf       	rjmp	.-6      	; 0x13e8 <rf_polling_rx_packet+0xa0>
    13ee:	8e b5       	in	r24, 0x2e	; 46
    13f0:	40 9a       	sbi	0x08, 0	; 8
    13f2:	40 98       	cbi	0x08, 0	; 8
    13f4:	88 e0       	ldi	r24, 0x08	; 8
    13f6:	8e bd       	out	0x2e, r24	; 46
    13f8:	0d b4       	in	r0, 0x2d	; 45
    13fa:	07 fe       	sbrs	r0, 7
    13fc:	fd cf       	rjmp	.-6      	; 0x13f8 <rf_polling_rx_packet+0xb0>
    13fe:	40 9a       	sbi	0x08, 0	; 8
    1400:	40 98       	cbi	0x08, 0	; 8
    1402:	88 e0       	ldi	r24, 0x08	; 8
    1404:	8e bd       	out	0x2e, r24	; 46
    1406:	0d b4       	in	r0, 0x2d	; 45
    1408:	07 fe       	sbrs	r0, 7
    140a:	fd cf       	rjmp	.-6      	; 0x1406 <rf_polling_rx_packet+0xbe>
    140c:	40 9a       	sbi	0x08, 0	; 8
    140e:	80 91 b3 05 	lds	r24, 0x05B3
    1412:	90 91 b4 05 	lds	r25, 0x05B4
    1416:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    141a:	8e ef       	ldi	r24, 0xFE	; 254
    141c:	9f ef       	ldi	r25, 0xFF	; 255
    141e:	e2 c1       	rjmp	.+964    	; 0x17e4 <rf_polling_rx_packet+0x49c>
    1420:	45 30       	cpi	r20, 0x05	; 5
    1422:	8c f0       	brlt	.+34     	; 0x1446 <rf_polling_rx_packet+0xfe>
    1424:	e0 91 b8 05 	lds	r30, 0x05B8
    1428:	f0 91 b9 05 	lds	r31, 0x05B9
    142c:	24 2f       	mov	r18, r20
    142e:	33 27       	eor	r19, r19
    1430:	27 fd       	sbrc	r18, 7
    1432:	30 95       	com	r19
    1434:	2b 50       	subi	r18, 0x0B	; 11
    1436:	30 40       	sbci	r19, 0x00	; 0
    1438:	84 81       	ldd	r24, Z+4	; 0x04
    143a:	99 27       	eor	r25, r25
    143c:	87 fd       	sbrc	r24, 7
    143e:	90 95       	com	r25
    1440:	82 17       	cp	r24, r18
    1442:	93 07       	cpc	r25, r19
    1444:	f4 f5       	brge	.+124    	; 0x14c2 <rf_polling_rx_packet+0x17a>
    1446:	40 98       	cbi	0x08, 0	; 8
    1448:	8f e7       	ldi	r24, 0x7F	; 127
    144a:	8e bd       	out	0x2e, r24	; 46
    144c:	0d b4       	in	r0, 0x2d	; 45
    144e:	07 fe       	sbrs	r0, 7
    1450:	fd cf       	rjmp	.-6      	; 0x144c <rf_polling_rx_packet+0x104>
    1452:	60 e0       	ldi	r22, 0x00	; 0
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	24 2f       	mov	r18, r20
    1458:	33 27       	eor	r19, r19
    145a:	27 fd       	sbrc	r18, 7
    145c:	30 95       	com	r19
    145e:	06 c0       	rjmp	.+12     	; 0x146c <rf_polling_rx_packet+0x124>
    1460:	1e bc       	out	0x2e, r1	; 46
    1462:	0d b4       	in	r0, 0x2d	; 45
    1464:	07 fe       	sbrs	r0, 7
    1466:	fd cf       	rjmp	.-6      	; 0x1462 <rf_polling_rx_packet+0x11a>
    1468:	6f 5f       	subi	r22, 0xFF	; 255
    146a:	7f 4f       	sbci	r23, 0xFF	; 255
    146c:	86 2f       	mov	r24, r22
    146e:	99 27       	eor	r25, r25
    1470:	82 17       	cp	r24, r18
    1472:	93 07       	cpc	r25, r19
    1474:	14 f4       	brge	.+4      	; 0x147a <rf_polling_rx_packet+0x132>
    1476:	31 99       	sbic	0x06, 1	; 6
    1478:	f3 cf       	rjmp	.-26     	; 0x1460 <rf_polling_rx_packet+0x118>
    147a:	40 9a       	sbi	0x08, 0	; 8
    147c:	40 98       	cbi	0x08, 0	; 8
    147e:	8f e7       	ldi	r24, 0x7F	; 127
    1480:	8e bd       	out	0x2e, r24	; 46
    1482:	0d b4       	in	r0, 0x2d	; 45
    1484:	07 fe       	sbrs	r0, 7
    1486:	fd cf       	rjmp	.-6      	; 0x1482 <rf_polling_rx_packet+0x13a>
    1488:	1e bc       	out	0x2e, r1	; 46
    148a:	0d b4       	in	r0, 0x2d	; 45
    148c:	07 fe       	sbrs	r0, 7
    148e:	fd cf       	rjmp	.-6      	; 0x148a <rf_polling_rx_packet+0x142>
    1490:	8e b5       	in	r24, 0x2e	; 46
    1492:	40 9a       	sbi	0x08, 0	; 8
    1494:	40 98       	cbi	0x08, 0	; 8
    1496:	88 e0       	ldi	r24, 0x08	; 8
    1498:	8e bd       	out	0x2e, r24	; 46
    149a:	0d b4       	in	r0, 0x2d	; 45
    149c:	07 fe       	sbrs	r0, 7
    149e:	fd cf       	rjmp	.-6      	; 0x149a <rf_polling_rx_packet+0x152>
    14a0:	40 9a       	sbi	0x08, 0	; 8
    14a2:	40 98       	cbi	0x08, 0	; 8
    14a4:	88 e0       	ldi	r24, 0x08	; 8
    14a6:	8e bd       	out	0x2e, r24	; 46
    14a8:	0d b4       	in	r0, 0x2d	; 45
    14aa:	07 fe       	sbrs	r0, 7
    14ac:	fd cf       	rjmp	.-6      	; 0x14a8 <rf_polling_rx_packet+0x160>
    14ae:	40 9a       	sbi	0x08, 0	; 8
    14b0:	80 91 b3 05 	lds	r24, 0x05B3
    14b4:	90 91 b4 05 	lds	r25, 0x05B4
    14b8:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    14bc:	8d ef       	ldi	r24, 0xFD	; 253
    14be:	9f ef       	ldi	r25, 0xFF	; 255
    14c0:	91 c1       	rjmp	.+802    	; 0x17e4 <rf_polling_rx_packet+0x49c>
    14c2:	e0 91 b8 05 	lds	r30, 0x05B8
    14c6:	f0 91 b9 05 	lds	r31, 0x05B9
    14ca:	4c 50       	subi	r20, 0x0C	; 12
    14cc:	43 83       	std	Z+3, r20	; 0x03
    14ce:	40 98       	cbi	0x08, 0	; 8
    14d0:	8f e7       	ldi	r24, 0x7F	; 127
    14d2:	8e bd       	out	0x2e, r24	; 46
    14d4:	0d b4       	in	r0, 0x2d	; 45
    14d6:	07 fe       	sbrs	r0, 7
    14d8:	fd cf       	rjmp	.-6      	; 0x14d4 <rf_polling_rx_packet+0x18c>
    14da:	fe 01       	movw	r30, r28
    14dc:	31 96       	adiw	r30, 0x01	; 1
    14de:	9e 01       	movw	r18, r28
    14e0:	2d 5f       	subi	r18, 0xFD	; 253
    14e2:	3f 4f       	sbci	r19, 0xFF	; 255
    14e4:	1e bc       	out	0x2e, r1	; 46
    14e6:	0d b4       	in	r0, 0x2d	; 45
    14e8:	07 fe       	sbrs	r0, 7
    14ea:	fd cf       	rjmp	.-6      	; 0x14e6 <rf_polling_rx_packet+0x19e>
    14ec:	8e b5       	in	r24, 0x2e	; 46
    14ee:	81 93       	st	Z+, r24
    14f0:	e2 17       	cp	r30, r18
    14f2:	f3 07       	cpc	r31, r19
    14f4:	b9 f7       	brne	.-18     	; 0x14e4 <rf_polling_rx_packet+0x19c>
    14f6:	40 9a       	sbi	0x08, 0	; 8
    14f8:	e0 91 b8 05 	lds	r30, 0x05B8
    14fc:	f0 91 b9 05 	lds	r31, 0x05B9
    1500:	89 81       	ldd	r24, Y+1	; 0x01
    1502:	9a 81       	ldd	r25, Y+2	; 0x02
    1504:	b5 e0       	ldi	r27, 0x05	; 5
    1506:	96 95       	lsr	r25
    1508:	87 95       	ror	r24
    150a:	ba 95       	dec	r27
    150c:	e1 f7       	brne	.-8      	; 0x1506 <rf_polling_rx_packet+0x1be>
    150e:	81 70       	andi	r24, 0x01	; 1
    1510:	87 83       	std	Z+7, r24	; 0x07
    1512:	40 98       	cbi	0x08, 0	; 8
    1514:	8f e7       	ldi	r24, 0x7F	; 127
    1516:	8e bd       	out	0x2e, r24	; 46
    1518:	0d b4       	in	r0, 0x2d	; 45
    151a:	07 fe       	sbrs	r0, 7
    151c:	fd cf       	rjmp	.-6      	; 0x1518 <rf_polling_rx_packet+0x1d0>
    151e:	1e bc       	out	0x2e, r1	; 46
    1520:	0d b4       	in	r0, 0x2d	; 45
    1522:	07 fe       	sbrs	r0, 7
    1524:	fd cf       	rjmp	.-6      	; 0x1520 <rf_polling_rx_packet+0x1d8>
    1526:	e0 91 b8 05 	lds	r30, 0x05B8
    152a:	f0 91 b9 05 	lds	r31, 0x05B9
    152e:	8e b5       	in	r24, 0x2e	; 46
    1530:	80 83       	st	Z, r24
    1532:	40 9a       	sbi	0x08, 0	; 8
    1534:	40 98       	cbi	0x08, 0	; 8
    1536:	8f e7       	ldi	r24, 0x7F	; 127
    1538:	8e bd       	out	0x2e, r24	; 46
    153a:	0d b4       	in	r0, 0x2d	; 45
    153c:	07 fe       	sbrs	r0, 7
    153e:	fd cf       	rjmp	.-6      	; 0x153a <rf_polling_rx_packet+0x1f2>
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	07 c0       	rjmp	.+14     	; 0x1552 <rf_polling_rx_packet+0x20a>
    1544:	1e bc       	out	0x2e, r1	; 46
    1546:	0d b4       	in	r0, 0x2d	; 45
    1548:	07 fe       	sbrs	r0, 7
    154a:	fd cf       	rjmp	.-6      	; 0x1546 <rf_polling_rx_packet+0x1fe>
    154c:	8f 5f       	subi	r24, 0xFF	; 255
    154e:	84 30       	cpi	r24, 0x04	; 4
    1550:	11 f0       	breq	.+4      	; 0x1556 <rf_polling_rx_packet+0x20e>
    1552:	31 99       	sbic	0x06, 1	; 6
    1554:	f7 cf       	rjmp	.-18     	; 0x1544 <rf_polling_rx_packet+0x1fc>
    1556:	40 9a       	sbi	0x08, 0	; 8
    1558:	40 98       	cbi	0x08, 0	; 8
    155a:	8f e7       	ldi	r24, 0x7F	; 127
    155c:	8e bd       	out	0x2e, r24	; 46
    155e:	0d b4       	in	r0, 0x2d	; 45
    1560:	07 fe       	sbrs	r0, 7
    1562:	fd cf       	rjmp	.-6      	; 0x155e <rf_polling_rx_packet+0x216>
    1564:	20 e0       	ldi	r18, 0x00	; 0
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	1e bc       	out	0x2e, r1	; 46
    156a:	0d b4       	in	r0, 0x2d	; 45
    156c:	07 fe       	sbrs	r0, 7
    156e:	fd cf       	rjmp	.-6      	; 0x156a <rf_polling_rx_packet+0x222>
    1570:	e0 91 b8 05 	lds	r30, 0x05B8
    1574:	f0 91 b9 05 	lds	r31, 0x05B9
    1578:	e2 0f       	add	r30, r18
    157a:	f3 1f       	adc	r31, r19
    157c:	8e b5       	in	r24, 0x2e	; 46
    157e:	81 83       	std	Z+1, r24	; 0x01
    1580:	2f 5f       	subi	r18, 0xFF	; 255
    1582:	3f 4f       	sbci	r19, 0xFF	; 255
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	79 f7       	brne	.-34     	; 0x1568 <rf_polling_rx_packet+0x220>
    158a:	40 9a       	sbi	0x08, 0	; 8
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	9a 81       	ldd	r25, Y+2	; 0x02
    1590:	83 ff       	sbrs	r24, 3
    1592:	56 c0       	rjmp	.+172    	; 0x1640 <rf_polling_rx_packet+0x2f8>
    1594:	40 98       	cbi	0x08, 0	; 8
    1596:	8f e7       	ldi	r24, 0x7F	; 127
    1598:	8e bd       	out	0x2e, r24	; 46
    159a:	0d b4       	in	r0, 0x2d	; 45
    159c:	07 fe       	sbrs	r0, 7
    159e:	fd cf       	rjmp	.-6      	; 0x159a <rf_polling_rx_packet+0x252>
    15a0:	ef ea       	ldi	r30, 0xAF	; 175
    15a2:	f5 e0       	ldi	r31, 0x05	; 5
    15a4:	1e bc       	out	0x2e, r1	; 46
    15a6:	0d b4       	in	r0, 0x2d	; 45
    15a8:	07 fe       	sbrs	r0, 7
    15aa:	fd cf       	rjmp	.-6      	; 0x15a6 <rf_polling_rx_packet+0x25e>
    15ac:	8e b5       	in	r24, 0x2e	; 46
    15ae:	81 93       	st	Z+, r24
    15b0:	85 e0       	ldi	r24, 0x05	; 5
    15b2:	e3 3b       	cpi	r30, 0xB3	; 179
    15b4:	f8 07       	cpc	r31, r24
    15b6:	b1 f7       	brne	.-20     	; 0x15a4 <rf_polling_rx_packet+0x25c>
    15b8:	40 9a       	sbi	0x08, 0	; 8
    15ba:	40 98       	cbi	0x08, 0	; 8
    15bc:	89 e9       	ldi	r24, 0x99	; 153
    15be:	8e bd       	out	0x2e, r24	; 46
    15c0:	0d b4       	in	r0, 0x2d	; 45
    15c2:	07 fe       	sbrs	r0, 7
    15c4:	fd cf       	rjmp	.-6      	; 0x15c0 <rf_polling_rx_packet+0x278>
    15c6:	80 e8       	ldi	r24, 0x80	; 128
    15c8:	8e bd       	out	0x2e, r24	; 46
    15ca:	0d b4       	in	r0, 0x2d	; 45
    15cc:	07 fe       	sbrs	r0, 7
    15ce:	fd cf       	rjmp	.-6      	; 0x15ca <rf_polling_rx_packet+0x282>
    15d0:	92 e0       	ldi	r25, 0x02	; 2
    15d2:	91 50       	subi	r25, 0x01	; 1
    15d4:	e9 2f       	mov	r30, r25
    15d6:	ff 27       	eor	r31, r31
    15d8:	e1 55       	subi	r30, 0x51	; 81
    15da:	fa 4f       	sbci	r31, 0xFA	; 250
    15dc:	80 81       	ld	r24, Z
    15de:	8e bd       	out	0x2e, r24	; 46
    15e0:	0d b4       	in	r0, 0x2d	; 45
    15e2:	07 fe       	sbrs	r0, 7
    15e4:	fd cf       	rjmp	.-6      	; 0x15e0 <rf_polling_rx_packet+0x298>
    15e6:	99 23       	and	r25, r25
    15e8:	a1 f7       	brne	.-24     	; 0x15d2 <rf_polling_rx_packet+0x28a>
    15ea:	40 9a       	sbi	0x08, 0	; 8
    15ec:	40 98       	cbi	0x08, 0	; 8
    15ee:	8b e9       	ldi	r24, 0x9B	; 155
    15f0:	8e bd       	out	0x2e, r24	; 46
    15f2:	0d b4       	in	r0, 0x2d	; 45
    15f4:	07 fe       	sbrs	r0, 7
    15f6:	fd cf       	rjmp	.-6      	; 0x15f2 <rf_polling_rx_packet+0x2aa>
    15f8:	80 e8       	ldi	r24, 0x80	; 128
    15fa:	8e bd       	out	0x2e, r24	; 46
    15fc:	0d b4       	in	r0, 0x2d	; 45
    15fe:	07 fe       	sbrs	r0, 7
    1600:	fd cf       	rjmp	.-6      	; 0x15fc <rf_polling_rx_packet+0x2b4>
    1602:	92 e0       	ldi	r25, 0x02	; 2
    1604:	91 50       	subi	r25, 0x01	; 1
    1606:	e9 2f       	mov	r30, r25
    1608:	ff 27       	eor	r31, r31
    160a:	ef 54       	subi	r30, 0x4F	; 79
    160c:	fa 4f       	sbci	r31, 0xFA	; 250
    160e:	80 81       	ld	r24, Z
    1610:	8e bd       	out	0x2e, r24	; 46
    1612:	0d b4       	in	r0, 0x2d	; 45
    1614:	07 fe       	sbrs	r0, 7
    1616:	fd cf       	rjmp	.-6      	; 0x1612 <rf_polling_rx_packet+0x2ca>
    1618:	99 23       	and	r25, r25
    161a:	a1 f7       	brne	.-24     	; 0x1604 <rf_polling_rx_packet+0x2bc>
    161c:	40 9a       	sbi	0x08, 0	; 8
    161e:	40 98       	cbi	0x08, 0	; 8
    1620:	8c e0       	ldi	r24, 0x0C	; 12
    1622:	8e bd       	out	0x2e, r24	; 46
    1624:	0d b4       	in	r0, 0x2d	; 45
    1626:	07 fe       	sbrs	r0, 7
    1628:	fd cf       	rjmp	.-6      	; 0x1624 <rf_polling_rx_packet+0x2dc>
    162a:	40 9a       	sbi	0x08, 0	; 8
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	80 93 c4 05 	sts	0x05C4, r24
    1632:	e0 91 b8 05 	lds	r30, 0x05B8
    1636:	f0 91 b9 05 	lds	r31, 0x05B9
    163a:	83 81       	ldd	r24, Z+3	; 0x03
    163c:	84 50       	subi	r24, 0x04	; 4
    163e:	83 83       	std	Z+3, r24	; 0x03
    1640:	40 98       	cbi	0x08, 0	; 8
    1642:	8f e7       	ldi	r24, 0x7F	; 127
    1644:	8e bd       	out	0x2e, r24	; 46
    1646:	0d b4       	in	r0, 0x2d	; 45
    1648:	07 fe       	sbrs	r0, 7
    164a:	fd cf       	rjmp	.-6      	; 0x1646 <rf_polling_rx_packet+0x2fe>
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	11 c0       	rjmp	.+34     	; 0x1674 <rf_polling_rx_packet+0x32c>
    1652:	1e bc       	out	0x2e, r1	; 46
    1654:	0d b4       	in	r0, 0x2d	; 45
    1656:	07 fe       	sbrs	r0, 7
    1658:	fd cf       	rjmp	.-6      	; 0x1654 <rf_polling_rx_packet+0x30c>
    165a:	e0 91 b8 05 	lds	r30, 0x05B8
    165e:	f0 91 b9 05 	lds	r31, 0x05B9
    1662:	05 80       	ldd	r0, Z+5	; 0x05
    1664:	f6 81       	ldd	r31, Z+6	; 0x06
    1666:	e0 2d       	mov	r30, r0
    1668:	e6 0f       	add	r30, r22
    166a:	f1 1d       	adc	r31, r1
    166c:	8e b5       	in	r24, 0x2e	; 46
    166e:	80 83       	st	Z, r24
    1670:	4f 5f       	subi	r20, 0xFF	; 255
    1672:	5f 4f       	sbci	r21, 0xFF	; 255
    1674:	64 2f       	mov	r22, r20
    1676:	e0 91 b8 05 	lds	r30, 0x05B8
    167a:	f0 91 b9 05 	lds	r31, 0x05B9
    167e:	24 2f       	mov	r18, r20
    1680:	33 27       	eor	r19, r19
    1682:	83 81       	ldd	r24, Z+3	; 0x03
    1684:	99 27       	eor	r25, r25
    1686:	87 fd       	sbrc	r24, 7
    1688:	90 95       	com	r25
    168a:	28 17       	cp	r18, r24
    168c:	39 07       	cpc	r19, r25
    168e:	0c f3       	brlt	.-62     	; 0x1652 <rf_polling_rx_packet+0x30a>
    1690:	40 9a       	sbi	0x08, 0	; 8
    1692:	40 98       	cbi	0x08, 0	; 8
    1694:	8f e7       	ldi	r24, 0x7F	; 127
    1696:	8e bd       	out	0x2e, r24	; 46
    1698:	0d b4       	in	r0, 0x2d	; 45
    169a:	07 fc       	sbrc	r0, 7
    169c:	0a c0       	rjmp	.+20     	; 0x16b2 <rf_polling_rx_packet+0x36a>
    169e:	fc cf       	rjmp	.-8      	; 0x1698 <rf_polling_rx_packet+0x350>
    16a0:	0d b4       	in	r0, 0x2d	; 45
    16a2:	07 fe       	sbrs	r0, 7
    16a4:	fd cf       	rjmp	.-6      	; 0x16a0 <rf_polling_rx_packet+0x358>
    16a6:	5e b5       	in	r21, 0x2e	; 46
    16a8:	40 9a       	sbi	0x08, 0	; 8
    16aa:	40 98       	cbi	0x08, 0	; 8
    16ac:	8f e7       	ldi	r24, 0x7F	; 127
    16ae:	8e bd       	out	0x2e, r24	; 46
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <rf_polling_rx_packet+0x36e>
    16b2:	1e bc       	out	0x2e, r1	; 46
    16b4:	f5 cf       	rjmp	.-22     	; 0x16a0 <rf_polling_rx_packet+0x358>
    16b6:	0d b4       	in	r0, 0x2d	; 45
    16b8:	07 fe       	sbrs	r0, 7
    16ba:	fd cf       	rjmp	.-6      	; 0x16b6 <rf_polling_rx_packet+0x36e>
    16bc:	fe 01       	movw	r30, r28
    16be:	33 96       	adiw	r30, 0x03	; 3
    16c0:	9e 01       	movw	r18, r28
    16c2:	2b 5f       	subi	r18, 0xFB	; 251
    16c4:	3f 4f       	sbci	r19, 0xFF	; 255
    16c6:	1e bc       	out	0x2e, r1	; 46
    16c8:	0d b4       	in	r0, 0x2d	; 45
    16ca:	07 fe       	sbrs	r0, 7
    16cc:	fd cf       	rjmp	.-6      	; 0x16c8 <rf_polling_rx_packet+0x380>
    16ce:	8e b5       	in	r24, 0x2e	; 46
    16d0:	81 93       	st	Z+, r24
    16d2:	e2 17       	cp	r30, r18
    16d4:	f3 07       	cpc	r31, r19
    16d6:	b9 f7       	brne	.-18     	; 0x16c6 <rf_polling_rx_packet+0x37e>
    16d8:	40 9a       	sbi	0x08, 0	; 8
    16da:	e0 91 b8 05 	lds	r30, 0x05B8
    16de:	f0 91 b9 05 	lds	r31, 0x05B9
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	80 87       	std	Z+8, r24	; 0x08
    16e6:	40 e0       	ldi	r20, 0x00	; 0
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	0a c0       	rjmp	.+20     	; 0x1702 <rf_polling_rx_packet+0x3ba>
    16ee:	e0 91 b8 05 	lds	r30, 0x05B8
    16f2:	f0 91 b9 05 	lds	r31, 0x05B9
    16f6:	85 81       	ldd	r24, Z+5	; 0x05
    16f8:	96 81       	ldd	r25, Z+6	; 0x06
    16fa:	a8 0f       	add	r26, r24
    16fc:	b9 1f       	adc	r27, r25
    16fe:	8c 91       	ld	r24, X
    1700:	48 0f       	add	r20, r24
    1702:	82 2f       	mov	r24, r18
    1704:	e0 91 b8 05 	lds	r30, 0x05B8
    1708:	f0 91 b9 05 	lds	r31, 0x05B9
    170c:	2f 5f       	subi	r18, 0xFF	; 255
    170e:	3f 4f       	sbci	r19, 0xFF	; 255
    1710:	a8 2f       	mov	r26, r24
    1712:	bb 27       	eor	r27, r27
    1714:	83 81       	ldd	r24, Z+3	; 0x03
    1716:	99 27       	eor	r25, r25
    1718:	87 fd       	sbrc	r24, 7
    171a:	90 95       	com	r25
    171c:	a8 17       	cp	r26, r24
    171e:	b9 07       	cpc	r27, r25
    1720:	34 f3       	brlt	.-52     	; 0x16ee <rf_polling_rx_packet+0x3a6>
    1722:	45 17       	cp	r20, r21
    1724:	19 f1       	breq	.+70     	; 0x176c <rf_polling_rx_packet+0x424>
    1726:	40 98       	cbi	0x08, 0	; 8
    1728:	8f e7       	ldi	r24, 0x7F	; 127
    172a:	8e bd       	out	0x2e, r24	; 46
    172c:	0d b4       	in	r0, 0x2d	; 45
    172e:	07 fe       	sbrs	r0, 7
    1730:	fd cf       	rjmp	.-6      	; 0x172c <rf_polling_rx_packet+0x3e4>
    1732:	1e bc       	out	0x2e, r1	; 46
    1734:	0d b4       	in	r0, 0x2d	; 45
    1736:	07 fe       	sbrs	r0, 7
    1738:	fd cf       	rjmp	.-6      	; 0x1734 <rf_polling_rx_packet+0x3ec>
    173a:	8e b5       	in	r24, 0x2e	; 46
    173c:	40 9a       	sbi	0x08, 0	; 8
    173e:	40 98       	cbi	0x08, 0	; 8
    1740:	88 e0       	ldi	r24, 0x08	; 8
    1742:	8e bd       	out	0x2e, r24	; 46
    1744:	0d b4       	in	r0, 0x2d	; 45
    1746:	07 fe       	sbrs	r0, 7
    1748:	fd cf       	rjmp	.-6      	; 0x1744 <rf_polling_rx_packet+0x3fc>
    174a:	40 9a       	sbi	0x08, 0	; 8
    174c:	40 98       	cbi	0x08, 0	; 8
    174e:	88 e0       	ldi	r24, 0x08	; 8
    1750:	8e bd       	out	0x2e, r24	; 46
    1752:	0d b4       	in	r0, 0x2d	; 45
    1754:	07 fe       	sbrs	r0, 7
    1756:	fd cf       	rjmp	.-6      	; 0x1752 <rf_polling_rx_packet+0x40a>
    1758:	40 9a       	sbi	0x08, 0	; 8
    175a:	80 91 b3 05 	lds	r24, 0x05B3
    175e:	90 91 b4 05 	lds	r25, 0x05B4
    1762:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    1766:	8c ef       	ldi	r24, 0xFC	; 252
    1768:	9f ef       	ldi	r25, 0xFF	; 255
    176a:	3c c0       	rjmp	.+120    	; 0x17e4 <rf_polling_rx_packet+0x49c>
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	87 ff       	sbrs	r24, 7
    1770:	0e c0       	rjmp	.+28     	; 0x178e <rf_polling_rx_packet+0x446>
    1772:	80 91 c9 05 	lds	r24, 0x05C9
    1776:	8f 5f       	subi	r24, 0xFF	; 255
    1778:	80 93 c9 05 	sts	0x05C9, r24
    177c:	80 91 b3 05 	lds	r24, 0x05B3
    1780:	90 91 b4 05 	lds	r25, 0x05B4
    1784:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	2b c0       	rjmp	.+86     	; 0x17e4 <rf_polling_rx_packet+0x49c>
    178e:	40 98       	cbi	0x08, 0	; 8
    1790:	8f e7       	ldi	r24, 0x7F	; 127
    1792:	8e bd       	out	0x2e, r24	; 46
    1794:	0d b4       	in	r0, 0x2d	; 45
    1796:	07 fe       	sbrs	r0, 7
    1798:	fd cf       	rjmp	.-6      	; 0x1794 <rf_polling_rx_packet+0x44c>
    179a:	1e bc       	out	0x2e, r1	; 46
    179c:	0d b4       	in	r0, 0x2d	; 45
    179e:	07 fe       	sbrs	r0, 7
    17a0:	fd cf       	rjmp	.-6      	; 0x179c <rf_polling_rx_packet+0x454>
    17a2:	8e b5       	in	r24, 0x2e	; 46
    17a4:	40 9a       	sbi	0x08, 0	; 8
    17a6:	40 98       	cbi	0x08, 0	; 8
    17a8:	88 e0       	ldi	r24, 0x08	; 8
    17aa:	8e bd       	out	0x2e, r24	; 46
    17ac:	0d b4       	in	r0, 0x2d	; 45
    17ae:	07 fe       	sbrs	r0, 7
    17b0:	fd cf       	rjmp	.-6      	; 0x17ac <rf_polling_rx_packet+0x464>
    17b2:	40 9a       	sbi	0x08, 0	; 8
    17b4:	40 98       	cbi	0x08, 0	; 8
    17b6:	88 e0       	ldi	r24, 0x08	; 8
    17b8:	8e bd       	out	0x2e, r24	; 46
    17ba:	0d b4       	in	r0, 0x2d	; 45
    17bc:	07 fe       	sbrs	r0, 7
    17be:	fd cf       	rjmp	.-6      	; 0x17ba <rf_polling_rx_packet+0x472>
    17c0:	40 9a       	sbi	0x08, 0	; 8
    17c2:	80 91 b3 05 	lds	r24, 0x05B3
    17c6:	90 91 b4 05 	lds	r25, 0x05B4
    17ca:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    17ce:	8b ef       	ldi	r24, 0xFB	; 251
    17d0:	9f ef       	ldi	r25, 0xFF	; 255
    17d2:	08 c0       	rjmp	.+16     	; 0x17e4 <rf_polling_rx_packet+0x49c>
    17d4:	80 91 b3 05 	lds	r24, 0x05B3
    17d8:	90 91 b4 05 	lds	r25, 0x05B4
    17dc:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	24 96       	adiw	r28, 0x04	; 4
    17e6:	0f b6       	in	r0, 0x3f	; 63
    17e8:	f8 94       	cli
    17ea:	de bf       	out	0x3e, r29	; 62
    17ec:	0f be       	out	0x3f, r0	; 63
    17ee:	cd bf       	out	0x3d, r28	; 61
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	08 95       	ret

000017f6 <rf_rx_off>:
    17f6:	80 91 b3 05 	lds	r24, 0x05B3
    17fa:	90 91 b4 05 	lds	r25, 0x05B4
    17fe:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <nrk_sem_pend>
    1802:	10 92 c0 05 	sts	0x05C0, r1
    1806:	40 98       	cbi	0x08, 0	; 8
    1808:	86 e0       	ldi	r24, 0x06	; 6
    180a:	8e bd       	out	0x2e, r24	; 46
    180c:	0d b4       	in	r0, 0x2d	; 45
    180e:	07 fe       	sbrs	r0, 7
    1810:	fd cf       	rjmp	.-6      	; 0x180c <rf_rx_off+0x16>
    1812:	40 9a       	sbi	0x08, 0	; 8
    1814:	10 92 c9 05 	sts	0x05C9, r1
    1818:	80 91 b3 05 	lds	r24, 0x05B3
    181c:	90 91 b4 05 	lds	r25, 0x05B4
    1820:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    1824:	08 95       	ret

00001826 <rf_polling_rx_on>:
    1826:	80 91 b3 05 	lds	r24, 0x05B3
    182a:	90 91 b4 05 	lds	r25, 0x05B4
    182e:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <nrk_sem_pend>
    1832:	81 e0       	ldi	r24, 0x01	; 1
    1834:	80 93 c0 05 	sts	0x05C0, r24
    1838:	40 98       	cbi	0x08, 0	; 8
    183a:	83 e0       	ldi	r24, 0x03	; 3
    183c:	8e bd       	out	0x2e, r24	; 46
    183e:	0d b4       	in	r0, 0x2d	; 45
    1840:	07 fe       	sbrs	r0, 7
    1842:	fd cf       	rjmp	.-6      	; 0x183e <rf_polling_rx_on+0x18>
    1844:	40 9a       	sbi	0x08, 0	; 8
    1846:	40 98       	cbi	0x08, 0	; 8
    1848:	88 e0       	ldi	r24, 0x08	; 8
    184a:	8e bd       	out	0x2e, r24	; 46
    184c:	0d b4       	in	r0, 0x2d	; 45
    184e:	07 fe       	sbrs	r0, 7
    1850:	fd cf       	rjmp	.-6      	; 0x184c <rf_polling_rx_on+0x26>
    1852:	40 9a       	sbi	0x08, 0	; 8
    1854:	10 92 c9 05 	sts	0x05C9, r1
    1858:	80 91 b3 05 	lds	r24, 0x05B3
    185c:	90 91 b4 05 	lds	r25, 0x05B4
    1860:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    1864:	08 95       	ret

00001866 <rf_rx_on>:
    1866:	80 91 b3 05 	lds	r24, 0x05B3
    186a:	90 91 b4 05 	lds	r25, 0x05B4
    186e:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <nrk_sem_pend>
    1872:	81 e0       	ldi	r24, 0x01	; 1
    1874:	80 93 c0 05 	sts	0x05C0, r24
    1878:	40 98       	cbi	0x08, 0	; 8
    187a:	83 e0       	ldi	r24, 0x03	; 3
    187c:	8e bd       	out	0x2e, r24	; 46
    187e:	0d b4       	in	r0, 0x2d	; 45
    1880:	07 fe       	sbrs	r0, 7
    1882:	fd cf       	rjmp	.-6      	; 0x187e <rf_rx_on+0x18>
    1884:	40 9a       	sbi	0x08, 0	; 8
    1886:	40 98       	cbi	0x08, 0	; 8
    1888:	88 e0       	ldi	r24, 0x08	; 8
    188a:	8e bd       	out	0x2e, r24	; 46
    188c:	0d b4       	in	r0, 0x2d	; 45
    188e:	07 fe       	sbrs	r0, 7
    1890:	fd cf       	rjmp	.-6      	; 0x188c <rf_rx_on+0x26>
    1892:	40 9a       	sbi	0x08, 0	; 8
    1894:	10 92 c9 05 	sts	0x05C9, r1
    1898:	80 91 b3 05 	lds	r24, 0x05B3
    189c:	90 91 b4 05 	lds	r25, 0x05B4
    18a0:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    18a4:	08 95       	ret

000018a6 <rf_tx_power>:
		// Get the RX packet 
		//nrk_led_set (ORANGE_LED);
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
		
		printf ("%c=%c\r\n", rx_buf[0], rx_buf[2]);
		
    18a6:	1f 93       	push	r17
    18a8:	18 2f       	mov	r17, r24
		switch(rx_buf[0]) {
			case 'A': // ~0xxx
				nrk_led_clr(RED_LED);
				nrk_gpio_set(NRK_DEBUG_3);
    18aa:	80 91 b3 05 	lds	r24, 0x05B3
    18ae:	90 91 b4 05 	lds	r25, 0x05B4
    18b2:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <nrk_sem_pend>
				break;
			case 'B': // ~1xxx
				nrk_led_set(RED_LED);
    18b6:	21 2f       	mov	r18, r17
    18b8:	33 27       	eor	r19, r19
    18ba:	2f 71       	andi	r18, 0x1F	; 31
    18bc:	30 70       	andi	r19, 0x00	; 0
    18be:	20 6e       	ori	r18, 0xE0	; 224
    18c0:	30 6a       	ori	r19, 0xA0	; 160
				nrk_gpio_clr(NRK_DEBUG_3);
    18c2:	40 98       	cbi	0x08, 0	; 8
    18c4:	85 e1       	ldi	r24, 0x15	; 21
    18c6:	8e bd       	out	0x2e, r24	; 46
    18c8:	0d b4       	in	r0, 0x2d	; 45
    18ca:	07 fe       	sbrs	r0, 7
    18cc:	fd cf       	rjmp	.-6      	; 0x18c8 <rf_tx_power+0x22>
    18ce:	83 2f       	mov	r24, r19
    18d0:	99 27       	eor	r25, r25
    18d2:	8e bd       	out	0x2e, r24	; 46
    18d4:	0d b4       	in	r0, 0x2d	; 45
    18d6:	07 fe       	sbrs	r0, 7
    18d8:	fd cf       	rjmp	.-6      	; 0x18d4 <rf_tx_power+0x2e>
    18da:	2e bd       	out	0x2e, r18	; 46
    18dc:	0d b4       	in	r0, 0x2d	; 45
    18de:	07 fe       	sbrs	r0, 7
    18e0:	fd cf       	rjmp	.-6      	; 0x18dc <rf_tx_power+0x36>
    18e2:	40 9a       	sbi	0x08, 0	; 8
				break;
		}
    18e4:	80 91 b3 05 	lds	r24, 0x05B3
    18e8:	90 91 b4 05 	lds	r25, 0x05B4
    18ec:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    18f0:	1f 91       	pop	r17
    18f2:	08 95       	ret

000018f4 <rf_tx_packet>:
    18f4:	ef 92       	push	r14
    18f6:	ff 92       	push	r15
    18f8:	0f 93       	push	r16
    18fa:	1f 93       	push	r17
    18fc:	cf 93       	push	r28
    18fe:	df 93       	push	r29
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	22 97       	sbiw	r28, 0x02	; 2
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	8c 01       	movw	r16, r24
    1912:	80 91 b3 05 	lds	r24, 0x05B3
    1916:	90 91 b4 05 	lds	r25, 0x05B4
    191a:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <nrk_sem_pend>
    191e:	50 91 b5 05 	lds	r21, 0x05B5
    1922:	55 23       	and	r21, r21
    1924:	39 f0       	breq	.+14     	; 0x1934 <rf_tx_packet+0x40>
    1926:	40 98       	cbi	0x08, 0	; 8
    1928:	8d e0       	ldi	r24, 0x0D	; 13
    192a:	8e bd       	out	0x2e, r24	; 46
    192c:	0d b4       	in	r0, 0x2d	; 45
    192e:	07 fe       	sbrs	r0, 7
    1930:	fd cf       	rjmp	.-6      	; 0x192c <rf_tx_packet+0x38>
    1932:	40 9a       	sbi	0x08, 0	; 8
    1934:	f8 01       	movw	r30, r16
    1936:	42 81       	ldd	r20, Z+2	; 0x02
    1938:	64 2f       	mov	r22, r20
    193a:	77 27       	eor	r23, r23
    193c:	67 fd       	sbrc	r22, 7
    193e:	70 95       	com	r23
    1940:	a0 e0       	ldi	r26, 0x00	; 0
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	08 c0       	rjmp	.+16     	; 0x1958 <rf_tx_packet+0x64>
    1948:	f8 01       	movw	r30, r16
    194a:	83 81       	ldd	r24, Z+3	; 0x03
    194c:	94 81       	ldd	r25, Z+4	; 0x04
    194e:	e8 0e       	add	r14, r24
    1950:	f9 1e       	adc	r15, r25
    1952:	f7 01       	movw	r30, r14
    1954:	80 81       	ld	r24, Z
    1956:	a8 0f       	add	r26, r24
    1958:	82 2f       	mov	r24, r18
    195a:	2f 5f       	subi	r18, 0xFF	; 255
    195c:	3f 4f       	sbci	r19, 0xFF	; 255
    195e:	e8 2e       	mov	r14, r24
    1960:	ff 24       	eor	r15, r15
    1962:	e6 16       	cp	r14, r22
    1964:	f7 06       	cpc	r15, r23
    1966:	84 f3       	brlt	.-32     	; 0x1948 <rf_tx_packet+0x54>
    1968:	94 2f       	mov	r25, r20
    196a:	94 5f       	subi	r25, 0xF4	; 244
    196c:	51 11       	cpse	r21, r1
    196e:	9c 5f       	subi	r25, 0xFC	; 252
    1970:	67 99       	sbic	0x0c, 7	; 12
    1972:	fe cf       	rjmp	.-4      	; 0x1970 <rf_tx_packet+0x7c>
    1974:	4e 99       	sbic	0x09, 6	; 9
    1976:	fc cf       	rjmp	.-8      	; 0x1970 <rf_tx_packet+0x7c>
    1978:	f8 94       	cli
    197a:	40 98       	cbi	0x08, 0	; 8
    197c:	89 e0       	ldi	r24, 0x09	; 9
    197e:	8e bd       	out	0x2e, r24	; 46
    1980:	0d b4       	in	r0, 0x2d	; 45
    1982:	07 fe       	sbrs	r0, 7
    1984:	fd cf       	rjmp	.-6      	; 0x1980 <rf_tx_packet+0x8c>
    1986:	40 9a       	sbi	0x08, 0	; 8
    1988:	40 98       	cbi	0x08, 0	; 8
    198a:	89 e0       	ldi	r24, 0x09	; 9
    198c:	8e bd       	out	0x2e, r24	; 46
    198e:	0d b4       	in	r0, 0x2d	; 45
    1990:	07 fe       	sbrs	r0, 7
    1992:	fd cf       	rjmp	.-6      	; 0x198e <rf_tx_packet+0x9a>
    1994:	40 9a       	sbi	0x08, 0	; 8
    1996:	40 98       	cbi	0x08, 0	; 8
    1998:	8e e3       	ldi	r24, 0x3E	; 62
    199a:	8e bd       	out	0x2e, r24	; 46
    199c:	0d b4       	in	r0, 0x2d	; 45
    199e:	07 fc       	sbrc	r0, 7
    19a0:	05 c0       	rjmp	.+10     	; 0x19ac <rf_tx_packet+0xb8>
    19a2:	fc cf       	rjmp	.-8      	; 0x199c <rf_tx_packet+0xa8>
    19a4:	0d b4       	in	r0, 0x2d	; 45
    19a6:	07 fc       	sbrc	r0, 7
    19a8:	30 c1       	rjmp	.+608    	; 0x1c0a <rf_tx_packet+0x316>
    19aa:	fc cf       	rjmp	.-8      	; 0x19a4 <rf_tx_packet+0xb0>
    19ac:	9e bd       	out	0x2e, r25	; 46
    19ae:	fa cf       	rjmp	.-12     	; 0x19a4 <rf_tx_packet+0xb0>
    19b0:	81 e6       	ldi	r24, 0x61	; 97
    19b2:	98 e8       	ldi	r25, 0x88	; 136
    19b4:	9a 83       	std	Y+2, r25	; 0x02
    19b6:	89 83       	std	Y+1, r24	; 0x01
    19b8:	55 23       	and	r21, r21
    19ba:	29 f0       	breq	.+10     	; 0x19c6 <rf_tx_packet+0xd2>
    19bc:	89 81       	ldd	r24, Y+1	; 0x01
    19be:	9a 81       	ldd	r25, Y+2	; 0x02
    19c0:	88 60       	ori	r24, 0x08	; 8
    19c2:	9a 83       	std	Y+2, r25	; 0x02
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	40 98       	cbi	0x08, 0	; 8
    19c8:	8e e3       	ldi	r24, 0x3E	; 62
    19ca:	8e bd       	out	0x2e, r24	; 46
    19cc:	0d b4       	in	r0, 0x2d	; 45
    19ce:	07 fe       	sbrs	r0, 7
    19d0:	fd cf       	rjmp	.-6      	; 0x19cc <rf_tx_packet+0xd8>
    19d2:	fe 01       	movw	r30, r28
    19d4:	31 96       	adiw	r30, 0x01	; 1
    19d6:	9e 01       	movw	r18, r28
    19d8:	2d 5f       	subi	r18, 0xFD	; 253
    19da:	3f 4f       	sbci	r19, 0xFF	; 255
    19dc:	80 81       	ld	r24, Z
    19de:	8e bd       	out	0x2e, r24	; 46
    19e0:	0d b4       	in	r0, 0x2d	; 45
    19e2:	07 fe       	sbrs	r0, 7
    19e4:	fd cf       	rjmp	.-6      	; 0x19e0 <rf_tx_packet+0xec>
    19e6:	31 96       	adiw	r30, 0x01	; 1
    19e8:	e2 17       	cp	r30, r18
    19ea:	f3 07       	cpc	r31, r19
    19ec:	b9 f7       	brne	.-18     	; 0x19dc <rf_tx_packet+0xe8>
    19ee:	40 9a       	sbi	0x08, 0	; 8
    19f0:	40 98       	cbi	0x08, 0	; 8
    19f2:	8e e3       	ldi	r24, 0x3E	; 62
    19f4:	8e bd       	out	0x2e, r24	; 46
    19f6:	0d b4       	in	r0, 0x2d	; 45
    19f8:	07 fc       	sbrc	r0, 7
    19fa:	05 c0       	rjmp	.+10     	; 0x1a06 <rf_tx_packet+0x112>
    19fc:	fc cf       	rjmp	.-8      	; 0x19f6 <rf_tx_packet+0x102>
    19fe:	0d b4       	in	r0, 0x2d	; 45
    1a00:	07 fc       	sbrc	r0, 7
    1a02:	0e c1       	rjmp	.+540    	; 0x1c20 <rf_tx_packet+0x32c>
    1a04:	fc cf       	rjmp	.-8      	; 0x19fe <rf_tx_packet+0x10a>
    1a06:	80 91 ba 05 	lds	r24, 0x05BA
    1a0a:	8e bd       	out	0x2e, r24	; 46
    1a0c:	f8 cf       	rjmp	.-16     	; 0x19fe <rf_tx_packet+0x10a>
    1a0e:	0d b4       	in	r0, 0x2d	; 45
    1a10:	07 fe       	sbrs	r0, 7
    1a12:	fd cf       	rjmp	.-6      	; 0x1a0e <rf_tx_packet+0x11a>
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	f9 01       	movw	r30, r18
    1a1a:	e4 54       	subi	r30, 0x44	; 68
    1a1c:	fa 4f       	sbci	r31, 0xFA	; 250
    1a1e:	80 81       	ld	r24, Z
    1a20:	8e bd       	out	0x2e, r24	; 46
    1a22:	0d b4       	in	r0, 0x2d	; 45
    1a24:	07 fe       	sbrs	r0, 7
    1a26:	fd cf       	rjmp	.-6      	; 0x1a22 <rf_tx_packet+0x12e>
    1a28:	2f 5f       	subi	r18, 0xFF	; 255
    1a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a2c:	22 30       	cpi	r18, 0x02	; 2
    1a2e:	31 05       	cpc	r19, r1
    1a30:	99 f7       	brne	.-26     	; 0x1a18 <rf_tx_packet+0x124>
    1a32:	40 9a       	sbi	0x08, 0	; 8
    1a34:	40 98       	cbi	0x08, 0	; 8
    1a36:	8e e3       	ldi	r24, 0x3E	; 62
    1a38:	8e bd       	out	0x2e, r24	; 46
    1a3a:	0d b4       	in	r0, 0x2d	; 45
    1a3c:	07 fe       	sbrs	r0, 7
    1a3e:	fd cf       	rjmp	.-6      	; 0x1a3a <rf_tx_packet+0x146>
    1a40:	20 e0       	ldi	r18, 0x00	; 0
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	f8 01       	movw	r30, r16
    1a46:	e2 0f       	add	r30, r18
    1a48:	f3 1f       	adc	r31, r19
    1a4a:	80 81       	ld	r24, Z
    1a4c:	8e bd       	out	0x2e, r24	; 46
    1a4e:	0d b4       	in	r0, 0x2d	; 45
    1a50:	07 fe       	sbrs	r0, 7
    1a52:	fd cf       	rjmp	.-6      	; 0x1a4e <rf_tx_packet+0x15a>
    1a54:	2f 5f       	subi	r18, 0xFF	; 255
    1a56:	3f 4f       	sbci	r19, 0xFF	; 255
    1a58:	22 30       	cpi	r18, 0x02	; 2
    1a5a:	31 05       	cpc	r19, r1
    1a5c:	99 f7       	brne	.-26     	; 0x1a44 <rf_tx_packet+0x150>
    1a5e:	40 9a       	sbi	0x08, 0	; 8
    1a60:	40 98       	cbi	0x08, 0	; 8
    1a62:	8e e3       	ldi	r24, 0x3E	; 62
    1a64:	8e bd       	out	0x2e, r24	; 46
    1a66:	0d b4       	in	r0, 0x2d	; 45
    1a68:	07 fe       	sbrs	r0, 7
    1a6a:	fd cf       	rjmp	.-6      	; 0x1a66 <rf_tx_packet+0x172>
    1a6c:	20 e0       	ldi	r18, 0x00	; 0
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	f9 01       	movw	r30, r18
    1a72:	e2 54       	subi	r30, 0x42	; 66
    1a74:	fa 4f       	sbci	r31, 0xFA	; 250
    1a76:	80 81       	ld	r24, Z
    1a78:	8e bd       	out	0x2e, r24	; 46
    1a7a:	0d b4       	in	r0, 0x2d	; 45
    1a7c:	07 fe       	sbrs	r0, 7
    1a7e:	fd cf       	rjmp	.-6      	; 0x1a7a <rf_tx_packet+0x186>
    1a80:	2f 5f       	subi	r18, 0xFF	; 255
    1a82:	3f 4f       	sbci	r19, 0xFF	; 255
    1a84:	22 30       	cpi	r18, 0x02	; 2
    1a86:	31 05       	cpc	r19, r1
    1a88:	99 f7       	brne	.-26     	; 0x1a70 <rf_tx_packet+0x17c>
    1a8a:	40 9a       	sbi	0x08, 0	; 8
    1a8c:	55 23       	and	r21, r21
    1a8e:	99 f0       	breq	.+38     	; 0x1ab6 <rf_tx_packet+0x1c2>
    1a90:	40 98       	cbi	0x08, 0	; 8
    1a92:	8e e3       	ldi	r24, 0x3E	; 62
    1a94:	8e bd       	out	0x2e, r24	; 46
    1a96:	0d b4       	in	r0, 0x2d	; 45
    1a98:	07 fe       	sbrs	r0, 7
    1a9a:	fd cf       	rjmp	.-6      	; 0x1a96 <rf_tx_packet+0x1a2>
    1a9c:	e5 ec       	ldi	r30, 0xC5	; 197
    1a9e:	f5 e0       	ldi	r31, 0x05	; 5
    1aa0:	80 81       	ld	r24, Z
    1aa2:	8e bd       	out	0x2e, r24	; 46
    1aa4:	0d b4       	in	r0, 0x2d	; 45
    1aa6:	07 fe       	sbrs	r0, 7
    1aa8:	fd cf       	rjmp	.-6      	; 0x1aa4 <rf_tx_packet+0x1b0>
    1aaa:	31 96       	adiw	r30, 0x01	; 1
    1aac:	85 e0       	ldi	r24, 0x05	; 5
    1aae:	e9 3c       	cpi	r30, 0xC9	; 201
    1ab0:	f8 07       	cpc	r31, r24
    1ab2:	b1 f7       	brne	.-20     	; 0x1aa0 <rf_tx_packet+0x1ac>
    1ab4:	40 9a       	sbi	0x08, 0	; 8
    1ab6:	40 98       	cbi	0x08, 0	; 8
    1ab8:	8e e3       	ldi	r24, 0x3E	; 62
    1aba:	8e bd       	out	0x2e, r24	; 46
    1abc:	0d b4       	in	r0, 0x2d	; 45
    1abe:	07 fe       	sbrs	r0, 7
    1ac0:	fd cf       	rjmp	.-6      	; 0x1abc <rf_tx_packet+0x1c8>
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	0d c0       	rjmp	.+26     	; 0x1ae2 <rf_tx_packet+0x1ee>
    1ac8:	f8 01       	movw	r30, r16
    1aca:	83 81       	ldd	r24, Z+3	; 0x03
    1acc:	94 81       	ldd	r25, Z+4	; 0x04
    1ace:	48 0f       	add	r20, r24
    1ad0:	59 1f       	adc	r21, r25
    1ad2:	fa 01       	movw	r30, r20
    1ad4:	80 81       	ld	r24, Z
    1ad6:	8e bd       	out	0x2e, r24	; 46
    1ad8:	0d b4       	in	r0, 0x2d	; 45
    1ada:	07 fe       	sbrs	r0, 7
    1adc:	fd cf       	rjmp	.-6      	; 0x1ad8 <rf_tx_packet+0x1e4>
    1ade:	2f 5f       	subi	r18, 0xFF	; 255
    1ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae2:	42 2f       	mov	r20, r18
    1ae4:	55 27       	eor	r21, r21
    1ae6:	46 17       	cp	r20, r22
    1ae8:	57 07       	cpc	r21, r23
    1aea:	74 f3       	brlt	.-36     	; 0x1ac8 <rf_tx_packet+0x1d4>
    1aec:	40 9a       	sbi	0x08, 0	; 8
    1aee:	40 98       	cbi	0x08, 0	; 8
    1af0:	8e e3       	ldi	r24, 0x3E	; 62
    1af2:	8e bd       	out	0x2e, r24	; 46
    1af4:	0d b4       	in	r0, 0x2d	; 45
    1af6:	07 fc       	sbrc	r0, 7
    1af8:	05 c0       	rjmp	.+10     	; 0x1b04 <rf_tx_packet+0x210>
    1afa:	fc cf       	rjmp	.-8      	; 0x1af4 <rf_tx_packet+0x200>
    1afc:	0d b4       	in	r0, 0x2d	; 45
    1afe:	07 fc       	sbrc	r0, 7
    1b00:	94 c0       	rjmp	.+296    	; 0x1c2a <rf_tx_packet+0x336>
    1b02:	fc cf       	rjmp	.-8      	; 0x1afc <rf_tx_packet+0x208>
    1b04:	ae bd       	out	0x2e, r26	; 46
    1b06:	fa cf       	rjmp	.-12     	; 0x1afc <rf_tx_packet+0x208>
    1b08:	80 91 c0 05 	lds	r24, 0x05C0
    1b0c:	88 23       	and	r24, r24
    1b0e:	39 f4       	brne	.+14     	; 0x1b1e <rf_tx_packet+0x22a>
    1b10:	40 98       	cbi	0x08, 0	; 8
    1b12:	83 e0       	ldi	r24, 0x03	; 3
    1b14:	8e bd       	out	0x2e, r24	; 46
    1b16:	0d b4       	in	r0, 0x2d	; 45
    1b18:	07 fe       	sbrs	r0, 7
    1b1a:	fd cf       	rjmp	.-6      	; 0x1b16 <rf_tx_packet+0x222>
    1b1c:	40 9a       	sbi	0x08, 0	; 8
    1b1e:	40 98       	cbi	0x08, 0	; 8
    1b20:	1e bc       	out	0x2e, r1	; 46
    1b22:	0d b4       	in	r0, 0x2d	; 45
    1b24:	07 fe       	sbrs	r0, 7
    1b26:	fd cf       	rjmp	.-6      	; 0x1b22 <rf_tx_packet+0x22e>
    1b28:	8e b5       	in	r24, 0x2e	; 46
    1b2a:	40 9a       	sbi	0x08, 0	; 8
    1b2c:	81 ff       	sbrs	r24, 1
    1b2e:	f7 cf       	rjmp	.-18     	; 0x1b1e <rf_tx_packet+0x22a>
    1b30:	00 e0       	ldi	r16, 0x00	; 0
    1b32:	40 98       	cbi	0x08, 0	; 8
    1b34:	85 e0       	ldi	r24, 0x05	; 5
    1b36:	8e bd       	out	0x2e, r24	; 46
    1b38:	0d b4       	in	r0, 0x2d	; 45
    1b3a:	07 fe       	sbrs	r0, 7
    1b3c:	fd cf       	rjmp	.-6      	; 0x1b38 <rf_tx_packet+0x244>
    1b3e:	40 9a       	sbi	0x08, 0	; 8
    1b40:	40 98       	cbi	0x08, 0	; 8
    1b42:	1e bc       	out	0x2e, r1	; 46
    1b44:	0d b4       	in	r0, 0x2d	; 45
    1b46:	07 fe       	sbrs	r0, 7
    1b48:	fd cf       	rjmp	.-6      	; 0x1b44 <rf_tx_packet+0x250>
    1b4a:	1e b5       	in	r17, 0x2e	; 46
    1b4c:	40 9a       	sbi	0x08, 0	; 8
    1b4e:	0f 5f       	subi	r16, 0xFF	; 255
    1b50:	05 36       	cpi	r16, 0x65	; 101
    1b52:	51 f4       	brne	.+20     	; 0x1b68 <rf_tx_packet+0x274>
    1b54:	78 94       	sei
    1b56:	80 91 b3 05 	lds	r24, 0x05B3
    1b5a:	90 91 b4 05 	lds	r25, 0x05B4
    1b5e:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	68 c0       	rjmp	.+208    	; 0x1c38 <rf_tx_packet+0x344>
    1b68:	84 e6       	ldi	r24, 0x64	; 100
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <halWait>
    1b70:	13 fd       	sbrc	r17, 3
    1b72:	08 c0       	rjmp	.+16     	; 0x1b84 <rf_tx_packet+0x290>
    1b74:	de cf       	rjmp	.-68     	; 0x1b32 <rf_tx_packet+0x23e>
    1b76:	40 98       	cbi	0x08, 0	; 8
    1b78:	84 e0       	ldi	r24, 0x04	; 4
    1b7a:	8e bd       	out	0x2e, r24	; 46
    1b7c:	0d b4       	in	r0, 0x2d	; 45
    1b7e:	07 fe       	sbrs	r0, 7
    1b80:	fd cf       	rjmp	.-6      	; 0x1b7c <rf_tx_packet+0x288>
    1b82:	40 9a       	sbi	0x08, 0	; 8
    1b84:	78 94       	sei
    1b86:	4e 9b       	sbis	0x09, 6	; 9
    1b88:	fe cf       	rjmp	.-4      	; 0x1b86 <rf_tx_packet+0x292>
    1b8a:	4e 99       	sbic	0x09, 6	; 9
    1b8c:	fe cf       	rjmp	.-4      	; 0x1b8a <rf_tx_packet+0x296>
    1b8e:	80 91 c3 05 	lds	r24, 0x05C3
    1b92:	88 23       	and	r24, r24
    1b94:	91 f0       	breq	.+36     	; 0x1bba <rf_tx_packet+0x2c6>
    1b96:	84 ea       	ldi	r24, 0xA4	; 164
    1b98:	92 e0       	ldi	r25, 0x02	; 2
    1b9a:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <halWait>
    1b9e:	31 9b       	sbis	0x06, 1	; 6
    1ba0:	0e c0       	rjmp	.+28     	; 0x1bbe <rf_tx_packet+0x2ca>
    1ba2:	40 98       	cbi	0x08, 0	; 8
    1ba4:	8f e7       	ldi	r24, 0x7F	; 127
    1ba6:	8e bd       	out	0x2e, r24	; 46
    1ba8:	0d b4       	in	r0, 0x2d	; 45
    1baa:	07 fe       	sbrs	r0, 7
    1bac:	fd cf       	rjmp	.-6      	; 0x1ba8 <rf_tx_packet+0x2b4>
    1bae:	1e bc       	out	0x2e, r1	; 46
    1bb0:	0d b4       	in	r0, 0x2d	; 45
    1bb2:	07 fe       	sbrs	r0, 7
    1bb4:	fd cf       	rjmp	.-6      	; 0x1bb0 <rf_tx_packet+0x2bc>
    1bb6:	8e b5       	in	r24, 0x2e	; 46
    1bb8:	40 9a       	sbi	0x08, 0	; 8
    1bba:	11 e0       	ldi	r17, 0x01	; 1
    1bbc:	0f c0       	rjmp	.+30     	; 0x1bdc <rf_tx_packet+0x2e8>
    1bbe:	40 98       	cbi	0x08, 0	; 8
    1bc0:	88 e0       	ldi	r24, 0x08	; 8
    1bc2:	8e bd       	out	0x2e, r24	; 46
    1bc4:	0d b4       	in	r0, 0x2d	; 45
    1bc6:	07 fe       	sbrs	r0, 7
    1bc8:	fd cf       	rjmp	.-6      	; 0x1bc4 <rf_tx_packet+0x2d0>
    1bca:	40 9a       	sbi	0x08, 0	; 8
    1bcc:	40 98       	cbi	0x08, 0	; 8
    1bce:	88 e0       	ldi	r24, 0x08	; 8
    1bd0:	8e bd       	out	0x2e, r24	; 46
    1bd2:	0d b4       	in	r0, 0x2d	; 45
    1bd4:	07 fe       	sbrs	r0, 7
    1bd6:	fd cf       	rjmp	.-6      	; 0x1bd2 <rf_tx_packet+0x2de>
    1bd8:	40 9a       	sbi	0x08, 0	; 8
    1bda:	10 e0       	ldi	r17, 0x00	; 0
    1bdc:	f8 94       	cli
    1bde:	40 98       	cbi	0x08, 0	; 8
    1be0:	86 e0       	ldi	r24, 0x06	; 6
    1be2:	8e bd       	out	0x2e, r24	; 46
    1be4:	0d b4       	in	r0, 0x2d	; 45
    1be6:	07 fe       	sbrs	r0, 7
    1be8:	fd cf       	rjmp	.-6      	; 0x1be4 <rf_tx_packet+0x2f0>
    1bea:	40 9a       	sbi	0x08, 0	; 8
    1bec:	78 94       	sei
    1bee:	80 91 ba 05 	lds	r24, 0x05BA
    1bf2:	8f 5f       	subi	r24, 0xFF	; 255
    1bf4:	80 93 ba 05 	sts	0x05BA, r24
    1bf8:	80 91 b3 05 	lds	r24, 0x05B3
    1bfc:	90 91 b4 05 	lds	r25, 0x05B4
    1c00:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    1c04:	81 2f       	mov	r24, r17
    1c06:	99 27       	eor	r25, r25
    1c08:	17 c0       	rjmp	.+46     	; 0x1c38 <rf_tx_packet+0x344>
    1c0a:	40 9a       	sbi	0x08, 0	; 8
    1c0c:	81 e4       	ldi	r24, 0x41	; 65
    1c0e:	98 e8       	ldi	r25, 0x88	; 136
    1c10:	9a 83       	std	Y+2, r25	; 0x02
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	80 91 c3 05 	lds	r24, 0x05C3
    1c18:	88 23       	and	r24, r24
    1c1a:	09 f0       	breq	.+2      	; 0x1c1e <rf_tx_packet+0x32a>
    1c1c:	c9 ce       	rjmp	.-622    	; 0x19b0 <rf_tx_packet+0xbc>
    1c1e:	cc ce       	rjmp	.-616    	; 0x19b8 <rf_tx_packet+0xc4>
    1c20:	40 9a       	sbi	0x08, 0	; 8
    1c22:	40 98       	cbi	0x08, 0	; 8
    1c24:	8e e3       	ldi	r24, 0x3E	; 62
    1c26:	8e bd       	out	0x2e, r24	; 46
    1c28:	f2 ce       	rjmp	.-540    	; 0x1a0e <rf_tx_packet+0x11a>
    1c2a:	40 9a       	sbi	0x08, 0	; 8
    1c2c:	f8 01       	movw	r30, r16
    1c2e:	85 81       	ldd	r24, Z+5	; 0x05
    1c30:	88 23       	and	r24, r24
    1c32:	09 f0       	breq	.+2      	; 0x1c36 <rf_tx_packet+0x342>
    1c34:	69 cf       	rjmp	.-302    	; 0x1b08 <rf_tx_packet+0x214>
    1c36:	9f cf       	rjmp	.-194    	; 0x1b76 <rf_tx_packet+0x282>
    1c38:	22 96       	adiw	r28, 0x02	; 2
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61
    1c44:	df 91       	pop	r29
    1c46:	cf 91       	pop	r28
    1c48:	1f 91       	pop	r17
    1c4a:	0f 91       	pop	r16
    1c4c:	ff 90       	pop	r15
    1c4e:	ef 90       	pop	r14
    1c50:	08 95       	ret

00001c52 <rf_tx_tdma_packet>:
    1c52:	bf 92       	push	r11
    1c54:	cf 92       	push	r12
    1c56:	df 92       	push	r13
    1c58:	ef 92       	push	r14
    1c5a:	ff 92       	push	r15
    1c5c:	0f 93       	push	r16
    1c5e:	1f 93       	push	r17
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
    1c68:	22 97       	sbiw	r28, 0x02	; 2
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	f8 94       	cli
    1c6e:	de bf       	out	0x3e, r29	; 62
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	cd bf       	out	0x3d, r28	; 61
    1c74:	8c 01       	movw	r16, r24
    1c76:	6b 01       	movw	r12, r22
    1c78:	7a 01       	movw	r14, r20
    1c7a:	80 91 b3 05 	lds	r24, 0x05B3
    1c7e:	90 91 b4 05 	lds	r25, 0x05B4
    1c82:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <nrk_sem_pend>
    1c86:	0e 94 1f 28 	call	0x503e	; 0x503e <_nrk_os_timer_get>
    1c8a:	40 98       	cbi	0x08, 0	; 8
    1c8c:	88 e0       	ldi	r24, 0x08	; 8
    1c8e:	8e bd       	out	0x2e, r24	; 46
    1c90:	0d b4       	in	r0, 0x2d	; 45
    1c92:	07 fe       	sbrs	r0, 7
    1c94:	fd cf       	rjmp	.-6      	; 0x1c90 <rf_tx_tdma_packet+0x3e>
    1c96:	40 9a       	sbi	0x08, 0	; 8
    1c98:	40 98       	cbi	0x08, 0	; 8
    1c9a:	88 e0       	ldi	r24, 0x08	; 8
    1c9c:	8e bd       	out	0x2e, r24	; 46
    1c9e:	0d b4       	in	r0, 0x2d	; 45
    1ca0:	07 fe       	sbrs	r0, 7
    1ca2:	fd cf       	rjmp	.-6      	; 0x1c9e <rf_tx_tdma_packet+0x4c>
    1ca4:	40 9a       	sbi	0x08, 0	; 8
    1ca6:	67 99       	sbic	0x0c, 7	; 12
    1ca8:	fe cf       	rjmp	.-4      	; 0x1ca6 <rf_tx_tdma_packet+0x54>
    1caa:	4e 99       	sbic	0x09, 6	; 9
    1cac:	fc cf       	rjmp	.-8      	; 0x1ca6 <rf_tx_tdma_packet+0x54>
    1cae:	f8 94       	cli
    1cb0:	40 98       	cbi	0x08, 0	; 8
    1cb2:	89 e0       	ldi	r24, 0x09	; 9
    1cb4:	8e bd       	out	0x2e, r24	; 46
    1cb6:	0d b4       	in	r0, 0x2d	; 45
    1cb8:	07 fe       	sbrs	r0, 7
    1cba:	fd cf       	rjmp	.-6      	; 0x1cb6 <rf_tx_tdma_packet+0x64>
    1cbc:	40 9a       	sbi	0x08, 0	; 8
    1cbe:	40 98       	cbi	0x08, 0	; 8
    1cc0:	89 e0       	ldi	r24, 0x09	; 9
    1cc2:	8e bd       	out	0x2e, r24	; 46
    1cc4:	0d b4       	in	r0, 0x2d	; 45
    1cc6:	07 fe       	sbrs	r0, 7
    1cc8:	fd cf       	rjmp	.-6      	; 0x1cc4 <rf_tx_tdma_packet+0x72>
    1cca:	40 9a       	sbi	0x08, 0	; 8
    1ccc:	f8 01       	movw	r30, r16
    1cce:	62 81       	ldd	r22, Z+2	; 0x02
    1cd0:	46 2f       	mov	r20, r22
    1cd2:	55 27       	eor	r21, r21
    1cd4:	47 fd       	sbrc	r20, 7
    1cd6:	50 95       	com	r21
    1cd8:	bb 24       	eor	r11, r11
    1cda:	20 e0       	ldi	r18, 0x00	; 0
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	07 c0       	rjmp	.+14     	; 0x1cee <rf_tx_tdma_packet+0x9c>
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	83 81       	ldd	r24, Z+3	; 0x03
    1ce4:	94 81       	ldd	r25, Z+4	; 0x04
    1ce6:	a8 0f       	add	r26, r24
    1ce8:	b9 1f       	adc	r27, r25
    1cea:	8c 91       	ld	r24, X
    1cec:	b8 0e       	add	r11, r24
    1cee:	82 2f       	mov	r24, r18
    1cf0:	2f 5f       	subi	r18, 0xFF	; 255
    1cf2:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf4:	a8 2f       	mov	r26, r24
    1cf6:	bb 27       	eor	r27, r27
    1cf8:	a4 17       	cp	r26, r20
    1cfa:	b5 07       	cpc	r27, r21
    1cfc:	8c f3       	brlt	.-30     	; 0x1ce0 <rf_tx_tdma_packet+0x8e>
    1cfe:	96 2f       	mov	r25, r22
    1d00:	94 5f       	subi	r25, 0xF4	; 244
    1d02:	40 98       	cbi	0x08, 0	; 8
    1d04:	8e e3       	ldi	r24, 0x3E	; 62
    1d06:	8e bd       	out	0x2e, r24	; 46
    1d08:	0d b4       	in	r0, 0x2d	; 45
    1d0a:	07 fc       	sbrc	r0, 7
    1d0c:	05 c0       	rjmp	.+10     	; 0x1d18 <rf_tx_tdma_packet+0xc6>
    1d0e:	fc cf       	rjmp	.-8      	; 0x1d08 <rf_tx_tdma_packet+0xb6>
    1d10:	0d b4       	in	r0, 0x2d	; 45
    1d12:	07 fc       	sbrc	r0, 7
    1d14:	16 c1       	rjmp	.+556    	; 0x1f42 <rf_tx_tdma_packet+0x2f0>
    1d16:	fc cf       	rjmp	.-8      	; 0x1d10 <rf_tx_tdma_packet+0xbe>
    1d18:	9e bd       	out	0x2e, r25	; 46
    1d1a:	fa cf       	rjmp	.-12     	; 0x1d10 <rf_tx_tdma_packet+0xbe>
    1d1c:	81 e6       	ldi	r24, 0x61	; 97
    1d1e:	98 e8       	ldi	r25, 0x88	; 136
    1d20:	9a 83       	std	Y+2, r25	; 0x02
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	40 98       	cbi	0x08, 0	; 8
    1d26:	8e e3       	ldi	r24, 0x3E	; 62
    1d28:	8e bd       	out	0x2e, r24	; 46
    1d2a:	0d b4       	in	r0, 0x2d	; 45
    1d2c:	07 fe       	sbrs	r0, 7
    1d2e:	fd cf       	rjmp	.-6      	; 0x1d2a <rf_tx_tdma_packet+0xd8>
    1d30:	fe 01       	movw	r30, r28
    1d32:	31 96       	adiw	r30, 0x01	; 1
    1d34:	9e 01       	movw	r18, r28
    1d36:	2d 5f       	subi	r18, 0xFD	; 253
    1d38:	3f 4f       	sbci	r19, 0xFF	; 255
    1d3a:	80 81       	ld	r24, Z
    1d3c:	8e bd       	out	0x2e, r24	; 46
    1d3e:	0d b4       	in	r0, 0x2d	; 45
    1d40:	07 fe       	sbrs	r0, 7
    1d42:	fd cf       	rjmp	.-6      	; 0x1d3e <rf_tx_tdma_packet+0xec>
    1d44:	31 96       	adiw	r30, 0x01	; 1
    1d46:	e2 17       	cp	r30, r18
    1d48:	f3 07       	cpc	r31, r19
    1d4a:	b9 f7       	brne	.-18     	; 0x1d3a <rf_tx_tdma_packet+0xe8>
    1d4c:	40 9a       	sbi	0x08, 0	; 8
    1d4e:	40 98       	cbi	0x08, 0	; 8
    1d50:	8e e3       	ldi	r24, 0x3E	; 62
    1d52:	8e bd       	out	0x2e, r24	; 46
    1d54:	0d b4       	in	r0, 0x2d	; 45
    1d56:	07 fc       	sbrc	r0, 7
    1d58:	05 c0       	rjmp	.+10     	; 0x1d64 <rf_tx_tdma_packet+0x112>
    1d5a:	fc cf       	rjmp	.-8      	; 0x1d54 <rf_tx_tdma_packet+0x102>
    1d5c:	0d b4       	in	r0, 0x2d	; 45
    1d5e:	07 fc       	sbrc	r0, 7
    1d60:	f9 c0       	rjmp	.+498    	; 0x1f54 <rf_tx_tdma_packet+0x302>
    1d62:	fc cf       	rjmp	.-8      	; 0x1d5c <rf_tx_tdma_packet+0x10a>
    1d64:	80 91 ba 05 	lds	r24, 0x05BA
    1d68:	8e bd       	out	0x2e, r24	; 46
    1d6a:	f8 cf       	rjmp	.-16     	; 0x1d5c <rf_tx_tdma_packet+0x10a>
    1d6c:	0d b4       	in	r0, 0x2d	; 45
    1d6e:	07 fe       	sbrs	r0, 7
    1d70:	fd cf       	rjmp	.-6      	; 0x1d6c <rf_tx_tdma_packet+0x11a>
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	f9 01       	movw	r30, r18
    1d78:	e4 54       	subi	r30, 0x44	; 68
    1d7a:	fa 4f       	sbci	r31, 0xFA	; 250
    1d7c:	80 81       	ld	r24, Z
    1d7e:	8e bd       	out	0x2e, r24	; 46
    1d80:	0d b4       	in	r0, 0x2d	; 45
    1d82:	07 fe       	sbrs	r0, 7
    1d84:	fd cf       	rjmp	.-6      	; 0x1d80 <rf_tx_tdma_packet+0x12e>
    1d86:	2f 5f       	subi	r18, 0xFF	; 255
    1d88:	3f 4f       	sbci	r19, 0xFF	; 255
    1d8a:	22 30       	cpi	r18, 0x02	; 2
    1d8c:	31 05       	cpc	r19, r1
    1d8e:	99 f7       	brne	.-26     	; 0x1d76 <rf_tx_tdma_packet+0x124>
    1d90:	40 9a       	sbi	0x08, 0	; 8
    1d92:	40 98       	cbi	0x08, 0	; 8
    1d94:	8e e3       	ldi	r24, 0x3E	; 62
    1d96:	8e bd       	out	0x2e, r24	; 46
    1d98:	0d b4       	in	r0, 0x2d	; 45
    1d9a:	07 fe       	sbrs	r0, 7
    1d9c:	fd cf       	rjmp	.-6      	; 0x1d98 <rf_tx_tdma_packet+0x146>
    1d9e:	20 e0       	ldi	r18, 0x00	; 0
    1da0:	30 e0       	ldi	r19, 0x00	; 0
    1da2:	f8 01       	movw	r30, r16
    1da4:	e2 0f       	add	r30, r18
    1da6:	f3 1f       	adc	r31, r19
    1da8:	80 81       	ld	r24, Z
    1daa:	8e bd       	out	0x2e, r24	; 46
    1dac:	0d b4       	in	r0, 0x2d	; 45
    1dae:	07 fe       	sbrs	r0, 7
    1db0:	fd cf       	rjmp	.-6      	; 0x1dac <rf_tx_tdma_packet+0x15a>
    1db2:	2f 5f       	subi	r18, 0xFF	; 255
    1db4:	3f 4f       	sbci	r19, 0xFF	; 255
    1db6:	22 30       	cpi	r18, 0x02	; 2
    1db8:	31 05       	cpc	r19, r1
    1dba:	99 f7       	brne	.-26     	; 0x1da2 <rf_tx_tdma_packet+0x150>
    1dbc:	40 9a       	sbi	0x08, 0	; 8
    1dbe:	40 98       	cbi	0x08, 0	; 8
    1dc0:	8e e3       	ldi	r24, 0x3E	; 62
    1dc2:	8e bd       	out	0x2e, r24	; 46
    1dc4:	0d b4       	in	r0, 0x2d	; 45
    1dc6:	07 fe       	sbrs	r0, 7
    1dc8:	fd cf       	rjmp	.-6      	; 0x1dc4 <rf_tx_tdma_packet+0x172>
    1dca:	20 e0       	ldi	r18, 0x00	; 0
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	f9 01       	movw	r30, r18
    1dd0:	e2 54       	subi	r30, 0x42	; 66
    1dd2:	fa 4f       	sbci	r31, 0xFA	; 250
    1dd4:	80 81       	ld	r24, Z
    1dd6:	8e bd       	out	0x2e, r24	; 46
    1dd8:	0d b4       	in	r0, 0x2d	; 45
    1dda:	07 fe       	sbrs	r0, 7
    1ddc:	fd cf       	rjmp	.-6      	; 0x1dd8 <rf_tx_tdma_packet+0x186>
    1dde:	2f 5f       	subi	r18, 0xFF	; 255
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	22 30       	cpi	r18, 0x02	; 2
    1de4:	31 05       	cpc	r19, r1
    1de6:	99 f7       	brne	.-26     	; 0x1dce <rf_tx_tdma_packet+0x17c>
    1de8:	40 9a       	sbi	0x08, 0	; 8
    1dea:	b7 01       	movw	r22, r14
    1dec:	c6 01       	movw	r24, r12
    1dee:	0e 94 a4 28 	call	0x5148	; 0x5148 <nrk_high_speed_timer_wait>
    1df2:	f8 01       	movw	r30, r16
    1df4:	85 81       	ldd	r24, Z+5	; 0x05
    1df6:	88 23       	and	r24, r24
    1df8:	c1 f1       	breq	.+112    	; 0x1e6a <rf_tx_tdma_packet+0x218>
    1dfa:	80 91 c0 05 	lds	r24, 0x05C0
    1dfe:	88 23       	and	r24, r24
    1e00:	39 f4       	brne	.+14     	; 0x1e10 <rf_tx_tdma_packet+0x1be>
    1e02:	40 98       	cbi	0x08, 0	; 8
    1e04:	83 e0       	ldi	r24, 0x03	; 3
    1e06:	8e bd       	out	0x2e, r24	; 46
    1e08:	0d b4       	in	r0, 0x2d	; 45
    1e0a:	07 fe       	sbrs	r0, 7
    1e0c:	fd cf       	rjmp	.-6      	; 0x1e08 <rf_tx_tdma_packet+0x1b6>
    1e0e:	40 9a       	sbi	0x08, 0	; 8
    1e10:	40 98       	cbi	0x08, 0	; 8
    1e12:	1e bc       	out	0x2e, r1	; 46
    1e14:	0d b4       	in	r0, 0x2d	; 45
    1e16:	07 fe       	sbrs	r0, 7
    1e18:	fd cf       	rjmp	.-6      	; 0x1e14 <rf_tx_tdma_packet+0x1c2>
    1e1a:	8e b5       	in	r24, 0x2e	; 46
    1e1c:	40 9a       	sbi	0x08, 0	; 8
    1e1e:	81 ff       	sbrs	r24, 1
    1e20:	f7 cf       	rjmp	.-18     	; 0x1e10 <rf_tx_tdma_packet+0x1be>
    1e22:	ee 24       	eor	r14, r14
    1e24:	40 98       	cbi	0x08, 0	; 8
    1e26:	85 e0       	ldi	r24, 0x05	; 5
    1e28:	8e bd       	out	0x2e, r24	; 46
    1e2a:	0d b4       	in	r0, 0x2d	; 45
    1e2c:	07 fe       	sbrs	r0, 7
    1e2e:	fd cf       	rjmp	.-6      	; 0x1e2a <rf_tx_tdma_packet+0x1d8>
    1e30:	40 9a       	sbi	0x08, 0	; 8
    1e32:	40 98       	cbi	0x08, 0	; 8
    1e34:	1e bc       	out	0x2e, r1	; 46
    1e36:	0d b4       	in	r0, 0x2d	; 45
    1e38:	07 fe       	sbrs	r0, 7
    1e3a:	fd cf       	rjmp	.-6      	; 0x1e36 <rf_tx_tdma_packet+0x1e4>
    1e3c:	fe b4       	in	r15, 0x2e	; 46
    1e3e:	40 9a       	sbi	0x08, 0	; 8
    1e40:	e3 94       	inc	r14
    1e42:	f5 e6       	ldi	r31, 0x65	; 101
    1e44:	ef 16       	cp	r14, r31
    1e46:	51 f4       	brne	.+20     	; 0x1e5c <rf_tx_tdma_packet+0x20a>
    1e48:	78 94       	sei
    1e4a:	80 91 b3 05 	lds	r24, 0x05B3
    1e4e:	90 91 b4 05 	lds	r25, 0x05B4
    1e52:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	83 c0       	rjmp	.+262    	; 0x1f62 <rf_tx_tdma_packet+0x310>
    1e5c:	84 e6       	ldi	r24, 0x64	; 100
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <halWait>
    1e64:	f3 fc       	sbrc	r15, 3
    1e66:	08 c0       	rjmp	.+16     	; 0x1e78 <rf_tx_tdma_packet+0x226>
    1e68:	dd cf       	rjmp	.-70     	; 0x1e24 <rf_tx_tdma_packet+0x1d2>
    1e6a:	40 98       	cbi	0x08, 0	; 8
    1e6c:	84 e0       	ldi	r24, 0x04	; 4
    1e6e:	8e bd       	out	0x2e, r24	; 46
    1e70:	0d b4       	in	r0, 0x2d	; 45
    1e72:	07 fe       	sbrs	r0, 7
    1e74:	fd cf       	rjmp	.-6      	; 0x1e70 <rf_tx_tdma_packet+0x21e>
    1e76:	40 9a       	sbi	0x08, 0	; 8
    1e78:	40 98       	cbi	0x08, 0	; 8
    1e7a:	8e e3       	ldi	r24, 0x3E	; 62
    1e7c:	8e bd       	out	0x2e, r24	; 46
    1e7e:	0d b4       	in	r0, 0x2d	; 45
    1e80:	07 fe       	sbrs	r0, 7
    1e82:	fd cf       	rjmp	.-6      	; 0x1e7e <rf_tx_tdma_packet+0x22c>
    1e84:	f8 01       	movw	r30, r16
    1e86:	82 81       	ldd	r24, Z+2	; 0x02
    1e88:	48 2f       	mov	r20, r24
    1e8a:	55 27       	eor	r21, r21
    1e8c:	47 fd       	sbrc	r20, 7
    1e8e:	50 95       	com	r21
    1e90:	20 e0       	ldi	r18, 0x00	; 0
    1e92:	30 e0       	ldi	r19, 0x00	; 0
    1e94:	0c c0       	rjmp	.+24     	; 0x1eae <rf_tx_tdma_packet+0x25c>
    1e96:	f8 01       	movw	r30, r16
    1e98:	83 81       	ldd	r24, Z+3	; 0x03
    1e9a:	94 81       	ldd	r25, Z+4	; 0x04
    1e9c:	a8 0f       	add	r26, r24
    1e9e:	b9 1f       	adc	r27, r25
    1ea0:	8c 91       	ld	r24, X
    1ea2:	8e bd       	out	0x2e, r24	; 46
    1ea4:	0d b4       	in	r0, 0x2d	; 45
    1ea6:	07 fe       	sbrs	r0, 7
    1ea8:	fd cf       	rjmp	.-6      	; 0x1ea4 <rf_tx_tdma_packet+0x252>
    1eaa:	2f 5f       	subi	r18, 0xFF	; 255
    1eac:	3f 4f       	sbci	r19, 0xFF	; 255
    1eae:	a2 2f       	mov	r26, r18
    1eb0:	bb 27       	eor	r27, r27
    1eb2:	a4 17       	cp	r26, r20
    1eb4:	b5 07       	cpc	r27, r21
    1eb6:	7c f3       	brlt	.-34     	; 0x1e96 <rf_tx_tdma_packet+0x244>
    1eb8:	40 9a       	sbi	0x08, 0	; 8
    1eba:	40 98       	cbi	0x08, 0	; 8
    1ebc:	8e e3       	ldi	r24, 0x3E	; 62
    1ebe:	8e bd       	out	0x2e, r24	; 46
    1ec0:	0d b4       	in	r0, 0x2d	; 45
    1ec2:	07 fc       	sbrc	r0, 7
    1ec4:	05 c0       	rjmp	.+10     	; 0x1ed0 <rf_tx_tdma_packet+0x27e>
    1ec6:	fc cf       	rjmp	.-8      	; 0x1ec0 <rf_tx_tdma_packet+0x26e>
    1ec8:	0d b4       	in	r0, 0x2d	; 45
    1eca:	07 fc       	sbrc	r0, 7
    1ecc:	48 c0       	rjmp	.+144    	; 0x1f5e <rf_tx_tdma_packet+0x30c>
    1ece:	fc cf       	rjmp	.-8      	; 0x1ec8 <rf_tx_tdma_packet+0x276>
    1ed0:	be bc       	out	0x2e, r11	; 46
    1ed2:	fa cf       	rjmp	.-12     	; 0x1ec8 <rf_tx_tdma_packet+0x276>
    1ed4:	4e 9b       	sbis	0x09, 6	; 9
    1ed6:	fe cf       	rjmp	.-4      	; 0x1ed4 <rf_tx_tdma_packet+0x282>
    1ed8:	f8 94       	cli
    1eda:	4e 99       	sbic	0x09, 6	; 9
    1edc:	fe cf       	rjmp	.-4      	; 0x1eda <rf_tx_tdma_packet+0x288>
    1ede:	40 98       	cbi	0x08, 0	; 8
    1ee0:	88 e0       	ldi	r24, 0x08	; 8
    1ee2:	8e bd       	out	0x2e, r24	; 46
    1ee4:	0d b4       	in	r0, 0x2d	; 45
    1ee6:	07 fe       	sbrs	r0, 7
    1ee8:	fd cf       	rjmp	.-6      	; 0x1ee4 <rf_tx_tdma_packet+0x292>
    1eea:	40 9a       	sbi	0x08, 0	; 8
    1eec:	40 98       	cbi	0x08, 0	; 8
    1eee:	88 e0       	ldi	r24, 0x08	; 8
    1ef0:	8e bd       	out	0x2e, r24	; 46
    1ef2:	0d b4       	in	r0, 0x2d	; 45
    1ef4:	07 fe       	sbrs	r0, 7
    1ef6:	fd cf       	rjmp	.-6      	; 0x1ef2 <rf_tx_tdma_packet+0x2a0>
    1ef8:	40 9a       	sbi	0x08, 0	; 8
    1efa:	40 98       	cbi	0x08, 0	; 8
    1efc:	89 e0       	ldi	r24, 0x09	; 9
    1efe:	8e bd       	out	0x2e, r24	; 46
    1f00:	0d b4       	in	r0, 0x2d	; 45
    1f02:	07 fe       	sbrs	r0, 7
    1f04:	fd cf       	rjmp	.-6      	; 0x1f00 <rf_tx_tdma_packet+0x2ae>
    1f06:	40 9a       	sbi	0x08, 0	; 8
    1f08:	40 98       	cbi	0x08, 0	; 8
    1f0a:	89 e0       	ldi	r24, 0x09	; 9
    1f0c:	8e bd       	out	0x2e, r24	; 46
    1f0e:	0d b4       	in	r0, 0x2d	; 45
    1f10:	07 fe       	sbrs	r0, 7
    1f12:	fd cf       	rjmp	.-6      	; 0x1f0e <rf_tx_tdma_packet+0x2bc>
    1f14:	40 9a       	sbi	0x08, 0	; 8
    1f16:	40 98       	cbi	0x08, 0	; 8
    1f18:	86 e0       	ldi	r24, 0x06	; 6
    1f1a:	8e bd       	out	0x2e, r24	; 46
    1f1c:	0d b4       	in	r0, 0x2d	; 45
    1f1e:	07 fe       	sbrs	r0, 7
    1f20:	fd cf       	rjmp	.-6      	; 0x1f1c <rf_tx_tdma_packet+0x2ca>
    1f22:	40 9a       	sbi	0x08, 0	; 8
    1f24:	78 94       	sei
    1f26:	80 91 ba 05 	lds	r24, 0x05BA
    1f2a:	8f 5f       	subi	r24, 0xFF	; 255
    1f2c:	80 93 ba 05 	sts	0x05BA, r24
    1f30:	80 91 b3 05 	lds	r24, 0x05B3
    1f34:	90 91 b4 05 	lds	r25, 0x05B4
    1f38:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	10 c0       	rjmp	.+32     	; 0x1f62 <rf_tx_tdma_packet+0x310>
    1f42:	40 9a       	sbi	0x08, 0	; 8
    1f44:	f8 01       	movw	r30, r16
    1f46:	86 81       	ldd	r24, Z+6	; 0x06
    1f48:	88 23       	and	r24, r24
    1f4a:	09 f0       	breq	.+2      	; 0x1f4e <rf_tx_tdma_packet+0x2fc>
    1f4c:	e7 ce       	rjmp	.-562    	; 0x1d1c <rf_tx_tdma_packet+0xca>
    1f4e:	81 e4       	ldi	r24, 0x41	; 65
    1f50:	98 e8       	ldi	r25, 0x88	; 136
    1f52:	e6 ce       	rjmp	.-564    	; 0x1d20 <rf_tx_tdma_packet+0xce>
    1f54:	40 9a       	sbi	0x08, 0	; 8
    1f56:	40 98       	cbi	0x08, 0	; 8
    1f58:	8e e3       	ldi	r24, 0x3E	; 62
    1f5a:	8e bd       	out	0x2e, r24	; 46
    1f5c:	07 cf       	rjmp	.-498    	; 0x1d6c <rf_tx_tdma_packet+0x11a>
    1f5e:	40 9a       	sbi	0x08, 0	; 8
    1f60:	b9 cf       	rjmp	.-142    	; 0x1ed4 <rf_tx_tdma_packet+0x282>
    1f62:	22 96       	adiw	r28, 0x02	; 2
    1f64:	0f b6       	in	r0, 0x3f	; 63
    1f66:	f8 94       	cli
    1f68:	de bf       	out	0x3e, r29	; 62
    1f6a:	0f be       	out	0x3f, r0	; 63
    1f6c:	cd bf       	out	0x3d, r28	; 61
    1f6e:	df 91       	pop	r29
    1f70:	cf 91       	pop	r28
    1f72:	1f 91       	pop	r17
    1f74:	0f 91       	pop	r16
    1f76:	ff 90       	pop	r15
    1f78:	ef 90       	pop	r14
    1f7a:	df 90       	pop	r13
    1f7c:	cf 90       	pop	r12
    1f7e:	bf 90       	pop	r11
    1f80:	08 95       	ret

00001f82 <rf_addr_decode_set_my_mac>:
				nrk_led_clr(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
				nrk_led_set(GREEN_LED);
				break;
			case 'B': // ~x101
				nrk_gpio_clr(NRK_DEBUG_0);
    1f82:	cf 93       	push	r28
    1f84:	df 93       	push	r29
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
    1f8a:	22 97       	sbiw	r28, 0x02	; 2
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	9a 83       	std	Y+2, r25	; 0x02
    1f98:	89 83       	std	Y+1, r24	; 0x01
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_clr(NRK_DEBUG_2);
    1f9a:	90 93 bf 05 	sts	0x05BF, r25
    1f9e:	80 93 be 05 	sts	0x05BE, r24
				nrk_led_set(ORANGE_LED);
    1fa2:	84 ef       	ldi	r24, 0xF4	; 244
    1fa4:	91 e0       	ldi	r25, 0x01	; 1
    1fa6:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <nrk_spin_wait_us>
				nrk_led_clr(BLUE_LED);
    1faa:	40 98       	cbi	0x08, 0	; 8
    1fac:	8a ee       	ldi	r24, 0xEA	; 234
    1fae:	8e bd       	out	0x2e, r24	; 46
    1fb0:	0d b4       	in	r0, 0x2d	; 45
    1fb2:	07 fe       	sbrs	r0, 7
    1fb4:	fd cf       	rjmp	.-6      	; 0x1fb0 <rf_addr_decode_set_my_mac+0x2e>
    1fb6:	80 e8       	ldi	r24, 0x80	; 128
    1fb8:	8e bd       	out	0x2e, r24	; 46
    1fba:	0d b4       	in	r0, 0x2d	; 45
    1fbc:	07 fe       	sbrs	r0, 7
    1fbe:	fd cf       	rjmp	.-6      	; 0x1fba <rf_addr_decode_set_my_mac+0x38>
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	31 96       	adiw	r30, 0x01	; 1
    1fc4:	9e 01       	movw	r18, r28
    1fc6:	2d 5f       	subi	r18, 0xFD	; 253
    1fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fca:	80 81       	ld	r24, Z
    1fcc:	8e bd       	out	0x2e, r24	; 46
    1fce:	0d b4       	in	r0, 0x2d	; 45
    1fd0:	07 fe       	sbrs	r0, 7
    1fd2:	fd cf       	rjmp	.-6      	; 0x1fce <rf_addr_decode_set_my_mac+0x4c>
    1fd4:	31 96       	adiw	r30, 0x01	; 1
    1fd6:	e2 17       	cp	r30, r18
    1fd8:	f3 07       	cpc	r31, r19
    1fda:	b9 f7       	brne	.-18     	; 0x1fca <rf_addr_decode_set_my_mac+0x48>
    1fdc:	40 9a       	sbi	0x08, 0	; 8
				nrk_led_set(GREEN_LED);
    1fde:	84 ef       	ldi	r24, 0xF4	; 244
    1fe0:	91 e0       	ldi	r25, 0x01	; 1
    1fe2:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <nrk_spin_wait_us>
    1fe6:	22 96       	adiw	r28, 0x02	; 2
    1fe8:	0f b6       	in	r0, 0x3f	; 63
    1fea:	f8 94       	cli
    1fec:	de bf       	out	0x3e, r29	; 62
    1fee:	0f be       	out	0x3f, r0	; 63
    1ff0:	cd bf       	out	0x3d, r28	; 61
    1ff2:	df 91       	pop	r29
    1ff4:	cf 91       	pop	r28
    1ff6:	08 95       	ret

00001ff8 <rf_security_set_key>:
}

void pin_task ()
{
	while(1) {
		nrk_led_toggle (RED_LED);
    1ff8:	6f 92       	push	r6
    1ffa:	7f 92       	push	r7
    1ffc:	8f 92       	push	r8
    1ffe:	9f 92       	push	r9
    2000:	af 92       	push	r10
    2002:	bf 92       	push	r11
    2004:	cf 92       	push	r12
    2006:	df 92       	push	r13
    2008:	ef 92       	push	r14
    200a:	ff 92       	push	r15
    200c:	0f 93       	push	r16
    200e:	1f 93       	push	r17
    2010:	cf 93       	push	r28
    2012:	df 93       	push	r29
    2014:	cd b7       	in	r28, 0x3d	; 61
    2016:	de b7       	in	r29, 0x3e	; 62
    2018:	22 97       	sbiw	r28, 0x02	; 2
    201a:	0f b6       	in	r0, 0x3f	; 63
    201c:	f8 94       	cli
    201e:	de bf       	out	0x3e, r29	; 62
    2020:	0f be       	out	0x3f, r0	; 63
    2022:	cd bf       	out	0x3d, r28	; 61
    2024:	8c 01       	movw	r16, r24
		nrk_wait_until_next_period ();
		nrk_led_toggle (BLUE_LED);
		nrk_wait_until_next_period ();
	}
}
    2026:	84 e6       	ldi	r24, 0x64	; 100
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <nrk_spin_wait_us>
    202e:	78 01       	movw	r14, r16
    2030:	c1 2c       	mov	r12, r1
    2032:	b1 e0       	ldi	r27, 0x01	; 1
    2034:	db 2e       	mov	r13, r27

void rx_task ()
{
	uint8_t i, len;
	int8_t rssi, val;
    2036:	3e 01       	movw	r6, r28
    2038:	08 94       	sec
    203a:	61 1c       	adc	r6, r1
    203c:	71 1c       	adc	r7, r1
    203e:	a3 e0       	ldi	r26, 0x03	; 3
    2040:	8a 2e       	mov	r8, r26
    2042:	91 2c       	mov	r9, r1
    2044:	8c 0e       	add	r8, r28
    2046:	9d 1e       	adc	r9, r29
		nrk_wait_until_next_period ();
	}
}

void rx_task ()
{
    2048:	f7 01       	movw	r30, r14
    204a:	80 81       	ld	r24, Z
    204c:	21 81       	ldd	r18, Z+1	; 0x01
    204e:	33 27       	eor	r19, r19
    2050:	99 27       	eor	r25, r25
    2052:	98 2f       	mov	r25, r24
    2054:	88 27       	eor	r24, r24
    2056:	28 2b       	or	r18, r24
    2058:	39 2b       	or	r19, r25
    205a:	3a 83       	std	Y+2, r19	; 0x02
    205c:	29 83       	std	Y+1, r18	; 0x01
	uint8_t i, len;
    205e:	84 e6       	ldi	r24, 0x64	; 100
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <nrk_spin_wait_us>
	int8_t rssi, val;
    2066:	40 98       	cbi	0x08, 0	; 8
    2068:	8c 2d       	mov	r24, r12
    206a:	80 68       	ori	r24, 0x80	; 128
    206c:	8e bd       	out	0x2e, r24	; 46
    206e:	0d b4       	in	r0, 0x2d	; 45
    2070:	07 fe       	sbrs	r0, 7
    2072:	fd cf       	rjmp	.-6      	; 0x206e <rf_security_set_key+0x76>
    2074:	c6 01       	movw	r24, r12
    2076:	95 95       	asr	r25
    2078:	87 95       	ror	r24
    207a:	80 7c       	andi	r24, 0xC0	; 192
    207c:	8e bd       	out	0x2e, r24	; 46
    207e:	0d b4       	in	r0, 0x2d	; 45
    2080:	07 fe       	sbrs	r0, 7
    2082:	fd cf       	rjmp	.-6      	; 0x207e <rf_security_set_key+0x86>
    2084:	83 01       	movw	r16, r6
    2086:	53 01       	movw	r10, r6
    2088:	f5 01       	movw	r30, r10
    208a:	80 81       	ld	r24, Z
    208c:	8e bd       	out	0x2e, r24	; 46
    208e:	0d b4       	in	r0, 0x2d	; 45
    2090:	07 fe       	sbrs	r0, 7
    2092:	fd cf       	rjmp	.-6      	; 0x208e <rf_security_set_key+0x96>
    2094:	08 94       	sec
    2096:	a1 1c       	adc	r10, r1
    2098:	b1 1c       	adc	r11, r1
    209a:	a8 14       	cp	r10, r8
    209c:	b9 04       	cpc	r11, r9
    209e:	a1 f7       	brne	.-24     	; 0x2088 <rf_security_set_key+0x90>
    20a0:	40 9a       	sbi	0x08, 0	; 8
    20a2:	08 94       	sec
    20a4:	e1 1c       	adc	r14, r1
    20a6:	f1 1c       	adc	r15, r1
    20a8:	82 e0       	ldi	r24, 0x02	; 2
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	c8 0e       	add	r12, r24
    20ae:	d9 1e       	adc	r13, r25
		nrk_wait_until_next_period ();
		nrk_led_toggle (BLUE_LED);
		nrk_wait_until_next_period ();
	}
}

    20b0:	90 e1       	ldi	r25, 0x10	; 16
    20b2:	c9 16       	cp	r12, r25
    20b4:	91 e0       	ldi	r25, 0x01	; 1
    20b6:	d9 06       	cpc	r13, r25
    20b8:	39 f6       	brne	.-114    	; 0x2048 <rf_security_set_key+0x50>
	uint8_t i, len;
	int8_t rssi, val;
	uint8_t *local_rx_buf;
	nrk_time_t check_period;
	printf ("rx_task PID=%d\r\n", nrk_get_pid ());

    20ba:	84 e6       	ldi	r24, 0x64	; 100
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <nrk_spin_wait_us>
    20c2:	20 e1       	ldi	r18, 0x10	; 16
    20c4:	31 e0       	ldi	r19, 0x01	; 1
    20c6:	40 e4       	ldi	r20, 0x40	; 64
    20c8:	51 e0       	ldi	r21, 0x01	; 1
	// init bmac on channel 25 
	bmac_init (25);

    20ca:	1a 82       	std	Y+2, r1	; 0x02
    20cc:	19 82       	std	Y+1, r1	; 0x01
	// By default the RX check rate is 100ms
    20ce:	40 98       	cbi	0x08, 0	; 8
    20d0:	84 2f       	mov	r24, r20
    20d2:	80 68       	ori	r24, 0x80	; 128
    20d4:	8e bd       	out	0x2e, r24	; 46
    20d6:	0d b4       	in	r0, 0x2d	; 45
    20d8:	07 fe       	sbrs	r0, 7
    20da:	fd cf       	rjmp	.-6      	; 0x20d6 <rf_security_set_key+0xde>
    20dc:	ca 01       	movw	r24, r20
    20de:	95 95       	asr	r25
    20e0:	87 95       	ror	r24
    20e2:	80 7c       	andi	r24, 0xC0	; 192
    20e4:	8e bd       	out	0x2e, r24	; 46
    20e6:	0d b4       	in	r0, 0x2d	; 45
    20e8:	07 fe       	sbrs	r0, 7
    20ea:	fd cf       	rjmp	.-6      	; 0x20e6 <rf_security_set_key+0xee>
    20ec:	f8 01       	movw	r30, r16
    20ee:	80 81       	ld	r24, Z
    20f0:	8e bd       	out	0x2e, r24	; 46
    20f2:	0d b4       	in	r0, 0x2d	; 45
    20f4:	07 fe       	sbrs	r0, 7
    20f6:	fd cf       	rjmp	.-6      	; 0x20f2 <rf_security_set_key+0xfa>
    20f8:	31 96       	adiw	r30, 0x01	; 1
    20fa:	ea 15       	cp	r30, r10
    20fc:	fb 05       	cpc	r31, r11
    20fe:	b9 f7       	brne	.-18     	; 0x20ee <rf_security_set_key+0xf6>
    2100:	40 9a       	sbi	0x08, 0	; 8
	// below shows how to change that
    2102:	40 98       	cbi	0x08, 0	; 8
    2104:	82 2f       	mov	r24, r18
    2106:	80 68       	ori	r24, 0x80	; 128
    2108:	8e bd       	out	0x2e, r24	; 46
    210a:	0d b4       	in	r0, 0x2d	; 45
    210c:	07 fe       	sbrs	r0, 7
    210e:	fd cf       	rjmp	.-6      	; 0x210a <rf_security_set_key+0x112>
    2110:	c9 01       	movw	r24, r18
    2112:	95 95       	asr	r25
    2114:	87 95       	ror	r24
    2116:	80 7c       	andi	r24, 0xC0	; 192
    2118:	8e bd       	out	0x2e, r24	; 46
    211a:	0d b4       	in	r0, 0x2d	; 45
    211c:	07 fe       	sbrs	r0, 7
    211e:	fd cf       	rjmp	.-6      	; 0x211a <rf_security_set_key+0x122>
    2120:	f8 01       	movw	r30, r16
    2122:	80 81       	ld	r24, Z
    2124:	8e bd       	out	0x2e, r24	; 46
    2126:	0d b4       	in	r0, 0x2d	; 45
    2128:	07 fe       	sbrs	r0, 7
    212a:	fd cf       	rjmp	.-6      	; 0x2126 <rf_security_set_key+0x12e>
    212c:	31 96       	adiw	r30, 0x01	; 1
    212e:	ea 15       	cp	r30, r10
    2130:	fb 05       	cpc	r31, r11
    2132:	b9 f7       	brne	.-18     	; 0x2122 <rf_security_set_key+0x12a>
    2134:	40 9a       	sbi	0x08, 0	; 8
    2136:	2e 5f       	subi	r18, 0xFE	; 254
    2138:	3f 4f       	sbci	r19, 0xFF	; 255
    213a:	4e 5f       	subi	r20, 0xFE	; 254
    213c:	5f 4f       	sbci	r21, 0xFF	; 255
	int8_t rssi, val;
	uint8_t *local_rx_buf;
	nrk_time_t check_period;
	printf ("rx_task PID=%d\r\n", nrk_get_pid ());

	// init bmac on channel 25 
    213e:	e1 e0       	ldi	r30, 0x01	; 1
    2140:	2e 31       	cpi	r18, 0x1E	; 30
    2142:	3e 07       	cpc	r19, r30
    2144:	11 f6       	brne	.-124    	; 0x20ca <rf_security_set_key+0xd2>

	// By default the RX check rate is 100ms
	// below shows how to change that
	check_period.secs=0;
	check_period.nano_secs=40*NANOS_PER_MS; // Fastest we could safely go
	val=bmac_set_rx_check_rate(check_period);
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	9a 83       	std	Y+2, r25	; 0x02
    214c:	89 83       	std	Y+1, r24	; 0x01

    214e:	40 98       	cbi	0x08, 0	; 8
    2150:	8e ec       	ldi	r24, 0xCE	; 206
    2152:	8e bd       	out	0x2e, r24	; 46
    2154:	0d b4       	in	r0, 0x2d	; 45
    2156:	07 fe       	sbrs	r0, 7
    2158:	fd cf       	rjmp	.-6      	; 0x2154 <rf_security_set_key+0x15c>
    215a:	80 e8       	ldi	r24, 0x80	; 128
    215c:	8e bd       	out	0x2e, r24	; 46
    215e:	0d b4       	in	r0, 0x2d	; 45
    2160:	07 fe       	sbrs	r0, 7
    2162:	fd cf       	rjmp	.-6      	; 0x215e <rf_security_set_key+0x166>
    2164:	f8 01       	movw	r30, r16
    2166:	80 81       	ld	r24, Z
    2168:	8e bd       	out	0x2e, r24	; 46
    216a:	0d b4       	in	r0, 0x2d	; 45
    216c:	07 fe       	sbrs	r0, 7
    216e:	fd cf       	rjmp	.-6      	; 0x216a <rf_security_set_key+0x172>
    2170:	31 96       	adiw	r30, 0x01	; 1
    2172:	ea 15       	cp	r30, r10
    2174:	fb 05       	cpc	r31, r11
    2176:	b9 f7       	brne	.-18     	; 0x2166 <rf_security_set_key+0x16e>
    2178:	40 9a       	sbi	0x08, 0	; 8
	// The default Clear Channel Assement RSSI threshold is -45
    217a:	40 98       	cbi	0x08, 0	; 8
    217c:	8e e9       	ldi	r24, 0x9E	; 158
    217e:	8e bd       	out	0x2e, r24	; 46
    2180:	0d b4       	in	r0, 0x2d	; 45
    2182:	07 fe       	sbrs	r0, 7
    2184:	fd cf       	rjmp	.-6      	; 0x2180 <rf_security_set_key+0x188>
    2186:	80 e8       	ldi	r24, 0x80	; 128
    2188:	8e bd       	out	0x2e, r24	; 46
    218a:	0d b4       	in	r0, 0x2d	; 45
    218c:	07 fe       	sbrs	r0, 7
    218e:	fd cf       	rjmp	.-6      	; 0x218a <rf_security_set_key+0x192>
    2190:	f8 01       	movw	r30, r16
    2192:	80 81       	ld	r24, Z
    2194:	8e bd       	out	0x2e, r24	; 46
    2196:	0d b4       	in	r0, 0x2d	; 45
    2198:	07 fe       	sbrs	r0, 7
    219a:	fd cf       	rjmp	.-6      	; 0x2196 <rf_security_set_key+0x19e>
    219c:	0f 5f       	subi	r16, 0xFF	; 255
    219e:	1f 4f       	sbci	r17, 0xFF	; 255
    21a0:	0a 15       	cp	r16, r10
    21a2:	1b 05       	cpc	r17, r11
    21a4:	a9 f7       	brne	.-22     	; 0x2190 <rf_security_set_key+0x198>
    21a6:	40 9a       	sbi	0x08, 0	; 8
    21a8:	22 96       	adiw	r28, 0x02	; 2
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	1f 91       	pop	r17
    21ba:	0f 91       	pop	r16
    21bc:	ff 90       	pop	r15
    21be:	ef 90       	pop	r14
    21c0:	df 90       	pop	r13
    21c2:	cf 90       	pop	r12
    21c4:	bf 90       	pop	r11
    21c6:	af 90       	pop	r10
    21c8:	9f 90       	pop	r9
    21ca:	8f 90       	pop	r8
    21cc:	7f 90       	pop	r7
    21ce:	6f 90       	pop	r6
    21d0:	08 95       	ret

000021d2 <rf_set_rx>:
				break;
		}
		
		
		//nrk_led_clr (ORANGE_LED);
		//nrk_led_toggle (BLUE_LED);
    21d2:	1f 93       	push	r17
    21d4:	cf 93       	push	r28
    21d6:	df 93       	push	r29
    21d8:	ec 01       	movw	r28, r24
    21da:	16 2f       	mov	r17, r22
		// Release the RX buffer so future packets can arrive 
		bmac_rx_pkt_release ();
	}
    21dc:	80 91 b3 05 	lds	r24, 0x05B3
    21e0:	90 91 b4 05 	lds	r25, 0x05B4
    21e4:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <nrk_sem_pend>

}

    21e8:	40 98       	cbi	0x08, 0	; 8
    21ea:	88 e0       	ldi	r24, 0x08	; 8
    21ec:	8e bd       	out	0x2e, r24	; 46
    21ee:	0d b4       	in	r0, 0x2d	; 45
    21f0:	07 fe       	sbrs	r0, 7
    21f2:	fd cf       	rjmp	.-6      	; 0x21ee <rf_set_rx+0x1c>
    21f4:	40 9a       	sbi	0x08, 0	; 8
void nrk_create_taskset ()
    21f6:	40 98       	cbi	0x08, 0	; 8
    21f8:	88 e0       	ldi	r24, 0x08	; 8
    21fa:	8e bd       	out	0x2e, r24	; 46
    21fc:	0d b4       	in	r0, 0x2d	; 45
    21fe:	07 fe       	sbrs	r0, 7
    2200:	fd cf       	rjmp	.-6      	; 0x21fc <rf_set_rx+0x2a>
    2202:	40 9a       	sbi	0x08, 0	; 8
{
    2204:	81 2f       	mov	r24, r17
    2206:	0e 94 86 07 	call	0xf0c	; 0xf0c <halRfSetChannel>
/*
    220a:	d0 93 b9 05 	sts	0x05B9, r29
    220e:	c0 93 b8 05 	sts	0x05B8, r28
	PIN_TASK.task = pin_task;
	PIN_TASK.Ptos = (void *) &pin_task_stack[NRK_APP_STACKSIZE - 1];
	PIN_TASK.Pbos = (void *) &pin_task_stack[0];
    2212:	80 91 b3 05 	lds	r24, 0x05B3
    2216:	90 91 b4 05 	lds	r25, 0x05B4
    221a:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    221e:	df 91       	pop	r29
    2220:	cf 91       	pop	r28
    2222:	1f 91       	pop	r17
    2224:	08 95       	ret

00002226 <rf_set_channel>:
				break;
		}

		switch(rx_buf[2]) {
			case '-': // ~x000
				nrk_gpio_set(NRK_DEBUG_0);
    2226:	1f 93       	push	r17
    2228:	18 2f       	mov	r17, r24
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
    222a:	80 91 b3 05 	lds	r24, 0x05B3
    222e:	90 91 b4 05 	lds	r25, 0x05B4
    2232:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <nrk_sem_pend>
				nrk_led_clr(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
    2236:	81 2f       	mov	r24, r17
    2238:	0e 94 86 07 	call	0xf0c	; 0xf0c <halRfSetChannel>
				nrk_led_clr(GREEN_LED);
				break;
    223c:	80 91 b3 05 	lds	r24, 0x05B3
    2240:	90 91 b4 05 	lds	r25, 0x05B4
    2244:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    2248:	1f 91       	pop	r17
    224a:	08 95       	ret

0000224c <rf_init>:
	RX_TASK.SchType = PREEMPTIVE;
	RX_TASK.period.secs = 0;
	RX_TASK.period.nano_secs = 40 * NANOS_PER_MS;;
	RX_TASK.cpu_reserve.secs = 0;
	RX_TASK.cpu_reserve.nano_secs = 40 * NANOS_PER_MS;;
	RX_TASK.offset.secs = 0;
    224c:	df 92       	push	r13
    224e:	ef 92       	push	r14
    2250:	ff 92       	push	r15
    2252:	0f 93       	push	r16
    2254:	1f 93       	push	r17
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	22 97       	sbiw	r28, 0x02	; 2
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	cd bf       	out	0x3d, r28	; 61
    226a:	8c 01       	movw	r16, r24
    226c:	d6 2e       	mov	r13, r22
    226e:	5a 83       	std	Y+2, r21	; 0x02
    2270:	49 83       	std	Y+1, r20	; 0x01
    2272:	79 01       	movw	r14, r18
	RX_TASK.offset.nano_secs = 0;
	nrk_activate_task (&RX_TASK);

	printf ("Create done\r\n");
}
    2274:	6a e0       	ldi	r22, 0x0A	; 10
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	0e 94 c2 1c 	call	0x3984	; 0x3984 <nrk_sem_create>
    227c:	90 93 b4 05 	sts	0x05B4, r25
    2280:	80 93 b3 05 	sts	0x05B3, r24
    2284:	89 2b       	or	r24, r25
    2286:	31 f4       	brne	.+12     	; 0x2294 <rf_init+0x48>
    2288:	0e 94 09 20 	call	0x4012	; 0x4012 <nrk_get_pid>
    228c:	68 2f       	mov	r22, r24
    228e:	8f e0       	ldi	r24, 0x0F	; 15
    2290:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <nrk_kernel_error_add>
    2294:	80 91 b3 05 	lds	r24, 0x05B3
    2298:	90 91 b4 05 	lds	r25, 0x05B4
    229c:	0e 94 8f 1e 	call	0x3d1e	; 0x3d1e <nrk_sem_pend>
    22a0:	8f 3f       	cpi	r24, 0xFF	; 255
    22a2:	21 f4       	brne	.+8      	; 0x22ac <rf_init+0x60>
    22a4:	83 eb       	ldi	r24, 0xB3	; 179
    22a6:	91 e0       	ldi	r25, 0x01	; 1
    22a8:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <nrk_kprintf>
    22ac:	15 9a       	sbi	0x02, 5	; 2
    22ae:	88 ee       	ldi	r24, 0xE8	; 232
    22b0:	93 e0       	ldi	r25, 0x03	; 3
    22b2:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <halWait>
    22b6:	16 98       	cbi	0x02, 6	; 2
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <halWait>
    22c0:	16 9a       	sbi	0x02, 6	; 2
    22c2:	84 e6       	ldi	r24, 0x64	; 100
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <halWait>
    22ca:	f8 94       	cli
    22cc:	40 98       	cbi	0x08, 0	; 8
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	8e bd       	out	0x2e, r24	; 46
    22d2:	0d b4       	in	r0, 0x2d	; 45
    22d4:	07 fe       	sbrs	r0, 7
    22d6:	fd cf       	rjmp	.-6      	; 0x22d2 <rf_init+0x86>
    22d8:	40 9a       	sbi	0x08, 0	; 8
    22da:	82 ee       	ldi	r24, 0xE2	; 226
    22dc:	92 e0       	ldi	r25, 0x02	; 2
    22de:	90 93 b7 05 	sts	0x05B7, r25
    22e2:	80 93 b6 05 	sts	0x05B6, r24
    22e6:	40 98       	cbi	0x08, 0	; 8
    22e8:	81 e1       	ldi	r24, 0x11	; 17
    22ea:	8e bd       	out	0x2e, r24	; 46
    22ec:	0d b4       	in	r0, 0x2d	; 45
    22ee:	07 fe       	sbrs	r0, 7
    22f0:	fd cf       	rjmp	.-6      	; 0x22ec <rf_init+0xa0>
    22f2:	82 e0       	ldi	r24, 0x02	; 2
    22f4:	8e bd       	out	0x2e, r24	; 46
    22f6:	0d b4       	in	r0, 0x2d	; 45
    22f8:	07 fe       	sbrs	r0, 7
    22fa:	fd cf       	rjmp	.-6      	; 0x22f6 <rf_init+0xaa>
    22fc:	82 ee       	ldi	r24, 0xE2	; 226
    22fe:	8e bd       	out	0x2e, r24	; 46
    2300:	0d b4       	in	r0, 0x2d	; 45
    2302:	07 fe       	sbrs	r0, 7
    2304:	fd cf       	rjmp	.-6      	; 0x2300 <rf_init+0xb4>
    2306:	40 9a       	sbi	0x08, 0	; 8
    2308:	40 98       	cbi	0x08, 0	; 8
    230a:	82 e1       	ldi	r24, 0x12	; 18
    230c:	8e bd       	out	0x2e, r24	; 46
    230e:	0d b4       	in	r0, 0x2d	; 45
    2310:	07 fe       	sbrs	r0, 7
    2312:	fd cf       	rjmp	.-6      	; 0x230e <rf_init+0xc2>
    2314:	85 e0       	ldi	r24, 0x05	; 5
    2316:	8e bd       	out	0x2e, r24	; 46
    2318:	0d b4       	in	r0, 0x2d	; 45
    231a:	07 fe       	sbrs	r0, 7
    231c:	fd cf       	rjmp	.-6      	; 0x2318 <rf_init+0xcc>
    231e:	1e bc       	out	0x2e, r1	; 46
    2320:	0d b4       	in	r0, 0x2d	; 45
    2322:	07 fe       	sbrs	r0, 7
    2324:	fd cf       	rjmp	.-6      	; 0x2320 <rf_init+0xd4>
    2326:	40 9a       	sbi	0x08, 0	; 8
    2328:	40 98       	cbi	0x08, 0	; 8
    232a:	8c e1       	ldi	r24, 0x1C	; 28
    232c:	8e bd       	out	0x2e, r24	; 46
    232e:	0d b4       	in	r0, 0x2d	; 45
    2330:	07 fe       	sbrs	r0, 7
    2332:	fd cf       	rjmp	.-6      	; 0x232e <rf_init+0xe2>
    2334:	1e bc       	out	0x2e, r1	; 46
    2336:	0d b4       	in	r0, 0x2d	; 45
    2338:	07 fe       	sbrs	r0, 7
    233a:	fd cf       	rjmp	.-6      	; 0x2336 <rf_init+0xea>
    233c:	8f e7       	ldi	r24, 0x7F	; 127
    233e:	8e bd       	out	0x2e, r24	; 46
    2340:	0d b4       	in	r0, 0x2d	; 45
    2342:	07 fe       	sbrs	r0, 7
    2344:	fd cf       	rjmp	.-6      	; 0x2340 <rf_init+0xf4>
    2346:	40 9a       	sbi	0x08, 0	; 8
    2348:	40 98       	cbi	0x08, 0	; 8
    234a:	89 e1       	ldi	r24, 0x19	; 25
    234c:	8e bd       	out	0x2e, r24	; 46
    234e:	0d b4       	in	r0, 0x2d	; 45
    2350:	07 fe       	sbrs	r0, 7
    2352:	fd cf       	rjmp	.-6      	; 0x234e <rf_init+0x102>
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	8e bd       	out	0x2e, r24	; 46
    2358:	0d b4       	in	r0, 0x2d	; 45
    235a:	07 fe       	sbrs	r0, 7
    235c:	fd cf       	rjmp	.-6      	; 0x2358 <rf_init+0x10c>
    235e:	84 ec       	ldi	r24, 0xC4	; 196
    2360:	8e bd       	out	0x2e, r24	; 46
    2362:	0d b4       	in	r0, 0x2d	; 45
    2364:	07 fe       	sbrs	r0, 7
    2366:	fd cf       	rjmp	.-6      	; 0x2362 <rf_init+0x116>
    2368:	40 9a       	sbi	0x08, 0	; 8
    236a:	40 98       	cbi	0x08, 0	; 8
    236c:	87 e1       	ldi	r24, 0x17	; 23
    236e:	8e bd       	out	0x2e, r24	; 46
    2370:	0d b4       	in	r0, 0x2d	; 45
    2372:	07 fe       	sbrs	r0, 7
    2374:	fd cf       	rjmp	.-6      	; 0x2370 <rf_init+0x124>
    2376:	8a e1       	ldi	r24, 0x1A	; 26
    2378:	8e bd       	out	0x2e, r24	; 46
    237a:	0d b4       	in	r0, 0x2d	; 45
    237c:	07 fe       	sbrs	r0, 7
    237e:	fd cf       	rjmp	.-6      	; 0x237a <rf_init+0x12e>
    2380:	86 e5       	ldi	r24, 0x56	; 86
    2382:	8e bd       	out	0x2e, r24	; 46
    2384:	0d b4       	in	r0, 0x2d	; 45
    2386:	07 fe       	sbrs	r0, 7
    2388:	fd cf       	rjmp	.-6      	; 0x2384 <rf_init+0x138>
    238a:	40 9a       	sbi	0x08, 0	; 8
    238c:	84 ef       	ldi	r24, 0xF4	; 244
    238e:	91 e0       	ldi	r25, 0x01	; 1
    2390:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <nrk_spin_wait_us>
    2394:	40 98       	cbi	0x08, 0	; 8
    2396:	88 ee       	ldi	r24, 0xE8	; 232
    2398:	8e bd       	out	0x2e, r24	; 46
    239a:	0d b4       	in	r0, 0x2d	; 45
    239c:	07 fe       	sbrs	r0, 7
    239e:	fd cf       	rjmp	.-6      	; 0x239a <rf_init+0x14e>
    23a0:	80 e8       	ldi	r24, 0x80	; 128
    23a2:	8e bd       	out	0x2e, r24	; 46
    23a4:	0d b4       	in	r0, 0x2d	; 45
    23a6:	07 fe       	sbrs	r0, 7
    23a8:	fd cf       	rjmp	.-6      	; 0x23a4 <rf_init+0x158>
    23aa:	fe 01       	movw	r30, r28
    23ac:	31 96       	adiw	r30, 0x01	; 1
    23ae:	9e 01       	movw	r18, r28
    23b0:	2d 5f       	subi	r18, 0xFD	; 253
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	80 81       	ld	r24, Z
    23b6:	8e bd       	out	0x2e, r24	; 46
    23b8:	0d b4       	in	r0, 0x2d	; 45
    23ba:	07 fe       	sbrs	r0, 7
    23bc:	fd cf       	rjmp	.-6      	; 0x23b8 <rf_init+0x16c>
    23be:	31 96       	adiw	r30, 0x01	; 1
    23c0:	e2 17       	cp	r30, r18
    23c2:	f3 07       	cpc	r31, r19
    23c4:	b9 f7       	brne	.-18     	; 0x23b4 <rf_init+0x168>
    23c6:	40 9a       	sbi	0x08, 0	; 8
    23c8:	84 ef       	ldi	r24, 0xF4	; 244
    23ca:	91 e0       	ldi	r25, 0x01	; 1
    23cc:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <nrk_spin_wait_us>
    23d0:	78 94       	sei
    23d2:	8d 2d       	mov	r24, r13
    23d4:	0e 94 86 07 	call	0xf0c	; 0xf0c <halRfSetChannel>
    23d8:	78 94       	sei
    23da:	10 93 b9 05 	sts	0x05B9, r17
    23de:	00 93 b8 05 	sts	0x05B8, r16
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	9a 81       	ldd	r25, Y+2	; 0x02
    23e6:	90 93 bd 05 	sts	0x05BD, r25
    23ea:	80 93 bc 05 	sts	0x05BC, r24
    23ee:	f0 92 bf 05 	sts	0x05BF, r15
    23f2:	e0 92 be 05 	sts	0x05BE, r14
    23f6:	10 92 ba 05 	sts	0x05BA, r1
    23fa:	10 92 c0 05 	sts	0x05C0, r1
    23fe:	0e 94 a5 07 	call	0xf4a	; 0xf4a <halRfWaitForCrystalOscillator>
    2402:	80 91 b3 05 	lds	r24, 0x05B3
    2406:	90 91 b4 05 	lds	r25, 0x05B4
    240a:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <nrk_sem_post>
    240e:	8f 3f       	cpi	r24, 0xFF	; 255
    2410:	39 f4       	brne	.+14     	; 0x2420 <rf_init+0x1d4>
    2412:	86 e8       	ldi	r24, 0x86	; 134
    2414:	91 e0       	ldi	r25, 0x01	; 1
    2416:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <nrk_kprintf>
    241a:	82 e0       	ldi	r24, 0x02	; 2
    241c:	0e 94 fe 19 	call	0x33fc	; 0x33fc <_nrk_errno_set>
    2420:	10 92 c3 05 	sts	0x05C3, r1
    2424:	10 92 b5 05 	sts	0x05B5, r1
    2428:	10 92 c4 05 	sts	0x05C4, r1
    242c:	22 96       	adiw	r28, 0x02	; 2
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	1f 91       	pop	r17
    243e:	0f 91       	pop	r16
    2440:	ff 90       	pop	r15
    2442:	ef 90       	pop	r14
    2444:	df 90       	pop	r13
    2446:	08 95       	ret

00002448 <getc1>:
{
	while(1) {
		nrk_led_toggle (RED_LED);
		nrk_wait_until_next_period ();
		nrk_led_toggle (BLUE_LED);
		nrk_wait_until_next_period ();
    2448:	20 91 dc 05 	lds	r18, 0x05DC
    244c:	80 91 ca 05 	lds	r24, 0x05CA
    2450:	28 17       	cp	r18, r24
    2452:	81 f0       	breq	.+32     	; 0x2474 <getc1+0x2c>
	}
}
    2454:	e2 2f       	mov	r30, r18
    2456:	ff 27       	eor	r31, r31
    2458:	e5 53       	subi	r30, 0x35	; 53
    245a:	fa 4f       	sbci	r31, 0xFA	; 250
    245c:	e0 81       	ld	r30, Z

    245e:	82 2f       	mov	r24, r18
    2460:	8f 5f       	subi	r24, 0xFF	; 255
    2462:	80 93 dc 05 	sts	0x05DC, r24
void rx_task ()
    2466:	80 31       	cpi	r24, 0x10	; 16
    2468:	11 f4       	brne	.+4      	; 0x246e <getc1+0x26>
    246a:	10 92 dc 05 	sts	0x05DC, r1
{
    246e:	8e 2f       	mov	r24, r30
    2470:	99 27       	eor	r25, r25
    2472:	08 95       	ret
	uint8_t i, len;
	int8_t rssi, val;
	uint8_t *local_rx_buf;
    2474:	80 91 c8 00 	lds	r24, 0x00C8
    2478:	87 ff       	sbrs	r24, 7
    247a:	fc cf       	rjmp	.-8      	; 0x2474 <getc1+0x2c>
    247c:	80 91 c8 00 	lds	r24, 0x00C8
    2480:	8f 77       	andi	r24, 0x7F	; 127
    2482:	80 93 c8 00 	sts	0x00C8, r24
    2486:	80 91 ce 00 	lds	r24, 0x00CE
	nrk_time_t check_period;
    248a:	99 27       	eor	r25, r25
	printf ("rx_task PID=%d\r\n", nrk_get_pid ());
    248c:	08 95       	ret

0000248e <nrk_uart_data_ready>:

	// init bmac on channel 25 
	bmac_init (25);

    248e:	88 23       	and	r24, r24
    2490:	51 f4       	brne	.+20     	; 0x24a6 <nrk_uart_data_ready+0x18>
	// By default the RX check rate is 100ms
	// below shows how to change that
    2492:	80 91 c0 00 	lds	r24, 0x00C0
    2496:	99 27       	eor	r25, r25
    2498:	87 fd       	sbrc	r24, 7
    249a:	90 95       	com	r25
    249c:	88 27       	eor	r24, r24
    249e:	99 0f       	add	r25, r25
    24a0:	88 1f       	adc	r24, r24
    24a2:	99 27       	eor	r25, r25
    24a4:	08 95       	ret
	check_period.secs=0;
	check_period.nano_secs=40*NANOS_PER_MS; // Fastest we could safely go
    24a6:	81 30       	cpi	r24, 0x01	; 1
    24a8:	19 f0       	breq	.+6      	; 0x24b0 <nrk_uart_data_ready+0x22>
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	08 95       	ret
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	90 91 dc 05 	lds	r25, 0x05DC
    24b8:	80 91 ca 05 	lds	r24, 0x05CA
    24bc:	98 17       	cp	r25, r24
    24be:	11 f0       	breq	.+4      	; 0x24c4 <nrk_uart_data_ready+0x36>
    24c0:	21 e0       	ldi	r18, 0x01	; 1
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	c9 01       	movw	r24, r18
	val=bmac_set_rx_check_rate(check_period);

	// The default Clear Channel Assement RSSI threshold is -45
	// Setting this value higher means that you will only trigger
	// receive with a very strong signal.  Setting this lower means
    24c6:	08 95       	ret

000024c8 <PORT_INIT>:
	PIN_TASK.task = pin_task;
	PIN_TASK.Ptos = (void *) &pin_task_stack[NRK_APP_STACKSIZE - 1];
	PIN_TASK.Pbos = (void *) &pin_task_stack[0];
	PIN_TASK.prio = 1;
	PIN_TASK.FirstActivation = TRUE;
	PIN_TASK.Type = BASIC_TASK;
    24c8:	85 b7       	in	r24, 0x35	; 53
    24ca:	80 61       	ori	r24, 0x10	; 16
    24cc:	85 bf       	out	0x35, r24	; 53
	PIN_TASK.SchType = PREEMPTIVE;
    24ce:	86 e0       	ldi	r24, 0x06	; 6
    24d0:	84 b9       	out	0x04, r24	; 4
	PIN_TASK.period.secs = 3;
    24d2:	87 e0       	ldi	r24, 0x07	; 7
    24d4:	85 b9       	out	0x05, r24	; 5
	PIN_TASK.period.nano_secs = 100 * NANOS_PER_MS;
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	87 b9       	out	0x07, r24	; 7
	PIN_TASK.cpu_reserve.secs = 0;
    24da:	88 b9       	out	0x08, r24	; 8
	PIN_TASK.cpu_reserve.nano_secs = 50 * NANOS_PER_MS;
    24dc:	8c e3       	ldi	r24, 0x3C	; 60
    24de:	8d b9       	out	0x0d, r24	; 13
	PIN_TASK.offset.secs = 0;
    24e0:	8b e0       	ldi	r24, 0x0B	; 11
    24e2:	8a b9       	out	0x0a, r24	; 10
	PIN_TASK.offset.nano_secs = 0;
    24e4:	8e e3       	ldi	r24, 0x3E	; 62
    24e6:	8e b9       	out	0x0e, r24	; 14
	nrk_activate_task (&PIN_TASK);
    24e8:	88 e7       	ldi	r24, 0x78	; 120
    24ea:	81 b9       	out	0x01, r24	; 1
*/
    24ec:	80 e4       	ldi	r24, 0x40	; 64
    24ee:	82 b9       	out	0x02, r24	; 2
    24f0:	08 95       	ret

000024f2 <nrk_setup_ports>:
			case '-': // ~x000
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
    24f2:	0e 94 64 12 	call	0x24c8	; 0x24c8 <PORT_INIT>
				nrk_led_clr(GREEN_LED);
    24f6:	80 e5       	ldi	r24, 0x50	; 80
    24f8:	8c bd       	out	0x2c, r24	; 44
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	8d bd       	out	0x2d, r24	; 45
    24fe:	08 95       	ret

00002500 <nrk_gpio_set>:
	RX_TASK.prio = 2;
	RX_TASK.FirstActivation = TRUE;
	RX_TASK.Type = BASIC_TASK;
	RX_TASK.SchType = PREEMPTIVE;
	RX_TASK.period.secs = 0;
	RX_TASK.period.nano_secs = 40 * NANOS_PER_MS;;
    2500:	8f 3f       	cpi	r24, 0xFF	; 255
    2502:	09 f4       	brne	.+2      	; 0x2506 <nrk_gpio_set+0x6>
    2504:	7f c0       	rjmp	.+254    	; 0x2604 <nrk_gpio_set+0x104>
	RX_TASK.cpu_reserve.secs = 0;
    2506:	48 2f       	mov	r20, r24
    2508:	55 27       	eor	r21, r21
    250a:	9a 01       	movw	r18, r20
    250c:	27 70       	andi	r18, 0x07	; 7
    250e:	30 70       	andi	r19, 0x00	; 0
    2510:	22 30       	cpi	r18, 0x02	; 2
    2512:	31 05       	cpc	r19, r1
    2514:	a9 f1       	breq	.+106    	; 0x2580 <nrk_gpio_set+0x80>
    2516:	23 30       	cpi	r18, 0x03	; 3
    2518:	31 05       	cpc	r19, r1
    251a:	44 f4       	brge	.+16     	; 0x252c <nrk_gpio_set+0x2c>
    251c:	21 15       	cp	r18, r1
    251e:	31 05       	cpc	r19, r1
    2520:	89 f0       	breq	.+34     	; 0x2544 <nrk_gpio_set+0x44>
    2522:	21 30       	cpi	r18, 0x01	; 1
    2524:	31 05       	cpc	r19, r1
    2526:	09 f0       	breq	.+2      	; 0x252a <nrk_gpio_set+0x2a>
    2528:	6d c0       	rjmp	.+218    	; 0x2604 <nrk_gpio_set+0x104>
    252a:	1c c0       	rjmp	.+56     	; 0x2564 <nrk_gpio_set+0x64>
    252c:	24 30       	cpi	r18, 0x04	; 4
    252e:	31 05       	cpc	r19, r1
    2530:	09 f4       	brne	.+2      	; 0x2534 <nrk_gpio_set+0x34>
    2532:	46 c0       	rjmp	.+140    	; 0x25c0 <nrk_gpio_set+0xc0>
    2534:	24 30       	cpi	r18, 0x04	; 4
    2536:	31 05       	cpc	r19, r1
    2538:	9c f1       	brlt	.+102    	; 0x25a0 <nrk_gpio_set+0xa0>
    253a:	25 30       	cpi	r18, 0x05	; 5
    253c:	31 05       	cpc	r19, r1
    253e:	09 f0       	breq	.+2      	; 0x2542 <nrk_gpio_set+0x42>
    2540:	61 c0       	rjmp	.+194    	; 0x2604 <nrk_gpio_set+0x104>
    2542:	4e c0       	rjmp	.+156    	; 0x25e0 <nrk_gpio_set+0xe0>
	RX_TASK.cpu_reserve.nano_secs = 40 * NANOS_PER_MS;;
	RX_TASK.offset.secs = 0;
    2544:	22 b1       	in	r18, 0x02	; 2
    2546:	a3 e0       	ldi	r26, 0x03	; 3
    2548:	56 95       	lsr	r21
    254a:	47 95       	ror	r20
    254c:	aa 95       	dec	r26
    254e:	e1 f7       	brne	.-8      	; 0x2548 <nrk_gpio_set+0x48>
    2550:	81 e0       	ldi	r24, 0x01	; 1
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	02 c0       	rjmp	.+4      	; 0x255a <nrk_gpio_set+0x5a>
    2556:	88 0f       	add	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	4a 95       	dec	r20
    255c:	e2 f7       	brpl	.-8      	; 0x2556 <nrk_gpio_set+0x56>
    255e:	28 2b       	or	r18, r24
    2560:	22 b9       	out	0x02, r18	; 2
    2562:	4d c0       	rjmp	.+154    	; 0x25fe <nrk_gpio_set+0xfe>
	RX_TASK.offset.nano_secs = 0;
	nrk_activate_task (&RX_TASK);
    2564:	85 b1       	in	r24, 0x05	; 5
    2566:	f3 e0       	ldi	r31, 0x03	; 3
    2568:	56 95       	lsr	r21
    256a:	47 95       	ror	r20
    256c:	fa 95       	dec	r31
    256e:	e1 f7       	brne	.-8      	; 0x2568 <nrk_gpio_set+0x68>
    2570:	02 c0       	rjmp	.+4      	; 0x2576 <nrk_gpio_set+0x76>
    2572:	22 0f       	add	r18, r18
    2574:	33 1f       	adc	r19, r19
    2576:	4a 95       	dec	r20
    2578:	e2 f7       	brpl	.-8      	; 0x2572 <nrk_gpio_set+0x72>
    257a:	82 2b       	or	r24, r18
    257c:	85 b9       	out	0x05, r24	; 5
    257e:	3f c0       	rjmp	.+126    	; 0x25fe <nrk_gpio_set+0xfe>

	printf ("Create done\r\n");
    2580:	28 b1       	in	r18, 0x08	; 8
    2582:	e3 e0       	ldi	r30, 0x03	; 3
    2584:	56 95       	lsr	r21
    2586:	47 95       	ror	r20
    2588:	ea 95       	dec	r30
    258a:	e1 f7       	brne	.-8      	; 0x2584 <nrk_gpio_set+0x84>
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	02 c0       	rjmp	.+4      	; 0x2596 <nrk_gpio_set+0x96>
    2592:	88 0f       	add	r24, r24
    2594:	99 1f       	adc	r25, r25
    2596:	4a 95       	dec	r20
    2598:	e2 f7       	brpl	.-8      	; 0x2592 <nrk_gpio_set+0x92>
    259a:	28 2b       	or	r18, r24
    259c:	28 b9       	out	0x08, r18	; 8
    259e:	2f c0       	rjmp	.+94     	; 0x25fe <nrk_gpio_set+0xfe>
}
    25a0:	2b b1       	in	r18, 0x0b	; 11
    25a2:	73 e0       	ldi	r23, 0x03	; 3
    25a4:	56 95       	lsr	r21
    25a6:	47 95       	ror	r20
    25a8:	7a 95       	dec	r23
    25aa:	e1 f7       	brne	.-8      	; 0x25a4 <nrk_gpio_set+0xa4>
    25ac:	81 e0       	ldi	r24, 0x01	; 1
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <nrk_gpio_set+0xb6>
    25b2:	88 0f       	add	r24, r24
    25b4:	99 1f       	adc	r25, r25
    25b6:	4a 95       	dec	r20
    25b8:	e2 f7       	brpl	.-8      	; 0x25b2 <nrk_gpio_set+0xb2>
    25ba:	28 2b       	or	r18, r24
    25bc:	2b b9       	out	0x0b, r18	; 11
    25be:	1f c0       	rjmp	.+62     	; 0x25fe <nrk_gpio_set+0xfe>
    25c0:	2e b1       	in	r18, 0x0e	; 14
    25c2:	63 e0       	ldi	r22, 0x03	; 3
    25c4:	56 95       	lsr	r21
    25c6:	47 95       	ror	r20
    25c8:	6a 95       	dec	r22
    25ca:	e1 f7       	brne	.-8      	; 0x25c4 <nrk_gpio_set+0xc4>
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	02 c0       	rjmp	.+4      	; 0x25d6 <nrk_gpio_set+0xd6>
    25d2:	88 0f       	add	r24, r24
    25d4:	99 1f       	adc	r25, r25
    25d6:	4a 95       	dec	r20
    25d8:	e2 f7       	brpl	.-8      	; 0x25d2 <nrk_gpio_set+0xd2>
    25da:	28 2b       	or	r18, r24
    25dc:	2e b9       	out	0x0e, r18	; 14
    25de:	0f c0       	rjmp	.+30     	; 0x25fe <nrk_gpio_set+0xfe>
    25e0:	21 b3       	in	r18, 0x11	; 17
    25e2:	33 e0       	ldi	r19, 0x03	; 3
    25e4:	56 95       	lsr	r21
    25e6:	47 95       	ror	r20
    25e8:	3a 95       	dec	r19
    25ea:	e1 f7       	brne	.-8      	; 0x25e4 <nrk_gpio_set+0xe4>
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <nrk_gpio_set+0xf6>
    25f2:	88 0f       	add	r24, r24
    25f4:	99 1f       	adc	r25, r25
    25f6:	4a 95       	dec	r20
    25f8:	e2 f7       	brpl	.-8      	; 0x25f2 <nrk_gpio_set+0xf2>
    25fa:	28 2b       	or	r18, r24
    25fc:	21 bb       	out	0x11, r18	; 17
    25fe:	81 e0       	ldi	r24, 0x01	; 1
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	08 95       	ret
    2604:	8f ef       	ldi	r24, 0xFF	; 255
    2606:	9f ef       	ldi	r25, 0xFF	; 255
    2608:	08 95       	ret

0000260a <nrk_gpio_clr>:
    260a:	8f 3f       	cpi	r24, 0xFF	; 255
    260c:	09 f4       	brne	.+2      	; 0x2610 <nrk_gpio_clr+0x6>
    260e:	86 c0       	rjmp	.+268    	; 0x271c <nrk_gpio_clr+0x112>
    2610:	48 2f       	mov	r20, r24
    2612:	55 27       	eor	r21, r21
    2614:	9a 01       	movw	r18, r20
    2616:	27 70       	andi	r18, 0x07	; 7
    2618:	30 70       	andi	r19, 0x00	; 0
    261a:	22 30       	cpi	r18, 0x02	; 2
    261c:	31 05       	cpc	r19, r1
    261e:	c1 f1       	breq	.+112    	; 0x2690 <nrk_gpio_clr+0x86>
    2620:	23 30       	cpi	r18, 0x03	; 3
    2622:	31 05       	cpc	r19, r1
    2624:	44 f4       	brge	.+16     	; 0x2636 <nrk_gpio_clr+0x2c>
    2626:	21 15       	cp	r18, r1
    2628:	31 05       	cpc	r19, r1
    262a:	89 f0       	breq	.+34     	; 0x264e <nrk_gpio_clr+0x44>
    262c:	21 30       	cpi	r18, 0x01	; 1
    262e:	31 05       	cpc	r19, r1
    2630:	09 f0       	breq	.+2      	; 0x2634 <nrk_gpio_clr+0x2a>
    2632:	74 c0       	rjmp	.+232    	; 0x271c <nrk_gpio_clr+0x112>
    2634:	1d c0       	rjmp	.+58     	; 0x2670 <nrk_gpio_clr+0x66>
    2636:	24 30       	cpi	r18, 0x04	; 4
    2638:	31 05       	cpc	r19, r1
    263a:	09 f4       	brne	.+2      	; 0x263e <nrk_gpio_clr+0x34>
    263c:	4b c0       	rjmp	.+150    	; 0x26d4 <nrk_gpio_clr+0xca>
    263e:	24 30       	cpi	r18, 0x04	; 4
    2640:	31 05       	cpc	r19, r1
    2642:	bc f1       	brlt	.+110    	; 0x26b2 <nrk_gpio_clr+0xa8>
    2644:	25 30       	cpi	r18, 0x05	; 5
    2646:	31 05       	cpc	r19, r1
    2648:	09 f0       	breq	.+2      	; 0x264c <nrk_gpio_clr+0x42>
    264a:	68 c0       	rjmp	.+208    	; 0x271c <nrk_gpio_clr+0x112>
    264c:	54 c0       	rjmp	.+168    	; 0x26f6 <nrk_gpio_clr+0xec>
    264e:	22 b1       	in	r18, 0x02	; 2
    2650:	73 e0       	ldi	r23, 0x03	; 3
    2652:	56 95       	lsr	r21
    2654:	47 95       	ror	r20
    2656:	7a 95       	dec	r23
    2658:	e1 f7       	brne	.-8      	; 0x2652 <nrk_gpio_clr+0x48>
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	02 c0       	rjmp	.+4      	; 0x2664 <nrk_gpio_clr+0x5a>
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	4a 95       	dec	r20
    2666:	e2 f7       	brpl	.-8      	; 0x2660 <nrk_gpio_clr+0x56>
    2668:	80 95       	com	r24
    266a:	82 23       	and	r24, r18
    266c:	82 b9       	out	0x02, r24	; 2
    266e:	53 c0       	rjmp	.+166    	; 0x2716 <nrk_gpio_clr+0x10c>
    2670:	95 b1       	in	r25, 0x05	; 5
    2672:	63 e0       	ldi	r22, 0x03	; 3
    2674:	56 95       	lsr	r21
    2676:	47 95       	ror	r20
    2678:	6a 95       	dec	r22
    267a:	e1 f7       	brne	.-8      	; 0x2674 <nrk_gpio_clr+0x6a>
    267c:	02 c0       	rjmp	.+4      	; 0x2682 <nrk_gpio_clr+0x78>
    267e:	22 0f       	add	r18, r18
    2680:	33 1f       	adc	r19, r19
    2682:	4a 95       	dec	r20
    2684:	e2 f7       	brpl	.-8      	; 0x267e <nrk_gpio_clr+0x74>
    2686:	82 2f       	mov	r24, r18
    2688:	80 95       	com	r24
    268a:	89 23       	and	r24, r25
    268c:	85 b9       	out	0x05, r24	; 5
    268e:	43 c0       	rjmp	.+134    	; 0x2716 <nrk_gpio_clr+0x10c>
    2690:	28 b1       	in	r18, 0x08	; 8
    2692:	33 e0       	ldi	r19, 0x03	; 3
    2694:	56 95       	lsr	r21
    2696:	47 95       	ror	r20
    2698:	3a 95       	dec	r19
    269a:	e1 f7       	brne	.-8      	; 0x2694 <nrk_gpio_clr+0x8a>
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	02 c0       	rjmp	.+4      	; 0x26a6 <nrk_gpio_clr+0x9c>
    26a2:	88 0f       	add	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	4a 95       	dec	r20
    26a8:	e2 f7       	brpl	.-8      	; 0x26a2 <nrk_gpio_clr+0x98>
    26aa:	80 95       	com	r24
    26ac:	82 23       	and	r24, r18
    26ae:	88 b9       	out	0x08, r24	; 8
    26b0:	32 c0       	rjmp	.+100    	; 0x2716 <nrk_gpio_clr+0x10c>
    26b2:	2b b1       	in	r18, 0x0b	; 11
    26b4:	93 e0       	ldi	r25, 0x03	; 3
    26b6:	56 95       	lsr	r21
    26b8:	47 95       	ror	r20
    26ba:	9a 95       	dec	r25
    26bc:	e1 f7       	brne	.-8      	; 0x26b6 <nrk_gpio_clr+0xac>
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	02 c0       	rjmp	.+4      	; 0x26c8 <nrk_gpio_clr+0xbe>
    26c4:	88 0f       	add	r24, r24
    26c6:	99 1f       	adc	r25, r25
    26c8:	4a 95       	dec	r20
    26ca:	e2 f7       	brpl	.-8      	; 0x26c4 <nrk_gpio_clr+0xba>
    26cc:	80 95       	com	r24
    26ce:	82 23       	and	r24, r18
    26d0:	8b b9       	out	0x0b, r24	; 11
    26d2:	21 c0       	rjmp	.+66     	; 0x2716 <nrk_gpio_clr+0x10c>
    26d4:	2e b1       	in	r18, 0x0e	; 14
    26d6:	83 e0       	ldi	r24, 0x03	; 3
    26d8:	56 95       	lsr	r21
    26da:	47 95       	ror	r20
    26dc:	8a 95       	dec	r24
    26de:	e1 f7       	brne	.-8      	; 0x26d8 <nrk_gpio_clr+0xce>
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	02 c0       	rjmp	.+4      	; 0x26ea <nrk_gpio_clr+0xe0>
    26e6:	88 0f       	add	r24, r24
    26e8:	99 1f       	adc	r25, r25
    26ea:	4a 95       	dec	r20
    26ec:	e2 f7       	brpl	.-8      	; 0x26e6 <nrk_gpio_clr+0xdc>
    26ee:	80 95       	com	r24
    26f0:	82 23       	and	r24, r18
    26f2:	8e b9       	out	0x0e, r24	; 14
    26f4:	10 c0       	rjmp	.+32     	; 0x2716 <nrk_gpio_clr+0x10c>
    26f6:	21 b3       	in	r18, 0x11	; 17
    26f8:	b3 e0       	ldi	r27, 0x03	; 3
    26fa:	56 95       	lsr	r21
    26fc:	47 95       	ror	r20
    26fe:	ba 95       	dec	r27
    2700:	e1 f7       	brne	.-8      	; 0x26fa <nrk_gpio_clr+0xf0>
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	02 c0       	rjmp	.+4      	; 0x270c <nrk_gpio_clr+0x102>
    2708:	88 0f       	add	r24, r24
    270a:	99 1f       	adc	r25, r25
    270c:	4a 95       	dec	r20
    270e:	e2 f7       	brpl	.-8      	; 0x2708 <nrk_gpio_clr+0xfe>
    2710:	80 95       	com	r24
    2712:	82 23       	and	r24, r18
    2714:	81 bb       	out	0x11, r24	; 17
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	90 e0       	ldi	r25, 0x00	; 0
    271a:	08 95       	ret
    271c:	8f ef       	ldi	r24, 0xFF	; 255
    271e:	9f ef       	ldi	r25, 0xFF	; 255
    2720:	08 95       	ret

00002722 <nrk_gpio_get>:
    2722:	8f 3f       	cpi	r24, 0xFF	; 255
    2724:	a9 f1       	breq	.+106    	; 0x2790 <nrk_gpio_get+0x6e>
    2726:	28 2f       	mov	r18, r24
    2728:	33 27       	eor	r19, r19
    272a:	c9 01       	movw	r24, r18
    272c:	87 70       	andi	r24, 0x07	; 7
    272e:	90 70       	andi	r25, 0x00	; 0
    2730:	82 30       	cpi	r24, 0x02	; 2
    2732:	91 05       	cpc	r25, r1
    2734:	a9 f0       	breq	.+42     	; 0x2760 <nrk_gpio_get+0x3e>
    2736:	83 30       	cpi	r24, 0x03	; 3
    2738:	91 05       	cpc	r25, r1
    273a:	2c f4       	brge	.+10     	; 0x2746 <nrk_gpio_get+0x24>
    273c:	00 97       	sbiw	r24, 0x00	; 0
    273e:	61 f0       	breq	.+24     	; 0x2758 <nrk_gpio_get+0x36>
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	31 f5       	brne	.+76     	; 0x2790 <nrk_gpio_get+0x6e>
    2744:	0b c0       	rjmp	.+22     	; 0x275c <nrk_gpio_get+0x3a>
    2746:	84 30       	cpi	r24, 0x04	; 4
    2748:	91 05       	cpc	r25, r1
    274a:	71 f0       	breq	.+28     	; 0x2768 <nrk_gpio_get+0x46>
    274c:	84 30       	cpi	r24, 0x04	; 4
    274e:	91 05       	cpc	r25, r1
    2750:	4c f0       	brlt	.+18     	; 0x2764 <nrk_gpio_get+0x42>
    2752:	05 97       	sbiw	r24, 0x05	; 5
    2754:	e9 f4       	brne	.+58     	; 0x2790 <nrk_gpio_get+0x6e>
    2756:	0a c0       	rjmp	.+20     	; 0x276c <nrk_gpio_get+0x4a>
    2758:	80 b1       	in	r24, 0x00	; 0
    275a:	09 c0       	rjmp	.+18     	; 0x276e <nrk_gpio_get+0x4c>
    275c:	83 b1       	in	r24, 0x03	; 3
    275e:	07 c0       	rjmp	.+14     	; 0x276e <nrk_gpio_get+0x4c>
    2760:	86 b1       	in	r24, 0x06	; 6
    2762:	05 c0       	rjmp	.+10     	; 0x276e <nrk_gpio_get+0x4c>
    2764:	89 b1       	in	r24, 0x09	; 9
    2766:	03 c0       	rjmp	.+6      	; 0x276e <nrk_gpio_get+0x4c>
    2768:	8c b1       	in	r24, 0x0c	; 12
    276a:	01 c0       	rjmp	.+2      	; 0x276e <nrk_gpio_get+0x4c>
    276c:	8f b1       	in	r24, 0x0f	; 15
    276e:	99 27       	eor	r25, r25
    2770:	e3 e0       	ldi	r30, 0x03	; 3
    2772:	36 95       	lsr	r19
    2774:	27 95       	ror	r18
    2776:	ea 95       	dec	r30
    2778:	e1 f7       	brne	.-8      	; 0x2772 <nrk_gpio_get+0x50>
    277a:	02 c0       	rjmp	.+4      	; 0x2780 <nrk_gpio_get+0x5e>
    277c:	95 95       	asr	r25
    277e:	87 95       	ror	r24
    2780:	2a 95       	dec	r18
    2782:	e2 f7       	brpl	.-8      	; 0x277c <nrk_gpio_get+0x5a>
    2784:	99 27       	eor	r25, r25
    2786:	87 fd       	sbrc	r24, 7
    2788:	90 95       	com	r25
    278a:	81 70       	andi	r24, 0x01	; 1
    278c:	90 70       	andi	r25, 0x00	; 0
    278e:	08 95       	ret
    2790:	8f ef       	ldi	r24, 0xFF	; 255
    2792:	9f ef       	ldi	r25, 0xFF	; 255
    2794:	08 95       	ret

00002796 <nrk_gpio_toggle>:
    2796:	8f 3f       	cpi	r24, 0xFF	; 255
    2798:	09 f4       	brne	.+2      	; 0x279c <nrk_gpio_toggle+0x6>
    279a:	03 c1       	rjmp	.+518    	; 0x29a2 <nrk_gpio_toggle+0x20c>
    279c:	28 2f       	mov	r18, r24
    279e:	33 27       	eor	r19, r19
    27a0:	a9 01       	movw	r20, r18
    27a2:	47 70       	andi	r20, 0x07	; 7
    27a4:	50 70       	andi	r21, 0x00	; 0
    27a6:	42 30       	cpi	r20, 0x02	; 2
    27a8:	51 05       	cpc	r21, r1
    27aa:	09 f4       	brne	.+2      	; 0x27ae <nrk_gpio_toggle+0x18>
    27ac:	5c c0       	rjmp	.+184    	; 0x2866 <nrk_gpio_toggle+0xd0>
    27ae:	43 30       	cpi	r20, 0x03	; 3
    27b0:	51 05       	cpc	r21, r1
    27b2:	44 f4       	brge	.+16     	; 0x27c4 <nrk_gpio_toggle+0x2e>
    27b4:	41 15       	cp	r20, r1
    27b6:	51 05       	cpc	r21, r1
    27b8:	91 f0       	breq	.+36     	; 0x27de <nrk_gpio_toggle+0x48>
    27ba:	41 30       	cpi	r20, 0x01	; 1
    27bc:	51 05       	cpc	r21, r1
    27be:	09 f0       	breq	.+2      	; 0x27c2 <nrk_gpio_toggle+0x2c>
    27c0:	f0 c0       	rjmp	.+480    	; 0x29a2 <nrk_gpio_toggle+0x20c>
    27c2:	34 c0       	rjmp	.+104    	; 0x282c <nrk_gpio_toggle+0x96>
    27c4:	44 30       	cpi	r20, 0x04	; 4
    27c6:	51 05       	cpc	r21, r1
    27c8:	09 f4       	brne	.+2      	; 0x27cc <nrk_gpio_toggle+0x36>
    27ca:	9b c0       	rjmp	.+310    	; 0x2902 <nrk_gpio_toggle+0x16c>
    27cc:	44 30       	cpi	r20, 0x04	; 4
    27ce:	51 05       	cpc	r21, r1
    27d0:	0c f4       	brge	.+2      	; 0x27d4 <nrk_gpio_toggle+0x3e>
    27d2:	70 c0       	rjmp	.+224    	; 0x28b4 <nrk_gpio_toggle+0x11e>
    27d4:	45 30       	cpi	r20, 0x05	; 5
    27d6:	51 05       	cpc	r21, r1
    27d8:	09 f0       	breq	.+2      	; 0x27dc <nrk_gpio_toggle+0x46>
    27da:	e3 c0       	rjmp	.+454    	; 0x29a2 <nrk_gpio_toggle+0x20c>
    27dc:	b9 c0       	rjmp	.+370    	; 0x2950 <nrk_gpio_toggle+0x1ba>
    27de:	80 b1       	in	r24, 0x00	; 0
    27e0:	a9 01       	movw	r20, r18
    27e2:	73 e0       	ldi	r23, 0x03	; 3
    27e4:	56 95       	lsr	r21
    27e6:	47 95       	ror	r20
    27e8:	7a 95       	dec	r23
    27ea:	e1 f7       	brne	.-8      	; 0x27e4 <nrk_gpio_toggle+0x4e>
    27ec:	99 27       	eor	r25, r25
    27ee:	04 2e       	mov	r0, r20
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <nrk_gpio_toggle+0x60>
    27f2:	95 95       	asr	r25
    27f4:	87 95       	ror	r24
    27f6:	0a 94       	dec	r0
    27f8:	e2 f7       	brpl	.-8      	; 0x27f2 <nrk_gpio_toggle+0x5c>
    27fa:	80 fd       	sbrc	r24, 0
    27fc:	0b c0       	rjmp	.+22     	; 0x2814 <nrk_gpio_toggle+0x7e>
    27fe:	22 b1       	in	r18, 0x02	; 2
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	02 c0       	rjmp	.+4      	; 0x280a <nrk_gpio_toggle+0x74>
    2806:	88 0f       	add	r24, r24
    2808:	99 1f       	adc	r25, r25
    280a:	4a 95       	dec	r20
    280c:	e2 f7       	brpl	.-8      	; 0x2806 <nrk_gpio_toggle+0x70>
    280e:	28 2b       	or	r18, r24
    2810:	22 b9       	out	0x02, r18	; 2
    2812:	c4 c0       	rjmp	.+392    	; 0x299c <nrk_gpio_toggle+0x206>
    2814:	22 b1       	in	r18, 0x02	; 2
    2816:	81 e0       	ldi	r24, 0x01	; 1
    2818:	90 e0       	ldi	r25, 0x00	; 0
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <nrk_gpio_toggle+0x8a>
    281c:	88 0f       	add	r24, r24
    281e:	99 1f       	adc	r25, r25
    2820:	4a 95       	dec	r20
    2822:	e2 f7       	brpl	.-8      	; 0x281c <nrk_gpio_toggle+0x86>
    2824:	80 95       	com	r24
    2826:	82 23       	and	r24, r18
    2828:	82 b9       	out	0x02, r24	; 2
    282a:	b8 c0       	rjmp	.+368    	; 0x299c <nrk_gpio_toggle+0x206>
    282c:	83 b1       	in	r24, 0x03	; 3
    282e:	63 e0       	ldi	r22, 0x03	; 3
    2830:	36 95       	lsr	r19
    2832:	27 95       	ror	r18
    2834:	6a 95       	dec	r22
    2836:	e1 f7       	brne	.-8      	; 0x2830 <nrk_gpio_toggle+0x9a>
    2838:	99 27       	eor	r25, r25
    283a:	02 2e       	mov	r0, r18
    283c:	02 c0       	rjmp	.+4      	; 0x2842 <nrk_gpio_toggle+0xac>
    283e:	95 95       	asr	r25
    2840:	87 95       	ror	r24
    2842:	0a 94       	dec	r0
    2844:	e2 f7       	brpl	.-8      	; 0x283e <nrk_gpio_toggle+0xa8>
    2846:	02 c0       	rjmp	.+4      	; 0x284c <nrk_gpio_toggle+0xb6>
    2848:	44 0f       	add	r20, r20
    284a:	55 1f       	adc	r21, r21
    284c:	2a 95       	dec	r18
    284e:	e2 f7       	brpl	.-8      	; 0x2848 <nrk_gpio_toggle+0xb2>
    2850:	80 fd       	sbrc	r24, 0
    2852:	03 c0       	rjmp	.+6      	; 0x285a <nrk_gpio_toggle+0xc4>
    2854:	85 b1       	in	r24, 0x05	; 5
    2856:	84 2b       	or	r24, r20
    2858:	04 c0       	rjmp	.+8      	; 0x2862 <nrk_gpio_toggle+0xcc>
    285a:	95 b1       	in	r25, 0x05	; 5
    285c:	84 2f       	mov	r24, r20
    285e:	80 95       	com	r24
    2860:	89 23       	and	r24, r25
    2862:	85 b9       	out	0x05, r24	; 5
    2864:	9b c0       	rjmp	.+310    	; 0x299c <nrk_gpio_toggle+0x206>
    2866:	86 b1       	in	r24, 0x06	; 6
    2868:	a9 01       	movw	r20, r18
    286a:	93 e0       	ldi	r25, 0x03	; 3
    286c:	56 95       	lsr	r21
    286e:	47 95       	ror	r20
    2870:	9a 95       	dec	r25
    2872:	e1 f7       	brne	.-8      	; 0x286c <nrk_gpio_toggle+0xd6>
    2874:	99 27       	eor	r25, r25
    2876:	04 2e       	mov	r0, r20
    2878:	02 c0       	rjmp	.+4      	; 0x287e <nrk_gpio_toggle+0xe8>
    287a:	95 95       	asr	r25
    287c:	87 95       	ror	r24
    287e:	0a 94       	dec	r0
    2880:	e2 f7       	brpl	.-8      	; 0x287a <nrk_gpio_toggle+0xe4>
    2882:	80 fd       	sbrc	r24, 0
    2884:	0b c0       	rjmp	.+22     	; 0x289c <nrk_gpio_toggle+0x106>
    2886:	28 b1       	in	r18, 0x08	; 8
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	02 c0       	rjmp	.+4      	; 0x2892 <nrk_gpio_toggle+0xfc>
    288e:	88 0f       	add	r24, r24
    2890:	99 1f       	adc	r25, r25
    2892:	4a 95       	dec	r20
    2894:	e2 f7       	brpl	.-8      	; 0x288e <nrk_gpio_toggle+0xf8>
    2896:	28 2b       	or	r18, r24
    2898:	28 b9       	out	0x08, r18	; 8
    289a:	80 c0       	rjmp	.+256    	; 0x299c <nrk_gpio_toggle+0x206>
    289c:	28 b1       	in	r18, 0x08	; 8
    289e:	81 e0       	ldi	r24, 0x01	; 1
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	02 c0       	rjmp	.+4      	; 0x28a8 <nrk_gpio_toggle+0x112>
    28a4:	88 0f       	add	r24, r24
    28a6:	99 1f       	adc	r25, r25
    28a8:	4a 95       	dec	r20
    28aa:	e2 f7       	brpl	.-8      	; 0x28a4 <nrk_gpio_toggle+0x10e>
    28ac:	80 95       	com	r24
    28ae:	82 23       	and	r24, r18
    28b0:	88 b9       	out	0x08, r24	; 8
    28b2:	74 c0       	rjmp	.+232    	; 0x299c <nrk_gpio_toggle+0x206>
    28b4:	89 b1       	in	r24, 0x09	; 9
    28b6:	a9 01       	movw	r20, r18
    28b8:	b3 e0       	ldi	r27, 0x03	; 3
    28ba:	56 95       	lsr	r21
    28bc:	47 95       	ror	r20
    28be:	ba 95       	dec	r27
    28c0:	e1 f7       	brne	.-8      	; 0x28ba <nrk_gpio_toggle+0x124>
    28c2:	99 27       	eor	r25, r25
    28c4:	04 2e       	mov	r0, r20
    28c6:	02 c0       	rjmp	.+4      	; 0x28cc <nrk_gpio_toggle+0x136>
    28c8:	95 95       	asr	r25
    28ca:	87 95       	ror	r24
    28cc:	0a 94       	dec	r0
    28ce:	e2 f7       	brpl	.-8      	; 0x28c8 <nrk_gpio_toggle+0x132>
    28d0:	80 fd       	sbrc	r24, 0
    28d2:	0b c0       	rjmp	.+22     	; 0x28ea <nrk_gpio_toggle+0x154>
    28d4:	2b b1       	in	r18, 0x0b	; 11
    28d6:	81 e0       	ldi	r24, 0x01	; 1
    28d8:	90 e0       	ldi	r25, 0x00	; 0
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <nrk_gpio_toggle+0x14a>
    28dc:	88 0f       	add	r24, r24
    28de:	99 1f       	adc	r25, r25
    28e0:	4a 95       	dec	r20
    28e2:	e2 f7       	brpl	.-8      	; 0x28dc <nrk_gpio_toggle+0x146>
    28e4:	28 2b       	or	r18, r24
    28e6:	2b b9       	out	0x0b, r18	; 11
    28e8:	59 c0       	rjmp	.+178    	; 0x299c <nrk_gpio_toggle+0x206>
    28ea:	2b b1       	in	r18, 0x0b	; 11
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	02 c0       	rjmp	.+4      	; 0x28f6 <nrk_gpio_toggle+0x160>
    28f2:	88 0f       	add	r24, r24
    28f4:	99 1f       	adc	r25, r25
    28f6:	4a 95       	dec	r20
    28f8:	e2 f7       	brpl	.-8      	; 0x28f2 <nrk_gpio_toggle+0x15c>
    28fa:	80 95       	com	r24
    28fc:	82 23       	and	r24, r18
    28fe:	8b b9       	out	0x0b, r24	; 11
    2900:	4d c0       	rjmp	.+154    	; 0x299c <nrk_gpio_toggle+0x206>
    2902:	8c b1       	in	r24, 0x0c	; 12
    2904:	a9 01       	movw	r20, r18
    2906:	a3 e0       	ldi	r26, 0x03	; 3
    2908:	56 95       	lsr	r21
    290a:	47 95       	ror	r20
    290c:	aa 95       	dec	r26
    290e:	e1 f7       	brne	.-8      	; 0x2908 <nrk_gpio_toggle+0x172>
    2910:	99 27       	eor	r25, r25
    2912:	04 2e       	mov	r0, r20
    2914:	02 c0       	rjmp	.+4      	; 0x291a <nrk_gpio_toggle+0x184>
    2916:	95 95       	asr	r25
    2918:	87 95       	ror	r24
    291a:	0a 94       	dec	r0
    291c:	e2 f7       	brpl	.-8      	; 0x2916 <nrk_gpio_toggle+0x180>
    291e:	80 fd       	sbrc	r24, 0
    2920:	0b c0       	rjmp	.+22     	; 0x2938 <nrk_gpio_toggle+0x1a2>
    2922:	2e b1       	in	r18, 0x0e	; 14
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	02 c0       	rjmp	.+4      	; 0x292e <nrk_gpio_toggle+0x198>
    292a:	88 0f       	add	r24, r24
    292c:	99 1f       	adc	r25, r25
    292e:	4a 95       	dec	r20
    2930:	e2 f7       	brpl	.-8      	; 0x292a <nrk_gpio_toggle+0x194>
    2932:	28 2b       	or	r18, r24
    2934:	2e b9       	out	0x0e, r18	; 14
    2936:	32 c0       	rjmp	.+100    	; 0x299c <nrk_gpio_toggle+0x206>
    2938:	2e b1       	in	r18, 0x0e	; 14
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	02 c0       	rjmp	.+4      	; 0x2944 <nrk_gpio_toggle+0x1ae>
    2940:	88 0f       	add	r24, r24
    2942:	99 1f       	adc	r25, r25
    2944:	4a 95       	dec	r20
    2946:	e2 f7       	brpl	.-8      	; 0x2940 <nrk_gpio_toggle+0x1aa>
    2948:	80 95       	com	r24
    294a:	82 23       	and	r24, r18
    294c:	8e b9       	out	0x0e, r24	; 14
    294e:	26 c0       	rjmp	.+76     	; 0x299c <nrk_gpio_toggle+0x206>
    2950:	8f b1       	in	r24, 0x0f	; 15
    2952:	a9 01       	movw	r20, r18
    2954:	f3 e0       	ldi	r31, 0x03	; 3
    2956:	56 95       	lsr	r21
    2958:	47 95       	ror	r20
    295a:	fa 95       	dec	r31
    295c:	e1 f7       	brne	.-8      	; 0x2956 <nrk_gpio_toggle+0x1c0>
    295e:	99 27       	eor	r25, r25
    2960:	04 2e       	mov	r0, r20
    2962:	02 c0       	rjmp	.+4      	; 0x2968 <nrk_gpio_toggle+0x1d2>
    2964:	95 95       	asr	r25
    2966:	87 95       	ror	r24
    2968:	0a 94       	dec	r0
    296a:	e2 f7       	brpl	.-8      	; 0x2964 <nrk_gpio_toggle+0x1ce>
    296c:	80 fd       	sbrc	r24, 0
    296e:	0b c0       	rjmp	.+22     	; 0x2986 <nrk_gpio_toggle+0x1f0>
    2970:	21 b3       	in	r18, 0x11	; 17
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	02 c0       	rjmp	.+4      	; 0x297c <nrk_gpio_toggle+0x1e6>
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	4a 95       	dec	r20
    297e:	e2 f7       	brpl	.-8      	; 0x2978 <nrk_gpio_toggle+0x1e2>
    2980:	28 2b       	or	r18, r24
    2982:	21 bb       	out	0x11, r18	; 17
    2984:	0b c0       	rjmp	.+22     	; 0x299c <nrk_gpio_toggle+0x206>
    2986:	21 b3       	in	r18, 0x11	; 17
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	02 c0       	rjmp	.+4      	; 0x2992 <nrk_gpio_toggle+0x1fc>
    298e:	88 0f       	add	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	4a 95       	dec	r20
    2994:	e2 f7       	brpl	.-8      	; 0x298e <nrk_gpio_toggle+0x1f8>
    2996:	80 95       	com	r24
    2998:	82 23       	and	r24, r18
    299a:	81 bb       	out	0x11, r24	; 17
    299c:	81 e0       	ldi	r24, 0x01	; 1
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	08 95       	ret
    29a2:	8f ef       	ldi	r24, 0xFF	; 255
    29a4:	9f ef       	ldi	r25, 0xFF	; 255
    29a6:	08 95       	ret

000029a8 <nrk_gpio_direction>:
    29a8:	8f 3f       	cpi	r24, 0xFF	; 255
    29aa:	09 f4       	brne	.+2      	; 0x29ae <nrk_gpio_direction+0x6>
    29ac:	12 c1       	rjmp	.+548    	; 0x2bd2 <nrk_gpio_direction+0x22a>
    29ae:	48 2f       	mov	r20, r24
    29b0:	55 27       	eor	r21, r21
    29b2:	66 23       	and	r22, r22
    29b4:	09 f0       	breq	.+2      	; 0x29b8 <nrk_gpio_direction+0x10>
    29b6:	90 c0       	rjmp	.+288    	; 0x2ad8 <nrk_gpio_direction+0x130>
    29b8:	ca 01       	movw	r24, r20
    29ba:	87 70       	andi	r24, 0x07	; 7
    29bc:	90 70       	andi	r25, 0x00	; 0
    29be:	82 30       	cpi	r24, 0x02	; 2
    29c0:	91 05       	cpc	r25, r1
    29c2:	09 f4       	brne	.+2      	; 0x29c6 <nrk_gpio_direction+0x1e>
    29c4:	3e c0       	rjmp	.+124    	; 0x2a42 <nrk_gpio_direction+0x9a>
    29c6:	83 30       	cpi	r24, 0x03	; 3
    29c8:	91 05       	cpc	r25, r1
    29ca:	3c f4       	brge	.+14     	; 0x29da <nrk_gpio_direction+0x32>
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	89 f0       	breq	.+34     	; 0x29f2 <nrk_gpio_direction+0x4a>
    29d0:	81 30       	cpi	r24, 0x01	; 1
    29d2:	91 05       	cpc	r25, r1
    29d4:	09 f0       	breq	.+2      	; 0x29d8 <nrk_gpio_direction+0x30>
    29d6:	fd c0       	rjmp	.+506    	; 0x2bd2 <nrk_gpio_direction+0x22a>
    29d8:	21 c0       	rjmp	.+66     	; 0x2a1c <nrk_gpio_direction+0x74>
    29da:	84 30       	cpi	r24, 0x04	; 4
    29dc:	91 05       	cpc	r25, r1
    29de:	09 f4       	brne	.+2      	; 0x29e2 <nrk_gpio_direction+0x3a>
    29e0:	54 c0       	rjmp	.+168    	; 0x2a8a <nrk_gpio_direction+0xe2>
    29e2:	84 30       	cpi	r24, 0x04	; 4
    29e4:	91 05       	cpc	r25, r1
    29e6:	0c f4       	brge	.+2      	; 0x29ea <nrk_gpio_direction+0x42>
    29e8:	3e c0       	rjmp	.+124    	; 0x2a66 <nrk_gpio_direction+0xbe>
    29ea:	05 97       	sbiw	r24, 0x05	; 5
    29ec:	09 f0       	breq	.+2      	; 0x29f0 <nrk_gpio_direction+0x48>
    29ee:	f1 c0       	rjmp	.+482    	; 0x2bd2 <nrk_gpio_direction+0x22a>
    29f0:	5e c0       	rjmp	.+188    	; 0x2aae <nrk_gpio_direction+0x106>
    29f2:	31 b1       	in	r19, 0x01	; 1
    29f4:	b3 e0       	ldi	r27, 0x03	; 3
    29f6:	56 95       	lsr	r21
    29f8:	47 95       	ror	r20
    29fa:	ba 95       	dec	r27
    29fc:	e1 f7       	brne	.-8      	; 0x29f6 <nrk_gpio_direction+0x4e>
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <nrk_gpio_direction+0x60>
    2a04:	88 0f       	add	r24, r24
    2a06:	99 1f       	adc	r25, r25
    2a08:	4a 95       	dec	r20
    2a0a:	e2 f7       	brpl	.-8      	; 0x2a04 <nrk_gpio_direction+0x5c>
    2a0c:	28 2f       	mov	r18, r24
    2a0e:	20 95       	com	r18
    2a10:	23 23       	and	r18, r19
    2a12:	21 b9       	out	0x01, r18	; 1
    2a14:	22 b1       	in	r18, 0x02	; 2
    2a16:	82 2b       	or	r24, r18
    2a18:	82 b9       	out	0x02, r24	; 2
    2a1a:	d8 c0       	rjmp	.+432    	; 0x2bcc <nrk_gpio_direction+0x224>
    2a1c:	24 b1       	in	r18, 0x04	; 4
    2a1e:	a3 e0       	ldi	r26, 0x03	; 3
    2a20:	56 95       	lsr	r21
    2a22:	47 95       	ror	r20
    2a24:	aa 95       	dec	r26
    2a26:	e1 f7       	brne	.-8      	; 0x2a20 <nrk_gpio_direction+0x78>
    2a28:	02 c0       	rjmp	.+4      	; 0x2a2e <nrk_gpio_direction+0x86>
    2a2a:	88 0f       	add	r24, r24
    2a2c:	99 1f       	adc	r25, r25
    2a2e:	4a 95       	dec	r20
    2a30:	e2 f7       	brpl	.-8      	; 0x2a2a <nrk_gpio_direction+0x82>
    2a32:	98 2f       	mov	r25, r24
    2a34:	80 95       	com	r24
    2a36:	82 23       	and	r24, r18
    2a38:	84 b9       	out	0x04, r24	; 4
    2a3a:	85 b1       	in	r24, 0x05	; 5
    2a3c:	98 2b       	or	r25, r24
    2a3e:	95 b9       	out	0x05, r25	; 5
    2a40:	c5 c0       	rjmp	.+394    	; 0x2bcc <nrk_gpio_direction+0x224>
    2a42:	37 b1       	in	r19, 0x07	; 7
    2a44:	f3 e0       	ldi	r31, 0x03	; 3
    2a46:	56 95       	lsr	r21
    2a48:	47 95       	ror	r20
    2a4a:	fa 95       	dec	r31
    2a4c:	e1 f7       	brne	.-8      	; 0x2a46 <nrk_gpio_direction+0x9e>
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	02 c0       	rjmp	.+4      	; 0x2a58 <nrk_gpio_direction+0xb0>
    2a54:	88 0f       	add	r24, r24
    2a56:	99 1f       	adc	r25, r25
    2a58:	4a 95       	dec	r20
    2a5a:	e2 f7       	brpl	.-8      	; 0x2a54 <nrk_gpio_direction+0xac>
    2a5c:	28 2f       	mov	r18, r24
    2a5e:	20 95       	com	r18
    2a60:	23 23       	and	r18, r19
    2a62:	27 b9       	out	0x07, r18	; 7
    2a64:	35 c0       	rjmp	.+106    	; 0x2ad0 <nrk_gpio_direction+0x128>
    2a66:	3a b1       	in	r19, 0x0a	; 10
    2a68:	e3 e0       	ldi	r30, 0x03	; 3
    2a6a:	56 95       	lsr	r21
    2a6c:	47 95       	ror	r20
    2a6e:	ea 95       	dec	r30
    2a70:	e1 f7       	brne	.-8      	; 0x2a6a <nrk_gpio_direction+0xc2>
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	02 c0       	rjmp	.+4      	; 0x2a7c <nrk_gpio_direction+0xd4>
    2a78:	88 0f       	add	r24, r24
    2a7a:	99 1f       	adc	r25, r25
    2a7c:	4a 95       	dec	r20
    2a7e:	e2 f7       	brpl	.-8      	; 0x2a78 <nrk_gpio_direction+0xd0>
    2a80:	28 2f       	mov	r18, r24
    2a82:	20 95       	com	r18
    2a84:	23 23       	and	r18, r19
    2a86:	2a b9       	out	0x0a, r18	; 10
    2a88:	23 c0       	rjmp	.+70     	; 0x2ad0 <nrk_gpio_direction+0x128>
    2a8a:	3d b1       	in	r19, 0x0d	; 13
    2a8c:	73 e0       	ldi	r23, 0x03	; 3
    2a8e:	56 95       	lsr	r21
    2a90:	47 95       	ror	r20
    2a92:	7a 95       	dec	r23
    2a94:	e1 f7       	brne	.-8      	; 0x2a8e <nrk_gpio_direction+0xe6>
    2a96:	81 e0       	ldi	r24, 0x01	; 1
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	02 c0       	rjmp	.+4      	; 0x2aa0 <nrk_gpio_direction+0xf8>
    2a9c:	88 0f       	add	r24, r24
    2a9e:	99 1f       	adc	r25, r25
    2aa0:	4a 95       	dec	r20
    2aa2:	e2 f7       	brpl	.-8      	; 0x2a9c <nrk_gpio_direction+0xf4>
    2aa4:	28 2f       	mov	r18, r24
    2aa6:	20 95       	com	r18
    2aa8:	23 23       	and	r18, r19
    2aaa:	2d b9       	out	0x0d, r18	; 13
    2aac:	11 c0       	rjmp	.+34     	; 0x2ad0 <nrk_gpio_direction+0x128>
    2aae:	30 b3       	in	r19, 0x10	; 16
    2ab0:	63 e0       	ldi	r22, 0x03	; 3
    2ab2:	56 95       	lsr	r21
    2ab4:	47 95       	ror	r20
    2ab6:	6a 95       	dec	r22
    2ab8:	e1 f7       	brne	.-8      	; 0x2ab2 <nrk_gpio_direction+0x10a>
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	02 c0       	rjmp	.+4      	; 0x2ac4 <nrk_gpio_direction+0x11c>
    2ac0:	88 0f       	add	r24, r24
    2ac2:	99 1f       	adc	r25, r25
    2ac4:	4a 95       	dec	r20
    2ac6:	e2 f7       	brpl	.-8      	; 0x2ac0 <nrk_gpio_direction+0x118>
    2ac8:	28 2f       	mov	r18, r24
    2aca:	20 95       	com	r18
    2acc:	23 23       	and	r18, r19
    2ace:	20 bb       	out	0x10, r18	; 16
    2ad0:	25 b1       	in	r18, 0x05	; 5
    2ad2:	82 2b       	or	r24, r18
    2ad4:	85 b9       	out	0x05, r24	; 5
    2ad6:	7a c0       	rjmp	.+244    	; 0x2bcc <nrk_gpio_direction+0x224>
    2ad8:	9a 01       	movw	r18, r20
    2ada:	27 70       	andi	r18, 0x07	; 7
    2adc:	30 70       	andi	r19, 0x00	; 0
    2ade:	22 30       	cpi	r18, 0x02	; 2
    2ae0:	31 05       	cpc	r19, r1
    2ae2:	a9 f1       	breq	.+106    	; 0x2b4e <nrk_gpio_direction+0x1a6>
    2ae4:	23 30       	cpi	r18, 0x03	; 3
    2ae6:	31 05       	cpc	r19, r1
    2ae8:	44 f4       	brge	.+16     	; 0x2afa <nrk_gpio_direction+0x152>
    2aea:	21 15       	cp	r18, r1
    2aec:	31 05       	cpc	r19, r1
    2aee:	89 f0       	breq	.+34     	; 0x2b12 <nrk_gpio_direction+0x16a>
    2af0:	21 30       	cpi	r18, 0x01	; 1
    2af2:	31 05       	cpc	r19, r1
    2af4:	09 f0       	breq	.+2      	; 0x2af8 <nrk_gpio_direction+0x150>
    2af6:	6d c0       	rjmp	.+218    	; 0x2bd2 <nrk_gpio_direction+0x22a>
    2af8:	1c c0       	rjmp	.+56     	; 0x2b32 <nrk_gpio_direction+0x18a>
    2afa:	24 30       	cpi	r18, 0x04	; 4
    2afc:	31 05       	cpc	r19, r1
    2afe:	09 f4       	brne	.+2      	; 0x2b02 <nrk_gpio_direction+0x15a>
    2b00:	46 c0       	rjmp	.+140    	; 0x2b8e <nrk_gpio_direction+0x1e6>
    2b02:	24 30       	cpi	r18, 0x04	; 4
    2b04:	31 05       	cpc	r19, r1
    2b06:	9c f1       	brlt	.+102    	; 0x2b6e <nrk_gpio_direction+0x1c6>
    2b08:	25 30       	cpi	r18, 0x05	; 5
    2b0a:	31 05       	cpc	r19, r1
    2b0c:	09 f0       	breq	.+2      	; 0x2b10 <nrk_gpio_direction+0x168>
    2b0e:	61 c0       	rjmp	.+194    	; 0x2bd2 <nrk_gpio_direction+0x22a>
    2b10:	4e c0       	rjmp	.+156    	; 0x2bae <nrk_gpio_direction+0x206>
    2b12:	21 b1       	in	r18, 0x01	; 1
    2b14:	33 e0       	ldi	r19, 0x03	; 3
    2b16:	56 95       	lsr	r21
    2b18:	47 95       	ror	r20
    2b1a:	3a 95       	dec	r19
    2b1c:	e1 f7       	brne	.-8      	; 0x2b16 <nrk_gpio_direction+0x16e>
    2b1e:	81 e0       	ldi	r24, 0x01	; 1
    2b20:	90 e0       	ldi	r25, 0x00	; 0
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <nrk_gpio_direction+0x180>
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	4a 95       	dec	r20
    2b2a:	e2 f7       	brpl	.-8      	; 0x2b24 <nrk_gpio_direction+0x17c>
    2b2c:	28 2b       	or	r18, r24
    2b2e:	21 b9       	out	0x01, r18	; 1
    2b30:	4d c0       	rjmp	.+154    	; 0x2bcc <nrk_gpio_direction+0x224>
    2b32:	84 b1       	in	r24, 0x04	; 4
    2b34:	93 e0       	ldi	r25, 0x03	; 3
    2b36:	56 95       	lsr	r21
    2b38:	47 95       	ror	r20
    2b3a:	9a 95       	dec	r25
    2b3c:	e1 f7       	brne	.-8      	; 0x2b36 <nrk_gpio_direction+0x18e>
    2b3e:	02 c0       	rjmp	.+4      	; 0x2b44 <nrk_gpio_direction+0x19c>
    2b40:	22 0f       	add	r18, r18
    2b42:	33 1f       	adc	r19, r19
    2b44:	4a 95       	dec	r20
    2b46:	e2 f7       	brpl	.-8      	; 0x2b40 <nrk_gpio_direction+0x198>
    2b48:	82 2b       	or	r24, r18
    2b4a:	84 b9       	out	0x04, r24	; 4
    2b4c:	3f c0       	rjmp	.+126    	; 0x2bcc <nrk_gpio_direction+0x224>
    2b4e:	27 b1       	in	r18, 0x07	; 7
    2b50:	b3 e0       	ldi	r27, 0x03	; 3
    2b52:	56 95       	lsr	r21
    2b54:	47 95       	ror	r20
    2b56:	ba 95       	dec	r27
    2b58:	e1 f7       	brne	.-8      	; 0x2b52 <nrk_gpio_direction+0x1aa>
    2b5a:	81 e0       	ldi	r24, 0x01	; 1
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	02 c0       	rjmp	.+4      	; 0x2b64 <nrk_gpio_direction+0x1bc>
    2b60:	88 0f       	add	r24, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	4a 95       	dec	r20
    2b66:	e2 f7       	brpl	.-8      	; 0x2b60 <nrk_gpio_direction+0x1b8>
    2b68:	28 2b       	or	r18, r24
    2b6a:	27 b9       	out	0x07, r18	; 7
    2b6c:	2f c0       	rjmp	.+94     	; 0x2bcc <nrk_gpio_direction+0x224>
    2b6e:	2a b1       	in	r18, 0x0a	; 10
    2b70:	a3 e0       	ldi	r26, 0x03	; 3
    2b72:	56 95       	lsr	r21
    2b74:	47 95       	ror	r20
    2b76:	aa 95       	dec	r26
    2b78:	e1 f7       	brne	.-8      	; 0x2b72 <nrk_gpio_direction+0x1ca>
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	02 c0       	rjmp	.+4      	; 0x2b84 <nrk_gpio_direction+0x1dc>
    2b80:	88 0f       	add	r24, r24
    2b82:	99 1f       	adc	r25, r25
    2b84:	4a 95       	dec	r20
    2b86:	e2 f7       	brpl	.-8      	; 0x2b80 <nrk_gpio_direction+0x1d8>
    2b88:	28 2b       	or	r18, r24
    2b8a:	2a b9       	out	0x0a, r18	; 10
    2b8c:	1f c0       	rjmp	.+62     	; 0x2bcc <nrk_gpio_direction+0x224>
    2b8e:	2d b1       	in	r18, 0x0d	; 13
    2b90:	f3 e0       	ldi	r31, 0x03	; 3
    2b92:	56 95       	lsr	r21
    2b94:	47 95       	ror	r20
    2b96:	fa 95       	dec	r31
    2b98:	e1 f7       	brne	.-8      	; 0x2b92 <nrk_gpio_direction+0x1ea>
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	02 c0       	rjmp	.+4      	; 0x2ba4 <nrk_gpio_direction+0x1fc>
    2ba0:	88 0f       	add	r24, r24
    2ba2:	99 1f       	adc	r25, r25
    2ba4:	4a 95       	dec	r20
    2ba6:	e2 f7       	brpl	.-8      	; 0x2ba0 <nrk_gpio_direction+0x1f8>
    2ba8:	28 2b       	or	r18, r24
    2baa:	2d b9       	out	0x0d, r18	; 13
    2bac:	0f c0       	rjmp	.+30     	; 0x2bcc <nrk_gpio_direction+0x224>
    2bae:	20 b3       	in	r18, 0x10	; 16
    2bb0:	e3 e0       	ldi	r30, 0x03	; 3
    2bb2:	56 95       	lsr	r21
    2bb4:	47 95       	ror	r20
    2bb6:	ea 95       	dec	r30
    2bb8:	e1 f7       	brne	.-8      	; 0x2bb2 <nrk_gpio_direction+0x20a>
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	02 c0       	rjmp	.+4      	; 0x2bc4 <nrk_gpio_direction+0x21c>
    2bc0:	88 0f       	add	r24, r24
    2bc2:	99 1f       	adc	r25, r25
    2bc4:	4a 95       	dec	r20
    2bc6:	e2 f7       	brpl	.-8      	; 0x2bc0 <nrk_gpio_direction+0x218>
    2bc8:	28 2b       	or	r18, r24
    2bca:	20 bb       	out	0x10, r18	; 16
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	90 e0       	ldi	r25, 0x00	; 0
    2bd0:	08 95       	ret
    2bd2:	8f ef       	ldi	r24, 0xFF	; 255
    2bd4:	9f ef       	ldi	r25, 0xFF	; 255
    2bd6:	08 95       	ret

00002bd8 <nrk_get_button>:
    2bd8:	88 23       	and	r24, r24
    2bda:	19 f0       	breq	.+6      	; 0x2be2 <nrk_get_button+0xa>
    2bdc:	8f ef       	ldi	r24, 0xFF	; 255
    2bde:	9f ef       	ldi	r25, 0xFF	; 255
    2be0:	08 95       	ret
    2be2:	80 b1       	in	r24, 0x00	; 0
    2be4:	99 27       	eor	r25, r25
    2be6:	87 fd       	sbrc	r24, 7
    2be8:	90 95       	com	r25
    2bea:	80 95       	com	r24
    2bec:	90 95       	com	r25
    2bee:	88 27       	eor	r24, r24
    2bf0:	99 0f       	add	r25, r25
    2bf2:	88 1f       	adc	r24, r24
    2bf4:	99 27       	eor	r25, r25
    2bf6:	08 95       	ret

00002bf8 <nrk_led_toggle>:
    2bf8:	00 97       	sbiw	r24, 0x00	; 0
    2bfa:	11 f4       	brne	.+4      	; 0x2c00 <nrk_led_toggle+0x8>
    2bfc:	84 e1       	ldi	r24, 0x14	; 20
    2bfe:	09 c0       	rjmp	.+18     	; 0x2c12 <nrk_led_toggle+0x1a>
    2c00:	81 30       	cpi	r24, 0x01	; 1
    2c02:	91 05       	cpc	r25, r1
    2c04:	11 f4       	brne	.+4      	; 0x2c0a <nrk_led_toggle+0x12>
    2c06:	8c e1       	ldi	r24, 0x1C	; 28
    2c08:	04 c0       	rjmp	.+8      	; 0x2c12 <nrk_led_toggle+0x1a>
    2c0a:	82 30       	cpi	r24, 0x02	; 2
    2c0c:	91 05       	cpc	r25, r1
    2c0e:	31 f4       	brne	.+12     	; 0x2c1c <nrk_led_toggle+0x24>
    2c10:	84 e2       	ldi	r24, 0x24	; 36
    2c12:	0e 94 cb 13 	call	0x2796	; 0x2796 <nrk_gpio_toggle>
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	08 95       	ret
    2c1c:	03 97       	sbiw	r24, 0x03	; 3
    2c1e:	19 f0       	breq	.+6      	; 0x2c26 <nrk_led_toggle+0x2e>
    2c20:	8f ef       	ldi	r24, 0xFF	; 255
    2c22:	9f ef       	ldi	r25, 0xFF	; 255
    2c24:	08 95       	ret
    2c26:	8c e2       	ldi	r24, 0x2C	; 44
    2c28:	0e 94 cb 13 	call	0x2796	; 0x2796 <nrk_gpio_toggle>
    2c2c:	81 e0       	ldi	r24, 0x01	; 1
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	08 95       	ret

00002c32 <nrk_led_clr>:
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	11 f4       	brne	.+4      	; 0x2c3a <nrk_led_clr+0x8>
    2c36:	84 e1       	ldi	r24, 0x14	; 20
    2c38:	09 c0       	rjmp	.+18     	; 0x2c4c <nrk_led_clr+0x1a>
    2c3a:	81 30       	cpi	r24, 0x01	; 1
    2c3c:	91 05       	cpc	r25, r1
    2c3e:	11 f4       	brne	.+4      	; 0x2c44 <nrk_led_clr+0x12>
    2c40:	8c e1       	ldi	r24, 0x1C	; 28
    2c42:	04 c0       	rjmp	.+8      	; 0x2c4c <nrk_led_clr+0x1a>
    2c44:	82 30       	cpi	r24, 0x02	; 2
    2c46:	91 05       	cpc	r25, r1
    2c48:	31 f4       	brne	.+12     	; 0x2c56 <nrk_led_clr+0x24>
    2c4a:	84 e2       	ldi	r24, 0x24	; 36
    2c4c:	0e 94 80 12 	call	0x2500	; 0x2500 <nrk_gpio_set>
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	08 95       	ret
    2c56:	03 97       	sbiw	r24, 0x03	; 3
    2c58:	19 f0       	breq	.+6      	; 0x2c60 <nrk_led_clr+0x2e>
    2c5a:	8f ef       	ldi	r24, 0xFF	; 255
    2c5c:	9f ef       	ldi	r25, 0xFF	; 255
    2c5e:	08 95       	ret
    2c60:	8c e2       	ldi	r24, 0x2C	; 44
    2c62:	0e 94 80 12 	call	0x2500	; 0x2500 <nrk_gpio_set>
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	90 e0       	ldi	r25, 0x00	; 0
    2c6a:	08 95       	ret

00002c6c <nrk_led_set>:
    2c6c:	00 97       	sbiw	r24, 0x00	; 0
    2c6e:	11 f4       	brne	.+4      	; 0x2c74 <nrk_led_set+0x8>
    2c70:	84 e1       	ldi	r24, 0x14	; 20
    2c72:	09 c0       	rjmp	.+18     	; 0x2c86 <nrk_led_set+0x1a>
    2c74:	81 30       	cpi	r24, 0x01	; 1
    2c76:	91 05       	cpc	r25, r1
    2c78:	11 f4       	brne	.+4      	; 0x2c7e <nrk_led_set+0x12>
    2c7a:	8c e1       	ldi	r24, 0x1C	; 28
    2c7c:	04 c0       	rjmp	.+8      	; 0x2c86 <nrk_led_set+0x1a>
    2c7e:	82 30       	cpi	r24, 0x02	; 2
    2c80:	91 05       	cpc	r25, r1
    2c82:	31 f4       	brne	.+12     	; 0x2c90 <nrk_led_set+0x24>
    2c84:	84 e2       	ldi	r24, 0x24	; 36
    2c86:	0e 94 05 13 	call	0x260a	; 0x260a <nrk_gpio_clr>
    2c8a:	81 e0       	ldi	r24, 0x01	; 1
    2c8c:	90 e0       	ldi	r25, 0x00	; 0
    2c8e:	08 95       	ret
    2c90:	03 97       	sbiw	r24, 0x03	; 3
    2c92:	19 f0       	breq	.+6      	; 0x2c9a <nrk_led_set+0x2e>
    2c94:	8f ef       	ldi	r24, 0xFF	; 255
    2c96:	9f ef       	ldi	r25, 0xFF	; 255
    2c98:	08 95       	ret
    2c9a:	8c e2       	ldi	r24, 0x2C	; 44
    2c9c:	0e 94 05 13 	call	0x260a	; 0x260a <nrk_gpio_clr>
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	90 e0       	ldi	r25, 0x00	; 0
    2ca4:	08 95       	ret

00002ca6 <nrk_gpio_pullups>:
    2ca6:	88 23       	and	r24, r24
    2ca8:	19 f0       	breq	.+6      	; 0x2cb0 <nrk_gpio_pullups+0xa>
    2caa:	85 b7       	in	r24, 0x35	; 53
    2cac:	8f 7e       	andi	r24, 0xEF	; 239
    2cae:	02 c0       	rjmp	.+4      	; 0x2cb4 <nrk_gpio_pullups+0xe>
    2cb0:	85 b7       	in	r24, 0x35	; 53
    2cb2:	80 61       	ori	r24, 0x10	; 16
    2cb4:	85 bf       	out	0x35, r24	; 53
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	08 95       	ret

00002cbc <putc0>:
    2cbc:	98 2f       	mov	r25, r24
    2cbe:	80 91 c0 00 	lds	r24, 0x00C0
    2cc2:	85 ff       	sbrs	r24, 5
    2cc4:	fc cf       	rjmp	.-8      	; 0x2cbe <putc0+0x2>
    2cc6:	80 91 c0 00 	lds	r24, 0x00C0
    2cca:	8f 7d       	andi	r24, 0xDF	; 223
    2ccc:	80 93 c0 00 	sts	0x00C0, r24
    2cd0:	90 93 c6 00 	sts	0x00C6, r25
    2cd4:	08 95       	ret

00002cd6 <putc1>:
    2cd6:	98 2f       	mov	r25, r24
    2cd8:	80 91 c8 00 	lds	r24, 0x00C8
    2cdc:	85 ff       	sbrs	r24, 5
    2cde:	fc cf       	rjmp	.-8      	; 0x2cd8 <putc1+0x2>
    2ce0:	90 93 ce 00 	sts	0x00CE, r25
    2ce4:	08 95       	ret

00002ce6 <setup_uart0>:
    2ce6:	29 2f       	mov	r18, r25
    2ce8:	33 27       	eor	r19, r19
    2cea:	20 93 c5 00 	sts	0x00C5, r18
    2cee:	80 93 c4 00 	sts	0x00C4, r24
    2cf2:	86 e0       	ldi	r24, 0x06	; 6
    2cf4:	80 93 c2 00 	sts	0x00C2, r24
    2cf8:	e1 ec       	ldi	r30, 0xC1	; 193
    2cfa:	f0 e0       	ldi	r31, 0x00	; 0
    2cfc:	80 81       	ld	r24, Z
    2cfe:	8b 7f       	andi	r24, 0xFB	; 251
    2d00:	80 83       	st	Z, r24
    2d02:	a0 ec       	ldi	r26, 0xC0	; 192
    2d04:	b0 e0       	ldi	r27, 0x00	; 0
    2d06:	8c 91       	ld	r24, X
    2d08:	82 60       	ori	r24, 0x02	; 2
    2d0a:	8c 93       	st	X, r24
    2d0c:	80 81       	ld	r24, Z
    2d0e:	88 61       	ori	r24, 0x18	; 24
    2d10:	80 83       	st	Z, r24
    2d12:	08 95       	ret

00002d14 <setup_uart1>:
    2d14:	29 2f       	mov	r18, r25
    2d16:	33 27       	eor	r19, r19
    2d18:	20 93 cd 00 	sts	0x00CD, r18
    2d1c:	80 93 cc 00 	sts	0x00CC, r24
    2d20:	86 e0       	ldi	r24, 0x06	; 6
    2d22:	80 93 ca 00 	sts	0x00CA, r24
    2d26:	e9 ec       	ldi	r30, 0xC9	; 201
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	8b 7f       	andi	r24, 0xFB	; 251
    2d2e:	80 83       	st	Z, r24
    2d30:	a8 ec       	ldi	r26, 0xC8	; 200
    2d32:	b0 e0       	ldi	r27, 0x00	; 0
    2d34:	8c 91       	ld	r24, X
    2d36:	82 60       	ori	r24, 0x02	; 2
    2d38:	8c 93       	st	X, r24
    2d3a:	80 81       	ld	r24, Z
    2d3c:	88 61       	ori	r24, 0x18	; 24
    2d3e:	80 83       	st	Z, r24
    2d40:	08 95       	ret

00002d42 <getc0>:
    2d42:	80 91 c0 00 	lds	r24, 0x00C0
    2d46:	87 ff       	sbrs	r24, 7
    2d48:	fc cf       	rjmp	.-8      	; 0x2d42 <getc0>
    2d4a:	80 91 c0 00 	lds	r24, 0x00C0
    2d4e:	8f 77       	andi	r24, 0x7F	; 127
    2d50:	80 93 c0 00 	sts	0x00C0, r24
    2d54:	80 91 c6 00 	lds	r24, 0x00C6
    2d58:	99 27       	eor	r25, r25
    2d5a:	08 95       	ret

00002d5c <nrk_setup_uart>:
    2d5c:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <setup_uart1>
    2d60:	64 e2       	ldi	r22, 0x24	; 36
    2d62:	72 e1       	ldi	r23, 0x12	; 18
    2d64:	8b e6       	ldi	r24, 0x6B	; 107
    2d66:	96 e1       	ldi	r25, 0x16	; 22
    2d68:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <fdevopen>
    2d6c:	90 93 a3 06 	sts	0x06A3, r25
    2d70:	80 93 a2 06 	sts	0x06A2, r24
    2d74:	64 e2       	ldi	r22, 0x24	; 36
    2d76:	72 e1       	ldi	r23, 0x12	; 18
    2d78:	8b e6       	ldi	r24, 0x6B	; 107
    2d7a:	96 e1       	ldi	r25, 0x16	; 22
    2d7c:	0e 94 38 2d 	call	0x5a70	; 0x5a70 <fdevopen>
    2d80:	90 93 a1 06 	sts	0x06A1, r25
    2d84:	80 93 a0 06 	sts	0x06A0, r24
    2d88:	0e 94 00 1c 	call	0x3800	; 0x3800 <nrk_signal_create>
    2d8c:	80 93 db 05 	sts	0x05DB, r24
    2d90:	8f 3f       	cpi	r24, 0xFF	; 255
    2d92:	19 f4       	brne	.+6      	; 0x2d9a <nrk_setup_uart+0x3e>
    2d94:	8e e0       	ldi	r24, 0x0E	; 14
    2d96:	0e 94 00 1b 	call	0x3600	; 0x3600 <nrk_error_add>
    2d9a:	10 92 dc 05 	sts	0x05DC, r1
    2d9e:	10 92 ca 05 	sts	0x05CA, r1
    2da2:	80 91 c9 00 	lds	r24, 0x00C9
    2da6:	80 68       	ori	r24, 0x80	; 128
    2da8:	80 93 c9 00 	sts	0x00C9, r24
    2dac:	08 95       	ret

00002dae <nrk_uart_rx_signal_get>:
	// Setting this value higher means that you will only trigger
	// receive with a very strong signal.  Setting this lower means
	// bmac will try to receive fainter packets.  If the value is set
	// too high or too low performance will suffer greatly.
	// bmac_set_cca_thresh(-45); 

    2dae:	80 91 db 05 	lds	r24, 0x05DB
    2db2:	8f 3f       	cpi	r24, 0xFF	; 255
    2db4:	19 f4       	brne	.+6      	; 0x2dbc <nrk_uart_rx_signal_get+0xe>
    2db6:	8e e0       	ldi	r24, 0x0E	; 14
    2db8:	0e 94 00 1b 	call	0x3600	; 0x3600 <nrk_error_add>
    2dbc:	80 91 db 05 	lds	r24, 0x05DB

	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
    2dc0:	99 27       	eor	r25, r25
    2dc2:	87 fd       	sbrc	r24, 7
    2dc4:	90 95       	com	r25
    2dc6:	08 95       	ret

00002dc8 <nrk_kprintf>:
				break;
			case 'B': // ~1xxx
				nrk_led_set(RED_LED);
				nrk_gpio_clr(NRK_DEBUG_3);
				break;
		}
    2dc8:	cf 93       	push	r28
    2dca:	df 93       	push	r29
    2dcc:	ec 01       	movw	r28, r24
    2dce:	07 c0       	rjmp	.+14     	; 0x2dde <nrk_kprintf+0x16>

		switch(rx_buf[2]) {
			case '-': // ~x000
    2dd0:	60 91 a2 06 	lds	r22, 0x06A2
    2dd4:	70 91 a3 06 	lds	r23, 0x06A3
    2dd8:	99 27       	eor	r25, r25
    2dda:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <fputc>
    2dde:	fe 01       	movw	r30, r28
				nrk_led_set(RED_LED);
				nrk_gpio_clr(NRK_DEBUG_3);
				break;
		}

		switch(rx_buf[2]) {
    2de0:	21 96       	adiw	r28, 0x01	; 1
    2de2:	84 91       	lpm	r24, Z
    2de4:	88 23       	and	r24, r24
    2de6:	a1 f7       	brne	.-24     	; 0x2dd0 <nrk_kprintf+0x8>
    2de8:	df 91       	pop	r29
    2dea:	cf 91       	pop	r28
    2dec:	08 95       	ret

00002dee <__vector_36>:
	nrk_setup_uart (UART_BAUDRATE_115K2);

	nrk_init ();

	nrk_led_clr (0);
	nrk_led_clr (1);
    2dee:	1f 92       	push	r1
    2df0:	0f 92       	push	r0
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	0f 92       	push	r0
    2df6:	11 24       	eor	r1, r1
    2df8:	2f 93       	push	r18
    2dfa:	3f 93       	push	r19
    2dfc:	4f 93       	push	r20
    2dfe:	5f 93       	push	r21
    2e00:	6f 93       	push	r22
    2e02:	7f 93       	push	r23
    2e04:	8f 93       	push	r24
    2e06:	9f 93       	push	r25
    2e08:	af 93       	push	r26
    2e0a:	bf 93       	push	r27
    2e0c:	ef 93       	push	r30
    2e0e:	ff 93       	push	r31
	nrk_led_clr (2);
	nrk_led_clr (3);

	nrk_time_set (0, 0);
    2e10:	80 91 c9 00 	lds	r24, 0x00C9
    2e14:	8f 77       	andi	r24, 0x7F	; 127
    2e16:	80 93 c9 00 	sts	0x00C9, r24

    2e1a:	80 91 c8 00 	lds	r24, 0x00C8
    2e1e:	87 ff       	sbrs	r24, 7
    2e20:	fc cf       	rjmp	.-8      	; 0x2e1a <__vector_36+0x2c>
    2e22:	80 91 c8 00 	lds	r24, 0x00C8
    2e26:	8f 77       	andi	r24, 0x7F	; 127
    2e28:	80 93 c8 00 	sts	0x00C8, r24
    2e2c:	90 91 ce 00 	lds	r25, 0x00CE
	bmac_task_config ();
    2e30:	80 91 ca 05 	lds	r24, 0x05CA
    2e34:	e8 2f       	mov	r30, r24
    2e36:	ff 27       	eor	r31, r31
    2e38:	e5 53       	subi	r30, 0x35	; 53
    2e3a:	fa 4f       	sbci	r31, 0xFA	; 250
    2e3c:	90 83       	st	Z, r25

	nrk_create_taskset ();
    2e3e:	8f 5f       	subi	r24, 0xFF	; 255
    2e40:	80 93 ca 05 	sts	0x05CA, r24
	nrk_start ();
    2e44:	80 31       	cpi	r24, 0x10	; 16
    2e46:	11 f4       	brne	.+4      	; 0x2e4c <__vector_36+0x5e>
    2e48:	10 92 ca 05 	sts	0x05CA, r1

    2e4c:	80 91 db 05 	lds	r24, 0x05DB
    2e50:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <nrk_event_signal>
	return 0;
    2e54:	80 91 c8 00 	lds	r24, 0x00C8
    2e58:	8f 77       	andi	r24, 0x7F	; 127
    2e5a:	80 93 c8 00 	sts	0x00C8, r24
}
    2e5e:	80 91 c9 00 	lds	r24, 0x00C9
    2e62:	80 68       	ori	r24, 0x80	; 128
    2e64:	80 93 c9 00 	sts	0x00C9, r24
    2e68:	ff 91       	pop	r31
    2e6a:	ef 91       	pop	r30
    2e6c:	bf 91       	pop	r27
    2e6e:	af 91       	pop	r26
    2e70:	9f 91       	pop	r25
    2e72:	8f 91       	pop	r24
    2e74:	7f 91       	pop	r23
    2e76:	6f 91       	pop	r22
    2e78:	5f 91       	pop	r21
    2e7a:	4f 91       	pop	r20
    2e7c:	3f 91       	pop	r19
    2e7e:	2f 91       	pop	r18
    2e80:	0f 90       	pop	r0
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	0f 90       	pop	r0
    2e86:	1f 90       	pop	r1
    2e88:	18 95       	reti

00002e8a <halWait>:
	...

uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];

int main ()
{
	uint16_t div;
    2e92:	01 97       	sbiw	r24, 0x01	; 1
    2e94:	d1 f7       	brne	.-12     	; 0x2e8a <halWait>
    2e96:	08 95       	ret

00002e98 <read_eeprom_current_image_checksum>:
}

void pin_task ()
{
	while(1) {
		nrk_led_toggle (RED_LED);
    2e98:	fc 01       	movw	r30, r24

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    2e9a:	a7 e0       	ldi	r26, 0x07	; 7
    2e9c:	b0 e0       	ldi	r27, 0x00	; 0
    2e9e:	0e 94 1b 30 	call	0x6036	; 0x6036 <__eeprom_read_byte_1F2021>
    2ea2:	80 2d       	mov	r24, r0
		nrk_wait_until_next_period ();
    2ea4:	80 83       	st	Z, r24
		nrk_led_toggle (BLUE_LED);
		nrk_wait_until_next_period ();
    2ea6:	81 e0       	ldi	r24, 0x01	; 1
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
    2eaa:	08 95       	ret

00002eac <write_eeprom_current_image_checksum>:
	}
}

    2eac:	fc 01       	movw	r30, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    2eae:	80 81       	ld	r24, Z
    2eb0:	a7 e0       	ldi	r26, 0x07	; 7
    2eb2:	b0 e0       	ldi	r27, 0x00	; 0
    2eb4:	08 2e       	mov	r0, r24
    2eb6:	0e 94 23 30 	call	0x6046	; 0x6046 <__eeprom_write_byte_1F2021>
void rx_task ()
{
	uint8_t i, len;
    2eba:	81 e0       	ldi	r24, 0x01	; 1
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	08 95       	ret

00002ec0 <nrk_eeprom_read_byte>:

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	0e 94 1b 30 	call	0x6036	; 0x6036 <__eeprom_read_byte_1F2021>
    2ec6:	80 2d       	mov	r24, r0
 *
 *  This is the Open Source Version of Nano-RK included as part of a Dual
 *  Licensing Model. If you are unsure which license to use please refer to:
 *  http://www.nanork.org/nano-RK/wiki/Licensing
 *
 *  This program is free software: you can redistribute it and/or modify
    2ec8:	99 27       	eor	r25, r25
    2eca:	08 95       	ret

00002ecc <read_eeprom_mac_address>:
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
    2ecc:	fc 01       	movw	r30, r24
    2ece:	a0 e0       	ldi	r26, 0x00	; 0
    2ed0:	b0 e0       	ldi	r27, 0x00	; 0
    2ed2:	0e 94 1b 30 	call	0x6036	; 0x6036 <__eeprom_read_byte_1F2021>
    2ed6:	40 2d       	mov	r20, r0
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *******************************************************************************/

    2ed8:	43 83       	std	Z+3, r20	; 0x03
    2eda:	a1 e0       	ldi	r26, 0x01	; 1
    2edc:	b0 e0       	ldi	r27, 0x00	; 0
    2ede:	0e 94 1b 30 	call	0x6036	; 0x6036 <__eeprom_read_byte_1F2021>
    2ee2:	80 2d       	mov	r24, r0

    2ee4:	82 83       	std	Z+2, r24	; 0x02
    2ee6:	a2 e0       	ldi	r26, 0x02	; 2
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	0e 94 1b 30 	call	0x6036	; 0x6036 <__eeprom_read_byte_1F2021>
    2eee:	30 2d       	mov	r19, r0
#include <nrk.h>
    2ef0:	31 83       	std	Z+1, r19	; 0x01
    2ef2:	a3 e0       	ldi	r26, 0x03	; 3
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	0e 94 1b 30 	call	0x6036	; 0x6036 <__eeprom_read_byte_1F2021>
    2efa:	90 2d       	mov	r25, r0
#include <include.h>
    2efc:	90 83       	st	Z, r25
    2efe:	a4 e0       	ldi	r26, 0x04	; 4
    2f00:	b0 e0       	ldi	r27, 0x00	; 0
    2f02:	0e 94 1b 30 	call	0x6036	; 0x6036 <__eeprom_read_byte_1F2021>
    2f06:	20 2d       	mov	r18, r0
#include <ulib.h>
#include <stdio.h>
#include <avr/sleep.h>
    2f08:	83 0f       	add	r24, r19
#include <hal.h>
    2f0a:	84 0f       	add	r24, r20
#include <bmac.h>
#include <nrk_error.h>
    2f0c:	89 0f       	add	r24, r25
    2f0e:	28 17       	cp	r18, r24
    2f10:	19 f4       	brne	.+6      	; 0x2f18 <read_eeprom_mac_address+0x4c>
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	90 e0       	ldi	r25, 0x00	; 0
    2f16:	08 95       	ret
    2f18:	8f ef       	ldi	r24, 0xFF	; 255
    2f1a:	9f ef       	ldi	r25, 0xFF	; 255

nrk_task_type RX_TASK;
NRK_STK rx_task_stack[NRK_APP_STACKSIZE];
    2f1c:	08 95       	ret

00002f1e <read_eeprom_channel>:
void rx_task (void);

nrk_task_type PIN_TASK;
    2f1e:	fc 01       	movw	r30, r24
    2f20:	a5 e0       	ldi	r26, 0x05	; 5
    2f22:	b0 e0       	ldi	r27, 0x00	; 0
    2f24:	0e 94 1b 30 	call	0x6036	; 0x6036 <__eeprom_read_byte_1F2021>
    2f28:	80 2d       	mov	r24, r0
NRK_STK pin_task_stack[NRK_APP_STACKSIZE];
    2f2a:	80 83       	st	Z, r24
void pin_task (void);

    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	08 95       	ret

00002f32 <read_eeprom_load_img_pages>:

int main ()
{
	uint16_t div;
	nrk_setup_ports ();
	nrk_setup_uart (UART_BAUDRATE_115K2);
    2f32:	fc 01       	movw	r30, r24
    2f34:	a6 e0       	ldi	r26, 0x06	; 6
    2f36:	b0 e0       	ldi	r27, 0x00	; 0
    2f38:	0e 94 1b 30 	call	0x6036	; 0x6036 <__eeprom_read_byte_1F2021>
    2f3c:	80 2d       	mov	r24, r0

    2f3e:	80 83       	st	Z, r24
	nrk_init ();

    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	90 e0       	ldi	r25, 0x00	; 0
    2f44:	08 95       	ret

00002f46 <read_eeprom_aes_key>:
	nrk_led_clr (0);
	nrk_led_clr (1);
	nrk_led_clr (2);
    2f46:	ac 01       	movw	r20, r24
    2f48:	20 e0       	ldi	r18, 0x00	; 0
    2f4a:	30 e0       	ldi	r19, 0x00	; 0
    2f4c:	d9 01       	movw	r26, r18
    2f4e:	18 96       	adiw	r26, 0x08	; 8
    2f50:	0e 94 1b 30 	call	0x6036	; 0x6036 <__eeprom_read_byte_1F2021>
    2f54:	80 2d       	mov	r24, r0
	nrk_led_clr (3);

	nrk_time_set (0, 0);
    2f56:	fa 01       	movw	r30, r20
    2f58:	e2 0f       	add	r30, r18
    2f5a:	f3 1f       	adc	r31, r19
    2f5c:	80 83       	st	Z, r24
    2f5e:	2f 5f       	subi	r18, 0xFF	; 255
    2f60:	3f 4f       	sbci	r19, 0xFF	; 255

	nrk_led_clr (0);
	nrk_led_clr (1);
	nrk_led_clr (2);
	nrk_led_clr (3);

    2f62:	20 31       	cpi	r18, 0x10	; 16
    2f64:	31 05       	cpc	r19, r1
    2f66:	91 f7       	brne	.-28     	; 0x2f4c <read_eeprom_aes_key+0x6>
	nrk_time_set (0, 0);

	bmac_task_config ();
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	08 95       	ret

00002f6e <nrk_eeprom_write_byte>:
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    2f6e:	dc 01       	movw	r26, r24
    2f70:	06 2e       	mov	r0, r22
    2f72:	0e 94 23 30 	call	0x6046	; 0x6046 <__eeprom_write_byte_1F2021>
    2f76:	08 95       	ret

00002f78 <write_eeprom_load_img_pages>:
NRK_STK pin_task_stack[NRK_APP_STACKSIZE];
void pin_task (void);

void nrk_create_taskset ();

uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
    2f78:	fc 01       	movw	r30, r24
    2f7a:	80 81       	ld	r24, Z
    2f7c:	a6 e0       	ldi	r26, 0x06	; 6
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	08 2e       	mov	r0, r24
    2f82:	0e 94 23 30 	call	0x6046	; 0x6046 <__eeprom_write_byte_1F2021>

int main ()
{
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	90 e0       	ldi	r25, 0x00	; 0
    2f8a:	08 95       	ret

00002f8c <write_eeprom_aes_key>:
	nrk_time_set (0, 0);

	bmac_task_config ();

	nrk_create_taskset ();
	nrk_start ();
    2f8c:	ac 01       	movw	r20, r24
    2f8e:	20 e0       	ldi	r18, 0x00	; 0
    2f90:	30 e0       	ldi	r19, 0x00	; 0
    2f92:	d9 01       	movw	r26, r18
    2f94:	18 96       	adiw	r26, 0x08	; 8
    2f96:	fa 01       	movw	r30, r20
    2f98:	e2 0f       	add	r30, r18
    2f9a:	f3 1f       	adc	r31, r19
    2f9c:	80 81       	ld	r24, Z
    2f9e:	08 2e       	mov	r0, r24
    2fa0:	0e 94 23 30 	call	0x6046	; 0x6046 <__eeprom_write_byte_1F2021>
    2fa4:	2f 5f       	subi	r18, 0xFF	; 255
    2fa6:	3f 4f       	sbci	r19, 0xFF	; 255

	return 0;
    2fa8:	20 31       	cpi	r18, 0x10	; 16
    2faa:	31 05       	cpc	r19, r1
    2fac:	91 f7       	brne	.-28     	; 0x2f92 <write_eeprom_aes_key+0x6>
}

void pin_task ()
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	90 e0       	ldi	r25, 0x00	; 0
    2fb2:	08 95       	ret

00002fb4 <nrk_int_disable>:
void nrk_create_taskset ();

uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];

int main ()
{
    2fb4:	f8 94       	cli
    2fb6:	08 95       	ret

00002fb8 <nrk_int_enable>:
	uint16_t div;
	nrk_setup_ports ();
	nrk_setup_uart (UART_BAUDRATE_115K2);

    2fb8:	78 94       	sei
    2fba:	08 95       	ret

00002fbc <nrk_version>:
    2fbc:	85 e6       	ldi	r24, 0x65	; 101
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	08 95       	ret

00002fc2 <_nrk_timer_tick>:
    2fc2:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <_nrk_scheduler>
    2fc6:	08 95       	ret

00002fc8 <nrk_TCB_init>:
    2fc8:	ef 92       	push	r14
    2fca:	ff 92       	push	r15
    2fcc:	0f 93       	push	r16
    2fce:	1f 93       	push	r17
    2fd0:	cf 93       	push	r28
    2fd2:	df 93       	push	r29
    2fd4:	ec 01       	movw	r28, r24
    2fd6:	8b 01       	movw	r16, r22
    2fd8:	7a 01       	movw	r14, r20
    2fda:	89 85       	ldd	r24, Y+9	; 0x09
    2fdc:	82 30       	cpi	r24, 0x02	; 2
    2fde:	21 f0       	breq	.+8      	; 0x2fe8 <nrk_TCB_init+0x20>
    2fe0:	80 91 6b 06 	lds	r24, 0x066B
    2fe4:	88 83       	st	Y, r24
    2fe6:	01 c0       	rjmp	.+2      	; 0x2fea <nrk_TCB_init+0x22>
    2fe8:	18 82       	st	Y, r1
    2fea:	80 91 6b 06 	lds	r24, 0x066B
    2fee:	84 30       	cpi	r24, 0x04	; 4
    2ff0:	20 f0       	brcs	.+8      	; 0x2ffa <nrk_TCB_init+0x32>
    2ff2:	60 e0       	ldi	r22, 0x00	; 0
    2ff4:	87 e0       	ldi	r24, 0x07	; 7
    2ff6:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <nrk_kernel_error_add>
    2ffa:	89 85       	ldd	r24, Y+9	; 0x09
    2ffc:	82 30       	cpi	r24, 0x02	; 2
    2ffe:	29 f0       	breq	.+10     	; 0x300a <nrk_TCB_init+0x42>
    3000:	80 91 6b 06 	lds	r24, 0x066B
    3004:	8f 5f       	subi	r24, 0xFF	; 255
    3006:	80 93 6b 06 	sts	0x066B, r24
    300a:	80 91 6b 06 	lds	r24, 0x066B
    300e:	88 23       	and	r24, r24
    3010:	19 f4       	brne	.+6      	; 0x3018 <nrk_TCB_init+0x50>
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	80 93 6b 06 	sts	0x066B, r24
    3018:	88 81       	ld	r24, Y
    301a:	99 27       	eor	r25, r25
    301c:	87 fd       	sbrc	r24, 7
    301e:	90 95       	com	r25
    3020:	fc 01       	movw	r30, r24
    3022:	45 e0       	ldi	r20, 0x05	; 5
    3024:	ee 0f       	add	r30, r30
    3026:	ff 1f       	adc	r31, r31
    3028:	4a 95       	dec	r20
    302a:	e1 f7       	brne	.-8      	; 0x3024 <nrk_TCB_init+0x5c>
    302c:	e8 0f       	add	r30, r24
    302e:	f9 1f       	adc	r31, r25
    3030:	e1 52       	subi	r30, 0x21	; 33
    3032:	fa 4f       	sbci	r31, 0xFA	; 250
    3034:	11 83       	std	Z+1, r17	; 0x01
    3036:	00 83       	st	Z, r16
    3038:	88 81       	ld	r24, Y
    303a:	99 27       	eor	r25, r25
    303c:	87 fd       	sbrc	r24, 7
    303e:	90 95       	com	r25
    3040:	fc 01       	movw	r30, r24
    3042:	35 e0       	ldi	r19, 0x05	; 5
    3044:	ee 0f       	add	r30, r30
    3046:	ff 1f       	adc	r31, r31
    3048:	3a 95       	dec	r19
    304a:	e1 f7       	brne	.-8      	; 0x3044 <nrk_TCB_init+0x7c>
    304c:	e8 0f       	add	r30, r24
    304e:	f9 1f       	adc	r31, r25
    3050:	e1 52       	subi	r30, 0x21	; 33
    3052:	fa 4f       	sbci	r31, 0xFA	; 250
    3054:	88 85       	ldd	r24, Y+8	; 0x08
    3056:	82 87       	std	Z+10, r24	; 0x0a
    3058:	88 81       	ld	r24, Y
    305a:	99 27       	eor	r25, r25
    305c:	87 fd       	sbrc	r24, 7
    305e:	90 95       	com	r25
    3060:	fc 01       	movw	r30, r24
    3062:	25 e0       	ldi	r18, 0x05	; 5
    3064:	ee 0f       	add	r30, r30
    3066:	ff 1f       	adc	r31, r31
    3068:	2a 95       	dec	r18
    306a:	e1 f7       	brne	.-8      	; 0x3064 <nrk_TCB_init+0x9c>
    306c:	e8 0f       	add	r30, r24
    306e:	f9 1f       	adc	r31, r25
    3070:	e1 52       	subi	r30, 0x21	; 33
    3072:	fa 4f       	sbci	r31, 0xFA	; 250
    3074:	83 e0       	ldi	r24, 0x03	; 3
    3076:	81 87       	std	Z+9, r24	; 0x09
    3078:	28 81       	ld	r18, Y
    307a:	82 2f       	mov	r24, r18
    307c:	99 27       	eor	r25, r25
    307e:	87 fd       	sbrc	r24, 7
    3080:	90 95       	com	r25
    3082:	fc 01       	movw	r30, r24
    3084:	05 e0       	ldi	r16, 0x05	; 5
    3086:	ee 0f       	add	r30, r30
    3088:	ff 1f       	adc	r31, r31
    308a:	0a 95       	dec	r16
    308c:	e1 f7       	brne	.-8      	; 0x3086 <nrk_TCB_init+0xbe>
    308e:	e8 0f       	add	r30, r24
    3090:	f9 1f       	adc	r31, r25
    3092:	e1 52       	subi	r30, 0x21	; 33
    3094:	fa 4f       	sbci	r31, 0xFA	; 250
    3096:	20 87       	std	Z+8, r18	; 0x08
    3098:	88 81       	ld	r24, Y
    309a:	99 27       	eor	r25, r25
    309c:	87 fd       	sbrc	r24, 7
    309e:	90 95       	com	r25
    30a0:	fc 01       	movw	r30, r24
    30a2:	15 e0       	ldi	r17, 0x05	; 5
    30a4:	ee 0f       	add	r30, r30
    30a6:	ff 1f       	adc	r31, r31
    30a8:	1a 95       	dec	r17
    30aa:	e1 f7       	brne	.-8      	; 0x30a4 <nrk_TCB_init+0xdc>
    30ac:	e8 0f       	add	r30, r24
    30ae:	f9 1f       	adc	r31, r25
    30b0:	e1 52       	subi	r30, 0x21	; 33
    30b2:	fa 4f       	sbci	r31, 0xFA	; 250
    30b4:	15 82       	std	Z+5, r1	; 0x05
    30b6:	08 81       	ld	r16, Y
    30b8:	11 27       	eor	r17, r17
    30ba:	07 fd       	sbrc	r16, 7
    30bc:	10 95       	com	r17
    30be:	2b 85       	ldd	r18, Y+11	; 0x0b
    30c0:	3c 85       	ldd	r19, Y+12	; 0x0c
    30c2:	4d 85       	ldd	r20, Y+13	; 0x0d
    30c4:	5e 85       	ldd	r21, Y+14	; 0x0e
    30c6:	6f 85       	ldd	r22, Y+15	; 0x0f
    30c8:	78 89       	ldd	r23, Y+16	; 0x10
    30ca:	89 89       	ldd	r24, Y+17	; 0x11
    30cc:	9a 89       	ldd	r25, Y+18	; 0x12
    30ce:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <_nrk_time_to_ticks>
    30d2:	f8 01       	movw	r30, r16
    30d4:	b5 e0       	ldi	r27, 0x05	; 5
    30d6:	ee 0f       	add	r30, r30
    30d8:	ff 1f       	adc	r31, r31
    30da:	ba 95       	dec	r27
    30dc:	e1 f7       	brne	.-8      	; 0x30d6 <nrk_TCB_init+0x10e>
    30de:	e0 0f       	add	r30, r16
    30e0:	f1 1f       	adc	r31, r17
    30e2:	e1 52       	subi	r30, 0x21	; 33
    30e4:	fa 4f       	sbci	r31, 0xFA	; 250
    30e6:	94 8f       	std	Z+28, r25	; 0x1c
    30e8:	83 8f       	std	Z+27, r24	; 0x1b
    30ea:	08 81       	ld	r16, Y
    30ec:	11 27       	eor	r17, r17
    30ee:	07 fd       	sbrc	r16, 7
    30f0:	10 95       	com	r17
    30f2:	2b 8d       	ldd	r18, Y+27	; 0x1b
    30f4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    30f6:	4d 8d       	ldd	r20, Y+29	; 0x1d
    30f8:	5e 8d       	ldd	r21, Y+30	; 0x1e
    30fa:	6f 8d       	ldd	r22, Y+31	; 0x1f
    30fc:	78 a1       	ldd	r23, Y+32	; 0x20
    30fe:	89 a1       	ldd	r24, Y+33	; 0x21
    3100:	9a a1       	ldd	r25, Y+34	; 0x22
    3102:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <_nrk_time_to_ticks>
    3106:	f8 01       	movw	r30, r16
    3108:	a5 e0       	ldi	r26, 0x05	; 5
    310a:	ee 0f       	add	r30, r30
    310c:	ff 1f       	adc	r31, r31
    310e:	aa 95       	dec	r26
    3110:	e1 f7       	brne	.-8      	; 0x310a <nrk_TCB_init+0x142>
    3112:	e0 0f       	add	r30, r16
    3114:	f1 1f       	adc	r31, r17
    3116:	e1 52       	subi	r30, 0x21	; 33
    3118:	fa 4f       	sbci	r31, 0xFA	; 250
    311a:	96 8b       	std	Z+22, r25	; 0x16
    311c:	85 8b       	std	Z+21, r24	; 0x15
    311e:	88 81       	ld	r24, Y
    3120:	99 27       	eor	r25, r25
    3122:	87 fd       	sbrc	r24, 7
    3124:	90 95       	com	r25
    3126:	fc 01       	movw	r30, r24
    3128:	75 e0       	ldi	r23, 0x05	; 5
    312a:	ee 0f       	add	r30, r30
    312c:	ff 1f       	adc	r31, r31
    312e:	7a 95       	dec	r23
    3130:	e1 f7       	brne	.-8      	; 0x312a <nrk_TCB_init+0x162>
    3132:	e8 0f       	add	r30, r24
    3134:	f9 1f       	adc	r31, r25
    3136:	e1 52       	subi	r30, 0x21	; 33
    3138:	fa 4f       	sbci	r31, 0xFA	; 250
    313a:	85 89       	ldd	r24, Z+21	; 0x15
    313c:	96 89       	ldd	r25, Z+22	; 0x16
    313e:	23 8d       	ldd	r18, Z+27	; 0x1b
    3140:	34 8d       	ldd	r19, Z+28	; 0x1c
    3142:	82 0f       	add	r24, r18
    3144:	93 1f       	adc	r25, r19
    3146:	90 8f       	std	Z+24, r25	; 0x18
    3148:	87 8b       	std	Z+23, r24	; 0x17
    314a:	08 81       	ld	r16, Y
    314c:	11 27       	eor	r17, r17
    314e:	07 fd       	sbrc	r16, 7
    3150:	10 95       	com	r17
    3152:	2b 89       	ldd	r18, Y+19	; 0x13
    3154:	3c 89       	ldd	r19, Y+20	; 0x14
    3156:	4d 89       	ldd	r20, Y+21	; 0x15
    3158:	5e 89       	ldd	r21, Y+22	; 0x16
    315a:	6f 89       	ldd	r22, Y+23	; 0x17
    315c:	78 8d       	ldd	r23, Y+24	; 0x18
    315e:	89 8d       	ldd	r24, Y+25	; 0x19
    3160:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3162:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <_nrk_time_to_ticks>
    3166:	f8 01       	movw	r30, r16
    3168:	65 e0       	ldi	r22, 0x05	; 5
    316a:	ee 0f       	add	r30, r30
    316c:	ff 1f       	adc	r31, r31
    316e:	6a 95       	dec	r22
    3170:	e1 f7       	brne	.-8      	; 0x316a <nrk_TCB_init+0x1a2>
    3172:	e0 0f       	add	r30, r16
    3174:	f1 1f       	adc	r31, r17
    3176:	e1 52       	subi	r30, 0x21	; 33
    3178:	fa 4f       	sbci	r31, 0xFA	; 250
    317a:	96 8f       	std	Z+30, r25	; 0x1e
    317c:	85 8f       	std	Z+29, r24	; 0x1d
    317e:	88 81       	ld	r24, Y
    3180:	99 27       	eor	r25, r25
    3182:	87 fd       	sbrc	r24, 7
    3184:	90 95       	com	r25
    3186:	fc 01       	movw	r30, r24
    3188:	55 e0       	ldi	r21, 0x05	; 5
    318a:	ee 0f       	add	r30, r30
    318c:	ff 1f       	adc	r31, r31
    318e:	5a 95       	dec	r21
    3190:	e1 f7       	brne	.-8      	; 0x318a <nrk_TCB_init+0x1c2>
    3192:	e8 0f       	add	r30, r24
    3194:	f9 1f       	adc	r31, r25
    3196:	e1 52       	subi	r30, 0x21	; 33
    3198:	fa 4f       	sbci	r31, 0xFA	; 250
    319a:	85 8d       	ldd	r24, Z+29	; 0x1d
    319c:	96 8d       	ldd	r25, Z+30	; 0x1e
    319e:	92 8f       	std	Z+26, r25	; 0x1a
    31a0:	81 8f       	std	Z+25, r24	; 0x19
    31a2:	88 81       	ld	r24, Y
    31a4:	99 27       	eor	r25, r25
    31a6:	87 fd       	sbrc	r24, 7
    31a8:	90 95       	com	r25
    31aa:	fc 01       	movw	r30, r24
    31ac:	45 e0       	ldi	r20, 0x05	; 5
    31ae:	ee 0f       	add	r30, r30
    31b0:	ff 1f       	adc	r31, r31
    31b2:	4a 95       	dec	r20
    31b4:	e1 f7       	brne	.-8      	; 0x31ae <nrk_TCB_init+0x1e6>
    31b6:	e8 0f       	add	r30, r24
    31b8:	f9 1f       	adc	r31, r25
    31ba:	e1 52       	subi	r30, 0x21	; 33
    31bc:	fa 4f       	sbci	r31, 0xFA	; 250
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	90 e0       	ldi	r25, 0x00	; 0
    31c2:	90 a3       	std	Z+32, r25	; 0x20
    31c4:	87 8f       	std	Z+31, r24	; 0x1f
    31c6:	88 81       	ld	r24, Y
    31c8:	99 27       	eor	r25, r25
    31ca:	87 fd       	sbrc	r24, 7
    31cc:	90 95       	com	r25
    31ce:	fc 01       	movw	r30, r24
    31d0:	35 e0       	ldi	r19, 0x05	; 5
    31d2:	ee 0f       	add	r30, r30
    31d4:	ff 1f       	adc	r31, r31
    31d6:	3a 95       	dec	r19
    31d8:	e1 f7       	brne	.-8      	; 0x31d2 <nrk_TCB_init+0x20a>
    31da:	e8 0f       	add	r30, r24
    31dc:	f9 1f       	adc	r31, r25
    31de:	e1 52       	subi	r30, 0x21	; 33
    31e0:	fa 4f       	sbci	r31, 0xFA	; 250
    31e2:	f3 82       	std	Z+3, r15	; 0x03
    31e4:	e2 82       	std	Z+2, r14	; 0x02
    31e6:	88 81       	ld	r24, Y
    31e8:	99 27       	eor	r25, r25
    31ea:	87 fd       	sbrc	r24, 7
    31ec:	90 95       	com	r25
    31ee:	fc 01       	movw	r30, r24
    31f0:	25 e0       	ldi	r18, 0x05	; 5
    31f2:	ee 0f       	add	r30, r30
    31f4:	ff 1f       	adc	r31, r31
    31f6:	2a 95       	dec	r18
    31f8:	e1 f7       	brne	.-8      	; 0x31f2 <nrk_TCB_init+0x22a>
    31fa:	e8 0f       	add	r30, r24
    31fc:	f9 1f       	adc	r31, r25
    31fe:	e1 52       	subi	r30, 0x21	; 33
    3200:	fa 4f       	sbci	r31, 0xFA	; 250
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	84 87       	std	Z+12, r24	; 0x0c
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	df 91       	pop	r29
    320c:	cf 91       	pop	r28
    320e:	1f 91       	pop	r17
    3210:	0f 91       	pop	r16
    3212:	ff 90       	pop	r15
    3214:	ef 90       	pop	r14
    3216:	08 95       	ret

00003218 <nrk_start>:
		//nrk_led_toggle (BLUE_LED);
		// Release the RX buffer so future packets can arrive 
		bmac_rx_pkt_release ();
	}

}
    3218:	8f 92       	push	r8
    321a:	9f 92       	push	r9
    321c:	af 92       	push	r10
    321e:	bf 92       	push	r11
    3220:	cf 92       	push	r12
    3222:	df 92       	push	r13
    3224:	ef 92       	push	r14
    3226:	ff 92       	push	r15
    3228:	0f 93       	push	r16
    322a:	1f 93       	push	r17
    322c:	cf 93       	push	r28
    322e:	df 93       	push	r29
    3230:	67 ee       	ldi	r22, 0xE7	; 231
    3232:	a6 2e       	mov	r10, r22
    3234:	65 e0       	ldi	r22, 0x05	; 5
    3236:	b6 2e       	mov	r11, r22
    3238:	cc 24       	eor	r12, r12
    323a:	dd 24       	eor	r13, r13
	PIN_TASK.Type = BASIC_TASK;
	PIN_TASK.SchType = PREEMPTIVE;
	PIN_TASK.period.secs = 3;
	PIN_TASK.period.nano_secs = 100 * NANOS_PER_MS;
	PIN_TASK.cpu_reserve.secs = 0;
	PIN_TASK.cpu_reserve.nano_secs = 50 * NANOS_PER_MS;
    323c:	45 01       	movw	r8, r10
		//nrk_led_toggle (BLUE_LED);
		// Release the RX buffer so future packets can arrive 
		bmac_rx_pkt_release ();
	}

}
    323e:	ec 2c       	mov	r14, r12
	PIN_TASK.prio = 1;
	PIN_TASK.FirstActivation = TRUE;
	PIN_TASK.Type = BASIC_TASK;
	PIN_TASK.SchType = PREEMPTIVE;
	PIN_TASK.period.secs = 3;
	PIN_TASK.period.nano_secs = 100 * NANOS_PER_MS;
    3240:	f5 01       	movw	r30, r10
    3242:	f0 80       	ld	r15, Z
	PIN_TASK.cpu_reserve.secs = 0;
	PIN_TASK.cpu_reserve.nano_secs = 50 * NANOS_PER_MS;
    3244:	ff ef       	ldi	r31, 0xFF	; 255
    3246:	ff 16       	cp	r15, r31
    3248:	91 f0       	breq	.+36     	; 0x326e <nrk_start+0x56>
    324a:	e4 01       	movw	r28, r8
    324c:	00 e0       	ldi	r16, 0x00	; 0
    324e:	10 e0       	ldi	r17, 0x00	; 0
	PIN_TASK.offset.secs = 0;
	PIN_TASK.offset.nano_secs = 0;
	nrk_activate_task (&PIN_TASK);
*/
    3250:	e0 16       	cp	r14, r16
    3252:	39 f0       	breq	.+14     	; 0x3262 <nrk_start+0x4a>
    3254:	88 81       	ld	r24, Y
    3256:	f8 16       	cp	r15, r24
    3258:	21 f4       	brne	.+8      	; 0x3262 <nrk_start+0x4a>

	RX_TASK.task = rx_task;
    325a:	6f 2d       	mov	r22, r15
    325c:	85 e0       	ldi	r24, 0x05	; 5
    325e:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <nrk_kernel_error_add>
    3262:	0f 5f       	subi	r16, 0xFF	; 255
    3264:	1f 4f       	sbci	r17, 0xFF	; 255
    3266:	a1 96       	adiw	r28, 0x21	; 33
	PIN_TASK.period.secs = 3;
	PIN_TASK.period.nano_secs = 100 * NANOS_PER_MS;
	PIN_TASK.cpu_reserve.secs = 0;
	PIN_TASK.cpu_reserve.nano_secs = 50 * NANOS_PER_MS;
	PIN_TASK.offset.secs = 0;
	PIN_TASK.offset.nano_secs = 0;
    3268:	04 30       	cpi	r16, 0x04	; 4
    326a:	11 05       	cpc	r17, r1
    326c:	89 f7       	brne	.-30     	; 0x3250 <nrk_start+0x38>
    326e:	08 94       	sec
    3270:	c1 1c       	adc	r12, r1
    3272:	d1 1c       	adc	r13, r1
    3274:	81 e2       	ldi	r24, 0x21	; 33
    3276:	90 e0       	ldi	r25, 0x00	; 0
    3278:	a8 0e       	add	r10, r24
    327a:	b9 1e       	adc	r11, r25
	PIN_TASK.Ptos = (void *) &pin_task_stack[NRK_APP_STACKSIZE - 1];
	PIN_TASK.Pbos = (void *) &pin_task_stack[0];
	PIN_TASK.prio = 1;
	PIN_TASK.FirstActivation = TRUE;
	PIN_TASK.Type = BASIC_TASK;
	PIN_TASK.SchType = PREEMPTIVE;
    327c:	94 e0       	ldi	r25, 0x04	; 4
    327e:	c9 16       	cp	r12, r25
    3280:	d1 04       	cpc	r13, r1
    3282:	e9 f6       	brne	.-70     	; 0x323e <nrk_start+0x26>
	RX_TASK.prio = 2;
	RX_TASK.FirstActivation = TRUE;
	RX_TASK.Type = BASIC_TASK;
	RX_TASK.SchType = PREEMPTIVE;
	RX_TASK.period.secs = 0;
	RX_TASK.period.nano_secs = 40 * NANOS_PER_MS;;
    3284:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <nrk_get_high_ready_task_ID>
	RX_TASK.cpu_reserve.secs = 0;
    3288:	28 2f       	mov	r18, r24
    328a:	33 27       	eor	r19, r19
    328c:	27 fd       	sbrc	r18, 7
    328e:	30 95       	com	r19
    3290:	f9 01       	movw	r30, r18
    3292:	55 e0       	ldi	r21, 0x05	; 5
    3294:	ee 0f       	add	r30, r30
    3296:	ff 1f       	adc	r31, r31
    3298:	5a 95       	dec	r21
    329a:	e1 f7       	brne	.-8      	; 0x3294 <nrk_start+0x7c>
    329c:	e2 0f       	add	r30, r18
    329e:	f3 1f       	adc	r31, r19
    32a0:	e1 52       	subi	r30, 0x21	; 33
    32a2:	fa 4f       	sbci	r31, 0xFA	; 250
    32a4:	32 85       	ldd	r19, Z+10	; 0x0a
    32a6:	30 93 7e 06 	sts	0x067E, r19
	RX_TASK.cpu_reserve.nano_secs = 40 * NANOS_PER_MS;;
    32aa:	21 e2       	ldi	r18, 0x21	; 33
    32ac:	82 02       	muls	r24, r18
    32ae:	c0 01       	movw	r24, r0
    32b0:	11 24       	eor	r1, r1
    32b2:	81 52       	subi	r24, 0x21	; 33
    32b4:	9a 4f       	sbci	r25, 0xFA	; 250
    32b6:	90 93 7d 06 	sts	0x067D, r25
    32ba:	80 93 7c 06 	sts	0x067C, r24
    32be:	90 93 6e 06 	sts	0x066E, r25
    32c2:	80 93 6d 06 	sts	0x066D, r24
	RX_TASK.offset.secs = 0;
    32c6:	30 93 6f 06 	sts	0x066F, r19
    32ca:	0e 94 47 2b 	call	0x568e	; 0x568e <nrk_target_start>
    32ce:	0e 94 2d 2b 	call	0x565a	; 0x565a <nrk_stack_pointer_init>
    32d2:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <nrk_start_high_ready_task>
    32d6:	ff cf       	rjmp	.-2      	; 0x32d6 <nrk_start+0xbe>

000032d8 <nrk_init>:
	return 0;
}

void pin_task ()
{
	while(1) {
    32d8:	0f 93       	push	r16
    32da:	1f 93       	push	r17
    32dc:	cf 93       	push	r28
    32de:	df 93       	push	r29
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
    32e4:	a3 97       	sbiw	r28, 0x23	; 35
    32e6:	0f b6       	in	r0, 0x3f	; 63
    32e8:	f8 94       	cli
    32ea:	de bf       	out	0x3e, r29	; 62
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	cd bf       	out	0x3d, r28	; 61
		nrk_led_toggle (RED_LED);
		nrk_wait_until_next_period ();
		nrk_led_toggle (BLUE_LED);
		nrk_wait_until_next_period ();
	}
}
    32f0:	0e 94 00 1c 	call	0x3800	; 0x3800 <nrk_signal_create>
    32f4:	80 93 6c 06 	sts	0x066C, r24

    32f8:	8f 3f       	cpi	r24, 0xFF	; 255
    32fa:	21 f4       	brne	.+8      	; 0x3304 <nrk_init+0x2c>
    32fc:	60 e0       	ldi	r22, 0x00	; 0
    32fe:	8e e0       	ldi	r24, 0x0E	; 14
    3300:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <nrk_kernel_error_add>
void rx_task ()
{
	uint8_t i, len;
    3304:	0e 94 9e 2a 	call	0x553c	; 0x553c <_nrk_startup_ok>
    3308:	88 23       	and	r24, r24
    330a:	21 f4       	brne	.+8      	; 0x3314 <nrk_init+0x3c>
    330c:	60 e0       	ldi	r22, 0x00	; 0
    330e:	86 e0       	ldi	r24, 0x06	; 6
    3310:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <nrk_kernel_error_add>
		val = bmac_wait_until_rx_pkt ();
		// Get the RX packet 
		//nrk_led_set (ORANGE_LED);
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
		
		printf ("%c=%c\r\n", rx_buf[0], rx_buf[2]);
    3314:	10 92 6f 06 	sts	0x066F, r1
		
    3318:	10 92 7d 06 	sts	0x067D, r1
    331c:	10 92 7c 06 	sts	0x067C, r1
		switch(rx_buf[0]) {
			case 'A': // ~0xxx
    3320:	10 92 6e 06 	sts	0x066E, r1
    3324:	10 92 6d 06 	sts	0x066D, r1
				nrk_led_clr(RED_LED);
    3328:	10 92 7e 06 	sts	0x067E, r1
				break;
		}

		switch(rx_buf[2]) {
			case '-': // ~x000
				nrk_gpio_set(NRK_DEBUG_0);
    332c:	10 92 7b 06 	sts	0x067B, r1
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
    3330:	8f ef       	ldi	r24, 0xFF	; 255
    3332:	80 93 65 06 	sts	0x0665, r24
				nrk_led_clr(GREEN_LED);
    3336:	80 93 67 06 	sts	0x0667, r24
				break;
    333a:	80 93 66 06 	sts	0x0666, r24
			case '-': // ~x000
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
    333e:	80 93 68 06 	sts	0x0668, r24
				nrk_led_clr(GREEN_LED);
    3342:	80 93 6a 06 	sts	0x066A, r24
				break;
    3346:	80 93 69 06 	sts	0x0669, r24
    334a:	ef ed       	ldi	r30, 0xDF	; 223
    334c:	f5 e0       	ldi	r31, 0x05	; 5
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
				nrk_led_clr(GREEN_LED);
				break;
    334e:	83 e6       	ldi	r24, 0x63	; 99
    3350:	82 87       	std	Z+10, r24	; 0x0a
			case 'D': // ~x010
    3352:	8f ef       	ldi	r24, 0xFF	; 255
    3354:	80 87       	std	Z+8, r24	; 0x08
    3356:	b1 96       	adiw	r30, 0x21	; 33
			case 'U': // ~x001
				nrk_gpio_clr(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
    3358:	26 e0       	ldi	r18, 0x06	; 6
    335a:	e3 36       	cpi	r30, 0x63	; 99
    335c:	f2 07       	cpc	r31, r18
    335e:	b9 f7       	brne	.-18     	; 0x334e <nrk_init+0x76>
    3360:	ef e7       	ldi	r30, 0x7F	; 127
    3362:	f6 e0       	ldi	r31, 0x06	; 6
				nrk_gpio_clr(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
				nrk_led_set(BLUE_LED);
				nrk_led_clr(GREEN_LED);
				break;
    3364:	cf 01       	movw	r24, r30
    3366:	05 96       	adiw	r24, 0x05	; 5
    3368:	94 83       	std	Z+4, r25	; 0x04
    336a:	83 83       	std	Z+3, r24	; 0x03
			case 'L': // ~x011
    336c:	f7 83       	std	Z+7, r31	; 0x07
    336e:	e6 83       	std	Z+6, r30	; 0x06
    3370:	fc 01       	movw	r30, r24
			case 'D': // ~x010
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_clr(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
				nrk_led_set(BLUE_LED);
    3372:	26 e0       	ldi	r18, 0x06	; 6
    3374:	83 39       	cpi	r24, 0x93	; 147
    3376:	92 07       	cpc	r25, r18
    3378:	a9 f7       	brne	.-22     	; 0x3364 <nrk_init+0x8c>
				nrk_led_clr(GREEN_LED);
				break;
			case 'L': // ~x011
				nrk_gpio_clr(NRK_DEBUG_0);
				nrk_gpio_clr(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
    337a:	10 92 81 06 	sts	0x0681, r1
    337e:	10 92 80 06 	sts	0x0680, r1
				nrk_led_set(ORANGE_LED);
    3382:	10 92 97 06 	sts	0x0697, r1
    3386:	10 92 96 06 	sts	0x0696, r1
				nrk_led_set(BLUE_LED);
    338a:	10 92 72 06 	sts	0x0672, r1
    338e:	10 92 71 06 	sts	0x0671, r1
				nrk_led_clr(GREEN_LED);
    3392:	44 97       	sbiw	r24, 0x14	; 20
    3394:	90 93 de 05 	sts	0x05DE, r25
    3398:	80 93 dd 05 	sts	0x05DD, r24
				break;
			case 'R': // ~x100
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_clr(NRK_DEBUG_2);
    339c:	6d e3       	ldi	r22, 0x3D	; 61
    339e:	75 e2       	ldi	r23, 0x25	; 37
    33a0:	8e 01       	movw	r16, r28
    33a2:	0f 5f       	subi	r16, 0xFF	; 255
    33a4:	1f 4f       	sbci	r17, 0xFF	; 255
    33a6:	c8 01       	movw	r24, r16
    33a8:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <nrk_task_set_entry_function>
				nrk_led_clr(ORANGE_LED);
    33ac:	40 e8       	ldi	r20, 0x80	; 128
    33ae:	50 e0       	ldi	r21, 0x00	; 0
    33b0:	6a e1       	ldi	r22, 0x1A	; 26
    33b2:	75 e0       	ldi	r23, 0x05	; 5
    33b4:	c8 01       	movw	r24, r16
    33b6:	0e 94 4c 2b 	call	0x5698	; 0x5698 <nrk_task_set_stk>
				nrk_led_clr(BLUE_LED);
    33ba:	85 e5       	ldi	r24, 0x55	; 85
    33bc:	80 93 1a 05 	sts	0x051A, r24
				nrk_led_set(GREEN_LED);
				break;
    33c0:	19 86       	std	Y+9, r1	; 0x09
			case 'B': // ~x101
    33c2:	1c 8e       	std	Y+28, r1	; 0x1c
    33c4:	1d 8e       	std	Y+29, r1	; 0x1d
    33c6:	1e 8e       	std	Y+30, r1	; 0x1e
    33c8:	1f 8e       	std	Y+31, r1	; 0x1f
				nrk_gpio_clr(NRK_DEBUG_0);
    33ca:	18 a2       	std	Y+32, r1	; 0x20
    33cc:	19 a2       	std	Y+33, r1	; 0x21
    33ce:	1a a2       	std	Y+34, r1	; 0x22
    33d0:	1b a2       	std	Y+35, r1	; 0x23
				nrk_gpio_set(NRK_DEBUG_1);
    33d2:	91 e0       	ldi	r25, 0x01	; 1
    33d4:	98 87       	std	Y+8, r25	; 0x08
				nrk_gpio_clr(NRK_DEBUG_2);
    33d6:	82 e0       	ldi	r24, 0x02	; 2
    33d8:	8a 87       	std	Y+10, r24	; 0x0a
				nrk_led_set(ORANGE_LED);
    33da:	9b 87       	std	Y+11, r25	; 0x0b
				nrk_led_clr(BLUE_LED);
    33dc:	c8 01       	movw	r24, r16
    33de:	0e 94 07 22 	call	0x440e	; 0x440e <nrk_activate_task>
    33e2:	a3 96       	adiw	r28, 0x23	; 35
    33e4:	0f b6       	in	r0, 0x3f	; 63
    33e6:	f8 94       	cli
    33e8:	de bf       	out	0x3e, r29	; 62
    33ea:	0f be       	out	0x3f, r0	; 63
    33ec:	cd bf       	out	0x3d, r28	; 61
    33ee:	df 91       	pop	r29
    33f0:	cf 91       	pop	r28
    33f2:	1f 91       	pop	r17
    33f4:	0f 91       	pop	r16
    33f6:	08 95       	ret

000033f8 <nrk_halt>:
void nrk_create_taskset ();

uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];

int main ()
{
    33f8:	f8 94       	cli
    33fa:	ff cf       	rjmp	.-2      	; 0x33fa <nrk_halt+0x2>

000033fc <_nrk_errno_set>:
#include <nrk_error.h>

nrk_task_type RX_TASK;
NRK_STK rx_task_stack[NRK_APP_STACKSIZE];
void rx_task (void);

    33fc:	e0 91 7c 06 	lds	r30, 0x067C
    3400:	f0 91 7d 06 	lds	r31, 0x067D
    3404:	84 87       	std	Z+12, r24	; 0x0c
    3406:	08 95       	ret

00003408 <nrk_errno_get>:
nrk_task_type PIN_TASK;
NRK_STK pin_task_stack[NRK_APP_STACKSIZE];
void pin_task (void);

    3408:	e0 91 7c 06 	lds	r30, 0x067C
    340c:	f0 91 7d 06 	lds	r31, 0x067D
    3410:	84 85       	ldd	r24, Z+12	; 0x0c
void nrk_create_taskset ();

    3412:	99 27       	eor	r25, r25
    3414:	08 95       	ret

00003416 <nrk_error_get>:

	nrk_create_taskset ();
	nrk_start ();

	return 0;
}
    3416:	dc 01       	movw	r26, r24
    3418:	fb 01       	movw	r30, r22

    341a:	80 91 19 05 	lds	r24, 0x0519
    341e:	88 23       	and	r24, r24
    3420:	19 f4       	brne	.+6      	; 0x3428 <nrk_error_get+0x12>
    3422:	80 e0       	ldi	r24, 0x00	; 0
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	08 95       	ret
void pin_task ()
{
    3428:	80 83       	st	Z, r24
	while(1) {
    342a:	80 91 a3 02 	lds	r24, 0x02A3
    342e:	8c 93       	st	X, r24
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	90 e0       	ldi	r25, 0x00	; 0
		nrk_led_toggle (RED_LED);
		nrk_wait_until_next_period ();
    3434:	08 95       	ret

00003436 <nrk_error_print>:
		nrk_led_toggle (BLUE_LED);
		nrk_wait_until_next_period ();
	}
    3436:	2f 92       	push	r2
    3438:	3f 92       	push	r3
    343a:	4f 92       	push	r4
    343c:	5f 92       	push	r5
    343e:	6f 92       	push	r6
    3440:	7f 92       	push	r7
    3442:	8f 92       	push	r8
    3444:	9f 92       	push	r9
    3446:	af 92       	push	r10
    3448:	bf 92       	push	r11
    344a:	cf 92       	push	r12
    344c:	df 92       	push	r13
    344e:	ef 92       	push	r14
    3450:	ff 92       	push	r15
    3452:	1f 93       	push	r17
    3454:	cf 93       	push	r28
    3456:	df 93       	push	r29
}

    3458:	80 91 19 05 	lds	r24, 0x0519
    345c:	88 23       	and	r24, r24
    345e:	09 f4       	brne	.+2      	; 0x3462 <nrk_error_print+0x2c>
    3460:	b4 c0       	rjmp	.+360    	; 0x35ca <nrk_error_print+0x194>
	nrk_time_t check_period;
	printf ("rx_task PID=%d\r\n", nrk_get_pid ());

	// init bmac on channel 25 
	bmac_init (25);

    3462:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <nrk_int_disable>
	// By default the RX check rate is 100ms
	// below shows how to change that
	check_period.secs=0;
	check_period.nano_secs=40*NANOS_PER_MS; // Fastest we could safely go
	val=bmac_set_rx_check_rate(check_period);
    3466:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <nrk_int_disable>
	// too high or too low performance will suffer greatly.
	// bmac_set_cca_thresh(-45); 


	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
	// This sets the next RX buffer.
    346a:	67 ed       	ldi	r22, 0xD7	; 215
    346c:	26 2e       	mov	r2, r22
    346e:	62 e0       	ldi	r22, 0x02	; 2
    3470:	36 2e       	mov	r3, r22
    3472:	5a ee       	ldi	r21, 0xEA	; 234
    3474:	45 2e       	mov	r4, r21
    3476:	52 e0       	ldi	r21, 0x02	; 2
    3478:	55 2e       	mov	r5, r21
    347a:	4d ef       	ldi	r20, 0xFD	; 253
    347c:	64 2e       	mov	r6, r20
    347e:	42 e0       	ldi	r20, 0x02	; 2
    3480:	74 2e       	mov	r7, r20
    3482:	35 e1       	ldi	r19, 0x15	; 21
    3484:	83 2e       	mov	r8, r19
    3486:	33 e0       	ldi	r19, 0x03	; 3
    3488:	93 2e       	mov	r9, r19
    348a:	2b e2       	ldi	r18, 0x2B	; 43
    348c:	a2 2e       	mov	r10, r18
    348e:	23 e0       	ldi	r18, 0x03	; 3
    3490:	b2 2e       	mov	r11, r18
    3492:	96 e4       	ldi	r25, 0x46	; 70
    3494:	c9 2e       	mov	r12, r25
    3496:	93 e0       	ldi	r25, 0x03	; 3
    3498:	d9 2e       	mov	r13, r25
    349a:	8c e5       	ldi	r24, 0x5C	; 92
    349c:	e8 2e       	mov	r14, r24
    349e:	83 e0       	ldi	r24, 0x03	; 3
    34a0:	f8 2e       	mov	r15, r24
    34a2:	c0 e7       	ldi	r28, 0x70	; 112
    34a4:	d3 e0       	ldi	r29, 0x03	; 3
	// bmac will try to receive fainter packets.  If the value is set
	// too high or too low performance will suffer greatly.
	// bmac_set_cca_thresh(-45); 


	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
    34a6:	8b e9       	ldi	r24, 0x9B	; 155
    34a8:	93 e0       	ldi	r25, 0x03	; 3
    34aa:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <nrk_kprintf>
	// This sets the next RX buffer.
    34ae:	80 91 a3 02 	lds	r24, 0x02A3
    34b2:	99 27       	eor	r25, r25
    34b4:	9f 93       	push	r25
    34b6:	8f 93       	push	r24
    34b8:	87 e4       	ldi	r24, 0x47	; 71
    34ba:	92 e0       	ldi	r25, 0x02	; 2
    34bc:	9f 93       	push	r25
    34be:	8f 93       	push	r24
    34c0:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <printf>
	// This can be called at anytime before releaseing the packet
    34c4:	87 e9       	ldi	r24, 0x97	; 151
    34c6:	93 e0       	ldi	r25, 0x03	; 3
    34c8:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <nrk_kprintf>
	// if you wish to do a zero-copy buffer switch
    34cc:	0f 90       	pop	r0
    34ce:	0f 90       	pop	r0
    34d0:	0f 90       	pop	r0
    34d2:	0f 90       	pop	r0
    34d4:	80 91 19 05 	lds	r24, 0x0519
    34d8:	84 31       	cpi	r24, 0x14	; 20
    34da:	10 f0       	brcs	.+4      	; 0x34e0 <nrk_error_print+0xaa>
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
    34dc:	10 92 19 05 	sts	0x0519, r1

    34e0:	80 91 19 05 	lds	r24, 0x0519
    34e4:	99 27       	eor	r25, r25
    34e6:	aa 27       	eor	r26, r26
    34e8:	bb 27       	eor	r27, r27
    34ea:	fc 01       	movw	r30, r24
    34ec:	31 97       	sbiw	r30, 0x01	; 1
    34ee:	e2 31       	cpi	r30, 0x12	; 18
    34f0:	f1 05       	cpc	r31, r1
    34f2:	b0 f5       	brcc	.+108    	; 0x3560 <nrk_error_print+0x12a>
    34f4:	ea 59       	subi	r30, 0x9A	; 154
    34f6:	ff 4f       	sbci	r31, 0xFF	; 255
    34f8:	ee 0f       	add	r30, r30
    34fa:	ff 1f       	adc	r31, r31
    34fc:	05 90       	lpm	r0, Z+
    34fe:	f4 91       	lpm	r31, Z
    3500:	e0 2d       	mov	r30, r0
    3502:	09 94       	ijmp
	bmac_auto_ack_disable();

	//set port direction as output
    3504:	ce 01       	movw	r24, r28
    3506:	2e c0       	rjmp	.+92     	; 0x3564 <nrk_error_print+0x12e>
	nrk_gpio_direction(NRK_DEBUG_3,NRK_PIN_OUTPUT);//PD.1
	nrk_gpio_direction(NRK_DEBUG_2,NRK_PIN_OUTPUT);//PD.0
	nrk_gpio_direction(NRK_DEBUG_0,NRK_PIN_OUTPUT);//PA.3
    3508:	c7 01       	movw	r24, r14
    350a:	2c c0       	rjmp	.+88     	; 0x3564 <nrk_error_print+0x12e>
	nrk_gpio_direction(NRK_DEBUG_1,NRK_PIN_OUTPUT);//PA.4

	while (1) {
    350c:	c6 01       	movw	r24, r12
    350e:	2a c0       	rjmp	.+84     	; 0x3564 <nrk_error_print+0x12e>
		// Wait until an RX packet is received
		val = bmac_wait_until_rx_pkt ();
		// Get the RX packet 
    3510:	c5 01       	movw	r24, r10
    3512:	28 c0       	rjmp	.+80     	; 0x3564 <nrk_error_print+0x12e>
		//nrk_led_set (ORANGE_LED);
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
		
    3514:	c4 01       	movw	r24, r8
    3516:	26 c0       	rjmp	.+76     	; 0x3564 <nrk_error_print+0x12e>
		printf ("%c=%c\r\n", rx_buf[0], rx_buf[2]);
		
		switch(rx_buf[0]) {
    3518:	c3 01       	movw	r24, r6
    351a:	24 c0       	rjmp	.+72     	; 0x3564 <nrk_error_print+0x12e>
			case 'A': // ~0xxx
				nrk_led_clr(RED_LED);
				nrk_gpio_set(NRK_DEBUG_3);
    351c:	c2 01       	movw	r24, r4
    351e:	22 c0       	rjmp	.+68     	; 0x3564 <nrk_error_print+0x12e>
				break;
			case 'B': // ~1xxx
				nrk_led_set(RED_LED);
    3520:	c1 01       	movw	r24, r2
    3522:	20 c0       	rjmp	.+64     	; 0x3564 <nrk_error_print+0x12e>
				nrk_gpio_clr(NRK_DEBUG_3);
				break;
		}
    3524:	89 eb       	ldi	r24, 0xB9	; 185
    3526:	92 e0       	ldi	r25, 0x02	; 2
    3528:	1d c0       	rjmp	.+58     	; 0x3564 <nrk_error_print+0x12e>

		switch(rx_buf[2]) {
			case '-': // ~x000
    352a:	84 e9       	ldi	r24, 0x94	; 148
    352c:	92 e0       	ldi	r25, 0x02	; 2
    352e:	1a c0       	rjmp	.+52     	; 0x3564 <nrk_error_print+0x12e>
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
    3530:	88 e8       	ldi	r24, 0x88	; 136
    3532:	92 e0       	ldi	r25, 0x02	; 2
    3534:	17 c0       	rjmp	.+46     	; 0x3564 <nrk_error_print+0x12e>
				nrk_led_clr(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
				nrk_led_clr(GREEN_LED);
    3536:	8d e6       	ldi	r24, 0x6D	; 109
    3538:	92 e0       	ldi	r25, 0x02	; 2
    353a:	14 c0       	rjmp	.+40     	; 0x3564 <nrk_error_print+0x12e>
				break;
			case 'U': // ~x001
				nrk_gpio_clr(NRK_DEBUG_0);
    353c:	8e e5       	ldi	r24, 0x5E	; 94
    353e:	92 e0       	ldi	r25, 0x02	; 2
    3540:	11 c0       	rjmp	.+34     	; 0x3564 <nrk_error_print+0x12e>
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
    3542:	8d e4       	ldi	r24, 0x4D	; 77
    3544:	92 e0       	ldi	r25, 0x02	; 2
    3546:	0e c0       	rjmp	.+28     	; 0x3564 <nrk_error_print+0x12e>
				nrk_led_clr(BLUE_LED);
				nrk_led_clr(GREEN_LED);
				break;
    3548:	89 e3       	ldi	r24, 0x39	; 57
    354a:	92 e0       	ldi	r25, 0x02	; 2
    354c:	0b c0       	rjmp	.+22     	; 0x3564 <nrk_error_print+0x12e>
			case 'D': // ~x010
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_clr(NRK_DEBUG_1);
    354e:	89 e1       	ldi	r24, 0x19	; 25
    3550:	92 e0       	ldi	r25, 0x02	; 2
    3552:	08 c0       	rjmp	.+16     	; 0x3564 <nrk_error_print+0x12e>
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
				nrk_led_set(BLUE_LED);
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	92 e0       	ldi	r25, 0x02	; 2
    3558:	05 c0       	rjmp	.+10     	; 0x3564 <nrk_error_print+0x12e>
				nrk_led_clr(GREEN_LED);
				break;
			case 'L': // ~x011
    355a:	86 ee       	ldi	r24, 0xE6	; 230
    355c:	91 e0       	ldi	r25, 0x01	; 1
    355e:	02 c0       	rjmp	.+4      	; 0x3564 <nrk_error_print+0x12e>
				nrk_gpio_clr(NRK_DEBUG_0);
				nrk_gpio_clr(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
    3560:	8f ed       	ldi	r24, 0xDF	; 223
    3562:	91 e0       	ldi	r25, 0x01	; 1
    3564:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <nrk_kprintf>
				nrk_led_set(ORANGE_LED);
				nrk_led_set(BLUE_LED);
    3568:	60 91 a2 06 	lds	r22, 0x06A2
    356c:	70 91 a3 06 	lds	r23, 0x06A3
    3570:	8d e0       	ldi	r24, 0x0D	; 13
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <fputc>
				nrk_led_clr(GREEN_LED);
    3578:	60 91 a2 06 	lds	r22, 0x06A2
    357c:	70 91 a3 06 	lds	r23, 0x06A3
    3580:	8a e0       	ldi	r24, 0x0A	; 10
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <fputc>
				break;
			case 'B': // ~x101
				nrk_gpio_clr(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_clr(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
    3588:	82 e0       	ldi	r24, 0x02	; 2
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <nrk_led_set>
				nrk_led_clr(BLUE_LED);
    3590:	83 e0       	ldi	r24, 0x03	; 3
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	0e 94 19 16 	call	0x2c32	; 0x2c32 <nrk_led_clr>
    3598:	10 e0       	ldi	r17, 0x00	; 0
				nrk_led_set(GREEN_LED);
				break;
    359a:	88 ee       	ldi	r24, 0xE8	; 232
    359c:	93 e0       	ldi	r25, 0x03	; 3
    359e:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <nrk_spin_wait_us>
				nrk_gpio_clr(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_clr(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
				nrk_led_set(GREEN_LED);
    35a2:	1f 5f       	subi	r17, 0xFF	; 255
    35a4:	14 36       	cpi	r17, 0x64	; 100
    35a6:	c9 f7       	brne	.-14     	; 0x359a <nrk_error_print+0x164>
				break;
		}
    35a8:	83 e0       	ldi	r24, 0x03	; 3
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <nrk_led_set>
		
    35b0:	82 e0       	ldi	r24, 0x02	; 2
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	0e 94 19 16 	call	0x2c32	; 0x2c32 <nrk_led_clr>
    35b8:	10 e0       	ldi	r17, 0x00	; 0
		
		//nrk_led_clr (ORANGE_LED);
    35ba:	88 ee       	ldi	r24, 0xE8	; 232
    35bc:	93 e0       	ldi	r25, 0x03	; 3
    35be:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <nrk_spin_wait_us>
				nrk_led_clr(BLUE_LED);
				nrk_led_set(GREEN_LED);
				break;
		}
		
		
    35c2:	1f 5f       	subi	r17, 0xFF	; 255
    35c4:	14 36       	cpi	r17, 0x64	; 100
    35c6:	c9 f7       	brne	.-14     	; 0x35ba <nrk_error_print+0x184>
    35c8:	6e cf       	rjmp	.-292    	; 0x34a6 <nrk_error_print+0x70>
	PIN_TASK.Type = BASIC_TASK;
	PIN_TASK.SchType = PREEMPTIVE;
	PIN_TASK.period.secs = 3;
	PIN_TASK.period.nano_secs = 100 * NANOS_PER_MS;
	PIN_TASK.cpu_reserve.secs = 0;
	PIN_TASK.cpu_reserve.nano_secs = 50 * NANOS_PER_MS;
    35ca:	80 e0       	ldi	r24, 0x00	; 0
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	df 91       	pop	r29
    35d0:	cf 91       	pop	r28
    35d2:	1f 91       	pop	r17
    35d4:	ff 90       	pop	r15
    35d6:	ef 90       	pop	r14
    35d8:	df 90       	pop	r13
    35da:	cf 90       	pop	r12
    35dc:	bf 90       	pop	r11
    35de:	af 90       	pop	r10
    35e0:	9f 90       	pop	r9
    35e2:	8f 90       	pop	r8
    35e4:	7f 90       	pop	r7
    35e6:	6f 90       	pop	r6
    35e8:	5f 90       	pop	r5
    35ea:	4f 90       	pop	r4
    35ec:	3f 90       	pop	r3
    35ee:	2f 90       	pop	r2
    35f0:	08 95       	ret

000035f2 <nrk_kernel_error_add>:

	nrk_init ();

	nrk_led_clr (0);
	nrk_led_clr (1);
	nrk_led_clr (2);
    35f2:	80 93 19 05 	sts	0x0519, r24
	nrk_led_clr (3);
    35f6:	60 93 a3 02 	sts	0x02A3, r22

	nrk_time_set (0, 0);

    35fa:	0e 94 1b 1a 	call	0x3436	; 0x3436 <nrk_error_print>
    35fe:	08 95       	ret

00003600 <nrk_error_add>:
void nrk_create_taskset ();

uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];

int main ()
{
    3600:	80 93 19 05 	sts	0x0519, r24
	uint16_t div;
    3604:	e0 91 7c 06 	lds	r30, 0x067C
    3608:	f0 91 7d 06 	lds	r31, 0x067D
    360c:	80 85       	ldd	r24, Z+8	; 0x08
    360e:	80 93 a3 02 	sts	0x02A3, r24
	nrk_setup_ports ();
	nrk_setup_uart (UART_BAUDRATE_115K2);

    3612:	0e 94 1b 1a 	call	0x3436	; 0x3436 <nrk_error_print>
    3616:	08 95       	ret

00003618 <nrk_stack_check_pid>:
	// This can be called at anytime before releaseing the packet
	// if you wish to do a zero-copy buffer switch
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);

	bmac_auto_ack_disable();

    3618:	99 27       	eor	r25, r25
    361a:	87 fd       	sbrc	r24, 7
    361c:	90 95       	com	r25
    361e:	fc 01       	movw	r30, r24
    3620:	25 e0       	ldi	r18, 0x05	; 5
    3622:	ee 0f       	add	r30, r30
    3624:	ff 1f       	adc	r31, r31
    3626:	2a 95       	dec	r18
    3628:	e1 f7       	brne	.-8      	; 0x3622 <nrk_stack_check_pid+0xa>
    362a:	e8 0f       	add	r30, r24
    362c:	f9 1f       	adc	r31, r25
    362e:	e1 52       	subi	r30, 0x21	; 33
    3630:	fa 4f       	sbci	r31, 0xFA	; 250
    3632:	a2 81       	ldd	r26, Z+2	; 0x02
    3634:	b3 81       	ldd	r27, Z+3	; 0x03
	//set port direction as output
	nrk_gpio_direction(NRK_DEBUG_3,NRK_PIN_OUTPUT);//PD.1
    3636:	8c 91       	ld	r24, X
    3638:	85 35       	cpi	r24, 0x55	; 85
    363a:	29 f0       	breq	.+10     	; 0x3646 <nrk_stack_check_pid+0x2e>
	nrk_gpio_direction(NRK_DEBUG_2,NRK_PIN_OUTPUT);//PD.0
    363c:	85 e5       	ldi	r24, 0x55	; 85
    363e:	8c 93       	st	X, r24
    3640:	8f ef       	ldi	r24, 0xFF	; 255
    3642:	9f ef       	ldi	r25, 0xFF	; 255
    3644:	08 95       	ret
	nrk_gpio_direction(NRK_DEBUG_0,NRK_PIN_OUTPUT);//PA.3
	nrk_gpio_direction(NRK_DEBUG_1,NRK_PIN_OUTPUT);//PA.4

	while (1) {
		// Wait until an RX packet is received
    3646:	80 81       	ld	r24, Z
    3648:	91 81       	ldd	r25, Z+1	; 0x01
    364a:	80 50       	subi	r24, 0x00	; 0
    364c:	92 42       	sbci	r25, 0x22	; 34
    364e:	18 f4       	brcc	.+6      	; 0x3656 <nrk_stack_check_pid+0x3e>
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	08 95       	ret
		val = bmac_wait_until_rx_pkt ();
    3656:	82 e1       	ldi	r24, 0x12	; 18
    3658:	0e 94 00 1b 	call	0x3600	; 0x3600 <nrk_error_add>
    365c:	8f ef       	ldi	r24, 0xFF	; 255
    365e:	9f ef       	ldi	r25, 0xFF	; 255
		// Get the RX packet 
		//nrk_led_set (ORANGE_LED);
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
		
		printf ("%c=%c\r\n", rx_buf[0], rx_buf[2]);
    3660:	08 95       	ret

00003662 <dump_stack_info>:
#include <stdio.h>
#include <avr/sleep.h>
#include <hal.h>
#include <bmac.h>
#include <nrk_error.h>

    3662:	6f 92       	push	r6
    3664:	7f 92       	push	r7
    3666:	8f 92       	push	r8
    3668:	9f 92       	push	r9
    366a:	af 92       	push	r10
    366c:	bf 92       	push	r11
    366e:	cf 92       	push	r12
    3670:	df 92       	push	r13
    3672:	ef 92       	push	r14
    3674:	ff 92       	push	r15
    3676:	0f 93       	push	r16
    3678:	1f 93       	push	r17
    367a:	cf 93       	push	r28
    367c:	df 93       	push	r29
nrk_task_type RX_TASK;
NRK_STK rx_task_stack[NRK_APP_STACKSIZE];
void rx_task (void);

nrk_task_type PIN_TASK;
    367e:	87 ea       	ldi	r24, 0xA7	; 167
    3680:	93 e0       	ldi	r25, 0x03	; 3
    3682:	0e 94 e4 16 	call	0x2dc8	; 0x2dc8 <nrk_kprintf>
NRK_STK pin_task_stack[NRK_APP_STACKSIZE];
void pin_task (void);
    3686:	e0 91 7c 06 	lds	r30, 0x067C
    368a:	f0 91 7d 06 	lds	r31, 0x067D
    368e:	80 85       	ldd	r24, Z+8	; 0x08
    3690:	99 27       	eor	r25, r25
    3692:	87 fd       	sbrc	r24, 7
    3694:	90 95       	com	r25
    3696:	9f 93       	push	r25
    3698:	8f 93       	push	r24
    369a:	8a e4       	ldi	r24, 0x4A	; 74
    369c:	92 e0       	ldi	r25, 0x02	; 2
    369e:	9f 93       	push	r25
    36a0:	8f 93       	push	r24
    36a2:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <printf>

    36a6:	e0 91 7c 06 	lds	r30, 0x067C
    36aa:	f0 91 7d 06 	lds	r31, 0x067D
    36ae:	02 81       	ldd	r16, Z+2	; 0x02
    36b0:	13 81       	ldd	r17, Z+3	; 0x03
void nrk_create_taskset ();

    36b2:	1f 93       	push	r17
    36b4:	0f 93       	push	r16
    36b6:	83 e5       	ldi	r24, 0x53	; 83
    36b8:	92 e0       	ldi	r25, 0x02	; 2
    36ba:	9f 93       	push	r25
    36bc:	8f 93       	push	r24
    36be:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <printf>
uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
    36c2:	f8 01       	movw	r30, r16
    36c4:	80 81       	ld	r24, Z
    36c6:	99 27       	eor	r25, r25
    36c8:	9f 93       	push	r25
    36ca:	8f 93       	push	r24
    36cc:	50 e6       	ldi	r21, 0x60	; 96
    36ce:	c5 2e       	mov	r12, r21
    36d0:	52 e0       	ldi	r21, 0x02	; 2
    36d2:	d5 2e       	mov	r13, r21
    36d4:	df 92       	push	r13
    36d6:	cf 92       	push	r12
    36d8:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <printf>

int main ()
{
    36dc:	e0 91 7c 06 	lds	r30, 0x067C
    36e0:	f0 91 7d 06 	lds	r31, 0x067D
    36e4:	80 81       	ld	r24, Z
    36e6:	91 81       	ldd	r25, Z+1	; 0x01
    36e8:	9f 93       	push	r25
    36ea:	8f 93       	push	r24
    36ec:	4d e6       	ldi	r20, 0x6D	; 109
    36ee:	e4 2e       	mov	r14, r20
    36f0:	42 e0       	ldi	r20, 0x02	; 2
    36f2:	f4 2e       	mov	r15, r20
    36f4:	ff 92       	push	r15
    36f6:	ef 92       	push	r14
    36f8:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <printf>
	uint16_t div;
    36fc:	80 91 7c 06 	lds	r24, 0x067C
    3700:	90 91 7d 06 	lds	r25, 0x067D
    3704:	9f 93       	push	r25
    3706:	8f 93       	push	r24
    3708:	07 e7       	ldi	r16, 0x77	; 119
    370a:	12 e0       	ldi	r17, 0x02	; 2
    370c:	1f 93       	push	r17
    370e:	0f 93       	push	r16
    3710:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <printf>
    3714:	cf ed       	ldi	r28, 0xDF	; 223
    3716:	d5 e0       	ldi	r29, 0x05	; 5
    3718:	aa 24       	eor	r10, r10
    371a:	bb 24       	eor	r11, r11
    371c:	8d b7       	in	r24, 0x3d	; 61
    371e:	9e b7       	in	r25, 0x3e	; 62
    3720:	44 96       	adiw	r24, 0x14	; 20
    3722:	0f b6       	in	r0, 0x3f	; 63
    3724:	f8 94       	cli
    3726:	9e bf       	out	0x3e, r25	; 62
    3728:	0f be       	out	0x3f, r0	; 63
    372a:	8d bf       	out	0x3d, r24	; 61
	nrk_setup_ports ();
	nrk_setup_uart (UART_BAUDRATE_115K2);

	nrk_init ();

	nrk_led_clr (0);
    372c:	37 e8       	ldi	r19, 0x87	; 135
    372e:	63 2e       	mov	r6, r19
    3730:	32 e0       	ldi	r19, 0x02	; 2
    3732:	73 2e       	mov	r7, r19
	nrk_led_clr (1);
    3734:	46 01       	movw	r8, r12
	nrk_led_clr (2);
	nrk_led_clr (3);

    3736:	67 01       	movw	r12, r14
	nrk_time_set (0, 0);
    3738:	78 01       	movw	r14, r16
{
	uint16_t div;
	nrk_setup_ports ();
	nrk_setup_uart (UART_BAUDRATE_115K2);

	nrk_init ();
    373a:	0a 81       	ldd	r16, Y+2	; 0x02
    373c:	1b 81       	ldd	r17, Y+3	; 0x03

	nrk_led_clr (0);
    373e:	1f 93       	push	r17
    3740:	0f 93       	push	r16
    3742:	bf 92       	push	r11
    3744:	af 92       	push	r10
    3746:	7f 92       	push	r7
    3748:	6f 92       	push	r6
    374a:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <printf>
	nrk_led_clr (1);
    374e:	f8 01       	movw	r30, r16
    3750:	80 81       	ld	r24, Z
    3752:	99 27       	eor	r25, r25
    3754:	9f 93       	push	r25
    3756:	8f 93       	push	r24
    3758:	9f 92       	push	r9
    375a:	8f 92       	push	r8
    375c:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <printf>
	nrk_led_clr (2);
	nrk_led_clr (3);

    3760:	88 81       	ld	r24, Y
    3762:	99 81       	ldd	r25, Y+1	; 0x01
    3764:	9f 93       	push	r25
    3766:	8f 93       	push	r24
    3768:	df 92       	push	r13
    376a:	cf 92       	push	r12
    376c:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <printf>
	nrk_time_set (0, 0);
    3770:	df 93       	push	r29
    3772:	cf 93       	push	r28
    3774:	ff 92       	push	r15
    3776:	ef 92       	push	r14
    3778:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <printf>
    377c:	08 94       	sec
    377e:	a1 1c       	adc	r10, r1
    3780:	b1 1c       	adc	r11, r1
    3782:	a1 96       	adiw	r28, 0x21	; 33

int main ()
{
	uint16_t div;
	nrk_setup_ports ();
	nrk_setup_uart (UART_BAUDRATE_115K2);
    3784:	8d b7       	in	r24, 0x3d	; 61
    3786:	9e b7       	in	r25, 0x3e	; 62
    3788:	42 96       	adiw	r24, 0x12	; 18
    378a:	0f b6       	in	r0, 0x3f	; 63
    378c:	f8 94       	cli
    378e:	9e bf       	out	0x3e, r25	; 62
    3790:	0f be       	out	0x3f, r0	; 63
    3792:	8d bf       	out	0x3d, r24	; 61
    3794:	94 e0       	ldi	r25, 0x04	; 4
    3796:	a9 16       	cp	r10, r25
    3798:	b1 04       	cpc	r11, r1
    379a:	79 f6       	brne	.-98     	; 0x373a <dump_stack_info+0xd8>
    379c:	df 91       	pop	r29
    379e:	cf 91       	pop	r28
    37a0:	1f 91       	pop	r17
    37a2:	0f 91       	pop	r16
    37a4:	ff 90       	pop	r15
    37a6:	ef 90       	pop	r14
    37a8:	df 90       	pop	r13
    37aa:	cf 90       	pop	r12
    37ac:	bf 90       	pop	r11
    37ae:	af 90       	pop	r10
    37b0:	9f 90       	pop	r9
    37b2:	8f 90       	pop	r8
    37b4:	7f 90       	pop	r7
    37b6:	6f 90       	pop	r6
    37b8:	08 95       	ret

000037ba <nrk_stack_check>:

void pin_task ()
{
	while(1) {
		nrk_led_toggle (RED_LED);
		nrk_wait_until_next_period ();
    37ba:	cf 93       	push	r28
    37bc:	df 93       	push	r29
		nrk_led_toggle (BLUE_LED);
		nrk_wait_until_next_period ();
	}
}

void rx_task ()
    37be:	e0 91 7c 06 	lds	r30, 0x067C
    37c2:	f0 91 7d 06 	lds	r31, 0x067D
    37c6:	c2 81       	ldd	r28, Z+2	; 0x02
    37c8:	d3 81       	ldd	r29, Z+3	; 0x03
{
	uint8_t i, len;
    37ca:	88 81       	ld	r24, Y
    37cc:	85 35       	cpi	r24, 0x55	; 85
    37ce:	39 f0       	breq	.+14     	; 0x37de <nrk_stack_check+0x24>
	int8_t rssi, val;
	uint8_t *local_rx_buf;
    37d0:	0e 94 31 1b 	call	0x3662	; 0x3662 <dump_stack_info>
	nrk_time_t check_period;
	printf ("rx_task PID=%d\r\n", nrk_get_pid ());
    37d4:	81 e0       	ldi	r24, 0x01	; 1
    37d6:	0e 94 00 1b 	call	0x3600	; 0x3600 <nrk_error_add>

    37da:	85 e5       	ldi	r24, 0x55	; 85
    37dc:	88 83       	st	Y, r24
	// init bmac on channel 25 
	bmac_init (25);

	// By default the RX check rate is 100ms
	// below shows how to change that
    37de:	e0 91 7c 06 	lds	r30, 0x067C
    37e2:	f0 91 7d 06 	lds	r31, 0x067D
    37e6:	80 81       	ld	r24, Z
    37e8:	91 81       	ldd	r25, Z+1	; 0x01
    37ea:	80 50       	subi	r24, 0x00	; 0
    37ec:	92 42       	sbci	r25, 0x22	; 34
    37ee:	28 f0       	brcs	.+10     	; 0x37fa <nrk_stack_check+0x40>
	check_period.secs=0;
	check_period.nano_secs=40*NANOS_PER_MS; // Fastest we could safely go
    37f0:	0e 94 31 1b 	call	0x3662	; 0x3662 <dump_stack_info>
	val=bmac_set_rx_check_rate(check_period);

    37f4:	82 e1       	ldi	r24, 0x12	; 18
    37f6:	0e 94 00 1b 	call	0x3600	; 0x3600 <nrk_error_add>
    37fa:	df 91       	pop	r29
    37fc:	cf 91       	pop	r28
    37fe:	08 95       	ret

00003800 <nrk_signal_create>:
void pin_task (void);

void nrk_create_taskset ();

uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];

    3800:	40 91 4f 03 	lds	r20, 0x034F
    3804:	50 91 50 03 	lds	r21, 0x0350
    3808:	60 91 51 03 	lds	r22, 0x0351
    380c:	70 91 52 03 	lds	r23, 0x0352
    3810:	20 e0       	ldi	r18, 0x00	; 0
    3812:	30 e0       	ldi	r19, 0x00	; 0
    3814:	db 01       	movw	r26, r22
    3816:	ca 01       	movw	r24, r20
    3818:	02 2e       	mov	r0, r18
    381a:	04 c0       	rjmp	.+8      	; 0x3824 <nrk_signal_create+0x24>
    381c:	b6 95       	lsr	r27
    381e:	a7 95       	ror	r26
    3820:	97 95       	ror	r25
    3822:	87 95       	ror	r24
    3824:	0a 94       	dec	r0
    3826:	d2 f7       	brpl	.-12     	; 0x381c <nrk_signal_create+0x1c>
    3828:	81 70       	andi	r24, 0x01	; 1
    382a:	90 70       	andi	r25, 0x00	; 0
    382c:	89 2b       	or	r24, r25
    382e:	e9 f4       	brne	.+58     	; 0x386a <nrk_signal_create+0x6a>
int main ()
{
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	a0 e0       	ldi	r26, 0x00	; 0
    3836:	b0 e0       	ldi	r27, 0x00	; 0
    3838:	02 2e       	mov	r0, r18
    383a:	04 c0       	rjmp	.+8      	; 0x3844 <nrk_signal_create+0x44>
    383c:	88 0f       	add	r24, r24
    383e:	99 1f       	adc	r25, r25
    3840:	aa 1f       	adc	r26, r26
    3842:	bb 1f       	adc	r27, r27
    3844:	0a 94       	dec	r0
    3846:	d2 f7       	brpl	.-12     	; 0x383c <nrk_signal_create+0x3c>
    3848:	84 2b       	or	r24, r20
    384a:	95 2b       	or	r25, r21
    384c:	a6 2b       	or	r26, r22
    384e:	b7 2b       	or	r27, r23
    3850:	80 93 4f 03 	sts	0x034F, r24
    3854:	90 93 50 03 	sts	0x0350, r25
    3858:	a0 93 51 03 	sts	0x0351, r26
    385c:	b0 93 52 03 	sts	0x0352, r27
	uint16_t div;
    3860:	82 2f       	mov	r24, r18
    3862:	99 27       	eor	r25, r25
    3864:	87 fd       	sbrc	r24, 7
    3866:	90 95       	com	r25
    3868:	08 95       	ret
    386a:	2f 5f       	subi	r18, 0xFF	; 255
    386c:	3f 4f       	sbci	r19, 0xFF	; 255
nrk_task_type PIN_TASK;
NRK_STK pin_task_stack[NRK_APP_STACKSIZE];
void pin_task (void);

void nrk_create_taskset ();

    386e:	20 32       	cpi	r18, 0x20	; 32
    3870:	31 05       	cpc	r19, r1
    3872:	81 f6       	brne	.-96     	; 0x3814 <nrk_signal_create+0x14>
    3874:	8f ef       	ldi	r24, 0xFF	; 255
    3876:	9f ef       	ldi	r25, 0xFF	; 255
	nrk_setup_ports ();
	nrk_setup_uart (UART_BAUDRATE_115K2);

	nrk_init ();

	nrk_led_clr (0);
    3878:	08 95       	ret

0000387a <nrk_signal_get_registered_mask>:
	nrk_led_clr (1);
	nrk_led_clr (2);
	nrk_led_clr (3);
    387a:	e0 91 7c 06 	lds	r30, 0x067C
    387e:	f0 91 7d 06 	lds	r31, 0x067D
    3882:	65 85       	ldd	r22, Z+13	; 0x0d
    3884:	76 85       	ldd	r23, Z+14	; 0x0e
    3886:	87 85       	ldd	r24, Z+15	; 0x0f
    3888:	90 89       	ldd	r25, Z+16	; 0x10
    388a:	08 95       	ret

0000388c <nrk_signal_unregister>:
	check_period.secs=0;
	check_period.nano_secs=40*NANOS_PER_MS; // Fastest we could safely go
	val=bmac_set_rx_check_rate(check_period);

	// The default Clear Channel Assement RSSI threshold is -45
	// Setting this value higher means that you will only trigger
    388c:	ef 92       	push	r14
    388e:	ff 92       	push	r15
    3890:	0f 93       	push	r16
    3892:	1f 93       	push	r17
	// receive with a very strong signal.  Setting this lower means
	// bmac will try to receive fainter packets.  If the value is set
	// too high or too low performance will suffer greatly.
    3894:	21 e0       	ldi	r18, 0x01	; 1
    3896:	30 e0       	ldi	r19, 0x00	; 0
    3898:	40 e0       	ldi	r20, 0x00	; 0
    389a:	50 e0       	ldi	r21, 0x00	; 0
    389c:	04 c0       	rjmp	.+8      	; 0x38a6 <nrk_signal_unregister+0x1a>
    389e:	22 0f       	add	r18, r18
    38a0:	33 1f       	adc	r19, r19
    38a2:	44 1f       	adc	r20, r20
    38a4:	55 1f       	adc	r21, r21
    38a6:	8a 95       	dec	r24
    38a8:	d2 f7       	brpl	.-12     	; 0x389e <nrk_signal_unregister+0x12>
	// bmac_set_cca_thresh(-45); 

    38aa:	e0 91 7c 06 	lds	r30, 0x067C
    38ae:	f0 91 7d 06 	lds	r31, 0x067D
    38b2:	e5 84       	ldd	r14, Z+13	; 0x0d
    38b4:	f6 84       	ldd	r15, Z+14	; 0x0e
    38b6:	07 85       	ldd	r16, Z+15	; 0x0f
    38b8:	10 89       	ldd	r17, Z+16	; 0x10
    38ba:	da 01       	movw	r26, r20
    38bc:	c9 01       	movw	r24, r18
    38be:	8e 21       	and	r24, r14
    38c0:	9f 21       	and	r25, r15
    38c2:	a0 23       	and	r26, r16
    38c4:	b1 23       	and	r27, r17
    38c6:	00 97       	sbiw	r24, 0x00	; 0
    38c8:	a1 05       	cpc	r26, r1
    38ca:	b1 05       	cpc	r27, r1
    38cc:	19 f4       	brne	.+6      	; 0x38d4 <nrk_signal_unregister+0x48>
    38ce:	8f ef       	ldi	r24, 0xFF	; 255
    38d0:	9f ef       	ldi	r25, 0xFF	; 255
    38d2:	1a c0       	rjmp	.+52     	; 0x3908 <nrk_signal_unregister+0x7c>

	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
    38d4:	20 95       	com	r18
    38d6:	30 95       	com	r19
    38d8:	40 95       	com	r20
    38da:	50 95       	com	r21
    38dc:	e2 22       	and	r14, r18
    38de:	f3 22       	and	r15, r19
    38e0:	04 23       	and	r16, r20
    38e2:	15 23       	and	r17, r21
    38e4:	e5 86       	std	Z+13, r14	; 0x0d
    38e6:	f6 86       	std	Z+14, r15	; 0x0e
    38e8:	07 87       	std	Z+15, r16	; 0x0f
    38ea:	10 8b       	std	Z+16, r17	; 0x10
	// This sets the next RX buffer.
    38ec:	81 89       	ldd	r24, Z+17	; 0x11
    38ee:	92 89       	ldd	r25, Z+18	; 0x12
    38f0:	a3 89       	ldd	r26, Z+19	; 0x13
    38f2:	b4 89       	ldd	r27, Z+20	; 0x14
    38f4:	82 23       	and	r24, r18
    38f6:	93 23       	and	r25, r19
    38f8:	a4 23       	and	r26, r20
    38fa:	b5 23       	and	r27, r21
    38fc:	81 8b       	std	Z+17, r24	; 0x11
    38fe:	92 8b       	std	Z+18, r25	; 0x12
    3900:	a3 8b       	std	Z+19, r26	; 0x13
    3902:	b4 8b       	std	Z+20, r27	; 0x14
    3904:	81 e0       	ldi	r24, 0x01	; 1
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	1f 91       	pop	r17
    390a:	0f 91       	pop	r16
    390c:	ff 90       	pop	r15
    390e:	ef 90       	pop	r14
    3910:	08 95       	ret

00003912 <nrk_signal_register>:

	//set port direction as output
	nrk_gpio_direction(NRK_DEBUG_3,NRK_PIN_OUTPUT);//PD.1
	nrk_gpio_direction(NRK_DEBUG_2,NRK_PIN_OUTPUT);//PD.0
	nrk_gpio_direction(NRK_DEBUG_0,NRK_PIN_OUTPUT);//PA.3
	nrk_gpio_direction(NRK_DEBUG_1,NRK_PIN_OUTPUT);//PA.4
    3912:	68 2f       	mov	r22, r24
    3914:	77 27       	eor	r23, r23
    3916:	67 fd       	sbrc	r22, 7
    3918:	70 95       	com	r23
    391a:	80 91 4f 03 	lds	r24, 0x034F
    391e:	90 91 50 03 	lds	r25, 0x0350
    3922:	a0 91 51 03 	lds	r26, 0x0351
    3926:	b0 91 52 03 	lds	r27, 0x0352
    392a:	06 2e       	mov	r0, r22
    392c:	04 c0       	rjmp	.+8      	; 0x3936 <nrk_signal_register+0x24>
    392e:	b6 95       	lsr	r27
    3930:	a7 95       	ror	r26
    3932:	97 95       	ror	r25
    3934:	87 95       	ror	r24
    3936:	0a 94       	dec	r0
    3938:	d2 f7       	brpl	.-12     	; 0x392e <nrk_signal_register+0x1c>
    393a:	81 70       	andi	r24, 0x01	; 1
    393c:	90 70       	andi	r25, 0x00	; 0
    393e:	89 2b       	or	r24, r25
    3940:	19 f4       	brne	.+6      	; 0x3948 <nrk_signal_register+0x36>
    3942:	8f ef       	ldi	r24, 0xFF	; 255
    3944:	9f ef       	ldi	r25, 0xFF	; 255
    3946:	08 95       	ret

	while (1) {
    3948:	e0 91 7c 06 	lds	r30, 0x067C
    394c:	f0 91 7d 06 	lds	r31, 0x067D
    3950:	21 e0       	ldi	r18, 0x01	; 1
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	40 e0       	ldi	r20, 0x00	; 0
    3956:	50 e0       	ldi	r21, 0x00	; 0
    3958:	04 c0       	rjmp	.+8      	; 0x3962 <nrk_signal_register+0x50>
    395a:	22 0f       	add	r18, r18
    395c:	33 1f       	adc	r19, r19
    395e:	44 1f       	adc	r20, r20
    3960:	55 1f       	adc	r21, r21
    3962:	6a 95       	dec	r22
    3964:	d2 f7       	brpl	.-12     	; 0x395a <nrk_signal_register+0x48>
    3966:	85 85       	ldd	r24, Z+13	; 0x0d
    3968:	96 85       	ldd	r25, Z+14	; 0x0e
    396a:	a7 85       	ldd	r26, Z+15	; 0x0f
    396c:	b0 89       	ldd	r27, Z+16	; 0x10
    396e:	82 2b       	or	r24, r18
    3970:	93 2b       	or	r25, r19
    3972:	a4 2b       	or	r26, r20
    3974:	b5 2b       	or	r27, r21
    3976:	85 87       	std	Z+13, r24	; 0x0d
    3978:	96 87       	std	Z+14, r25	; 0x0e
    397a:	a7 87       	std	Z+15, r26	; 0x0f
    397c:	b0 8b       	std	Z+16, r27	; 0x10
    397e:	81 e0       	ldi	r24, 0x01	; 1
    3980:	90 e0       	ldi	r25, 0x00	; 0
		// Wait until an RX packet is received
		val = bmac_wait_until_rx_pkt ();
		// Get the RX packet 
		//nrk_led_set (ORANGE_LED);
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
    3982:	08 95       	ret

00003984 <nrk_sem_create>:
    3984:	38 2f       	mov	r19, r24
    3986:	80 91 7b 06 	lds	r24, 0x067B
    398a:	88 23       	and	r24, r24
    398c:	19 f0       	breq	.+6      	; 0x3994 <nrk_sem_create+0x10>
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	08 95       	ret
    3994:	80 91 65 06 	lds	r24, 0x0665
    3998:	8f 3f       	cpi	r24, 0xFF	; 255
    399a:	11 f4       	brne	.+4      	; 0x39a0 <nrk_sem_create+0x1c>
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	07 c0       	rjmp	.+14     	; 0x39ae <nrk_sem_create+0x2a>
    39a0:	80 91 68 06 	lds	r24, 0x0668
    39a4:	8f 3f       	cpi	r24, 0xFF	; 255
    39a6:	11 f0       	breq	.+4      	; 0x39ac <nrk_sem_create+0x28>
    39a8:	22 e0       	ldi	r18, 0x02	; 2
    39aa:	01 c0       	rjmp	.+2      	; 0x39ae <nrk_sem_create+0x2a>
    39ac:	21 e0       	ldi	r18, 0x01	; 1
    39ae:	82 2f       	mov	r24, r18
    39b0:	99 27       	eor	r25, r25
    39b2:	fc 01       	movw	r30, r24
    39b4:	ee 0f       	add	r30, r30
    39b6:	ff 1f       	adc	r31, r31
    39b8:	e8 0f       	add	r30, r24
    39ba:	f9 1f       	adc	r31, r25
    39bc:	eb 59       	subi	r30, 0x9B	; 155
    39be:	f9 4f       	sbci	r31, 0xF9	; 249
    39c0:	32 83       	std	Z+2, r19	; 0x02
    39c2:	30 83       	st	Z, r19
    39c4:	61 83       	std	Z+1, r22	; 0x01
    39c6:	81 e0       	ldi	r24, 0x01	; 1
    39c8:	80 93 7b 06 	sts	0x067B, r24
    39cc:	83 e0       	ldi	r24, 0x03	; 3
    39ce:	28 9f       	mul	r18, r24
    39d0:	c0 01       	movw	r24, r0
    39d2:	11 24       	eor	r1, r1
    39d4:	8b 59       	subi	r24, 0x9B	; 155
    39d6:	99 4f       	sbci	r25, 0xF9	; 249
    39d8:	08 95       	ret

000039da <nrk_get_resource_index>:
    39da:	26 e0       	ldi	r18, 0x06	; 6
    39dc:	85 36       	cpi	r24, 0x65	; 101
    39de:	92 07       	cpc	r25, r18
    39e0:	11 f4       	brne	.+4      	; 0x39e6 <nrk_get_resource_index+0xc>
    39e2:	80 e0       	ldi	r24, 0x00	; 0
    39e4:	07 c0       	rjmp	.+14     	; 0x39f4 <nrk_get_resource_index+0x1a>
    39e6:	88 56       	subi	r24, 0x68	; 104
    39e8:	96 40       	sbci	r25, 0x06	; 6
    39ea:	19 f0       	breq	.+6      	; 0x39f2 <nrk_get_resource_index+0x18>
    39ec:	8f ef       	ldi	r24, 0xFF	; 255
    39ee:	9f ef       	ldi	r25, 0xFF	; 255
    39f0:	08 95       	ret
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	99 27       	eor	r25, r25
    39f6:	87 fd       	sbrc	r24, 7
    39f8:	90 95       	com	r25
    39fa:	08 95       	ret

000039fc <nrk_sem_delete>:
    39fc:	0e 94 ed 1c 	call	0x39da	; 0x39da <nrk_get_resource_index>
    3a00:	8f 3f       	cpi	r24, 0xFF	; 255
    3a02:	11 f4       	brne	.+4      	; 0x3a08 <nrk_sem_delete+0xc>
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	02 c0       	rjmp	.+4      	; 0x3a0c <nrk_sem_delete+0x10>
    3a08:	82 30       	cpi	r24, 0x02	; 2
    3a0a:	29 f4       	brne	.+10     	; 0x3a16 <nrk_sem_delete+0x1a>
    3a0c:	0e 94 fe 19 	call	0x33fc	; 0x33fc <_nrk_errno_set>
    3a10:	8f ef       	ldi	r24, 0xFF	; 255
    3a12:	9f ef       	ldi	r25, 0xFF	; 255
    3a14:	08 95       	ret
    3a16:	99 27       	eor	r25, r25
    3a18:	87 fd       	sbrc	r24, 7
    3a1a:	90 95       	com	r25
    3a1c:	fc 01       	movw	r30, r24
    3a1e:	ee 0f       	add	r30, r30
    3a20:	ff 1f       	adc	r31, r31
    3a22:	e8 0f       	add	r30, r24
    3a24:	f9 1f       	adc	r31, r25
    3a26:	eb 59       	subi	r30, 0x9B	; 155
    3a28:	f9 4f       	sbci	r31, 0xF9	; 249
    3a2a:	8f ef       	ldi	r24, 0xFF	; 255
    3a2c:	80 83       	st	Z, r24
    3a2e:	82 83       	std	Z+2, r24	; 0x02
    3a30:	81 83       	std	Z+1, r24	; 0x01
    3a32:	80 91 7b 06 	lds	r24, 0x067B
    3a36:	81 50       	subi	r24, 0x01	; 1
    3a38:	80 93 7b 06 	sts	0x067B, r24
    3a3c:	81 e0       	ldi	r24, 0x01	; 1
    3a3e:	90 e0       	ldi	r25, 0x00	; 0
    3a40:	08 95       	ret

00003a42 <nrk_sem_query>:
	PIN_TASK.Ptos = (void *) &pin_task_stack[NRK_APP_STACKSIZE - 1];
	PIN_TASK.Pbos = (void *) &pin_task_stack[0];
	PIN_TASK.prio = 1;
	PIN_TASK.FirstActivation = TRUE;
	PIN_TASK.Type = BASIC_TASK;
	PIN_TASK.SchType = PREEMPTIVE;
    3a42:	0e 94 ed 1c 	call	0x39da	; 0x39da <nrk_get_resource_index>
	PIN_TASK.period.secs = 3;
    3a46:	8f 3f       	cpi	r24, 0xFF	; 255
    3a48:	11 f4       	brne	.+4      	; 0x3a4e <nrk_sem_query+0xc>
    3a4a:	81 e0       	ldi	r24, 0x01	; 1
    3a4c:	02 c0       	rjmp	.+4      	; 0x3a52 <nrk_sem_query+0x10>
	PIN_TASK.period.nano_secs = 100 * NANOS_PER_MS;
    3a4e:	82 30       	cpi	r24, 0x02	; 2
    3a50:	29 f4       	brne	.+10     	; 0x3a5c <nrk_sem_query+0x1a>
    3a52:	0e 94 fe 19 	call	0x33fc	; 0x33fc <_nrk_errno_set>
    3a56:	8f ef       	ldi	r24, 0xFF	; 255
    3a58:	9f ef       	ldi	r25, 0xFF	; 255
    3a5a:	08 95       	ret
	PIN_TASK.cpu_reserve.secs = 0;
	PIN_TASK.cpu_reserve.nano_secs = 50 * NANOS_PER_MS;
    3a5c:	99 27       	eor	r25, r25
    3a5e:	87 fd       	sbrc	r24, 7
    3a60:	90 95       	com	r25
    3a62:	fc 01       	movw	r30, r24
    3a64:	ee 0f       	add	r30, r30
    3a66:	ff 1f       	adc	r31, r31
    3a68:	e8 0f       	add	r30, r24
    3a6a:	f9 1f       	adc	r31, r25
    3a6c:	eb 59       	subi	r30, 0x9B	; 155
    3a6e:	f9 4f       	sbci	r31, 0xF9	; 249
    3a70:	82 81       	ldd	r24, Z+2	; 0x02
    3a72:	99 27       	eor	r25, r25
    3a74:	87 fd       	sbrc	r24, 7
    3a76:	90 95       	com	r25
	PIN_TASK.offset.secs = 0;
    3a78:	08 95       	ret

00003a7a <nrk_sem_post>:
    3a7a:	1f 93       	push	r17
    3a7c:	cf 93       	push	r28
    3a7e:	df 93       	push	r29
    3a80:	0e 94 ed 1c 	call	0x39da	; 0x39da <nrk_get_resource_index>
    3a84:	18 2f       	mov	r17, r24
    3a86:	8f 3f       	cpi	r24, 0xFF	; 255
    3a88:	11 f4       	brne	.+4      	; 0x3a8e <nrk_sem_post+0x14>
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	03 c0       	rjmp	.+6      	; 0x3a94 <nrk_sem_post+0x1a>
    3a8e:	82 30       	cpi	r24, 0x02	; 2
    3a90:	31 f4       	brne	.+12     	; 0x3a9e <nrk_sem_post+0x24>
    3a92:	82 e0       	ldi	r24, 0x02	; 2
    3a94:	0e 94 fe 19 	call	0x33fc	; 0x33fc <_nrk_errno_set>
    3a98:	8f ef       	ldi	r24, 0xFF	; 255
    3a9a:	9f ef       	ldi	r25, 0xFF	; 255
    3a9c:	3e c0       	rjmp	.+124    	; 0x3b1a <nrk_sem_post+0xa0>
    3a9e:	99 27       	eor	r25, r25
    3aa0:	87 fd       	sbrc	r24, 7
    3aa2:	90 95       	com	r25
    3aa4:	ec 01       	movw	r28, r24
    3aa6:	cc 0f       	add	r28, r28
    3aa8:	dd 1f       	adc	r29, r29
    3aaa:	c8 0f       	add	r28, r24
    3aac:	d9 1f       	adc	r29, r25
    3aae:	cb 59       	subi	r28, 0x9B	; 155
    3ab0:	d9 4f       	sbci	r29, 0xF9	; 249
    3ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab4:	88 81       	ld	r24, Y
    3ab6:	98 17       	cp	r25, r24
    3ab8:	74 f5       	brge	.+92     	; 0x3b16 <nrk_sem_post+0x9c>
    3aba:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <nrk_int_disable>
    3abe:	8a 81       	ldd	r24, Y+2	; 0x02
    3ac0:	8f 5f       	subi	r24, 0xFF	; 255
    3ac2:	8a 83       	std	Y+2, r24	; 0x02
    3ac4:	e0 91 7c 06 	lds	r30, 0x067C
    3ac8:	f0 91 7d 06 	lds	r31, 0x067D
    3acc:	14 82       	std	Z+4, r1	; 0x04
    3ace:	e6 ee       	ldi	r30, 0xE6	; 230
    3ad0:	f5 e0       	ldi	r31, 0x05	; 5
    3ad2:	21 2f       	mov	r18, r17
    3ad4:	33 27       	eor	r19, r19
    3ad6:	27 fd       	sbrc	r18, 7
    3ad8:	30 95       	com	r19
    3ada:	43 2f       	mov	r20, r19
    3adc:	53 2f       	mov	r21, r19
    3ade:	80 81       	ld	r24, Z
    3ae0:	82 30       	cpi	r24, 0x02	; 2
    3ae2:	91 f4       	brne	.+36     	; 0x3b08 <nrk_sem_post+0x8e>
    3ae4:	82 85       	ldd	r24, Z+10	; 0x0a
    3ae6:	93 85       	ldd	r25, Z+11	; 0x0b
    3ae8:	a4 85       	ldd	r26, Z+12	; 0x0c
    3aea:	b5 85       	ldd	r27, Z+13	; 0x0d
    3aec:	82 17       	cp	r24, r18
    3aee:	93 07       	cpc	r25, r19
    3af0:	a4 07       	cpc	r26, r20
    3af2:	b5 07       	cpc	r27, r21
    3af4:	49 f4       	brne	.+18     	; 0x3b08 <nrk_sem_post+0x8e>
    3af6:	83 e0       	ldi	r24, 0x03	; 3
    3af8:	82 83       	std	Z+2, r24	; 0x02
    3afa:	17 86       	std	Z+15, r1	; 0x0f
    3afc:	16 86       	std	Z+14, r1	; 0x0e
    3afe:	10 82       	st	Z, r1
    3b00:	12 86       	std	Z+10, r1	; 0x0a
    3b02:	13 86       	std	Z+11, r1	; 0x0b
    3b04:	14 86       	std	Z+12, r1	; 0x0c
    3b06:	15 86       	std	Z+13, r1	; 0x0d
    3b08:	b1 96       	adiw	r30, 0x21	; 33
    3b0a:	86 e0       	ldi	r24, 0x06	; 6
    3b0c:	ea 36       	cpi	r30, 0x6A	; 106
    3b0e:	f8 07       	cpc	r31, r24
    3b10:	31 f7       	brne	.-52     	; 0x3ade <nrk_sem_post+0x64>
    3b12:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <nrk_int_enable>
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	df 91       	pop	r29
    3b1c:	cf 91       	pop	r28
    3b1e:	1f 91       	pop	r17
    3b20:	08 95       	ret

00003b22 <nrk_event_signal>:
		// Get the RX packet 
		//nrk_led_set (ORANGE_LED);
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
		
		printf ("%c=%c\r\n", rx_buf[0], rx_buf[2]);
		
    3b22:	df 92       	push	r13
    3b24:	ef 92       	push	r14
    3b26:	ff 92       	push	r15
    3b28:	0f 93       	push	r16
    3b2a:	1f 93       	push	r17
		switch(rx_buf[0]) {
			case 'A': // ~0xxx
				nrk_led_clr(RED_LED);
				nrk_gpio_set(NRK_DEBUG_3);
				break;
			case 'B': // ~1xxx
    3b2c:	e1 e0       	ldi	r30, 0x01	; 1
    3b2e:	ee 2e       	mov	r14, r30
    3b30:	f1 2c       	mov	r15, r1
    3b32:	01 2d       	mov	r16, r1
    3b34:	11 2d       	mov	r17, r1
    3b36:	04 c0       	rjmp	.+8      	; 0x3b40 <nrk_event_signal+0x1e>
    3b38:	ee 0c       	add	r14, r14
    3b3a:	ff 1c       	adc	r15, r15
    3b3c:	00 1f       	adc	r16, r16
    3b3e:	11 1f       	adc	r17, r17
    3b40:	8a 95       	dec	r24
    3b42:	d2 f7       	brpl	.-12     	; 0x3b38 <nrk_event_signal+0x16>
				nrk_led_set(RED_LED);
				nrk_gpio_clr(NRK_DEBUG_3);
				break;
    3b44:	80 91 4f 03 	lds	r24, 0x034F
    3b48:	90 91 50 03 	lds	r25, 0x0350
    3b4c:	a0 91 51 03 	lds	r26, 0x0351
    3b50:	b0 91 52 03 	lds	r27, 0x0352
    3b54:	8e 21       	and	r24, r14
    3b56:	9f 21       	and	r25, r15
    3b58:	a0 23       	and	r26, r16
    3b5a:	b1 23       	and	r27, r17
    3b5c:	00 97       	sbiw	r24, 0x00	; 0
    3b5e:	a1 05       	cpc	r26, r1
    3b60:	b1 05       	cpc	r27, r1
    3b62:	11 f4       	brne	.+4      	; 0x3b68 <nrk_event_signal+0x46>
    3b64:	81 e0       	ldi	r24, 0x01	; 1
    3b66:	43 c0       	rjmp	.+134    	; 0x3bee <nrk_event_signal+0xcc>
		}

		switch(rx_buf[2]) {
    3b68:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <nrk_int_disable>
    3b6c:	e6 ee       	ldi	r30, 0xE6	; 230
    3b6e:	f5 e0       	ldi	r31, 0x05	; 5
    3b70:	dd 24       	eor	r13, r13
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
				nrk_led_clr(GREEN_LED);
    3b72:	80 81       	ld	r24, Z
    3b74:	81 30       	cpi	r24, 0x01	; 1
    3b76:	b9 f4       	brne	.+46     	; 0x3ba6 <nrk_event_signal+0x84>
				break;
    3b78:	82 85       	ldd	r24, Z+10	; 0x0a
    3b7a:	93 85       	ldd	r25, Z+11	; 0x0b
    3b7c:	a4 85       	ldd	r26, Z+12	; 0x0c
    3b7e:	b5 85       	ldd	r27, Z+13	; 0x0d
    3b80:	8e 21       	and	r24, r14
    3b82:	9f 21       	and	r25, r15
    3b84:	a0 23       	and	r26, r16
    3b86:	b1 23       	and	r27, r17
    3b88:	00 97       	sbiw	r24, 0x00	; 0
    3b8a:	a1 05       	cpc	r26, r1
    3b8c:	b1 05       	cpc	r27, r1
    3b8e:	59 f0       	breq	.+22     	; 0x3ba6 <nrk_event_signal+0x84>
			case 'U': // ~x001
				nrk_gpio_clr(NRK_DEBUG_0);
    3b90:	83 e0       	ldi	r24, 0x03	; 3
    3b92:	82 83       	std	Z+2, r24	; 0x02
				nrk_gpio_set(NRK_DEBUG_1);
    3b94:	17 86       	std	Z+15, r1	; 0x0f
    3b96:	16 86       	std	Z+14, r1	; 0x0e
				nrk_gpio_set(NRK_DEBUG_2);
    3b98:	10 82       	st	Z, r1
				nrk_led_set(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
				nrk_led_clr(GREEN_LED);
    3b9a:	e2 86       	std	Z+10, r14	; 0x0a
    3b9c:	f3 86       	std	Z+11, r15	; 0x0b
    3b9e:	04 87       	std	Z+12, r16	; 0x0c
    3ba0:	15 87       	std	Z+13, r17	; 0x0d
    3ba2:	dd 24       	eor	r13, r13
    3ba4:	d3 94       	inc	r13
				break;
			case 'D': // ~x010
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_clr(NRK_DEBUG_1);
    3ba6:	80 81       	ld	r24, Z
    3ba8:	82 30       	cpi	r24, 0x02	; 2
    3baa:	a1 f4       	brne	.+40     	; 0x3bd4 <nrk_event_signal+0xb2>
				nrk_gpio_set(NRK_DEBUG_2);
    3bac:	82 85       	ldd	r24, Z+10	; 0x0a
    3bae:	93 85       	ldd	r25, Z+11	; 0x0b
    3bb0:	a4 85       	ldd	r26, Z+12	; 0x0c
    3bb2:	b5 85       	ldd	r27, Z+13	; 0x0d
    3bb4:	8e 15       	cp	r24, r14
    3bb6:	9f 05       	cpc	r25, r15
    3bb8:	a0 07       	cpc	r26, r16
    3bba:	b1 07       	cpc	r27, r17
    3bbc:	59 f4       	brne	.+22     	; 0x3bd4 <nrk_event_signal+0xb2>
				nrk_led_clr(ORANGE_LED);
				nrk_led_set(BLUE_LED);
    3bbe:	83 e0       	ldi	r24, 0x03	; 3
    3bc0:	82 83       	std	Z+2, r24	; 0x02
				nrk_led_clr(GREEN_LED);
    3bc2:	17 86       	std	Z+15, r1	; 0x0f
    3bc4:	16 86       	std	Z+14, r1	; 0x0e
				break;
    3bc6:	10 82       	st	Z, r1
			case 'L': // ~x011
				nrk_gpio_clr(NRK_DEBUG_0);
				nrk_gpio_clr(NRK_DEBUG_1);
    3bc8:	12 86       	std	Z+10, r1	; 0x0a
    3bca:	13 86       	std	Z+11, r1	; 0x0b
    3bcc:	14 86       	std	Z+12, r1	; 0x0c
    3bce:	15 86       	std	Z+13, r1	; 0x0d
    3bd0:	dd 24       	eor	r13, r13
    3bd2:	d3 94       	inc	r13
    3bd4:	b1 96       	adiw	r30, 0x21	; 33
				nrk_gpio_clr(NRK_DEBUG_3);
				break;
		}

		switch(rx_buf[2]) {
			case '-': // ~x000
    3bd6:	86 e0       	ldi	r24, 0x06	; 6
    3bd8:	ea 36       	cpi	r30, 0x6A	; 106
    3bda:	f8 07       	cpc	r31, r24
    3bdc:	51 f6       	brne	.-108    	; 0x3b72 <nrk_event_signal+0x50>
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
				nrk_led_set(BLUE_LED);
				nrk_led_clr(GREEN_LED);
				break;
			case 'R': // ~x100
    3bde:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <nrk_int_enable>
				nrk_gpio_set(NRK_DEBUG_0);
    3be2:	dd 20       	and	r13, r13
    3be4:	19 f0       	breq	.+6      	; 0x3bec <nrk_event_signal+0xca>
    3be6:	81 e0       	ldi	r24, 0x01	; 1
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	05 c0       	rjmp	.+10     	; 0x3bf6 <nrk_event_signal+0xd4>
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_clr(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
				nrk_led_set(GREEN_LED);
    3bec:	82 e0       	ldi	r24, 0x02	; 2
    3bee:	0e 94 fe 19 	call	0x33fc	; 0x33fc <_nrk_errno_set>
    3bf2:	8f ef       	ldi	r24, 0xFF	; 255
    3bf4:	9f ef       	ldi	r25, 0xFF	; 255
    3bf6:	1f 91       	pop	r17
    3bf8:	0f 91       	pop	r16
    3bfa:	ff 90       	pop	r15
    3bfc:	ef 90       	pop	r14
    3bfe:	df 90       	pop	r13
    3c00:	08 95       	ret

00003c02 <nrk_signal_delete>:

	nrk_time_set (0, 0);

	bmac_task_config ();

	nrk_create_taskset ();
    3c02:	ef 92       	push	r14
    3c04:	ff 92       	push	r15
    3c06:	0f 93       	push	r16
    3c08:	1f 93       	push	r17
    3c0a:	cf 93       	push	r28
    3c0c:	df 93       	push	r29
	nrk_start ();

	return 0;
}
    3c0e:	c8 2f       	mov	r28, r24
    3c10:	dd 27       	eor	r29, r29
    3c12:	c7 fd       	sbrc	r28, 7
    3c14:	d0 95       	com	r29
    3c16:	f1 e0       	ldi	r31, 0x01	; 1
    3c18:	ef 2e       	mov	r14, r31
    3c1a:	f1 2c       	mov	r15, r1
    3c1c:	01 2d       	mov	r16, r1
    3c1e:	11 2d       	mov	r17, r1
    3c20:	0c 2e       	mov	r0, r28
    3c22:	04 c0       	rjmp	.+8      	; 0x3c2c <nrk_signal_delete+0x2a>
    3c24:	ee 0c       	add	r14, r14
    3c26:	ff 1c       	adc	r15, r15
    3c28:	00 1f       	adc	r16, r16
    3c2a:	11 1f       	adc	r17, r17
    3c2c:	0a 94       	dec	r0
    3c2e:	d2 f7       	brpl	.-12     	; 0x3c24 <nrk_signal_delete+0x22>

void pin_task ()
    3c30:	80 91 4f 03 	lds	r24, 0x034F
    3c34:	90 91 50 03 	lds	r25, 0x0350
    3c38:	a0 91 51 03 	lds	r26, 0x0351
    3c3c:	b0 91 52 03 	lds	r27, 0x0352
    3c40:	8e 21       	and	r24, r14
    3c42:	9f 21       	and	r25, r15
    3c44:	a0 23       	and	r26, r16
    3c46:	b1 23       	and	r27, r17
    3c48:	00 97       	sbiw	r24, 0x00	; 0
    3c4a:	a1 05       	cpc	r26, r1
    3c4c:	b1 05       	cpc	r27, r1
    3c4e:	19 f4       	brne	.+6      	; 0x3c56 <nrk_signal_delete+0x54>
    3c50:	8f ef       	ldi	r24, 0xFF	; 255
    3c52:	9f ef       	ldi	r25, 0xFF	; 255
    3c54:	5d c0       	rjmp	.+186    	; 0x3d10 <nrk_signal_delete+0x10e>
{
	while(1) {
    3c56:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <nrk_int_disable>
    3c5a:	ef ed       	ldi	r30, 0xDF	; 223
    3c5c:	f5 e0       	ldi	r31, 0x05	; 5
void rx_task ()
{
	uint8_t i, len;
	int8_t rssi, val;
	uint8_t *local_rx_buf;
	nrk_time_t check_period;
    3c5e:	a8 01       	movw	r20, r16
    3c60:	97 01       	movw	r18, r14
    3c62:	20 95       	com	r18
    3c64:	30 95       	com	r19
    3c66:	40 95       	com	r20
    3c68:	50 95       	com	r21

void pin_task ()
{
	while(1) {
		nrk_led_toggle (RED_LED);
		nrk_wait_until_next_period ();
    3c6a:	80 85       	ldd	r24, Z+8	; 0x08
    3c6c:	8f 3f       	cpi	r24, 0xFF	; 255
    3c6e:	41 f1       	breq	.+80     	; 0x3cc0 <nrk_signal_delete+0xbe>
		nrk_led_toggle (BLUE_LED);
		nrk_wait_until_next_period ();
	}
}
    3c70:	85 85       	ldd	r24, Z+13	; 0x0d
    3c72:	96 85       	ldd	r25, Z+14	; 0x0e
    3c74:	a7 85       	ldd	r26, Z+15	; 0x0f
    3c76:	b0 89       	ldd	r27, Z+16	; 0x10
    3c78:	8e 15       	cp	r24, r14
    3c7a:	9f 05       	cpc	r25, r15
    3c7c:	a0 07       	cpc	r26, r16
    3c7e:	b1 07       	cpc	r27, r17
    3c80:	39 f4       	brne	.+14     	; 0x3c90 <nrk_signal_delete+0x8e>

void rx_task ()
{
    3c82:	11 8a       	std	Z+17, r1	; 0x11
    3c84:	12 8a       	std	Z+18, r1	; 0x12
    3c86:	13 8a       	std	Z+19, r1	; 0x13
    3c88:	14 8a       	std	Z+20, r1	; 0x14
	uint8_t i, len;
    3c8a:	17 82       	std	Z+7, r1	; 0x07
	int8_t rssi, val;
    3c8c:	83 e0       	ldi	r24, 0x03	; 3
    3c8e:	81 87       	std	Z+9, r24	; 0x09
	uint8_t *local_rx_buf;
	nrk_time_t check_period;
    3c90:	85 85       	ldd	r24, Z+13	; 0x0d
    3c92:	96 85       	ldd	r25, Z+14	; 0x0e
    3c94:	a7 85       	ldd	r26, Z+15	; 0x0f
    3c96:	b0 89       	ldd	r27, Z+16	; 0x10
    3c98:	82 23       	and	r24, r18
    3c9a:	93 23       	and	r25, r19
    3c9c:	a4 23       	and	r26, r20
    3c9e:	b5 23       	and	r27, r21
    3ca0:	85 87       	std	Z+13, r24	; 0x0d
    3ca2:	96 87       	std	Z+14, r25	; 0x0e
    3ca4:	a7 87       	std	Z+15, r26	; 0x0f
    3ca6:	b0 8b       	std	Z+16, r27	; 0x10
	printf ("rx_task PID=%d\r\n", nrk_get_pid ());
    3ca8:	81 89       	ldd	r24, Z+17	; 0x11
    3caa:	92 89       	ldd	r25, Z+18	; 0x12
    3cac:	a3 89       	ldd	r26, Z+19	; 0x13
    3cae:	b4 89       	ldd	r27, Z+20	; 0x14
    3cb0:	82 23       	and	r24, r18
    3cb2:	93 23       	and	r25, r19
    3cb4:	a4 23       	and	r26, r20
    3cb6:	b5 23       	and	r27, r21
    3cb8:	81 8b       	std	Z+17, r24	; 0x11
    3cba:	92 8b       	std	Z+18, r25	; 0x12
    3cbc:	a3 8b       	std	Z+19, r26	; 0x13
    3cbe:	b4 8b       	std	Z+20, r27	; 0x14
    3cc0:	b1 96       	adiw	r30, 0x21	; 33
}

void pin_task ()
{
	while(1) {
		nrk_led_toggle (RED_LED);
    3cc2:	86 e0       	ldi	r24, 0x06	; 6
    3cc4:	e3 36       	cpi	r30, 0x63	; 99
    3cc6:	f8 07       	cpc	r31, r24
    3cc8:	81 f6       	brne	.-96     	; 0x3c6a <nrk_signal_delete+0x68>
	nrk_time_t check_period;
	printf ("rx_task PID=%d\r\n", nrk_get_pid ());

	// init bmac on channel 25 
	bmac_init (25);

    3cca:	2e ef       	ldi	r18, 0xFE	; 254
    3ccc:	3f ef       	ldi	r19, 0xFF	; 255
    3cce:	4f ef       	ldi	r20, 0xFF	; 255
    3cd0:	5f ef       	ldi	r21, 0xFF	; 255
    3cd2:	04 c0       	rjmp	.+8      	; 0x3cdc <nrk_signal_delete+0xda>
    3cd4:	22 0f       	add	r18, r18
    3cd6:	33 1f       	adc	r19, r19
    3cd8:	44 1f       	adc	r20, r20
    3cda:	55 1f       	adc	r21, r21
    3cdc:	ca 95       	dec	r28
    3cde:	d2 f7       	brpl	.-12     	; 0x3cd4 <nrk_signal_delete+0xd2>
    3ce0:	80 91 4f 03 	lds	r24, 0x034F
    3ce4:	90 91 50 03 	lds	r25, 0x0350
    3ce8:	a0 91 51 03 	lds	r26, 0x0351
    3cec:	b0 91 52 03 	lds	r27, 0x0352
    3cf0:	82 23       	and	r24, r18
    3cf2:	93 23       	and	r25, r19
    3cf4:	a4 23       	and	r26, r20
    3cf6:	b5 23       	and	r27, r21
    3cf8:	80 93 4f 03 	sts	0x034F, r24
    3cfc:	90 93 50 03 	sts	0x0350, r25
    3d00:	a0 93 51 03 	sts	0x0351, r26
    3d04:	b0 93 52 03 	sts	0x0352, r27
	// By default the RX check rate is 100ms
    3d08:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <nrk_int_enable>
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
    3d0e:	90 e0       	ldi	r25, 0x00	; 0
    3d10:	df 91       	pop	r29
    3d12:	cf 91       	pop	r28
    3d14:	1f 91       	pop	r17
    3d16:	0f 91       	pop	r16
    3d18:	ff 90       	pop	r15
    3d1a:	ef 90       	pop	r14
    3d1c:	08 95       	ret

00003d1e <nrk_sem_pend>:
	PIN_TASK.offset.secs = 0;
	PIN_TASK.offset.nano_secs = 0;
	nrk_activate_task (&PIN_TASK);
*/

	RX_TASK.task = rx_task;
    3d1e:	1f 93       	push	r17
    3d20:	cf 93       	push	r28
    3d22:	df 93       	push	r29
	RX_TASK.Ptos = (void *) &rx_task_stack[NRK_APP_STACKSIZE - 1];
	RX_TASK.Pbos = (void *) &rx_task_stack[0];
    3d24:	0e 94 ed 1c 	call	0x39da	; 0x39da <nrk_get_resource_index>
    3d28:	18 2f       	mov	r17, r24
	RX_TASK.prio = 2;
    3d2a:	8f 3f       	cpi	r24, 0xFF	; 255
    3d2c:	11 f4       	brne	.+4      	; 0x3d32 <nrk_sem_pend+0x14>
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	03 c0       	rjmp	.+6      	; 0x3d38 <nrk_sem_pend+0x1a>
	RX_TASK.FirstActivation = TRUE;
    3d32:	82 30       	cpi	r24, 0x02	; 2
    3d34:	31 f4       	brne	.+12     	; 0x3d42 <nrk_sem_pend+0x24>
    3d36:	82 e0       	ldi	r24, 0x02	; 2
    3d38:	0e 94 fe 19 	call	0x33fc	; 0x33fc <_nrk_errno_set>
    3d3c:	8f ef       	ldi	r24, 0xFF	; 255
    3d3e:	9f ef       	ldi	r25, 0xFF	; 255
    3d40:	3e c0       	rjmp	.+124    	; 0x3dbe <nrk_sem_pend+0xa0>
	RX_TASK.Type = BASIC_TASK;
	RX_TASK.SchType = PREEMPTIVE;
    3d42:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <nrk_int_disable>
	RX_TASK.period.secs = 0;
    3d46:	81 2f       	mov	r24, r17
    3d48:	99 27       	eor	r25, r25
    3d4a:	87 fd       	sbrc	r24, 7
    3d4c:	90 95       	com	r25
    3d4e:	ec 01       	movw	r28, r24
    3d50:	cc 0f       	add	r28, r28
    3d52:	dd 1f       	adc	r29, r29
    3d54:	c8 0f       	add	r28, r24
    3d56:	d9 1f       	adc	r29, r25
    3d58:	cb 59       	subi	r28, 0x9B	; 155
    3d5a:	d9 4f       	sbci	r29, 0xF9	; 249
    3d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5e:	88 23       	and	r24, r24
    3d60:	d9 f4       	brne	.+54     	; 0x3d98 <nrk_sem_pend+0x7a>
	RX_TASK.period.nano_secs = 40 * NANOS_PER_MS;;
	RX_TASK.cpu_reserve.secs = 0;
    3d62:	e0 91 7c 06 	lds	r30, 0x067C
    3d66:	f0 91 7d 06 	lds	r31, 0x067D
    3d6a:	87 81       	ldd	r24, Z+7	; 0x07
    3d6c:	82 60       	ori	r24, 0x02	; 2
    3d6e:	87 83       	std	Z+7, r24	; 0x07
	RX_TASK.cpu_reserve.nano_secs = 40 * NANOS_PER_MS;;
    3d70:	e0 91 7c 06 	lds	r30, 0x067C
    3d74:	f0 91 7d 06 	lds	r31, 0x067D
    3d78:	81 2f       	mov	r24, r17
    3d7a:	99 27       	eor	r25, r25
    3d7c:	87 fd       	sbrc	r24, 7
    3d7e:	90 95       	com	r25
    3d80:	a9 2f       	mov	r26, r25
    3d82:	b9 2f       	mov	r27, r25
    3d84:	81 8b       	std	Z+17, r24	; 0x11
    3d86:	92 8b       	std	Z+18, r25	; 0x12
    3d88:	a3 8b       	std	Z+19, r26	; 0x13
    3d8a:	b4 8b       	std	Z+20, r27	; 0x14
	RX_TASK.offset.secs = 0;
	RX_TASK.offset.nano_secs = 0;
    3d8c:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <nrk_int_enable>
	nrk_activate_task (&RX_TASK);
    3d90:	80 e0       	ldi	r24, 0x00	; 0
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	0e 94 34 21 	call	0x4268	; 0x4268 <nrk_wait_until_ticks>

	printf ("Create done\r\n");
}
    3d98:	8a 81       	ldd	r24, Y+2	; 0x02
    3d9a:	81 50       	subi	r24, 0x01	; 1
    3d9c:	8a 83       	std	Y+2, r24	; 0x02
    3d9e:	e0 91 7c 06 	lds	r30, 0x067C
    3da2:	f0 91 7d 06 	lds	r31, 0x067D
    3da6:	89 81       	ldd	r24, Y+1	; 0x01
    3da8:	83 87       	std	Z+11, r24	; 0x0b
    3daa:	e0 91 7c 06 	lds	r30, 0x067C
    3dae:	f0 91 7d 06 	lds	r31, 0x067D
    3db2:	81 e0       	ldi	r24, 0x01	; 1
    3db4:	84 83       	std	Z+4, r24	; 0x04
    3db6:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <nrk_int_enable>
    3dba:	81 e0       	ldi	r24, 0x01	; 1
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	df 91       	pop	r29
    3dc0:	cf 91       	pop	r28
    3dc2:	1f 91       	pop	r17
    3dc4:	08 95       	ret

00003dc6 <nrk_event_wait>:
				break;
			case 'B': // ~x101
				nrk_gpio_clr(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_clr(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
    3dc6:	9b 01       	movw	r18, r22
    3dc8:	ac 01       	movw	r20, r24
				nrk_led_clr(BLUE_LED);
				nrk_led_set(GREEN_LED);
				break;
    3dca:	e0 91 7c 06 	lds	r30, 0x067C
    3dce:	f0 91 7d 06 	lds	r31, 0x067D
    3dd2:	85 85       	ldd	r24, Z+13	; 0x0d
    3dd4:	96 85       	ldd	r25, Z+14	; 0x0e
    3dd6:	a7 85       	ldd	r26, Z+15	; 0x0f
    3dd8:	b0 89       	ldd	r27, Z+16	; 0x10
    3dda:	82 23       	and	r24, r18
    3ddc:	93 23       	and	r25, r19
    3dde:	a4 23       	and	r26, r20
    3de0:	b5 23       	and	r27, r21
    3de2:	00 97       	sbiw	r24, 0x00	; 0
    3de4:	a1 05       	cpc	r26, r1
    3de6:	b1 05       	cpc	r27, r1
    3de8:	29 f4       	brne	.+10     	; 0x3df4 <nrk_event_wait+0x2e>
    3dea:	60 e0       	ldi	r22, 0x00	; 0
    3dec:	70 e0       	ldi	r23, 0x00	; 0
    3dee:	80 e0       	ldi	r24, 0x00	; 0
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	08 95       	ret
		}
		
    3df4:	21 8b       	std	Z+17, r18	; 0x11
    3df6:	32 8b       	std	Z+18, r19	; 0x12
    3df8:	43 8b       	std	Z+19, r20	; 0x13
    3dfa:	54 8b       	std	Z+20, r21	; 0x14
		
    3dfc:	81 e0       	ldi	r24, 0x01	; 1
    3dfe:	87 83       	std	Z+7, r24	; 0x07
		//nrk_led_toggle (BLUE_LED);
		// Release the RX buffer so future packets can arrive 
		bmac_rx_pkt_release ();
	}

}
    3e00:	00 90 6c 06 	lds	r0, 0x066C
    3e04:	04 c0       	rjmp	.+8      	; 0x3e0e <nrk_event_wait+0x48>
    3e06:	56 95       	lsr	r21
    3e08:	47 95       	ror	r20
    3e0a:	37 95       	ror	r19
    3e0c:	27 95       	ror	r18
    3e0e:	0a 94       	dec	r0
    3e10:	d2 f7       	brpl	.-12     	; 0x3e06 <nrk_event_wait+0x40>
    3e12:	c9 01       	movw	r24, r18
    3e14:	81 70       	andi	r24, 0x01	; 1
    3e16:	90 70       	andi	r25, 0x00	; 0
    3e18:	89 2b       	or	r24, r25
    3e1a:	19 f0       	breq	.+6      	; 0x3e22 <nrk_event_wait+0x5c>

    3e1c:	0e 94 cf 20 	call	0x419e	; 0x419e <nrk_wait_until_nw>
    3e20:	04 c0       	rjmp	.+8      	; 0x3e2a <nrk_event_wait+0x64>
void nrk_create_taskset ()
{
    3e22:	80 e0       	ldi	r24, 0x00	; 0
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	0e 94 34 21 	call	0x4268	; 0x4268 <nrk_wait_until_ticks>
/*
	PIN_TASK.task = pin_task;
    3e2a:	e0 91 7c 06 	lds	r30, 0x067C
    3e2e:	f0 91 7d 06 	lds	r31, 0x067D
    3e32:	61 89       	ldd	r22, Z+17	; 0x11
    3e34:	72 89       	ldd	r23, Z+18	; 0x12
    3e36:	83 89       	ldd	r24, Z+19	; 0x13
    3e38:	94 89       	ldd	r25, Z+20	; 0x14
	PIN_TASK.Ptos = (void *) &pin_task_stack[NRK_APP_STACKSIZE - 1];
    3e3a:	08 95       	ret

00003e3c <nrk_get_high_ready_task_ID>:

nrk_task_type PIN_TASK;
NRK_STK pin_task_stack[NRK_APP_STACKSIZE];
void pin_task (void);

void nrk_create_taskset ();
    3e3c:	e0 91 71 06 	lds	r30, 0x0671
    3e40:	f0 91 72 06 	lds	r31, 0x0672
    3e44:	80 81       	ld	r24, Z

uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
    3e46:	99 27       	eor	r25, r25
    3e48:	08 95       	ret

00003e4a <nrk_print_readyQ>:

int main ()
{
	uint16_t div;
	nrk_setup_ports ();
    3e4a:	e0 91 71 06 	lds	r30, 0x0671
    3e4e:	f0 91 72 06 	lds	r31, 0x0672
    3e52:	03 c0       	rjmp	.+6      	; 0x3e5a <nrk_print_readyQ+0x10>
	nrk_setup_uart (UART_BAUDRATE_115K2);

	nrk_init ();

    3e54:	03 80       	ldd	r0, Z+3	; 0x03
    3e56:	f4 81       	ldd	r31, Z+4	; 0x04
    3e58:	e0 2d       	mov	r30, r0
int main ()
{
	uint16_t div;
	nrk_setup_ports ();
	nrk_setup_uart (UART_BAUDRATE_115K2);

    3e5a:	30 97       	sbiw	r30, 0x00	; 0
    3e5c:	d9 f7       	brne	.-10     	; 0x3e54 <nrk_print_readyQ+0xa>
    3e5e:	08 95       	ret

00003e60 <nrk_add_to_readyQ>:
	nrk_led_clr (1);
	nrk_led_clr (2);
	nrk_led_clr (3);

	nrk_time_set (0, 0);

    3e60:	cf 93       	push	r28
    3e62:	df 93       	push	r29
    3e64:	48 2f       	mov	r20, r24
	bmac_task_config ();

	nrk_create_taskset ();
	nrk_start ();

	return 0;
    3e66:	c0 91 dd 05 	lds	r28, 0x05DD
    3e6a:	d0 91 de 05 	lds	r29, 0x05DE
    3e6e:	20 97       	sbiw	r28, 0x00	; 0
    3e70:	09 f4       	brne	.+2      	; 0x3e74 <nrk_add_to_readyQ+0x14>
    3e72:	7a c0       	rjmp	.+244    	; 0x3f68 <nrk_add_to_readyQ+0x108>
}

void pin_task ()
{
	while(1) {
    3e74:	a0 91 71 06 	lds	r26, 0x0671
    3e78:	b0 91 72 06 	lds	r27, 0x0672
		nrk_led_toggle (RED_LED);
		nrk_wait_until_next_period ();
		nrk_led_toggle (BLUE_LED);
    3e7c:	10 97       	sbiw	r26, 0x00	; 0
    3e7e:	b9 f1       	breq	.+110    	; 0x3eee <nrk_add_to_readyQ+0x8e>
		nrk_wait_until_next_period ();
	}
}

    3e80:	99 27       	eor	r25, r25
    3e82:	87 fd       	sbrc	r24, 7
    3e84:	90 95       	com	r25
    3e86:	9c 01       	movw	r18, r24
    3e88:	65 e0       	ldi	r22, 0x05	; 5
    3e8a:	22 0f       	add	r18, r18
    3e8c:	33 1f       	adc	r19, r19
    3e8e:	6a 95       	dec	r22
    3e90:	e1 f7       	brne	.-8      	; 0x3e8a <nrk_add_to_readyQ+0x2a>
    3e92:	28 0f       	add	r18, r24
    3e94:	39 1f       	adc	r19, r25
    3e96:	21 52       	subi	r18, 0x21	; 33
    3e98:	3a 4f       	sbci	r19, 0xFA	; 250
		nrk_led_toggle (RED_LED);
		nrk_wait_until_next_period ();
		nrk_led_toggle (BLUE_LED);
		nrk_wait_until_next_period ();
	}
}
    3e9a:	8c 91       	ld	r24, X
    3e9c:	99 27       	eor	r25, r25
    3e9e:	bc 01       	movw	r22, r24
    3ea0:	55 e0       	ldi	r21, 0x05	; 5
    3ea2:	66 0f       	add	r22, r22
    3ea4:	77 1f       	adc	r23, r23
    3ea6:	5a 95       	dec	r21
    3ea8:	e1 f7       	brne	.-8      	; 0x3ea2 <nrk_add_to_readyQ+0x42>
    3eaa:	68 0f       	add	r22, r24
    3eac:	79 1f       	adc	r23, r25
    3eae:	61 52       	subi	r22, 0x21	; 33
    3eb0:	7a 4f       	sbci	r23, 0xFA	; 250
    3eb2:	fb 01       	movw	r30, r22
    3eb4:	84 81       	ldd	r24, Z+4	; 0x04
    3eb6:	88 23       	and	r24, r24
    3eb8:	29 f0       	breq	.+10     	; 0x3ec4 <nrk_add_to_readyQ+0x64>

    3eba:	93 85       	ldd	r25, Z+11	; 0x0b
    3ebc:	f9 01       	movw	r30, r18
    3ebe:	82 85       	ldd	r24, Z+10	; 0x0a
    3ec0:	98 17       	cp	r25, r24
    3ec2:	a8 f0       	brcs	.+42     	; 0x3eee <nrk_add_to_readyQ+0x8e>
void rx_task ()
{
	uint8_t i, len;
    3ec4:	f9 01       	movw	r30, r18
    3ec6:	84 81       	ldd	r24, Z+4	; 0x04
    3ec8:	88 23       	and	r24, r24
    3eca:	31 f0       	breq	.+12     	; 0x3ed8 <nrk_add_to_readyQ+0x78>
	int8_t rssi, val;
    3ecc:	fb 01       	movw	r30, r22
    3ece:	92 85       	ldd	r25, Z+10	; 0x0a
    3ed0:	f9 01       	movw	r30, r18
    3ed2:	83 85       	ldd	r24, Z+11	; 0x0b
    3ed4:	98 17       	cp	r25, r24
    3ed6:	58 f0       	brcs	.+22     	; 0x3eee <nrk_add_to_readyQ+0x8e>
	uint8_t *local_rx_buf;
	nrk_time_t check_period;
	printf ("rx_task PID=%d\r\n", nrk_get_pid ());
    3ed8:	fb 01       	movw	r30, r22
    3eda:	92 85       	ldd	r25, Z+10	; 0x0a
    3edc:	f9 01       	movw	r30, r18
    3ede:	82 85       	ldd	r24, Z+10	; 0x0a
    3ee0:	98 17       	cp	r25, r24
    3ee2:	28 f0       	brcs	.+10     	; 0x3eee <nrk_add_to_readyQ+0x8e>

	// init bmac on channel 25 
	bmac_init (25);

    3ee4:	fd 01       	movw	r30, r26
    3ee6:	a3 81       	ldd	r26, Z+3	; 0x03
    3ee8:	b4 81       	ldd	r27, Z+4	; 0x04
	while(1) {
		nrk_led_toggle (RED_LED);
		nrk_wait_until_next_period ();
		nrk_led_toggle (BLUE_LED);
		nrk_wait_until_next_period ();
	}
    3eea:	10 97       	sbiw	r26, 0x00	; 0
    3eec:	b1 f6       	brne	.-84     	; 0x3e9a <nrk_add_to_readyQ+0x3a>
	// The default Clear Channel Assement RSSI threshold is -45
	// Setting this value higher means that you will only trigger
	// receive with a very strong signal.  Setting this lower means
	// bmac will try to receive fainter packets.  If the value is set
	// too high or too low performance will suffer greatly.
	// bmac_set_cca_thresh(-45); 
    3eee:	48 83       	st	Y, r20

    3ef0:	e0 91 dd 05 	lds	r30, 0x05DD
    3ef4:	f0 91 de 05 	lds	r31, 0x05DE
    3ef8:	23 81       	ldd	r18, Z+3	; 0x03
    3efa:	34 81       	ldd	r19, Z+4	; 0x04
    3efc:	30 93 de 05 	sts	0x05DE, r19
    3f00:	20 93 dd 05 	sts	0x05DD, r18

	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
    3f04:	80 91 71 06 	lds	r24, 0x0671
    3f08:	90 91 72 06 	lds	r25, 0x0672
    3f0c:	a8 17       	cp	r26, r24
    3f0e:	b9 07       	cpc	r27, r25
    3f10:	a1 f4       	brne	.+40     	; 0x3f3a <nrk_add_to_readyQ+0xda>
	// This sets the next RX buffer.
	// This can be called at anytime before releaseing the packet
    3f12:	10 97       	sbiw	r26, 0x00	; 0
    3f14:	31 f0       	breq	.+12     	; 0x3f22 <nrk_add_to_readyQ+0xc2>
	// if you wish to do a zero-copy buffer switch
    3f16:	bc 83       	std	Y+4, r27	; 0x04
    3f18:	ab 83       	std	Y+3, r26	; 0x03
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
    3f1a:	1a 82       	std	Y+2, r1	; 0x02
    3f1c:	19 82       	std	Y+1, r1	; 0x01

    3f1e:	fd 01       	movw	r30, r26
    3f20:	05 c0       	rjmp	.+10     	; 0x3f2c <nrk_add_to_readyQ+0xcc>
	bmac_auto_ack_disable();

	//set port direction as output
    3f22:	1c 82       	std	Y+4, r1	; 0x04
    3f24:	1b 82       	std	Y+3, r1	; 0x03
	nrk_gpio_direction(NRK_DEBUG_3,NRK_PIN_OUTPUT);//PD.1
    3f26:	1a 82       	std	Y+2, r1	; 0x02
    3f28:	19 82       	std	Y+1, r1	; 0x01
	nrk_gpio_direction(NRK_DEBUG_2,NRK_PIN_OUTPUT);//PD.0
    3f2a:	f9 01       	movw	r30, r18
    3f2c:	d2 83       	std	Z+2, r29	; 0x02
    3f2e:	c1 83       	std	Z+1, r28	; 0x01
	nrk_gpio_direction(NRK_DEBUG_0,NRK_PIN_OUTPUT);//PA.3
	nrk_gpio_direction(NRK_DEBUG_1,NRK_PIN_OUTPUT);//PA.4
    3f30:	d0 93 72 06 	sts	0x0672, r29
    3f34:	c0 93 71 06 	sts	0x0671, r28
    3f38:	17 c0       	rjmp	.+46     	; 0x3f68 <nrk_add_to_readyQ+0x108>
    3f3a:	fd 01       	movw	r30, r26
    3f3c:	81 81       	ldd	r24, Z+1	; 0x01
    3f3e:	92 81       	ldd	r25, Z+2	; 0x02

	while (1) {
		// Wait until an RX packet is received
		val = bmac_wait_until_rx_pkt ();
    3f40:	a2 17       	cp	r26, r18
    3f42:	b3 07       	cpc	r27, r19
    3f44:	51 f0       	breq	.+20     	; 0x3f5a <nrk_add_to_readyQ+0xfa>
		// Get the RX packet 
		//nrk_led_set (ORANGE_LED);
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
    3f46:	9a 83       	std	Y+2, r25	; 0x02
    3f48:	89 83       	std	Y+1, r24	; 0x01
		
    3f4a:	bc 83       	std	Y+4, r27	; 0x04
    3f4c:	ab 83       	std	Y+3, r26	; 0x03
		printf ("%c=%c\r\n", rx_buf[0], rx_buf[2]);
    3f4e:	81 81       	ldd	r24, Z+1	; 0x01
    3f50:	92 81       	ldd	r25, Z+2	; 0x02
    3f52:	fc 01       	movw	r30, r24
    3f54:	d4 83       	std	Z+4, r29	; 0x04
    3f56:	c3 83       	std	Z+3, r28	; 0x03
    3f58:	04 c0       	rjmp	.+8      	; 0x3f62 <nrk_add_to_readyQ+0x102>
		
		switch(rx_buf[0]) {
			case 'A': // ~0xxx
				nrk_led_clr(RED_LED);
				nrk_gpio_set(NRK_DEBUG_3);
    3f5a:	1c 82       	std	Y+4, r1	; 0x04
    3f5c:	1b 82       	std	Y+3, r1	; 0x03
				break;
    3f5e:	9a 83       	std	Y+2, r25	; 0x02
    3f60:	89 83       	std	Y+1, r24	; 0x01
			case 'B': // ~1xxx
    3f62:	fd 01       	movw	r30, r26
    3f64:	d2 83       	std	Z+2, r29	; 0x02
    3f66:	c1 83       	std	Z+1, r28	; 0x01
    3f68:	df 91       	pop	r29
    3f6a:	cf 91       	pop	r28
    3f6c:	08 95       	ret

00003f6e <nrk_rem_from_readyQ>:
		}

		switch(rx_buf[2]) {
			case '-': // ~x000
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
    3f6e:	cf 93       	push	r28
    3f70:	df 93       	push	r29
				nrk_led_set(ORANGE_LED);
				nrk_led_set(BLUE_LED);
				nrk_led_clr(GREEN_LED);
				break;
			case 'R': // ~x100
				nrk_gpio_set(NRK_DEBUG_0);
    3f72:	a0 91 71 06 	lds	r26, 0x0671
    3f76:	b0 91 72 06 	lds	r27, 0x0672
    3f7a:	10 97       	sbiw	r26, 0x00	; 0
    3f7c:	09 f4       	brne	.+2      	; 0x3f80 <nrk_rem_from_readyQ+0x12>
    3f7e:	46 c0       	rjmp	.+140    	; 0x400c <nrk_rem_from_readyQ+0x9e>
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_clr(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
				nrk_led_set(GREEN_LED);
    3f80:	48 2f       	mov	r20, r24
    3f82:	55 27       	eor	r21, r21
    3f84:	47 fd       	sbrc	r20, 7
    3f86:	50 95       	com	r21
    3f88:	8c 91       	ld	r24, X
    3f8a:	99 27       	eor	r25, r25
    3f8c:	84 17       	cp	r24, r20
    3f8e:	95 07       	cpc	r25, r21
    3f90:	69 f4       	brne	.+26     	; 0x3fac <nrk_rem_from_readyQ+0x3e>
				break;
			case 'B': // ~x101
    3f92:	ed 01       	movw	r28, r26
    3f94:	eb 81       	ldd	r30, Y+3	; 0x03
    3f96:	fc 81       	ldd	r31, Y+4	; 0x04
    3f98:	f0 93 72 06 	sts	0x0672, r31
    3f9c:	e0 93 71 06 	sts	0x0671, r30
				nrk_gpio_clr(NRK_DEBUG_0);
    3fa0:	12 82       	std	Z+2, r1	; 0x02
    3fa2:	11 82       	std	Z+1, r1	; 0x01
    3fa4:	16 c0       	rjmp	.+44     	; 0x3fd2 <nrk_rem_from_readyQ+0x64>
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_clr(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
    3fa6:	d9 01       	movw	r26, r18
				break;
			case 'B': // ~x101
				nrk_gpio_clr(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_clr(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
    3fa8:	23 2b       	or	r18, r19
    3faa:	81 f1       	breq	.+96     	; 0x400c <nrk_rem_from_readyQ+0x9e>
    3fac:	8c 91       	ld	r24, X
    3fae:	99 27       	eor	r25, r25
    3fb0:	fd 01       	movw	r30, r26
    3fb2:	23 81       	ldd	r18, Z+3	; 0x03
    3fb4:	34 81       	ldd	r19, Z+4	; 0x04
    3fb6:	84 17       	cp	r24, r20
    3fb8:	95 07       	cpc	r25, r21
    3fba:	a9 f7       	brne	.-22     	; 0x3fa6 <nrk_rem_from_readyQ+0x38>
				nrk_led_clr(BLUE_LED);
				nrk_led_set(GREEN_LED);
				break;
		}
		
		
    3fbc:	c1 81       	ldd	r28, Z+1	; 0x01
    3fbe:	d2 81       	ldd	r29, Z+2	; 0x02
    3fc0:	3c 83       	std	Y+4, r19	; 0x04
    3fc2:	2b 83       	std	Y+3, r18	; 0x03
		//nrk_led_clr (ORANGE_LED);
    3fc4:	83 81       	ldd	r24, Z+3	; 0x03
    3fc6:	94 81       	ldd	r25, Z+4	; 0x04
    3fc8:	00 97       	sbiw	r24, 0x00	; 0
    3fca:	19 f0       	breq	.+6      	; 0x3fd2 <nrk_rem_from_readyQ+0x64>
		//nrk_led_toggle (BLUE_LED);
    3fcc:	fc 01       	movw	r30, r24
    3fce:	d2 83       	std	Z+2, r29	; 0x02
    3fd0:	c1 83       	std	Z+1, r28	; 0x01
		bmac_rx_pkt_release ();
	}

}

void nrk_create_taskset ()
    3fd2:	e0 91 dd 05 	lds	r30, 0x05DD
    3fd6:	f0 91 de 05 	lds	r31, 0x05DE
    3fda:	30 97       	sbiw	r30, 0x00	; 0
    3fdc:	41 f4       	brne	.+16     	; 0x3fee <nrk_rem_from_readyQ+0x80>
{
    3fde:	b0 93 de 05 	sts	0x05DE, r27
    3fe2:	a0 93 dd 05 	sts	0x05DD, r26
/*
    3fe6:	ed 01       	movw	r28, r26
    3fe8:	1c 82       	std	Y+4, r1	; 0x04
    3fea:	1b 82       	std	Y+3, r1	; 0x03
    3fec:	09 c0       	rjmp	.+18     	; 0x4000 <nrk_rem_from_readyQ+0x92>
	PIN_TASK.task = pin_task;
	PIN_TASK.Ptos = (void *) &pin_task_stack[NRK_APP_STACKSIZE - 1];
	PIN_TASK.Pbos = (void *) &pin_task_stack[0];
    3fee:	ed 01       	movw	r28, r26
    3ff0:	fc 83       	std	Y+4, r31	; 0x04
    3ff2:	eb 83       	std	Y+3, r30	; 0x03
	PIN_TASK.prio = 1;
    3ff4:	b2 83       	std	Z+2, r27	; 0x02
    3ff6:	a1 83       	std	Z+1, r26	; 0x01
	PIN_TASK.FirstActivation = TRUE;
    3ff8:	b0 93 de 05 	sts	0x05DE, r27
    3ffc:	a0 93 dd 05 	sts	0x05DD, r26
	PIN_TASK.Type = BASIC_TASK;
	PIN_TASK.SchType = PREEMPTIVE;
    4000:	e0 91 dd 05 	lds	r30, 0x05DD
    4004:	f0 91 de 05 	lds	r31, 0x05DE
    4008:	12 82       	std	Z+2, r1	; 0x02
    400a:	11 82       	std	Z+1, r1	; 0x01
    400c:	df 91       	pop	r29
    400e:	cf 91       	pop	r28
    4010:	08 95       	ret

00004012 <nrk_get_pid>:
    4012:	e0 91 7c 06 	lds	r30, 0x067C
    4016:	f0 91 7d 06 	lds	r31, 0x067D
    401a:	80 85       	ldd	r24, Z+8	; 0x08
    401c:	99 27       	eor	r25, r25
    401e:	08 95       	ret

00004020 <_nrk_wait_for_scheduler>:
    4020:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <nrk_idle>
    4024:	e0 91 7c 06 	lds	r30, 0x067C
    4028:	f0 91 7d 06 	lds	r31, 0x067D
    402c:	85 81       	ldd	r24, Z+5	; 0x05
    402e:	88 23       	and	r24, r24
    4030:	b9 f7       	brne	.-18     	; 0x4020 <_nrk_wait_for_scheduler>
    4032:	08 95       	ret

00004034 <nrk_wait>:
    4034:	ff 92       	push	r15
    4036:	0f 93       	push	r16
    4038:	1f 93       	push	r17
    403a:	cf 93       	push	r28
    403c:	df 93       	push	r29
    403e:	cd b7       	in	r28, 0x3d	; 61
    4040:	de b7       	in	r29, 0x3e	; 62
    4042:	28 97       	sbiw	r28, 0x08	; 8
    4044:	0f b6       	in	r0, 0x3f	; 63
    4046:	f8 94       	cli
    4048:	de bf       	out	0x3e, r29	; 62
    404a:	0f be       	out	0x3f, r0	; 63
    404c:	cd bf       	out	0x3d, r28	; 61
    404e:	29 83       	std	Y+1, r18	; 0x01
    4050:	3a 83       	std	Y+2, r19	; 0x02
    4052:	4b 83       	std	Y+3, r20	; 0x03
    4054:	5c 83       	std	Y+4, r21	; 0x04
    4056:	6d 83       	std	Y+5, r22	; 0x05
    4058:	7e 83       	std	Y+6, r23	; 0x06
    405a:	8f 83       	std	Y+7, r24	; 0x07
    405c:	98 87       	std	Y+8, r25	; 0x08
    405e:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <nrk_stack_check>
    4062:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <nrk_int_disable>
    4066:	e0 91 7c 06 	lds	r30, 0x067C
    406a:	f0 91 7d 06 	lds	r31, 0x067D
    406e:	81 e0       	ldi	r24, 0x01	; 1
    4070:	85 83       	std	Z+5, r24	; 0x05
    4072:	81 e0       	ldi	r24, 0x01	; 1
    4074:	90 e0       	ldi	r25, 0x00	; 0
    4076:	90 a3       	std	Z+32, r25	; 0x20
    4078:	87 8f       	std	Z+31, r24	; 0x1f
    407a:	0e 94 1f 28 	call	0x503e	; 0x503e <_nrk_os_timer_get>
    407e:	f8 2e       	mov	r15, r24
    4080:	29 81       	ldd	r18, Y+1	; 0x01
    4082:	3a 81       	ldd	r19, Y+2	; 0x02
    4084:	4b 81       	ldd	r20, Y+3	; 0x03
    4086:	5c 81       	ldd	r21, Y+4	; 0x04
    4088:	6d 81       	ldd	r22, Y+5	; 0x05
    408a:	7e 81       	ldd	r23, Y+6	; 0x06
    408c:	8f 81       	ldd	r24, Y+7	; 0x07
    408e:	98 85       	ldd	r25, Y+8	; 0x08
    4090:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <_nrk_time_to_ticks>
    4094:	e0 91 7c 06 	lds	r30, 0x067C
    4098:	f0 91 7d 06 	lds	r31, 0x067D
    409c:	0f 2d       	mov	r16, r15
    409e:	11 27       	eor	r17, r17
    40a0:	80 0f       	add	r24, r16
    40a2:	91 1f       	adc	r25, r17
    40a4:	96 8b       	std	Z+22, r25	; 0x16
    40a6:	85 8b       	std	Z+21, r24	; 0x15
    40a8:	87 ef       	ldi	r24, 0xF7	; 247
    40aa:	8f 15       	cp	r24, r15
    40ac:	70 f0       	brcs	.+28     	; 0x40ca <nrk_wait+0x96>
    40ae:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <_nrk_get_next_wakeup>
    40b2:	0e 5f       	subi	r16, 0xFE	; 254
    40b4:	1f 4f       	sbci	r17, 0xFF	; 255
    40b6:	99 27       	eor	r25, r25
    40b8:	80 17       	cp	r24, r16
    40ba:	91 07       	cpc	r25, r17
    40bc:	34 f0       	brlt	.+12     	; 0x40ca <nrk_wait+0x96>
    40be:	8f 2d       	mov	r24, r15
    40c0:	8e 5f       	subi	r24, 0xFE	; 254
    40c2:	80 93 ad 05 	sts	0x05AD, r24
    40c6:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_nrk_set_next_wakeup>
    40ca:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <nrk_int_enable>
    40ce:	0e 94 10 20 	call	0x4020	; 0x4020 <_nrk_wait_for_scheduler>
    40d2:	81 e0       	ldi	r24, 0x01	; 1
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	28 96       	adiw	r28, 0x08	; 8
    40d8:	0f b6       	in	r0, 0x3f	; 63
    40da:	f8 94       	cli
    40dc:	de bf       	out	0x3e, r29	; 62
    40de:	0f be       	out	0x3f, r0	; 63
    40e0:	cd bf       	out	0x3d, r28	; 61
    40e2:	df 91       	pop	r29
    40e4:	cf 91       	pop	r28
    40e6:	1f 91       	pop	r17
    40e8:	0f 91       	pop	r16
    40ea:	ff 90       	pop	r15
    40ec:	08 95       	ret

000040ee <nrk_wait_until>:
    40ee:	8f 92       	push	r8
    40f0:	9f 92       	push	r9
    40f2:	af 92       	push	r10
    40f4:	bf 92       	push	r11
    40f6:	cf 92       	push	r12
    40f8:	df 92       	push	r13
    40fa:	ef 92       	push	r14
    40fc:	ff 92       	push	r15
    40fe:	0f 93       	push	r16
    4100:	1f 93       	push	r17
    4102:	cf 93       	push	r28
    4104:	df 93       	push	r29
    4106:	cd b7       	in	r28, 0x3d	; 61
    4108:	de b7       	in	r29, 0x3e	; 62
    410a:	60 97       	sbiw	r28, 0x10	; 16
    410c:	0f b6       	in	r0, 0x3f	; 63
    410e:	f8 94       	cli
    4110:	de bf       	out	0x3e, r29	; 62
    4112:	0f be       	out	0x3f, r0	; 63
    4114:	cd bf       	out	0x3d, r28	; 61
    4116:	29 87       	std	Y+9, r18	; 0x09
    4118:	3a 87       	std	Y+10, r19	; 0x0a
    411a:	4b 87       	std	Y+11, r20	; 0x0b
    411c:	5c 87       	std	Y+12, r21	; 0x0c
    411e:	6d 87       	std	Y+13, r22	; 0x0d
    4120:	7e 87       	std	Y+14, r23	; 0x0e
    4122:	8f 87       	std	Y+15, r24	; 0x0f
    4124:	98 8b       	std	Y+16, r25	; 0x10
    4126:	ce 01       	movw	r24, r28
    4128:	01 96       	adiw	r24, 0x01	; 1
    412a:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <nrk_time_get>
    412e:	89 80       	ldd	r8, Y+1	; 0x01
    4130:	9a 80       	ldd	r9, Y+2	; 0x02
    4132:	ab 80       	ldd	r10, Y+3	; 0x03
    4134:	bc 80       	ldd	r11, Y+4	; 0x04
    4136:	cd 80       	ldd	r12, Y+5	; 0x05
    4138:	de 80       	ldd	r13, Y+6	; 0x06
    413a:	ef 80       	ldd	r14, Y+7	; 0x07
    413c:	f8 84       	ldd	r15, Y+8	; 0x08
    413e:	09 85       	ldd	r16, Y+9	; 0x09
    4140:	1a 85       	ldd	r17, Y+10	; 0x0a
    4142:	2b 85       	ldd	r18, Y+11	; 0x0b
    4144:	3c 85       	ldd	r19, Y+12	; 0x0c
    4146:	4d 85       	ldd	r20, Y+13	; 0x0d
    4148:	5e 85       	ldd	r21, Y+14	; 0x0e
    414a:	6f 85       	ldd	r22, Y+15	; 0x0f
    414c:	78 89       	ldd	r23, Y+16	; 0x10
    414e:	ce 01       	movw	r24, r28
    4150:	09 96       	adiw	r24, 0x09	; 9
    4152:	0e 94 5d 22 	call	0x44ba	; 0x44ba <nrk_time_sub>
    4156:	88 23       	and	r24, r24
    4158:	19 f4       	brne	.+6      	; 0x4160 <nrk_wait_until+0x72>
    415a:	8f ef       	ldi	r24, 0xFF	; 255
    415c:	9f ef       	ldi	r25, 0xFF	; 255
    415e:	0c c0       	rjmp	.+24     	; 0x4178 <nrk_wait_until+0x8a>
    4160:	29 85       	ldd	r18, Y+9	; 0x09
    4162:	3a 85       	ldd	r19, Y+10	; 0x0a
    4164:	4b 85       	ldd	r20, Y+11	; 0x0b
    4166:	5c 85       	ldd	r21, Y+12	; 0x0c
    4168:	6d 85       	ldd	r22, Y+13	; 0x0d
    416a:	7e 85       	ldd	r23, Y+14	; 0x0e
    416c:	8f 85       	ldd	r24, Y+15	; 0x0f
    416e:	98 89       	ldd	r25, Y+16	; 0x10
    4170:	0e 94 1a 20 	call	0x4034	; 0x4034 <nrk_wait>
    4174:	81 e0       	ldi	r24, 0x01	; 1
    4176:	90 e0       	ldi	r25, 0x00	; 0
    4178:	60 96       	adiw	r28, 0x10	; 16
    417a:	0f b6       	in	r0, 0x3f	; 63
    417c:	f8 94       	cli
    417e:	de bf       	out	0x3e, r29	; 62
    4180:	0f be       	out	0x3f, r0	; 63
    4182:	cd bf       	out	0x3d, r28	; 61
    4184:	df 91       	pop	r29
    4186:	cf 91       	pop	r28
    4188:	1f 91       	pop	r17
    418a:	0f 91       	pop	r16
    418c:	ff 90       	pop	r15
    418e:	ef 90       	pop	r14
    4190:	df 90       	pop	r13
    4192:	cf 90       	pop	r12
    4194:	bf 90       	pop	r11
    4196:	af 90       	pop	r10
    4198:	9f 90       	pop	r9
    419a:	8f 90       	pop	r8
    419c:	08 95       	ret

0000419e <nrk_wait_until_nw>:
    419e:	1f 93       	push	r17
    41a0:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <nrk_int_disable>
    41a4:	e0 91 7c 06 	lds	r30, 0x067C
    41a8:	f0 91 7d 06 	lds	r31, 0x067D
    41ac:	81 e0       	ldi	r24, 0x01	; 1
    41ae:	85 83       	std	Z+5, r24	; 0x05
    41b0:	86 83       	std	Z+6, r24	; 0x06
    41b2:	0e 94 1f 28 	call	0x503e	; 0x503e <_nrk_os_timer_get>
    41b6:	18 2f       	mov	r17, r24
    41b8:	88 3f       	cpi	r24, 0xF8	; 248
    41ba:	80 f4       	brcc	.+32     	; 0x41dc <nrk_wait_until_nw+0x3e>
    41bc:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <_nrk_get_next_wakeup>
    41c0:	21 2f       	mov	r18, r17
    41c2:	33 27       	eor	r19, r19
    41c4:	2e 5f       	subi	r18, 0xFE	; 254
    41c6:	3f 4f       	sbci	r19, 0xFF	; 255
    41c8:	99 27       	eor	r25, r25
    41ca:	82 17       	cp	r24, r18
    41cc:	93 07       	cpc	r25, r19
    41ce:	34 f0       	brlt	.+12     	; 0x41dc <nrk_wait_until_nw+0x3e>
    41d0:	81 2f       	mov	r24, r17
    41d2:	8e 5f       	subi	r24, 0xFE	; 254
    41d4:	80 93 ad 05 	sts	0x05AD, r24
    41d8:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_nrk_set_next_wakeup>
    41dc:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <nrk_int_enable>
    41e0:	0e 94 10 20 	call	0x4020	; 0x4020 <_nrk_wait_for_scheduler>
    41e4:	81 e0       	ldi	r24, 0x01	; 1
    41e6:	90 e0       	ldi	r25, 0x00	; 0
    41e8:	1f 91       	pop	r17
    41ea:	08 95       	ret

000041ec <nrk_set_next_wakeup>:
    41ec:	1f 93       	push	r17
    41ee:	cf 93       	push	r28
    41f0:	df 93       	push	r29
    41f2:	cd b7       	in	r28, 0x3d	; 61
    41f4:	de b7       	in	r29, 0x3e	; 62
    41f6:	28 97       	sbiw	r28, 0x08	; 8
    41f8:	0f b6       	in	r0, 0x3f	; 63
    41fa:	f8 94       	cli
    41fc:	de bf       	out	0x3e, r29	; 62
    41fe:	0f be       	out	0x3f, r0	; 63
    4200:	cd bf       	out	0x3d, r28	; 61
    4202:	29 83       	std	Y+1, r18	; 0x01
    4204:	3a 83       	std	Y+2, r19	; 0x02
    4206:	4b 83       	std	Y+3, r20	; 0x03
    4208:	5c 83       	std	Y+4, r21	; 0x04
    420a:	6d 83       	std	Y+5, r22	; 0x05
    420c:	7e 83       	std	Y+6, r23	; 0x06
    420e:	8f 83       	std	Y+7, r24	; 0x07
    4210:	98 87       	std	Y+8, r25	; 0x08
    4212:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <nrk_int_disable>
    4216:	0e 94 1f 28 	call	0x503e	; 0x503e <_nrk_os_timer_get>
    421a:	18 2f       	mov	r17, r24
    421c:	29 81       	ldd	r18, Y+1	; 0x01
    421e:	3a 81       	ldd	r19, Y+2	; 0x02
    4220:	4b 81       	ldd	r20, Y+3	; 0x03
    4222:	5c 81       	ldd	r21, Y+4	; 0x04
    4224:	6d 81       	ldd	r22, Y+5	; 0x05
    4226:	7e 81       	ldd	r23, Y+6	; 0x06
    4228:	8f 81       	ldd	r24, Y+7	; 0x07
    422a:	98 85       	ldd	r25, Y+8	; 0x08
    422c:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <_nrk_time_to_ticks>
    4230:	83 30       	cpi	r24, 0x03	; 3
    4232:	91 05       	cpc	r25, r1
    4234:	18 f4       	brcc	.+6      	; 0x423c <nrk_set_next_wakeup+0x50>
    4236:	8f ef       	ldi	r24, 0xFF	; 255
    4238:	9f ef       	ldi	r25, 0xFF	; 255
    423a:	0c c0       	rjmp	.+24     	; 0x4254 <nrk_set_next_wakeup+0x68>
    423c:	e0 91 7c 06 	lds	r30, 0x067C
    4240:	f0 91 7d 06 	lds	r31, 0x067D
    4244:	81 0f       	add	r24, r17
    4246:	91 1d       	adc	r25, r1
    4248:	96 8b       	std	Z+22, r25	; 0x16
    424a:	85 8b       	std	Z+21, r24	; 0x15
    424c:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <nrk_int_enable>
    4250:	81 e0       	ldi	r24, 0x01	; 1
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	28 96       	adiw	r28, 0x08	; 8
    4256:	0f b6       	in	r0, 0x3f	; 63
    4258:	f8 94       	cli
    425a:	de bf       	out	0x3e, r29	; 62
    425c:	0f be       	out	0x3f, r0	; 63
    425e:	cd bf       	out	0x3d, r28	; 61
    4260:	df 91       	pop	r29
    4262:	cf 91       	pop	r28
    4264:	1f 91       	pop	r17
    4266:	08 95       	ret

00004268 <nrk_wait_until_ticks>:
    4268:	0f 93       	push	r16
    426a:	1f 93       	push	r17
    426c:	8c 01       	movw	r16, r24
    426e:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <nrk_int_disable>
    4272:	e0 91 7c 06 	lds	r30, 0x067C
    4276:	f0 91 7d 06 	lds	r31, 0x067D
    427a:	81 e0       	ldi	r24, 0x01	; 1
    427c:	85 83       	std	Z+5, r24	; 0x05
    427e:	16 8b       	std	Z+22, r17	; 0x16
    4280:	05 8b       	std	Z+21, r16	; 0x15
    4282:	0e 94 1f 28 	call	0x503e	; 0x503e <_nrk_os_timer_get>
    4286:	08 2f       	mov	r16, r24
    4288:	88 3f       	cpi	r24, 0xF8	; 248
    428a:	80 f4       	brcc	.+32     	; 0x42ac <nrk_wait_until_ticks+0x44>
    428c:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <_nrk_get_next_wakeup>
    4290:	20 2f       	mov	r18, r16
    4292:	33 27       	eor	r19, r19
    4294:	2e 5f       	subi	r18, 0xFE	; 254
    4296:	3f 4f       	sbci	r19, 0xFF	; 255
    4298:	99 27       	eor	r25, r25
    429a:	82 17       	cp	r24, r18
    429c:	93 07       	cpc	r25, r19
    429e:	34 f0       	brlt	.+12     	; 0x42ac <nrk_wait_until_ticks+0x44>
    42a0:	80 2f       	mov	r24, r16
    42a2:	8e 5f       	subi	r24, 0xFE	; 254
    42a4:	80 93 ad 05 	sts	0x05AD, r24
    42a8:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_nrk_set_next_wakeup>
    42ac:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <nrk_int_enable>
    42b0:	0e 94 10 20 	call	0x4020	; 0x4020 <_nrk_wait_for_scheduler>
    42b4:	81 e0       	ldi	r24, 0x01	; 1
    42b6:	90 e0       	ldi	r25, 0x00	; 0
    42b8:	1f 91       	pop	r17
    42ba:	0f 91       	pop	r16
    42bc:	08 95       	ret

000042be <nrk_wait_ticks>:
    42be:	ff 92       	push	r15
    42c0:	0f 93       	push	r16
    42c2:	1f 93       	push	r17
    42c4:	cf 93       	push	r28
    42c6:	df 93       	push	r29
    42c8:	8c 01       	movw	r16, r24
    42ca:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <nrk_int_disable>
    42ce:	e0 91 7c 06 	lds	r30, 0x067C
    42d2:	f0 91 7d 06 	lds	r31, 0x067D
    42d6:	81 e0       	ldi	r24, 0x01	; 1
    42d8:	85 83       	std	Z+5, r24	; 0x05
    42da:	0e 94 1f 28 	call	0x503e	; 0x503e <_nrk_os_timer_get>
    42de:	f8 2e       	mov	r15, r24
    42e0:	e0 91 7c 06 	lds	r30, 0x067C
    42e4:	f0 91 7d 06 	lds	r31, 0x067D
    42e8:	c8 2f       	mov	r28, r24
    42ea:	dd 27       	eor	r29, r29
    42ec:	0c 0f       	add	r16, r28
    42ee:	1d 1f       	adc	r17, r29
    42f0:	16 8b       	std	Z+22, r17	; 0x16
    42f2:	05 8b       	std	Z+21, r16	; 0x15
    42f4:	87 ef       	ldi	r24, 0xF7	; 247
    42f6:	8f 15       	cp	r24, r15
    42f8:	68 f0       	brcs	.+26     	; 0x4314 <nrk_wait_ticks+0x56>
    42fa:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <_nrk_get_next_wakeup>
    42fe:	22 96       	adiw	r28, 0x02	; 2
    4300:	99 27       	eor	r25, r25
    4302:	8c 17       	cp	r24, r28
    4304:	9d 07       	cpc	r25, r29
    4306:	34 f0       	brlt	.+12     	; 0x4314 <nrk_wait_ticks+0x56>
    4308:	8f 2d       	mov	r24, r15
    430a:	8e 5f       	subi	r24, 0xFE	; 254
    430c:	80 93 ad 05 	sts	0x05AD, r24
    4310:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_nrk_set_next_wakeup>
    4314:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <nrk_int_enable>
    4318:	0e 94 10 20 	call	0x4020	; 0x4020 <_nrk_wait_for_scheduler>
    431c:	81 e0       	ldi	r24, 0x01	; 1
    431e:	90 e0       	ldi	r25, 0x00	; 0
    4320:	df 91       	pop	r29
    4322:	cf 91       	pop	r28
    4324:	1f 91       	pop	r17
    4326:	0f 91       	pop	r16
    4328:	ff 90       	pop	r15
    432a:	08 95       	ret

0000432c <nrk_wait_until_next_n_periods>:
    432c:	1f 93       	push	r17
    432e:	cf 93       	push	r28
    4330:	df 93       	push	r29
    4332:	ec 01       	movw	r28, r24
    4334:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <nrk_stack_check>
    4338:	20 97       	sbiw	r28, 0x00	; 0
    433a:	11 f4       	brne	.+4      	; 0x4340 <nrk_wait_until_next_n_periods+0x14>
    433c:	c1 e0       	ldi	r28, 0x01	; 1
    433e:	d0 e0       	ldi	r29, 0x00	; 0
    4340:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <nrk_int_disable>
    4344:	e0 91 7c 06 	lds	r30, 0x067C
    4348:	f0 91 7d 06 	lds	r31, 0x067D
    434c:	81 e0       	ldi	r24, 0x01	; 1
    434e:	85 83       	std	Z+5, r24	; 0x05
    4350:	d0 a3       	std	Z+32, r29	; 0x20
    4352:	c7 8f       	std	Z+31, r28	; 0x1f
    4354:	0e 94 1f 28 	call	0x503e	; 0x503e <_nrk_os_timer_get>
    4358:	18 2f       	mov	r17, r24
    435a:	88 3f       	cpi	r24, 0xF8	; 248
    435c:	80 f4       	brcc	.+32     	; 0x437e <nrk_wait_until_next_n_periods+0x52>
    435e:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <_nrk_get_next_wakeup>
    4362:	21 2f       	mov	r18, r17
    4364:	33 27       	eor	r19, r19
    4366:	2e 5f       	subi	r18, 0xFE	; 254
    4368:	3f 4f       	sbci	r19, 0xFF	; 255
    436a:	99 27       	eor	r25, r25
    436c:	82 17       	cp	r24, r18
    436e:	93 07       	cpc	r25, r19
    4370:	34 f0       	brlt	.+12     	; 0x437e <nrk_wait_until_next_n_periods+0x52>
    4372:	81 2f       	mov	r24, r17
    4374:	8e 5f       	subi	r24, 0xFE	; 254
    4376:	80 93 ad 05 	sts	0x05AD, r24
    437a:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_nrk_set_next_wakeup>
    437e:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <nrk_int_enable>
    4382:	0e 94 10 20 	call	0x4020	; 0x4020 <_nrk_wait_for_scheduler>
    4386:	81 e0       	ldi	r24, 0x01	; 1
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	df 91       	pop	r29
    438c:	cf 91       	pop	r28
    438e:	1f 91       	pop	r17
    4390:	08 95       	ret

00004392 <nrk_wait_until_next_period>:
    4392:	1f 93       	push	r17
    4394:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <nrk_stack_check>
    4398:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <nrk_int_disable>
    439c:	e0 91 7c 06 	lds	r30, 0x067C
    43a0:	f0 91 7d 06 	lds	r31, 0x067D
    43a4:	81 e0       	ldi	r24, 0x01	; 1
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	90 a3       	std	Z+32, r25	; 0x20
    43aa:	87 8f       	std	Z+31, r24	; 0x1f
    43ac:	81 e0       	ldi	r24, 0x01	; 1
    43ae:	85 83       	std	Z+5, r24	; 0x05
    43b0:	0e 94 1f 28 	call	0x503e	; 0x503e <_nrk_os_timer_get>
    43b4:	18 2f       	mov	r17, r24
    43b6:	88 3f       	cpi	r24, 0xF8	; 248
    43b8:	80 f4       	brcc	.+32     	; 0x43da <nrk_wait_until_next_period+0x48>
    43ba:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <_nrk_get_next_wakeup>
    43be:	21 2f       	mov	r18, r17
    43c0:	33 27       	eor	r19, r19
    43c2:	2e 5f       	subi	r18, 0xFE	; 254
    43c4:	3f 4f       	sbci	r19, 0xFF	; 255
    43c6:	99 27       	eor	r25, r25
    43c8:	82 17       	cp	r24, r18
    43ca:	93 07       	cpc	r25, r19
    43cc:	34 f0       	brlt	.+12     	; 0x43da <nrk_wait_until_next_period+0x48>
    43ce:	81 2f       	mov	r24, r17
    43d0:	8e 5f       	subi	r24, 0xFE	; 254
    43d2:	80 93 ad 05 	sts	0x05AD, r24
    43d6:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_nrk_set_next_wakeup>
    43da:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <nrk_int_enable>
    43de:	0e 94 10 20 	call	0x4020	; 0x4020 <_nrk_wait_for_scheduler>
    43e2:	81 e0       	ldi	r24, 0x01	; 1
    43e4:	90 e0       	ldi	r25, 0x00	; 0
    43e6:	1f 91       	pop	r17
    43e8:	08 95       	ret

000043ea <nrk_terminate_task>:
    43ea:	e0 91 7c 06 	lds	r30, 0x067C
    43ee:	f0 91 7d 06 	lds	r31, 0x067D
    43f2:	80 85       	ldd	r24, Z+8	; 0x08
    43f4:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <nrk_rem_from_readyQ>
    43f8:	e0 91 7c 06 	lds	r30, 0x067C
    43fc:	f0 91 7d 06 	lds	r31, 0x067D
    4400:	84 e0       	ldi	r24, 0x04	; 4
    4402:	81 87       	std	Z+9, r24	; 0x09
    4404:	0e 94 c9 21 	call	0x4392	; 0x4392 <nrk_wait_until_next_period>
    4408:	81 e0       	ldi	r24, 0x01	; 1
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	08 95       	ret

0000440e <nrk_activate_task>:
	PIN_TASK.cpu_reserve.secs = 0;
	PIN_TASK.cpu_reserve.nano_secs = 50 * NANOS_PER_MS;
	PIN_TASK.offset.secs = 0;
	PIN_TASK.offset.nano_secs = 0;
	nrk_activate_task (&PIN_TASK);
*/
    440e:	ef 92       	push	r14
    4410:	ff 92       	push	r15
    4412:	0f 93       	push	r16
    4414:	1f 93       	push	r17
    4416:	cf 93       	push	r28
    4418:	df 93       	push	r29
    441a:	ec 01       	movw	r28, r24

	RX_TASK.task = rx_task;
	RX_TASK.Ptos = (void *) &rx_task_stack[NRK_APP_STACKSIZE - 1];
	RX_TASK.Pbos = (void *) &rx_task_stack[0];
    441c:	4b 81       	ldd	r20, Y+3	; 0x03
    441e:	5c 81       	ldd	r21, Y+4	; 0x04
    4420:	69 81       	ldd	r22, Y+1	; 0x01
    4422:	7a 81       	ldd	r23, Y+2	; 0x02
    4424:	8d 81       	ldd	r24, Y+5	; 0x05
    4426:	9e 81       	ldd	r25, Y+6	; 0x06
    4428:	0e 94 ef 2a 	call	0x55de	; 0x55de <nrk_task_stk_init>
    442c:	bc 01       	movw	r22, r24
	RX_TASK.prio = 2;
	RX_TASK.FirstActivation = TRUE;
	RX_TASK.Type = BASIC_TASK;
	RX_TASK.SchType = PREEMPTIVE;
    442e:	8f 81       	ldd	r24, Y+7	; 0x07
    4430:	88 23       	and	r24, r24
    4432:	69 f0       	breq	.+26     	; 0x444e <nrk_activate_task+0x40>
	RX_TASK.period.secs = 0;
    4434:	4b 81       	ldd	r20, Y+3	; 0x03
    4436:	5c 81       	ldd	r21, Y+4	; 0x04
    4438:	ee 24       	eor	r14, r14
    443a:	ff 24       	eor	r15, r15
    443c:	00 e0       	ldi	r16, 0x00	; 0
    443e:	10 e0       	ldi	r17, 0x00	; 0
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	30 e0       	ldi	r19, 0x00	; 0
    4444:	ce 01       	movw	r24, r28
    4446:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <nrk_TCB_init>
	RX_TASK.period.nano_secs = 40 * NANOS_PER_MS;;
    444a:	1f 82       	std	Y+7, r1	; 0x07
    444c:	16 c0       	rjmp	.+44     	; 0x447a <nrk_activate_task+0x6c>
	RX_TASK.cpu_reserve.secs = 0;
	RX_TASK.cpu_reserve.nano_secs = 40 * NANOS_PER_MS;;
	RX_TASK.offset.secs = 0;
	RX_TASK.offset.nano_secs = 0;
    444e:	88 81       	ld	r24, Y
    4450:	99 27       	eor	r25, r25
    4452:	87 fd       	sbrc	r24, 7
    4454:	90 95       	com	r25
    4456:	fc 01       	movw	r30, r24
    4458:	a5 e0       	ldi	r26, 0x05	; 5
    445a:	ee 0f       	add	r30, r30
    445c:	ff 1f       	adc	r31, r31
    445e:	aa 95       	dec	r26
    4460:	e1 f7       	brne	.-8      	; 0x445a <nrk_activate_task+0x4c>
    4462:	e8 0f       	add	r30, r24
    4464:	f9 1f       	adc	r31, r25
    4466:	e1 52       	subi	r30, 0x21	; 33
    4468:	fa 4f       	sbci	r31, 0xFA	; 250
    446a:	81 85       	ldd	r24, Z+9	; 0x09
    446c:	83 30       	cpi	r24, 0x03	; 3
    446e:	19 f0       	breq	.+6      	; 0x4476 <nrk_activate_task+0x68>
    4470:	8f ef       	ldi	r24, 0xFF	; 255
    4472:	9f ef       	ldi	r25, 0xFF	; 255
    4474:	1b c0       	rjmp	.+54     	; 0x44ac <nrk_activate_task+0x9e>
	nrk_activate_task (&RX_TASK);

	printf ("Create done\r\n");
}
    4476:	71 83       	std	Z+1, r23	; 0x01
    4478:	60 83       	st	Z, r22
    447a:	88 81       	ld	r24, Y
    447c:	99 27       	eor	r25, r25
    447e:	87 fd       	sbrc	r24, 7
    4480:	90 95       	com	r25
    4482:	fc 01       	movw	r30, r24
    4484:	75 e0       	ldi	r23, 0x05	; 5
    4486:	ee 0f       	add	r30, r30
    4488:	ff 1f       	adc	r31, r31
    448a:	7a 95       	dec	r23
    448c:	e1 f7       	brne	.-8      	; 0x4486 <nrk_activate_task+0x78>
    448e:	e8 0f       	add	r30, r24
    4490:	f9 1f       	adc	r31, r25
    4492:	e1 52       	subi	r30, 0x21	; 33
    4494:	fa 4f       	sbci	r31, 0xFA	; 250
    4496:	85 89       	ldd	r24, Z+21	; 0x15
    4498:	96 89       	ldd	r25, Z+22	; 0x16
    449a:	89 2b       	or	r24, r25
    449c:	29 f4       	brne	.+10     	; 0x44a8 <nrk_activate_task+0x9a>
    449e:	82 e0       	ldi	r24, 0x02	; 2
    44a0:	81 87       	std	Z+9, r24	; 0x09
    44a2:	88 81       	ld	r24, Y
    44a4:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <nrk_add_to_readyQ>
    44a8:	81 e0       	ldi	r24, 0x01	; 1
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	df 91       	pop	r29
    44ae:	cf 91       	pop	r28
    44b0:	1f 91       	pop	r17
    44b2:	0f 91       	pop	r16
    44b4:	ff 90       	pop	r15
    44b6:	ef 90       	pop	r14
    44b8:	08 95       	ret

000044ba <nrk_time_sub>:
	nrk_led_clr (2);
	nrk_led_clr (3);

	nrk_time_set (0, 0);

	bmac_task_config ();
    44ba:	8f 92       	push	r8
    44bc:	9f 92       	push	r9
    44be:	af 92       	push	r10
    44c0:	bf 92       	push	r11
    44c2:	cf 92       	push	r12
    44c4:	df 92       	push	r13
    44c6:	ef 92       	push	r14
    44c8:	ff 92       	push	r15
    44ca:	0f 93       	push	r16
    44cc:	1f 93       	push	r17
    44ce:	cf 93       	push	r28
    44d0:	df 93       	push	r29
    44d2:	cd b7       	in	r28, 0x3d	; 61
    44d4:	de b7       	in	r29, 0x3e	; 62
    44d6:	60 97       	sbiw	r28, 0x10	; 16
    44d8:	0f b6       	in	r0, 0x3f	; 63
    44da:	f8 94       	cli
    44dc:	de bf       	out	0x3e, r29	; 62
    44de:	0f be       	out	0x3f, r0	; 63
    44e0:	cd bf       	out	0x3d, r28	; 61
    44e2:	fc 01       	movw	r30, r24
    44e4:	09 83       	std	Y+1, r16	; 0x01
    44e6:	1a 83       	std	Y+2, r17	; 0x02
    44e8:	2b 83       	std	Y+3, r18	; 0x03
    44ea:	3c 83       	std	Y+4, r19	; 0x04
    44ec:	4d 83       	std	Y+5, r20	; 0x05
    44ee:	5e 83       	std	Y+6, r21	; 0x06
    44f0:	6f 83       	std	Y+7, r22	; 0x07
    44f2:	78 87       	std	Y+8, r23	; 0x08
    44f4:	89 86       	std	Y+9, r8	; 0x09
    44f6:	9a 86       	std	Y+10, r9	; 0x0a
    44f8:	ab 86       	std	Y+11, r10	; 0x0b
    44fa:	bc 86       	std	Y+12, r11	; 0x0c
    44fc:	cd 86       	std	Y+13, r12	; 0x0d
    44fe:	de 86       	std	Y+14, r13	; 0x0e
    4500:	ef 86       	std	Y+15, r14	; 0x0f
    4502:	f8 8a       	std	Y+16, r15	; 0x10
    4504:	2d 81       	ldd	r18, Y+5	; 0x05
    4506:	3e 81       	ldd	r19, Y+6	; 0x06
    4508:	4f 81       	ldd	r20, Y+7	; 0x07
    450a:	58 85       	ldd	r21, Y+8	; 0x08
    450c:	89 81       	ldd	r24, Y+1	; 0x01
    450e:	9a 81       	ldd	r25, Y+2	; 0x02
    4510:	ab 81       	ldd	r26, Y+3	; 0x03
    4512:	bc 81       	ldd	r27, Y+4	; 0x04
    4514:	ad 84       	ldd	r10, Y+13	; 0x0d
    4516:	be 84       	ldd	r11, Y+14	; 0x0e
    4518:	cf 84       	ldd	r12, Y+15	; 0x0f
    451a:	d8 88       	ldd	r13, Y+16	; 0x10
    451c:	e9 84       	ldd	r14, Y+9	; 0x09
    451e:	fa 84       	ldd	r15, Y+10	; 0x0a
    4520:	0b 85       	ldd	r16, Y+11	; 0x0b
    4522:	1c 85       	ldd	r17, Y+12	; 0x0c

    4524:	8e 15       	cp	r24, r14
    4526:	9f 05       	cpc	r25, r15
    4528:	a0 07       	cpc	r26, r16
    452a:	b1 07       	cpc	r27, r17
    452c:	08 f4       	brcc	.+2      	; 0x4530 <nrk_time_sub+0x76>
    452e:	3f c0       	rjmp	.+126    	; 0x45ae <nrk_time_sub+0xf4>
	nrk_create_taskset ();
    4530:	e8 16       	cp	r14, r24
    4532:	f9 06       	cpc	r15, r25
    4534:	0a 07       	cpc	r16, r26
    4536:	1b 07       	cpc	r17, r27
    4538:	91 f4       	brne	.+36     	; 0x455e <nrk_time_sub+0xa4>
	nrk_start ();

    453a:	2a 15       	cp	r18, r10
    453c:	3b 05       	cpc	r19, r11
    453e:	4c 05       	cpc	r20, r12
    4540:	5d 05       	cpc	r21, r13
    4542:	a8 f1       	brcs	.+106    	; 0x45ae <nrk_time_sub+0xf4>
	return 0;
    4544:	2a 19       	sub	r18, r10
    4546:	3b 09       	sbc	r19, r11
    4548:	4c 09       	sbc	r20, r12
    454a:	5d 09       	sbc	r21, r13
    454c:	24 83       	std	Z+4, r18	; 0x04
    454e:	35 83       	std	Z+5, r19	; 0x05
    4550:	46 83       	std	Z+6, r20	; 0x06
    4552:	57 83       	std	Z+7, r21	; 0x07
}
    4554:	10 82       	st	Z, r1
    4556:	11 82       	std	Z+1, r1	; 0x01
    4558:	12 82       	std	Z+2, r1	; 0x02
    455a:	13 82       	std	Z+3, r1	; 0x03
    455c:	1c c0       	rjmp	.+56     	; 0x4596 <nrk_time_sub+0xdc>

void pin_task ()
{
    455e:	2a 15       	cp	r18, r10
    4560:	3b 05       	cpc	r19, r11
    4562:	4c 05       	cpc	r20, r12
    4564:	5d 05       	cpc	r21, r13
    4566:	d0 f4       	brcc	.+52     	; 0x459c <nrk_time_sub+0xe2>
	while(1) {
		nrk_led_toggle (RED_LED);
		nrk_wait_until_next_period ();
		nrk_led_toggle (BLUE_LED);
    4568:	01 97       	sbiw	r24, 0x01	; 1
    456a:	a1 09       	sbc	r26, r1
    456c:	b1 09       	sbc	r27, r1
    456e:	8e 19       	sub	r24, r14
    4570:	9f 09       	sbc	r25, r15
    4572:	a0 0b       	sbc	r26, r16
    4574:	b1 0b       	sbc	r27, r17
    4576:	80 83       	st	Z, r24
    4578:	91 83       	std	Z+1, r25	; 0x01
    457a:	a2 83       	std	Z+2, r26	; 0x02
    457c:	b3 83       	std	Z+3, r27	; 0x03
		nrk_wait_until_next_period ();
    457e:	20 50       	subi	r18, 0x00	; 0
    4580:	36 43       	sbci	r19, 0x36	; 54
    4582:	45 46       	sbci	r20, 0x65	; 101
    4584:	54 4c       	sbci	r21, 0xC4	; 196
    4586:	2a 19       	sub	r18, r10
    4588:	3b 09       	sbc	r19, r11
    458a:	4c 09       	sbc	r20, r12
    458c:	5d 09       	sbc	r21, r13
    458e:	24 83       	std	Z+4, r18	; 0x04
    4590:	35 83       	std	Z+5, r19	; 0x05
    4592:	46 83       	std	Z+6, r20	; 0x06
    4594:	57 83       	std	Z+7, r21	; 0x07
    4596:	81 e0       	ldi	r24, 0x01	; 1
    4598:	90 e0       	ldi	r25, 0x00	; 0
    459a:	0b c0       	rjmp	.+22     	; 0x45b2 <nrk_time_sub+0xf8>
	}
}

void rx_task ()
    459c:	8e 19       	sub	r24, r14
    459e:	9f 09       	sbc	r25, r15
    45a0:	a0 0b       	sbc	r26, r16
    45a2:	b1 0b       	sbc	r27, r17
    45a4:	80 83       	st	Z, r24
    45a6:	91 83       	std	Z+1, r25	; 0x01
    45a8:	a2 83       	std	Z+2, r26	; 0x02
    45aa:	b3 83       	std	Z+3, r27	; 0x03
    45ac:	ec cf       	rjmp	.-40     	; 0x4586 <nrk_time_sub+0xcc>
{
	uint8_t i, len;
    45ae:	80 e0       	ldi	r24, 0x00	; 0
    45b0:	90 e0       	ldi	r25, 0x00	; 0
    45b2:	60 96       	adiw	r28, 0x10	; 16
    45b4:	0f b6       	in	r0, 0x3f	; 63
    45b6:	f8 94       	cli
    45b8:	de bf       	out	0x3e, r29	; 62
    45ba:	0f be       	out	0x3f, r0	; 63
    45bc:	cd bf       	out	0x3d, r28	; 61
    45be:	df 91       	pop	r29
    45c0:	cf 91       	pop	r28
    45c2:	1f 91       	pop	r17
    45c4:	0f 91       	pop	r16
    45c6:	ff 90       	pop	r15
    45c8:	ef 90       	pop	r14
    45ca:	df 90       	pop	r13
    45cc:	cf 90       	pop	r12
    45ce:	bf 90       	pop	r11
    45d0:	af 90       	pop	r10
    45d2:	9f 90       	pop	r9
    45d4:	8f 90       	pop	r8
    45d6:	08 95       	ret

000045d8 <nrk_time_compact_nanos>:
	// bmac_set_cca_thresh(-45); 


	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
	// This sets the next RX buffer.
	// This can be called at anytime before releaseing the packet
    45d8:	fc 01       	movw	r30, r24
    45da:	13 c0       	rjmp	.+38     	; 0x4602 <nrk_time_compact_nanos+0x2a>
	// if you wish to do a zero-copy buffer switch
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);

    45dc:	80 50       	subi	r24, 0x00	; 0
    45de:	9a 4c       	sbci	r25, 0xCA	; 202
    45e0:	aa 49       	sbci	r26, 0x9A	; 154
    45e2:	bb 43       	sbci	r27, 0x3B	; 59
    45e4:	84 83       	std	Z+4, r24	; 0x04
    45e6:	95 83       	std	Z+5, r25	; 0x05
    45e8:	a6 83       	std	Z+6, r26	; 0x06
    45ea:	b7 83       	std	Z+7, r27	; 0x07
	bmac_auto_ack_disable();
    45ec:	80 81       	ld	r24, Z
    45ee:	91 81       	ldd	r25, Z+1	; 0x01
    45f0:	a2 81       	ldd	r26, Z+2	; 0x02
    45f2:	b3 81       	ldd	r27, Z+3	; 0x03
    45f4:	01 96       	adiw	r24, 0x01	; 1
    45f6:	a1 1d       	adc	r26, r1
    45f8:	b1 1d       	adc	r27, r1
    45fa:	80 83       	st	Z, r24
    45fc:	91 83       	std	Z+1, r25	; 0x01
    45fe:	a2 83       	std	Z+2, r26	; 0x02
    4600:	b3 83       	std	Z+3, r27	; 0x03


	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
	// This sets the next RX buffer.
	// This can be called at anytime before releaseing the packet
	// if you wish to do a zero-copy buffer switch
    4602:	84 81       	ldd	r24, Z+4	; 0x04
    4604:	95 81       	ldd	r25, Z+5	; 0x05
    4606:	a6 81       	ldd	r26, Z+6	; 0x06
    4608:	b7 81       	ldd	r27, Z+7	; 0x07
    460a:	80 30       	cpi	r24, 0x00	; 0
    460c:	2a ec       	ldi	r18, 0xCA	; 202
    460e:	92 07       	cpc	r25, r18
    4610:	2a e9       	ldi	r18, 0x9A	; 154
    4612:	a2 07       	cpc	r26, r18
    4614:	2b e3       	ldi	r18, 0x3B	; 59
    4616:	b2 07       	cpc	r27, r18
    4618:	08 f7       	brcc	.-62     	; 0x45dc <nrk_time_compact_nanos+0x4>
    461a:	08 95       	ret

0000461c <nrk_time_add>:
	printf ("rx_task PID=%d\r\n", nrk_get_pid ());

	// init bmac on channel 25 
	bmac_init (25);

	// By default the RX check rate is 100ms
    461c:	8f 92       	push	r8
    461e:	9f 92       	push	r9
    4620:	af 92       	push	r10
    4622:	bf 92       	push	r11
    4624:	cf 92       	push	r12
    4626:	df 92       	push	r13
    4628:	ef 92       	push	r14
    462a:	ff 92       	push	r15
    462c:	0f 93       	push	r16
    462e:	1f 93       	push	r17
    4630:	cf 93       	push	r28
    4632:	df 93       	push	r29
    4634:	cd b7       	in	r28, 0x3d	; 61
    4636:	de b7       	in	r29, 0x3e	; 62
    4638:	60 97       	sbiw	r28, 0x10	; 16
    463a:	0f b6       	in	r0, 0x3f	; 63
    463c:	f8 94       	cli
    463e:	de bf       	out	0x3e, r29	; 62
    4640:	0f be       	out	0x3f, r0	; 63
    4642:	cd bf       	out	0x3d, r28	; 61
    4644:	fc 01       	movw	r30, r24
    4646:	09 83       	std	Y+1, r16	; 0x01
    4648:	1a 83       	std	Y+2, r17	; 0x02
    464a:	2b 83       	std	Y+3, r18	; 0x03
    464c:	3c 83       	std	Y+4, r19	; 0x04
    464e:	4d 83       	std	Y+5, r20	; 0x05
    4650:	5e 83       	std	Y+6, r21	; 0x06
    4652:	6f 83       	std	Y+7, r22	; 0x07
    4654:	78 87       	std	Y+8, r23	; 0x08
    4656:	89 86       	std	Y+9, r8	; 0x09
    4658:	9a 86       	std	Y+10, r9	; 0x0a
    465a:	ab 86       	std	Y+11, r10	; 0x0b
    465c:	bc 86       	std	Y+12, r11	; 0x0c
    465e:	cd 86       	std	Y+13, r12	; 0x0d
    4660:	de 86       	std	Y+14, r13	; 0x0e
    4662:	ef 86       	std	Y+15, r14	; 0x0f
    4664:	f8 8a       	std	Y+16, r15	; 0x10
    4666:	ad 80       	ldd	r10, Y+5	; 0x05
    4668:	be 80       	ldd	r11, Y+6	; 0x06
    466a:	cf 80       	ldd	r12, Y+7	; 0x07
    466c:	d8 84       	ldd	r13, Y+8	; 0x08
    466e:	ed 84       	ldd	r14, Y+13	; 0x0d
    4670:	fe 84       	ldd	r15, Y+14	; 0x0e
    4672:	0f 85       	ldd	r16, Y+15	; 0x0f
    4674:	18 89       	ldd	r17, Y+16	; 0x10
	// below shows how to change that
    4676:	89 85       	ldd	r24, Y+9	; 0x09
    4678:	9a 85       	ldd	r25, Y+10	; 0x0a
    467a:	ab 85       	ldd	r26, Y+11	; 0x0b
    467c:	bc 85       	ldd	r27, Y+12	; 0x0c
    467e:	29 81       	ldd	r18, Y+1	; 0x01
    4680:	3a 81       	ldd	r19, Y+2	; 0x02
    4682:	4b 81       	ldd	r20, Y+3	; 0x03
    4684:	5c 81       	ldd	r21, Y+4	; 0x04
    4686:	82 0f       	add	r24, r18
    4688:	93 1f       	adc	r25, r19
    468a:	a4 1f       	adc	r26, r20
    468c:	b5 1f       	adc	r27, r21
    468e:	80 83       	st	Z, r24
    4690:	91 83       	std	Z+1, r25	; 0x01
    4692:	a2 83       	std	Z+2, r26	; 0x02
    4694:	b3 83       	std	Z+3, r27	; 0x03
	check_period.secs=0;
    4696:	ea 0c       	add	r14, r10
    4698:	fb 1c       	adc	r15, r11
    469a:	0c 1d       	adc	r16, r12
    469c:	1d 1d       	adc	r17, r13
    469e:	e4 82       	std	Z+4, r14	; 0x04
    46a0:	f5 82       	std	Z+5, r15	; 0x05
    46a2:	06 83       	std	Z+6, r16	; 0x06
    46a4:	17 83       	std	Z+7, r17	; 0x07
	check_period.nano_secs=40*NANOS_PER_MS; // Fastest we could safely go
    46a6:	cf 01       	movw	r24, r30
    46a8:	0e 94 ec 22 	call	0x45d8	; 0x45d8 <nrk_time_compact_nanos>
	val=bmac_set_rx_check_rate(check_period);

    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	60 96       	adiw	r28, 0x10	; 16
    46b2:	0f b6       	in	r0, 0x3f	; 63
    46b4:	f8 94       	cli
    46b6:	de bf       	out	0x3e, r29	; 62
    46b8:	0f be       	out	0x3f, r0	; 63
    46ba:	cd bf       	out	0x3d, r28	; 61
    46bc:	df 91       	pop	r29
    46be:	cf 91       	pop	r28
    46c0:	1f 91       	pop	r17
    46c2:	0f 91       	pop	r16
    46c4:	ff 90       	pop	r15
    46c6:	ef 90       	pop	r14
    46c8:	df 90       	pop	r13
    46ca:	cf 90       	pop	r12
    46cc:	bf 90       	pop	r11
    46ce:	af 90       	pop	r10
    46d0:	9f 90       	pop	r9
    46d2:	8f 90       	pop	r8
    46d4:	08 95       	ret

000046d6 <nrk_time_set>:
	nrk_gpio_direction(NRK_DEBUG_3,NRK_PIN_OUTPUT);//PD.1
	nrk_gpio_direction(NRK_DEBUG_2,NRK_PIN_OUTPUT);//PD.0
	nrk_gpio_direction(NRK_DEBUG_0,NRK_PIN_OUTPUT);//PA.3
	nrk_gpio_direction(NRK_DEBUG_1,NRK_PIN_OUTPUT);//PA.4

	while (1) {
    46d6:	60 93 73 06 	sts	0x0673, r22
    46da:	70 93 74 06 	sts	0x0674, r23
    46de:	80 93 75 06 	sts	0x0675, r24
    46e2:	90 93 76 06 	sts	0x0676, r25
		// Wait until an RX packet is received
    46e6:	20 93 77 06 	sts	0x0677, r18
    46ea:	30 93 78 06 	sts	0x0678, r19
    46ee:	40 93 79 06 	sts	0x0679, r20
    46f2:	50 93 7a 06 	sts	0x067A, r21
    46f6:	08 95       	ret

000046f8 <_nrk_time_to_ticks>:
		val = bmac_wait_until_rx_pkt ();
		// Get the RX packet 
		//nrk_led_set (ORANGE_LED);
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
    46f8:	8f 92       	push	r8
    46fa:	9f 92       	push	r9
    46fc:	af 92       	push	r10
    46fe:	bf 92       	push	r11
    4700:	cf 92       	push	r12
    4702:	df 92       	push	r13
    4704:	ef 92       	push	r14
    4706:	ff 92       	push	r15
    4708:	0f 93       	push	r16
    470a:	1f 93       	push	r17
    470c:	cf 93       	push	r28
    470e:	df 93       	push	r29
    4710:	cd b7       	in	r28, 0x3d	; 61
    4712:	de b7       	in	r29, 0x3e	; 62
    4714:	28 97       	sbiw	r28, 0x08	; 8
    4716:	0f b6       	in	r0, 0x3f	; 63
    4718:	f8 94       	cli
    471a:	de bf       	out	0x3e, r29	; 62
    471c:	0f be       	out	0x3f, r0	; 63
    471e:	cd bf       	out	0x3d, r28	; 61
    4720:	29 83       	std	Y+1, r18	; 0x01
    4722:	3a 83       	std	Y+2, r19	; 0x02
    4724:	4b 83       	std	Y+3, r20	; 0x03
    4726:	5c 83       	std	Y+4, r21	; 0x04
    4728:	6d 83       	std	Y+5, r22	; 0x05
    472a:	7e 83       	std	Y+6, r23	; 0x06
    472c:	8f 83       	std	Y+7, r24	; 0x07
    472e:	98 87       	std	Y+8, r25	; 0x08
    4730:	8d 80       	ldd	r8, Y+5	; 0x05
    4732:	9e 80       	ldd	r9, Y+6	; 0x06
    4734:	af 80       	ldd	r10, Y+7	; 0x07
    4736:	b8 84       	ldd	r11, Y+8	; 0x08
    4738:	e9 80       	ldd	r14, Y+1	; 0x01
    473a:	fa 80       	ldd	r15, Y+2	; 0x02
    473c:	0b 81       	ldd	r16, Y+3	; 0x03
    473e:	1c 81       	ldd	r17, Y+4	; 0x04
		
		printf ("%c=%c\r\n", rx_buf[0], rx_buf[2]);
		
		switch(rx_buf[0]) {
			case 'A': // ~0xxx
    4740:	e1 14       	cp	r14, r1
    4742:	f1 04       	cpc	r15, r1
    4744:	01 05       	cpc	r16, r1
    4746:	11 05       	cpc	r17, r1
    4748:	01 f1       	breq	.+64     	; 0x478a <_nrk_time_to_ticks+0x92>
				nrk_led_clr(RED_LED);
				nrk_gpio_set(NRK_DEBUG_3);
    474a:	80 e0       	ldi	r24, 0x00	; 0
    474c:	9a ec       	ldi	r25, 0xCA	; 202
    474e:	aa e9       	ldi	r26, 0x9A	; 154
    4750:	bb e3       	ldi	r27, 0x3B	; 59
    4752:	88 0e       	add	r8, r24
    4754:	99 1e       	adc	r9, r25
    4756:	aa 1e       	adc	r10, r26
    4758:	bb 1e       	adc	r11, r27
				break;
			case 'B': // ~1xxx
    475a:	c5 01       	movw	r24, r10
    475c:	b4 01       	movw	r22, r8
    475e:	23 eb       	ldi	r18, 0xB3	; 179
    4760:	36 ee       	ldi	r19, 0xE6	; 230
    4762:	4e e0       	ldi	r20, 0x0E	; 14
    4764:	50 e0       	ldi	r21, 0x00	; 0
    4766:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__udivmodsi4>
    476a:	69 01       	movw	r12, r18
				nrk_led_set(RED_LED);
    476c:	08 94       	sec
    476e:	e1 08       	sbc	r14, r1
    4770:	f1 08       	sbc	r15, r1
    4772:	01 09       	sbc	r16, r1
    4774:	11 09       	sbc	r17, r1
    4776:	8a e0       	ldi	r24, 0x0A	; 10
    4778:	ee 0c       	add	r14, r14
    477a:	ff 1c       	adc	r15, r15
    477c:	00 1f       	adc	r16, r16
    477e:	11 1f       	adc	r17, r17
    4780:	8a 95       	dec	r24
    4782:	d1 f7       	brne	.-12     	; 0x4778 <_nrk_time_to_ticks+0x80>
    4784:	ce 0c       	add	r12, r14
    4786:	df 1c       	adc	r13, r15
    4788:	09 c0       	rjmp	.+18     	; 0x479c <_nrk_time_to_ticks+0xa4>
				nrk_gpio_clr(NRK_DEBUG_3);
				break;
		}
    478a:	c5 01       	movw	r24, r10
    478c:	b4 01       	movw	r22, r8
    478e:	23 eb       	ldi	r18, 0xB3	; 179
    4790:	36 ee       	ldi	r19, 0xE6	; 230
    4792:	4e e0       	ldi	r20, 0x0E	; 14
    4794:	50 e0       	ldi	r21, 0x00	; 0
    4796:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__udivmodsi4>
    479a:	69 01       	movw	r12, r18
    479c:	b6 01       	movw	r22, r12
    479e:	02 c0       	rjmp	.+4      	; 0x47a4 <_nrk_time_to_ticks+0xac>

		switch(rx_buf[2]) {
			case '-': // ~x000
				nrk_gpio_set(NRK_DEBUG_0);
    47a0:	60 50       	subi	r22, 0x00	; 0
    47a2:	74 40       	sbci	r23, 0x04	; 4
    47a4:	94 e0       	ldi	r25, 0x04	; 4
    47a6:	61 30       	cpi	r22, 0x01	; 1
    47a8:	79 07       	cpc	r23, r25
    47aa:	d0 f7       	brcc	.-12     	; 0x47a0 <_nrk_time_to_ticks+0xa8>
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
    47ac:	88 27       	eor	r24, r24
    47ae:	99 27       	eor	r25, r25
    47b0:	23 eb       	ldi	r18, 0xB3	; 179
    47b2:	36 ee       	ldi	r19, 0xE6	; 230
    47b4:	4e e0       	ldi	r20, 0x0E	; 14
    47b6:	50 e0       	ldi	r21, 0x00	; 0
    47b8:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <__mulsi3>
    47bc:	67 5a       	subi	r22, 0xA7	; 167
    47be:	7c 48       	sbci	r23, 0x8C	; 140
    47c0:	88 4f       	sbci	r24, 0xF8	; 248
    47c2:	9f 4f       	sbci	r25, 0xFF	; 255
    47c4:	68 15       	cp	r22, r8
    47c6:	79 05       	cpc	r23, r9
    47c8:	8a 05       	cpc	r24, r10
    47ca:	9b 05       	cpc	r25, r11
    47cc:	18 f4       	brcc	.+6      	; 0x47d4 <_nrk_time_to_ticks+0xdc>
    47ce:	08 94       	sec
    47d0:	c1 1c       	adc	r12, r1
    47d2:	d1 1c       	adc	r13, r1
				nrk_led_clr(BLUE_LED);
				nrk_led_clr(GREEN_LED);
				break;
			case 'U': // ~x001
				nrk_gpio_clr(NRK_DEBUG_0);
    47d4:	c6 01       	movw	r24, r12
    47d6:	28 96       	adiw	r28, 0x08	; 8
    47d8:	0f b6       	in	r0, 0x3f	; 63
    47da:	f8 94       	cli
    47dc:	de bf       	out	0x3e, r29	; 62
    47de:	0f be       	out	0x3f, r0	; 63
    47e0:	cd bf       	out	0x3d, r28	; 61
    47e2:	df 91       	pop	r29
    47e4:	cf 91       	pop	r28
    47e6:	1f 91       	pop	r17
    47e8:	0f 91       	pop	r16
    47ea:	ff 90       	pop	r15
    47ec:	ef 90       	pop	r14
    47ee:	df 90       	pop	r13
    47f0:	cf 90       	pop	r12
    47f2:	bf 90       	pop	r11
    47f4:	af 90       	pop	r10
    47f6:	9f 90       	pop	r9
    47f8:	8f 90       	pop	r8
    47fa:	08 95       	ret

000047fc <_nrk_ticks_to_time>:
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
    47fc:	2f 92       	push	r2
    47fe:	3f 92       	push	r3
    4800:	4f 92       	push	r4
    4802:	5f 92       	push	r5
    4804:	6f 92       	push	r6
    4806:	7f 92       	push	r7
    4808:	8f 92       	push	r8
    480a:	9f 92       	push	r9
    480c:	af 92       	push	r10
    480e:	bf 92       	push	r11
    4810:	cf 92       	push	r12
    4812:	df 92       	push	r13
    4814:	ef 92       	push	r14
    4816:	ff 92       	push	r15
    4818:	0f 93       	push	r16
    481a:	1f 93       	push	r17
    481c:	cf 93       	push	r28
    481e:	df 93       	push	r29
    4820:	cd b7       	in	r28, 0x3d	; 61
    4822:	de b7       	in	r29, 0x3e	; 62
    4824:	28 97       	sbiw	r28, 0x08	; 8
    4826:	0f b6       	in	r0, 0x3f	; 63
    4828:	f8 94       	cli
    482a:	de bf       	out	0x3e, r29	; 62
    482c:	0f be       	out	0x3f, r0	; 63
    482e:	cd bf       	out	0x3d, r28	; 61
    4830:	7b 01       	movw	r14, r22
    4832:	8c 01       	movw	r16, r24
				nrk_led_clr(BLUE_LED);
				nrk_led_clr(GREEN_LED);
				break;
			case 'D': // ~x010
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_clr(NRK_DEBUG_1);
    4834:	73 70       	andi	r23, 0x03	; 3
    4836:	80 70       	andi	r24, 0x00	; 0
    4838:	90 70       	andi	r25, 0x00	; 0
    483a:	23 eb       	ldi	r18, 0xB3	; 179
    483c:	36 ee       	ldi	r19, 0xE6	; 230
    483e:	4e e0       	ldi	r20, 0x0E	; 14
    4840:	50 e0       	ldi	r21, 0x00	; 0
    4842:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <__mulsi3>
    4846:	6d 83       	std	Y+5, r22	; 0x05
    4848:	7e 83       	std	Y+6, r23	; 0x06
    484a:	8f 83       	std	Y+7, r24	; 0x07
    484c:	98 87       	std	Y+8, r25	; 0x08
    484e:	9a e0       	ldi	r25, 0x0A	; 10
    4850:	16 95       	lsr	r17
    4852:	07 95       	ror	r16
    4854:	f7 94       	ror	r15
    4856:	e7 94       	ror	r14
    4858:	9a 95       	dec	r25
    485a:	d1 f7       	brne	.-12     	; 0x4850 <_nrk_ticks_to_time+0x54>
    485c:	e9 82       	std	Y+1, r14	; 0x01
    485e:	fa 82       	std	Y+2, r15	; 0x02
    4860:	0b 83       	std	Y+3, r16	; 0x03
    4862:	1c 83       	std	Y+4, r17	; 0x04
    4864:	98 85       	ldd	r25, Y+8	; 0x08
    4866:	29 80       	ldd	r2, Y+1	; 0x01
    4868:	3a 80       	ldd	r3, Y+2	; 0x02
    486a:	4b 80       	ldd	r4, Y+3	; 0x03
    486c:	5c 80       	ldd	r5, Y+4	; 0x04
    486e:	6d 80       	ldd	r6, Y+5	; 0x05
    4870:	7e 80       	ldd	r7, Y+6	; 0x06
    4872:	8f 80       	ldd	r8, Y+7	; 0x07
				nrk_gpio_set(NRK_DEBUG_2);
    4874:	22 2d       	mov	r18, r2
    4876:	33 2d       	mov	r19, r3
    4878:	44 2d       	mov	r20, r4
    487a:	55 2d       	mov	r21, r5
    487c:	66 2d       	mov	r22, r6
    487e:	77 2d       	mov	r23, r7
    4880:	88 2d       	mov	r24, r8
    4882:	28 96       	adiw	r28, 0x08	; 8
    4884:	0f b6       	in	r0, 0x3f	; 63
    4886:	f8 94       	cli
    4888:	de bf       	out	0x3e, r29	; 62
    488a:	0f be       	out	0x3f, r0	; 63
    488c:	cd bf       	out	0x3d, r28	; 61
    488e:	df 91       	pop	r29
    4890:	cf 91       	pop	r28
    4892:	1f 91       	pop	r17
    4894:	0f 91       	pop	r16
    4896:	ff 90       	pop	r15
    4898:	ef 90       	pop	r14
    489a:	df 90       	pop	r13
    489c:	cf 90       	pop	r12
    489e:	bf 90       	pop	r11
    48a0:	af 90       	pop	r10
    48a2:	9f 90       	pop	r9
    48a4:	8f 90       	pop	r8
    48a6:	7f 90       	pop	r7
    48a8:	6f 90       	pop	r6
    48aa:	5f 90       	pop	r5
    48ac:	4f 90       	pop	r4
    48ae:	3f 90       	pop	r3
    48b0:	2f 90       	pop	r2
    48b2:	08 95       	ret

000048b4 <_nrk_time_to_ticks_long>:
				nrk_led_clr(ORANGE_LED);
				nrk_led_set(BLUE_LED);
				nrk_led_clr(GREEN_LED);
    48b4:	af 92       	push	r10
    48b6:	bf 92       	push	r11
    48b8:	cf 92       	push	r12
    48ba:	df 92       	push	r13
    48bc:	ef 92       	push	r14
    48be:	ff 92       	push	r15
    48c0:	0f 93       	push	r16
    48c2:	1f 93       	push	r17
    48c4:	cf 93       	push	r28
    48c6:	df 93       	push	r29
    48c8:	cd b7       	in	r28, 0x3d	; 61
    48ca:	de b7       	in	r29, 0x3e	; 62
    48cc:	28 97       	sbiw	r28, 0x08	; 8
    48ce:	0f b6       	in	r0, 0x3f	; 63
    48d0:	f8 94       	cli
    48d2:	de bf       	out	0x3e, r29	; 62
    48d4:	0f be       	out	0x3f, r0	; 63
    48d6:	cd bf       	out	0x3d, r28	; 61
    48d8:	29 83       	std	Y+1, r18	; 0x01
    48da:	3a 83       	std	Y+2, r19	; 0x02
    48dc:	4b 83       	std	Y+3, r20	; 0x03
    48de:	5c 83       	std	Y+4, r21	; 0x04
    48e0:	6d 83       	std	Y+5, r22	; 0x05
    48e2:	7e 83       	std	Y+6, r23	; 0x06
    48e4:	8f 83       	std	Y+7, r24	; 0x07
    48e6:	98 87       	std	Y+8, r25	; 0x08
    48e8:	ad 80       	ldd	r10, Y+5	; 0x05
    48ea:	be 80       	ldd	r11, Y+6	; 0x06
    48ec:	cf 80       	ldd	r12, Y+7	; 0x07
    48ee:	d8 84       	ldd	r13, Y+8	; 0x08
    48f0:	e9 80       	ldd	r14, Y+1	; 0x01
    48f2:	fa 80       	ldd	r15, Y+2	; 0x02
    48f4:	0b 81       	ldd	r16, Y+3	; 0x03
    48f6:	1c 81       	ldd	r17, Y+4	; 0x04
				break;
			case 'L': // ~x011
				nrk_gpio_clr(NRK_DEBUG_0);
				nrk_gpio_clr(NRK_DEBUG_1);
    48f8:	e1 14       	cp	r14, r1
    48fa:	f1 04       	cpc	r15, r1
    48fc:	01 05       	cpc	r16, r1
    48fe:	11 05       	cpc	r17, r1
    4900:	09 f1       	breq	.+66     	; 0x4944 <_nrk_time_to_ticks_long+0x90>
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
    4902:	80 e0       	ldi	r24, 0x00	; 0
    4904:	9a ec       	ldi	r25, 0xCA	; 202
    4906:	aa e9       	ldi	r26, 0x9A	; 154
    4908:	bb e3       	ldi	r27, 0x3B	; 59
    490a:	a8 0e       	add	r10, r24
    490c:	b9 1e       	adc	r11, r25
    490e:	ca 1e       	adc	r12, r26
    4910:	db 1e       	adc	r13, r27
				nrk_led_set(BLUE_LED);
				nrk_led_clr(GREEN_LED);
    4912:	c6 01       	movw	r24, r12
    4914:	b5 01       	movw	r22, r10
    4916:	23 eb       	ldi	r18, 0xB3	; 179
    4918:	36 ee       	ldi	r19, 0xE6	; 230
    491a:	4e e0       	ldi	r20, 0x0E	; 14
    491c:	50 e0       	ldi	r21, 0x00	; 0
    491e:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__udivmodsi4>
				break;
    4922:	08 94       	sec
    4924:	e1 08       	sbc	r14, r1
    4926:	f1 08       	sbc	r15, r1
    4928:	01 09       	sbc	r16, r1
    492a:	11 09       	sbc	r17, r1
    492c:	6a e0       	ldi	r22, 0x0A	; 10
    492e:	ee 0c       	add	r14, r14
    4930:	ff 1c       	adc	r15, r15
    4932:	00 1f       	adc	r16, r16
    4934:	11 1f       	adc	r17, r17
    4936:	6a 95       	dec	r22
    4938:	d1 f7       	brne	.-12     	; 0x492e <_nrk_time_to_ticks_long+0x7a>
    493a:	e2 0e       	add	r14, r18
    493c:	f3 1e       	adc	r15, r19
    493e:	04 1f       	adc	r16, r20
    4940:	15 1f       	adc	r17, r21
    4942:	0a c0       	rjmp	.+20     	; 0x4958 <_nrk_time_to_ticks_long+0xa4>
			case 'R': // ~x100
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
    4944:	c6 01       	movw	r24, r12
    4946:	b5 01       	movw	r22, r10
    4948:	23 eb       	ldi	r18, 0xB3	; 179
    494a:	36 ee       	ldi	r19, 0xE6	; 230
    494c:	4e e0       	ldi	r20, 0x0E	; 14
    494e:	50 e0       	ldi	r21, 0x00	; 0
    4950:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__udivmodsi4>
    4954:	79 01       	movw	r14, r18
    4956:	8a 01       	movw	r16, r20
    4958:	c8 01       	movw	r24, r16
    495a:	b7 01       	movw	r22, r14
    495c:	04 c0       	rjmp	.+8      	; 0x4966 <_nrk_time_to_ticks_long+0xb2>
				nrk_gpio_clr(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
				nrk_led_set(GREEN_LED);
    495e:	60 50       	subi	r22, 0x00	; 0
    4960:	74 40       	sbci	r23, 0x04	; 4
    4962:	80 40       	sbci	r24, 0x00	; 0
    4964:	90 40       	sbci	r25, 0x00	; 0
    4966:	61 30       	cpi	r22, 0x01	; 1
    4968:	a4 e0       	ldi	r26, 0x04	; 4
    496a:	7a 07       	cpc	r23, r26
    496c:	a0 e0       	ldi	r26, 0x00	; 0
    496e:	8a 07       	cpc	r24, r26
    4970:	a0 e0       	ldi	r26, 0x00	; 0
    4972:	9a 07       	cpc	r25, r26
    4974:	a0 f7       	brcc	.-24     	; 0x495e <_nrk_time_to_ticks_long+0xaa>
				break;
			case 'B': // ~x101
				nrk_gpio_clr(NRK_DEBUG_0);
    4976:	23 eb       	ldi	r18, 0xB3	; 179
    4978:	36 ee       	ldi	r19, 0xE6	; 230
    497a:	4e e0       	ldi	r20, 0x0E	; 14
    497c:	50 e0       	ldi	r21, 0x00	; 0
    497e:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <__mulsi3>
    4982:	67 5a       	subi	r22, 0xA7	; 167
    4984:	7c 48       	sbci	r23, 0x8C	; 140
    4986:	88 4f       	sbci	r24, 0xF8	; 248
    4988:	9f 4f       	sbci	r25, 0xFF	; 255
    498a:	6a 15       	cp	r22, r10
    498c:	7b 05       	cpc	r23, r11
    498e:	8c 05       	cpc	r24, r12
    4990:	9d 05       	cpc	r25, r13
    4992:	28 f4       	brcc	.+10     	; 0x499e <_nrk_time_to_ticks_long+0xea>
    4994:	08 94       	sec
    4996:	e1 1c       	adc	r14, r1
    4998:	f1 1c       	adc	r15, r1
    499a:	01 1d       	adc	r16, r1
    499c:	11 1d       	adc	r17, r1
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_clr(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
				nrk_led_set(GREEN_LED);
    499e:	c8 01       	movw	r24, r16
    49a0:	b7 01       	movw	r22, r14
    49a2:	28 96       	adiw	r28, 0x08	; 8
    49a4:	0f b6       	in	r0, 0x3f	; 63
    49a6:	f8 94       	cli
    49a8:	de bf       	out	0x3e, r29	; 62
    49aa:	0f be       	out	0x3f, r0	; 63
    49ac:	cd bf       	out	0x3d, r28	; 61
    49ae:	df 91       	pop	r29
    49b0:	cf 91       	pop	r28
    49b2:	1f 91       	pop	r17
    49b4:	0f 91       	pop	r16
    49b6:	ff 90       	pop	r15
    49b8:	ef 90       	pop	r14
    49ba:	df 90       	pop	r13
    49bc:	cf 90       	pop	r12
    49be:	bf 90       	pop	r11
    49c0:	af 90       	pop	r10
    49c2:	08 95       	ret

000049c4 <nrk_time_get>:
NRK_STK pin_task_stack[NRK_APP_STACKSIZE];
void pin_task (void);

void nrk_create_taskset ();

uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
    49c4:	ef 92       	push	r14
    49c6:	ff 92       	push	r15
    49c8:	0f 93       	push	r16
    49ca:	1f 93       	push	r17
    49cc:	cf 93       	push	r28
    49ce:	df 93       	push	r29
    49d0:	ec 01       	movw	r28, r24

    49d2:	80 91 73 06 	lds	r24, 0x0673
    49d6:	90 91 74 06 	lds	r25, 0x0674
    49da:	a0 91 75 06 	lds	r26, 0x0675
    49de:	b0 91 76 06 	lds	r27, 0x0676
    49e2:	88 83       	st	Y, r24
    49e4:	99 83       	std	Y+1, r25	; 0x01
    49e6:	aa 83       	std	Y+2, r26	; 0x02
    49e8:	bb 83       	std	Y+3, r27	; 0x03
int main ()
    49ea:	e0 90 77 06 	lds	r14, 0x0677
    49ee:	f0 90 78 06 	lds	r15, 0x0678
    49f2:	00 91 79 06 	lds	r16, 0x0679
    49f6:	10 91 7a 06 	lds	r17, 0x067A
    49fa:	ec 82       	std	Y+4, r14	; 0x04
    49fc:	fd 82       	std	Y+5, r15	; 0x05
    49fe:	0e 83       	std	Y+6, r16	; 0x06
    4a00:	1f 83       	std	Y+7, r17	; 0x07
{
	uint16_t div;
    4a02:	0e 94 1f 28 	call	0x503e	; 0x503e <_nrk_os_timer_get>
    4a06:	99 27       	eor	r25, r25
    4a08:	aa 27       	eor	r26, r26
    4a0a:	bb 27       	eor	r27, r27
    4a0c:	bc 01       	movw	r22, r24
    4a0e:	cd 01       	movw	r24, r26
    4a10:	23 eb       	ldi	r18, 0xB3	; 179
    4a12:	36 ee       	ldi	r19, 0xE6	; 230
    4a14:	4e e0       	ldi	r20, 0x0E	; 14
    4a16:	50 e0       	ldi	r21, 0x00	; 0
    4a18:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <__mulsi3>
    4a1c:	e6 0e       	add	r14, r22
    4a1e:	f7 1e       	adc	r15, r23
    4a20:	08 1f       	adc	r16, r24
    4a22:	19 1f       	adc	r17, r25
    4a24:	ec 82       	std	Y+4, r14	; 0x04
    4a26:	fd 82       	std	Y+5, r15	; 0x05
    4a28:	0e 83       	std	Y+6, r16	; 0x06
    4a2a:	1f 83       	std	Y+7, r17	; 0x07
    4a2c:	13 c0       	rjmp	.+38     	; 0x4a54 <nrk_time_get+0x90>
	nrk_setup_ports ();
	nrk_setup_uart (UART_BAUDRATE_115K2);

    4a2e:	80 50       	subi	r24, 0x00	; 0
    4a30:	9a 4c       	sbci	r25, 0xCA	; 202
    4a32:	aa 49       	sbci	r26, 0x9A	; 154
    4a34:	bb 43       	sbci	r27, 0x3B	; 59
    4a36:	8c 83       	std	Y+4, r24	; 0x04
    4a38:	9d 83       	std	Y+5, r25	; 0x05
    4a3a:	ae 83       	std	Y+6, r26	; 0x06
    4a3c:	bf 83       	std	Y+7, r27	; 0x07
	nrk_init ();
    4a3e:	88 81       	ld	r24, Y
    4a40:	99 81       	ldd	r25, Y+1	; 0x01
    4a42:	aa 81       	ldd	r26, Y+2	; 0x02
    4a44:	bb 81       	ldd	r27, Y+3	; 0x03
    4a46:	01 96       	adiw	r24, 0x01	; 1
    4a48:	a1 1d       	adc	r26, r1
    4a4a:	b1 1d       	adc	r27, r1
    4a4c:	88 83       	st	Y, r24
    4a4e:	99 83       	std	Y+1, r25	; 0x01
    4a50:	aa 83       	std	Y+2, r26	; 0x02
    4a52:	bb 83       	std	Y+3, r27	; 0x03
uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];

int main ()
{
	uint16_t div;
	nrk_setup_ports ();
    4a54:	8c 81       	ldd	r24, Y+4	; 0x04
    4a56:	9d 81       	ldd	r25, Y+5	; 0x05
    4a58:	ae 81       	ldd	r26, Y+6	; 0x06
    4a5a:	bf 81       	ldd	r27, Y+7	; 0x07
    4a5c:	80 30       	cpi	r24, 0x00	; 0
    4a5e:	2a ec       	ldi	r18, 0xCA	; 202
    4a60:	92 07       	cpc	r25, r18
    4a62:	2a e9       	ldi	r18, 0x9A	; 154
    4a64:	a2 07       	cpc	r26, r18
    4a66:	2b e3       	ldi	r18, 0x3B	; 59
    4a68:	b2 07       	cpc	r27, r18
    4a6a:	08 f7       	brcc	.-62     	; 0x4a2e <nrk_time_get+0x6a>
    4a6c:	df 91       	pop	r29
    4a6e:	cf 91       	pop	r28
    4a70:	1f 91       	pop	r17
    4a72:	0f 91       	pop	r16
    4a74:	ff 90       	pop	r15
    4a76:	ef 90       	pop	r14
    4a78:	08 95       	ret

00004a7a <nrk_idle_task>:
NRK_STK pin_task_stack[NRK_APP_STACKSIZE];
void pin_task (void);

void nrk_create_taskset ();

uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
    4a7a:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <nrk_stack_check>

int main ()
    4a7e:	0e 94 ab 27 	call	0x4f56	; 0x4f56 <_nrk_get_next_wakeup>
    4a82:	8b 30       	cpi	r24, 0x0B	; 11
    4a84:	30 f4       	brcc	.+12     	; 0x4a92 <nrk_idle_task+0x18>
{
	uint16_t div;
    4a86:	81 e0       	ldi	r24, 0x01	; 1
    4a88:	80 93 70 06 	sts	0x0670, r24
	nrk_setup_ports ();
    4a8c:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <nrk_idle>
    4a90:	09 c0       	rjmp	.+18     	; 0x4aa4 <nrk_idle_task+0x2a>
	nrk_setup_uart (UART_BAUDRATE_115K2);

	nrk_init ();

	nrk_led_clr (0);
    4a92:	8a e0       	ldi	r24, 0x0A	; 10
    4a94:	90 e0       	ldi	r25, 0x00	; 0
    4a96:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <nrk_spin_wait_us>
	nrk_led_clr (1);
    4a9a:	82 e0       	ldi	r24, 0x02	; 2
    4a9c:	80 93 70 06 	sts	0x0670, r24
	nrk_led_clr (2);
    4aa0:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <nrk_sleep>

	nrk_time_set (0, 0);

	bmac_task_config ();

	nrk_create_taskset ();
    4aa4:	80 91 1a 05 	lds	r24, 0x051A
    4aa8:	85 35       	cpi	r24, 0x55	; 85
    4aaa:	19 f0       	breq	.+6      	; 0x4ab2 <nrk_idle_task+0x38>
    4aac:	88 e0       	ldi	r24, 0x08	; 8
    4aae:	0e 94 00 1b 	call	0x3600	; 0x3600 <nrk_error_add>
	nrk_start ();

	return 0;
}

    4ab2:	80 91 7e 21 	lds	r24, 0x217E
    4ab6:	85 35       	cpi	r24, 0x55	; 85
    4ab8:	01 f3       	breq	.-64     	; 0x4a7a <nrk_idle_task>
    4aba:	88 e0       	ldi	r24, 0x08	; 8
    4abc:	0e 94 00 1b 	call	0x3600	; 0x3600 <nrk_error_add>
    4ac0:	dc cf       	rjmp	.-72     	; 0x4a7a <nrk_idle_task>

00004ac2 <_nrk_scheduler>:
uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];

int main ()
{
	uint16_t div;
	nrk_setup_ports ();
    4ac2:	8f 92       	push	r8
    4ac4:	9f 92       	push	r9
    4ac6:	af 92       	push	r10
    4ac8:	bf 92       	push	r11
    4aca:	cf 92       	push	r12
    4acc:	df 92       	push	r13
    4ace:	ef 92       	push	r14
    4ad0:	ff 92       	push	r15
    4ad2:	0f 93       	push	r16
    4ad4:	1f 93       	push	r17
    4ad6:	cf 93       	push	r28
    4ad8:	df 93       	push	r29
	nrk_setup_uart (UART_BAUDRATE_115K2);

	nrk_init ();

	nrk_led_clr (0);
    4ada:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <nrk_int_disable>
	nrk_led_clr (1);
	nrk_led_clr (2);
	nrk_led_clr (3);

    4ade:	0e 94 67 27 	call	0x4ece	; 0x4ece <_nrk_high_speed_timer_reset>
	nrk_time_set (0, 0);
    4ae2:	0e 94 6f 27 	call	0x4ede	; 0x4ede <_nrk_high_speed_timer_get>
    4ae6:	4c 01       	movw	r8, r24

	bmac_task_config ();
    4ae8:	8a ef       	ldi	r24, 0xFA	; 250
    4aea:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_nrk_set_next_wakeup>
	while(1) {
		nrk_led_toggle (RED_LED);
		nrk_wait_until_next_period ();
		nrk_led_toggle (BLUE_LED);
		nrk_wait_until_next_period ();
	}
    4aee:	60 91 ad 05 	lds	r22, 0x05AD
    4af2:	77 27       	eor	r23, r23
    4af4:	88 27       	eor	r24, r24
    4af6:	99 27       	eor	r25, r25
    4af8:	23 eb       	ldi	r18, 0xB3	; 179
    4afa:	36 ee       	ldi	r19, 0xE6	; 230
    4afc:	4e e0       	ldi	r20, 0x0E	; 14
    4afe:	50 e0       	ldi	r21, 0x00	; 0
    4b00:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <__mulsi3>
    4b04:	7b 01       	movw	r14, r22
    4b06:	8c 01       	movw	r16, r24
    4b08:	80 91 77 06 	lds	r24, 0x0677
    4b0c:	90 91 78 06 	lds	r25, 0x0678
    4b10:	a0 91 79 06 	lds	r26, 0x0679
    4b14:	b0 91 7a 06 	lds	r27, 0x067A
    4b18:	e8 0e       	add	r14, r24
    4b1a:	f9 1e       	adc	r15, r25
    4b1c:	0a 1f       	adc	r16, r26
    4b1e:	1b 1f       	adc	r17, r27
}
    4b20:	c8 01       	movw	r24, r16
    4b22:	b7 01       	movw	r22, r14
    4b24:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__udivmodsi4>
    4b28:	a8 01       	movw	r20, r16
    4b2a:	97 01       	movw	r18, r14
    4b2c:	26 1b       	sub	r18, r22
    4b2e:	37 0b       	sbc	r19, r23
    4b30:	48 0b       	sbc	r20, r24
    4b32:	59 0b       	sbc	r21, r25
    4b34:	80 91 73 06 	lds	r24, 0x0673
    4b38:	90 91 74 06 	lds	r25, 0x0674
    4b3c:	a0 91 75 06 	lds	r26, 0x0675
    4b40:	b0 91 76 06 	lds	r27, 0x0676
    4b44:	1b c0       	rjmp	.+54     	; 0x4b7c <_nrk_scheduler+0xba>
	check_period.nano_secs=40*NANOS_PER_MS; // Fastest we could safely go
	val=bmac_set_rx_check_rate(check_period);

	// The default Clear Channel Assement RSSI threshold is -45
	// Setting this value higher means that you will only trigger
	// receive with a very strong signal.  Setting this lower means
    4b46:	e1 2c       	mov	r14, r1
    4b48:	66 e3       	ldi	r22, 0x36	; 54
    4b4a:	f6 2e       	mov	r15, r22
    4b4c:	65 e6       	ldi	r22, 0x65	; 101
    4b4e:	06 2f       	mov	r16, r22
    4b50:	64 ec       	ldi	r22, 0xC4	; 196
    4b52:	16 2f       	mov	r17, r22
    4b54:	e2 0e       	add	r14, r18
    4b56:	f3 1e       	adc	r15, r19
    4b58:	04 1f       	adc	r16, r20
    4b5a:	15 1f       	adc	r17, r21
	// bmac will try to receive fainter packets.  If the value is set
	// too high or too low performance will suffer greatly.
    4b5c:	c8 01       	movw	r24, r16
    4b5e:	b7 01       	movw	r22, r14
    4b60:	23 eb       	ldi	r18, 0xB3	; 179
    4b62:	36 ee       	ldi	r19, 0xE6	; 230
    4b64:	4e e0       	ldi	r20, 0x0E	; 14
    4b66:	50 e0       	ldi	r21, 0x00	; 0
    4b68:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__udivmodsi4>
    4b6c:	a8 01       	movw	r20, r16
    4b6e:	97 01       	movw	r18, r14
    4b70:	26 1b       	sub	r18, r22
    4b72:	37 0b       	sbc	r19, r23
    4b74:	48 0b       	sbc	r20, r24
    4b76:	59 0b       	sbc	r21, r25
    4b78:	d6 01       	movw	r26, r12
    4b7a:	c5 01       	movw	r24, r10
    4b7c:	5c 01       	movw	r10, r24
    4b7e:	6d 01       	movw	r12, r26
    4b80:	08 94       	sec
    4b82:	a1 1c       	adc	r10, r1
    4b84:	b1 1c       	adc	r11, r1
    4b86:	c1 1c       	adc	r12, r1
    4b88:	d1 1c       	adc	r13, r1
	// below shows how to change that
	check_period.secs=0;
	check_period.nano_secs=40*NANOS_PER_MS; // Fastest we could safely go
	val=bmac_set_rx_check_rate(check_period);

	// The default Clear Channel Assement RSSI threshold is -45
    4b8a:	20 30       	cpi	r18, 0x00	; 0
    4b8c:	6a ec       	ldi	r22, 0xCA	; 202
    4b8e:	36 07       	cpc	r19, r22
    4b90:	6a e9       	ldi	r22, 0x9A	; 154
    4b92:	46 07       	cpc	r20, r22
    4b94:	6b e3       	ldi	r22, 0x3B	; 59
    4b96:	56 07       	cpc	r21, r22
    4b98:	b0 f6       	brcc	.-84     	; 0x4b46 <_nrk_scheduler+0x84>
    4b9a:	80 93 73 06 	sts	0x0673, r24
    4b9e:	90 93 74 06 	sts	0x0674, r25
    4ba2:	a0 93 75 06 	sts	0x0675, r26
    4ba6:	b0 93 76 06 	sts	0x0676, r27
    4baa:	20 93 77 06 	sts	0x0677, r18
    4bae:	30 93 78 06 	sts	0x0678, r19
    4bb2:	40 93 79 06 	sts	0x0679, r20
    4bb6:	50 93 7a 06 	sts	0x067A, r21
	// bmac will try to receive fainter packets.  If the value is set
	// too high or too low performance will suffer greatly.
	// bmac_set_cca_thresh(-45); 


	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
    4bba:	e0 91 7c 06 	lds	r30, 0x067C
    4bbe:	f0 91 7d 06 	lds	r31, 0x067D
    4bc2:	85 81       	ldd	r24, Z+5	; 0x05
    4bc4:	88 23       	and	r24, r24
    4bc6:	19 f1       	breq	.+70     	; 0x4c0e <_nrk_scheduler+0x14c>
    4bc8:	81 85       	ldd	r24, Z+9	; 0x09
    4bca:	84 30       	cpi	r24, 0x04	; 4
    4bcc:	01 f1       	breq	.+64     	; 0x4c0e <_nrk_scheduler+0x14c>
	// This sets the next RX buffer.
	// This can be called at anytime before releaseing the packet
	// if you wish to do a zero-copy buffer switch
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
    4bce:	87 81       	ldd	r24, Z+7	; 0x07
    4bd0:	82 30       	cpi	r24, 0x02	; 2
    4bd2:	29 f0       	breq	.+10     	; 0x4bde <_nrk_scheduler+0x11c>

	bmac_auto_ack_disable();
    4bd4:	88 23       	and	r24, r24
    4bd6:	41 f0       	breq	.+16     	; 0x4be8 <_nrk_scheduler+0x126>
    4bd8:	86 81       	ldd	r24, Z+6	; 0x06
    4bda:	88 23       	and	r24, r24
    4bdc:	11 f4       	brne	.+4      	; 0x4be2 <_nrk_scheduler+0x120>

    4bde:	85 e0       	ldi	r24, 0x05	; 5
    4be0:	01 c0       	rjmp	.+2      	; 0x4be4 <_nrk_scheduler+0x122>
	//set port direction as output
	nrk_gpio_direction(NRK_DEBUG_3,NRK_PIN_OUTPUT);//PD.1
    4be2:	83 e0       	ldi	r24, 0x03	; 3
    4be4:	81 87       	std	Z+9, r24	; 0x09
    4be6:	0c c0       	rjmp	.+24     	; 0x4c00 <_nrk_scheduler+0x13e>
	nrk_gpio_direction(NRK_DEBUG_2,NRK_PIN_OUTPUT);//PD.0
	nrk_gpio_direction(NRK_DEBUG_0,NRK_PIN_OUTPUT);//PA.3
	nrk_gpio_direction(NRK_DEBUG_1,NRK_PIN_OUTPUT);//PA.4
    4be8:	83 e0       	ldi	r24, 0x03	; 3
    4bea:	81 87       	std	Z+9, r24	; 0x09

    4bec:	e0 91 7c 06 	lds	r30, 0x067C
    4bf0:	f0 91 7d 06 	lds	r31, 0x067D
    4bf4:	17 82       	std	Z+7, r1	; 0x07
	while (1) {
    4bf6:	e0 91 7c 06 	lds	r30, 0x067C
    4bfa:	f0 91 7d 06 	lds	r31, 0x067D
    4bfe:	16 82       	std	Z+6, r1	; 0x06
		// Wait until an RX packet is received
		val = bmac_wait_until_rx_pkt ();
    4c00:	e0 91 7c 06 	lds	r30, 0x067C
    4c04:	f0 91 7d 06 	lds	r31, 0x067D
    4c08:	80 85       	ldd	r24, Z+8	; 0x08
    4c0a:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <nrk_rem_from_readyQ>
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
		
		printf ("%c=%c\r\n", rx_buf[0], rx_buf[2]);
		
		switch(rx_buf[0]) {
			case 'A': // ~0xxx
    4c0e:	e0 91 7c 06 	lds	r30, 0x067C
    4c12:	f0 91 7d 06 	lds	r31, 0x067D
    4c16:	85 8d       	ldd	r24, Z+29	; 0x1d
    4c18:	96 8d       	ldd	r25, Z+30	; 0x1e
    4c1a:	89 2b       	or	r24, r25
    4c1c:	91 f1       	breq	.+100    	; 0x4c82 <_nrk_scheduler+0x1c0>
    4c1e:	60 85       	ldd	r22, Z+8	; 0x08
    4c20:	66 23       	and	r22, r22
    4c22:	79 f1       	breq	.+94     	; 0x4c82 <_nrk_scheduler+0x1c0>
    4c24:	81 85       	ldd	r24, Z+9	; 0x09
    4c26:	84 30       	cpi	r24, 0x04	; 4
    4c28:	61 f1       	breq	.+88     	; 0x4c82 <_nrk_scheduler+0x1c0>
				nrk_led_clr(RED_LED);
				nrk_gpio_set(NRK_DEBUG_3);
    4c2a:	21 8d       	ldd	r18, Z+25	; 0x19
    4c2c:	32 8d       	ldd	r19, Z+26	; 0x1a
    4c2e:	80 91 ad 05 	lds	r24, 0x05AD
    4c32:	99 27       	eor	r25, r25
    4c34:	28 17       	cp	r18, r24
    4c36:	39 07       	cpc	r19, r25
    4c38:	50 f4       	brcc	.+20     	; 0x4c4e <_nrk_scheduler+0x18c>
				break;
			case 'B': // ~1xxx
				nrk_led_set(RED_LED);
				nrk_gpio_clr(NRK_DEBUG_3);
				break;
    4c3a:	82 e0       	ldi	r24, 0x02	; 2
    4c3c:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <nrk_kernel_error_add>
		}
    4c40:	e0 91 7c 06 	lds	r30, 0x067C
    4c44:	f0 91 7d 06 	lds	r31, 0x067D
    4c48:	12 8e       	std	Z+26, r1	; 0x1a
    4c4a:	11 8e       	std	Z+25, r1	; 0x19
    4c4c:	04 c0       	rjmp	.+8      	; 0x4c56 <_nrk_scheduler+0x194>

		switch(rx_buf[2]) {
    4c4e:	28 1b       	sub	r18, r24
    4c50:	39 0b       	sbc	r19, r25
    4c52:	32 8f       	std	Z+26, r19	; 0x1a
    4c54:	21 8f       	std	Z+25, r18	; 0x19
			case '-': // ~x000
				nrk_gpio_set(NRK_DEBUG_0);
    4c56:	e0 91 7c 06 	lds	r30, 0x067C
    4c5a:	f0 91 7d 06 	lds	r31, 0x067D
    4c5e:	10 85       	ldd	r17, Z+8	; 0x08
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
    4c60:	81 8d       	ldd	r24, Z+25	; 0x19
    4c62:	92 8d       	ldd	r25, Z+26	; 0x1a
    4c64:	89 2b       	or	r24, r25
    4c66:	69 f4       	brne	.+26     	; 0x4c82 <_nrk_scheduler+0x1c0>
				nrk_led_clr(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
				nrk_led_clr(GREEN_LED);
				break;
    4c68:	61 2f       	mov	r22, r17
    4c6a:	83 e0       	ldi	r24, 0x03	; 3
    4c6c:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <nrk_kernel_error_add>
			case 'U': // ~x001
    4c70:	e0 91 7c 06 	lds	r30, 0x067C
    4c74:	f0 91 7d 06 	lds	r31, 0x067D
    4c78:	83 e0       	ldi	r24, 0x03	; 3
    4c7a:	81 87       	std	Z+9, r24	; 0x09
				nrk_gpio_clr(NRK_DEBUG_0);
    4c7c:	81 2f       	mov	r24, r17
    4c7e:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <nrk_rem_from_readyQ>
    4c82:	cf ed       	ldi	r28, 0xDF	; 223
    4c84:	d5 e0       	ldi	r29, 0x05	; 5
    4c86:	00 e6       	ldi	r16, 0x60	; 96
    4c88:	1a ee       	ldi	r17, 0xEA	; 234
    4c8a:	cc 24       	eor	r12, r12
    4c8c:	dd 24       	eor	r13, r13
    4c8e:	4c 2d       	mov	r20, r12
				nrk_led_clr(BLUE_LED);
				nrk_led_clr(GREEN_LED);
				break;
			case 'D': // ~x010
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_clr(NRK_DEBUG_1);
    4c90:	88 85       	ldd	r24, Y+8	; 0x08
    4c92:	8f 3f       	cpi	r24, 0xFF	; 255
    4c94:	09 f4       	brne	.+2      	; 0x4c98 <_nrk_scheduler+0x1d6>
    4c96:	89 c0       	rjmp	.+274    	; 0x4daa <_nrk_scheduler+0x2e8>
				nrk_gpio_set(NRK_DEBUG_2);
    4c98:	1d 82       	std	Y+5, r1	; 0x05
				nrk_led_clr(ORANGE_LED);
    4c9a:	88 23       	and	r24, r24
    4c9c:	91 f1       	breq	.+100    	; 0x4d02 <_nrk_scheduler+0x240>
    4c9e:	89 85       	ldd	r24, Y+9	; 0x09
    4ca0:	84 30       	cpi	r24, 0x04	; 4
    4ca2:	79 f1       	breq	.+94     	; 0x4d02 <_nrk_scheduler+0x240>
				nrk_led_set(BLUE_LED);
				nrk_led_clr(GREEN_LED);
    4ca4:	2d 89       	ldd	r18, Y+21	; 0x15
    4ca6:	3e 89       	ldd	r19, Y+22	; 0x16
    4ca8:	80 91 ad 05 	lds	r24, 0x05AD
    4cac:	99 27       	eor	r25, r25
    4cae:	28 17       	cp	r18, r24
    4cb0:	39 07       	cpc	r19, r25
    4cb2:	28 f0       	brcs	.+10     	; 0x4cbe <_nrk_scheduler+0x1fc>
				break;
    4cb4:	28 1b       	sub	r18, r24
    4cb6:	39 0b       	sbc	r19, r25
    4cb8:	3e 8b       	std	Y+22, r19	; 0x16
    4cba:	2d 8b       	std	Y+21, r18	; 0x15
    4cbc:	02 c0       	rjmp	.+4      	; 0x4cc2 <_nrk_scheduler+0x200>
			case 'L': // ~x011
				nrk_gpio_clr(NRK_DEBUG_0);
    4cbe:	1e 8a       	std	Y+22, r1	; 0x16
    4cc0:	1d 8a       	std	Y+21, r1	; 0x15
				nrk_gpio_clr(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
				nrk_led_set(BLUE_LED);
				nrk_led_clr(GREEN_LED);
    4cc2:	2f 89       	ldd	r18, Y+23	; 0x17
    4cc4:	38 8d       	ldd	r19, Y+24	; 0x18
    4cc6:	28 17       	cp	r18, r24
    4cc8:	39 07       	cpc	r19, r25
    4cca:	28 f0       	brcs	.+10     	; 0x4cd6 <_nrk_scheduler+0x214>
				break;
    4ccc:	28 1b       	sub	r18, r24
    4cce:	39 0b       	sbc	r19, r25
    4cd0:	38 8f       	std	Y+24, r19	; 0x18
    4cd2:	2f 8b       	std	Y+23, r18	; 0x17
    4cd4:	0e c0       	rjmp	.+28     	; 0x4cf2 <_nrk_scheduler+0x230>
			case 'R': // ~x100
				nrk_gpio_set(NRK_DEBUG_0);
    4cd6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    4cd8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    4cda:	86 17       	cp	r24, r22
    4cdc:	97 07       	cpc	r25, r23
    4cde:	28 f4       	brcc	.+10     	; 0x4cea <_nrk_scheduler+0x228>
				nrk_gpio_set(NRK_DEBUG_1);
    4ce0:	68 1b       	sub	r22, r24
    4ce2:	79 0b       	sbc	r23, r25
    4ce4:	78 8f       	std	Y+24, r23	; 0x18
    4ce6:	6f 8b       	std	Y+23, r22	; 0x17
    4ce8:	04 c0       	rjmp	.+8      	; 0x4cf2 <_nrk_scheduler+0x230>
				nrk_gpio_clr(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
    4cea:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <__udivmodhi4>
    4cee:	98 8f       	std	Y+24, r25	; 0x18
    4cf0:	8f 8b       	std	Y+23, r24	; 0x17
				nrk_led_clr(BLUE_LED);
				nrk_led_set(GREEN_LED);
    4cf2:	8f 89       	ldd	r24, Y+23	; 0x17
    4cf4:	98 8d       	ldd	r25, Y+24	; 0x18
    4cf6:	89 2b       	or	r24, r25
    4cf8:	21 f4       	brne	.+8      	; 0x4d02 <_nrk_scheduler+0x240>
    4cfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4cfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4cfe:	98 8f       	std	Y+24, r25	; 0x18
    4d00:	8f 8b       	std	Y+23, r24	; 0x17
				break;
			case 'B': // ~x101
				nrk_gpio_clr(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_clr(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
    4d02:	89 85       	ldd	r24, Y+9	; 0x09
    4d04:	83 30       	cpi	r24, 0x03	; 3
    4d06:	09 f0       	breq	.+2      	; 0x4d0a <_nrk_scheduler+0x248>
    4d08:	50 c0       	rjmp	.+160    	; 0x4daa <_nrk_scheduler+0x2e8>
				nrk_led_clr(BLUE_LED);
				nrk_led_set(GREEN_LED);
				break;
    4d0a:	8d 89       	ldd	r24, Y+21	; 0x15
    4d0c:	9e 89       	ldd	r25, Y+22	; 0x16
    4d0e:	89 2b       	or	r24, r25
    4d10:	09 f0       	breq	.+2      	; 0x4d14 <_nrk_scheduler+0x252>
    4d12:	43 c0       	rjmp	.+134    	; 0x4d9a <_nrk_scheduler+0x2d8>
		}
		
    4d14:	8f 81       	ldd	r24, Y+7	; 0x07
    4d16:	88 23       	and	r24, r24
    4d18:	a1 f0       	breq	.+40     	; 0x4d42 <_nrk_scheduler+0x280>
    4d1a:	8e 81       	ldd	r24, Y+6	; 0x06
    4d1c:	88 23       	and	r24, r24
    4d1e:	89 f0       	breq	.+34     	; 0x4d42 <_nrk_scheduler+0x280>
    4d20:	81 e0       	ldi	r24, 0x01	; 1
    4d22:	90 e0       	ldi	r25, 0x00	; 0
    4d24:	a0 e0       	ldi	r26, 0x00	; 0
    4d26:	b0 e0       	ldi	r27, 0x00	; 0
    4d28:	00 90 6c 06 	lds	r0, 0x066C
    4d2c:	04 c0       	rjmp	.+8      	; 0x4d36 <_nrk_scheduler+0x274>
    4d2e:	88 0f       	add	r24, r24
    4d30:	99 1f       	adc	r25, r25
    4d32:	aa 1f       	adc	r26, r26
    4d34:	bb 1f       	adc	r27, r27
    4d36:	0a 94       	dec	r0
    4d38:	d2 f7       	brpl	.-12     	; 0x4d2e <_nrk_scheduler+0x26c>
    4d3a:	89 8b       	std	Y+17, r24	; 0x11
    4d3c:	9a 8b       	std	Y+18, r25	; 0x12
    4d3e:	ab 8b       	std	Y+19, r26	; 0x13
    4d40:	bc 8b       	std	Y+20, r27	; 0x14
		
		//nrk_led_clr (ORANGE_LED);
    4d42:	1f 82       	std	Y+7, r1	; 0x07
		//nrk_led_toggle (BLUE_LED);
    4d44:	1e 82       	std	Y+6, r1	; 0x06
		// Release the RX buffer so future packets can arrive 
    4d46:	1d 82       	std	Y+5, r1	; 0x05
		bmac_rx_pkt_release ();
    4d48:	2f 8d       	ldd	r18, Y+31	; 0x1f
    4d4a:	38 a1       	ldd	r19, Y+32	; 0x20
    4d4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d4e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4d50:	21 30       	cpi	r18, 0x01	; 1
    4d52:	31 05       	cpc	r19, r1
    4d54:	61 f4       	brne	.+24     	; 0x4d6e <_nrk_scheduler+0x2ac>
	}

    4d56:	9a 8f       	std	Y+26, r25	; 0x1a
    4d58:	89 8f       	std	Y+25, r24	; 0x19
}
    4d5a:	82 e0       	ldi	r24, 0x02	; 2
    4d5c:	89 87       	std	Y+9, r24	; 0x09

    4d5e:	8f 89       	ldd	r24, Y+23	; 0x17
    4d60:	98 8d       	ldd	r25, Y+24	; 0x18
    4d62:	9e 8b       	std	Y+22, r25	; 0x16
    4d64:	8d 8b       	std	Y+21, r24	; 0x15
void nrk_create_taskset ()
    4d66:	84 2f       	mov	r24, r20
    4d68:	0e 94 30 1f 	call	0x3e60	; 0x3e60 <nrk_add_to_readyQ>
    4d6c:	16 c0       	rjmp	.+44     	; 0x4d9a <_nrk_scheduler+0x2d8>
{
/*
	PIN_TASK.task = pin_task;
    4d6e:	9a 8f       	std	Y+26, r25	; 0x1a
    4d70:	89 8f       	std	Y+25, r24	; 0x19
	PIN_TASK.Ptos = (void *) &pin_task_stack[NRK_APP_STACKSIZE - 1];
	PIN_TASK.Pbos = (void *) &pin_task_stack[0];
	PIN_TASK.prio = 1;
    4d72:	21 50       	subi	r18, 0x01	; 1
    4d74:	30 40       	sbci	r19, 0x00	; 0
    4d76:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d78:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d7a:	ac 01       	movw	r20, r24
    4d7c:	24 9f       	mul	r18, r20
    4d7e:	c0 01       	movw	r24, r0
    4d80:	25 9f       	mul	r18, r21
    4d82:	90 0d       	add	r25, r0
    4d84:	34 9f       	mul	r19, r20
    4d86:	90 0d       	add	r25, r0
    4d88:	11 24       	eor	r1, r1
    4d8a:	9e 8b       	std	Y+22, r25	; 0x16
    4d8c:	8d 8b       	std	Y+21, r24	; 0x15
	PIN_TASK.FirstActivation = TRUE;
    4d8e:	98 8f       	std	Y+24, r25	; 0x18
    4d90:	8f 8b       	std	Y+23, r24	; 0x17
	PIN_TASK.Type = BASIC_TASK;
    4d92:	81 e0       	ldi	r24, 0x01	; 1
    4d94:	90 e0       	ldi	r25, 0x00	; 0
    4d96:	98 a3       	std	Y+32, r25	; 0x20
    4d98:	8f 8f       	std	Y+31, r24	; 0x1f
	PIN_TASK.SchType = PREEMPTIVE;
	PIN_TASK.period.secs = 3;
	PIN_TASK.period.nano_secs = 100 * NANOS_PER_MS;
	PIN_TASK.cpu_reserve.secs = 0;
	PIN_TASK.cpu_reserve.nano_secs = 50 * NANOS_PER_MS;
	PIN_TASK.offset.secs = 0;
    4d9a:	8d 89       	ldd	r24, Y+21	; 0x15
    4d9c:	9e 89       	ldd	r25, Y+22	; 0x16
    4d9e:	00 97       	sbiw	r24, 0x00	; 0
    4da0:	21 f0       	breq	.+8      	; 0x4daa <_nrk_scheduler+0x2e8>
    4da2:	80 17       	cp	r24, r16
    4da4:	91 07       	cpc	r25, r17
    4da6:	08 f4       	brcc	.+2      	; 0x4daa <_nrk_scheduler+0x2e8>
    4da8:	8c 01       	movw	r16, r24
    4daa:	08 94       	sec
    4dac:	c1 1c       	adc	r12, r1
    4dae:	d1 1c       	adc	r13, r1
    4db0:	a1 96       	adiw	r28, 0x21	; 33
				nrk_led_set(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
				nrk_led_clr(GREEN_LED);
				break;
			case 'D': // ~x010
				nrk_gpio_set(NRK_DEBUG_0);
    4db2:	54 e0       	ldi	r21, 0x04	; 4
    4db4:	c5 16       	cp	r12, r21
    4db6:	d1 04       	cpc	r13, r1
    4db8:	09 f0       	breq	.+2      	; 0x4dbc <_nrk_scheduler+0x2fa>
    4dba:	69 cf       	rjmp	.-302    	; 0x4c8e <_nrk_scheduler+0x1cc>
	RX_TASK.FirstActivation = TRUE;
	RX_TASK.Type = BASIC_TASK;
	RX_TASK.SchType = PREEMPTIVE;
	RX_TASK.period.secs = 0;
	RX_TASK.period.nano_secs = 40 * NANOS_PER_MS;;
	RX_TASK.cpu_reserve.secs = 0;
    4dbc:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <nrk_get_high_ready_task_ID>
    4dc0:	e8 2e       	mov	r14, r24
	RX_TASK.cpu_reserve.nano_secs = 40 * NANOS_PER_MS;;
    4dc2:	99 27       	eor	r25, r25
    4dc4:	87 fd       	sbrc	r24, 7
    4dc6:	90 95       	com	r25
    4dc8:	fc 01       	movw	r30, r24
    4dca:	25 e0       	ldi	r18, 0x05	; 5
    4dcc:	ee 0f       	add	r30, r30
    4dce:	ff 1f       	adc	r31, r31
    4dd0:	2a 95       	dec	r18
    4dd2:	e1 f7       	brne	.-8      	; 0x4dcc <_nrk_scheduler+0x30a>
    4dd4:	e8 0f       	add	r30, r24
    4dd6:	f9 1f       	adc	r31, r25
    4dd8:	e1 52       	subi	r30, 0x21	; 33
    4dda:	fa 4f       	sbci	r31, 0xFA	; 250
    4ddc:	42 85       	ldd	r20, Z+10	; 0x0a
    4dde:	40 93 7e 06 	sts	0x067E, r20
	RX_TASK.offset.secs = 0;
    4de2:	81 e2       	ldi	r24, 0x21	; 33
    4de4:	6e 2d       	mov	r22, r14
    4de6:	68 02       	muls	r22, r24
    4de8:	90 01       	movw	r18, r0
    4dea:	11 24       	eor	r1, r1
    4dec:	21 52       	subi	r18, 0x21	; 33
    4dee:	3a 4f       	sbci	r19, 0xFA	; 250
    4df0:	30 93 6e 06 	sts	0x066E, r19
    4df4:	20 93 6d 06 	sts	0x066D, r18

	printf ("Create done\r\n");
}
    4df8:	ee 20       	and	r14, r14
    4dfa:	91 f0       	breq	.+36     	; 0x4e20 <_nrk_scheduler+0x35e>
    4dfc:	85 8d       	ldd	r24, Z+29	; 0x1d
    4dfe:	96 8d       	ldd	r25, Z+30	; 0x1e
    4e00:	89 2b       	or	r24, r25
    4e02:	51 f0       	breq	.+20     	; 0x4e18 <_nrk_scheduler+0x356>
    4e04:	81 8d       	ldd	r24, Z+25	; 0x19
    4e06:	92 8d       	ldd	r25, Z+26	; 0x1a
    4e08:	8a 3f       	cpi	r24, 0xFA	; 250
    4e0a:	91 05       	cpc	r25, r1
    4e0c:	28 f4       	brcc	.+10     	; 0x4e18 <_nrk_scheduler+0x356>
    4e0e:	80 17       	cp	r24, r16
    4e10:	91 07       	cpc	r25, r17
    4e12:	e0 f4       	brcc	.+56     	; 0x4e4c <_nrk_scheduler+0x38a>
    4e14:	8c 01       	movw	r16, r24
    4e16:	1a c0       	rjmp	.+52     	; 0x4e4c <_nrk_scheduler+0x38a>
    4e18:	0b 3f       	cpi	r16, 0xFB	; 251
    4e1a:	11 05       	cpc	r17, r1
    4e1c:	b8 f0       	brcs	.+46     	; 0x4e4c <_nrk_scheduler+0x38a>
    4e1e:	14 c0       	rjmp	.+40     	; 0x4e48 <_nrk_scheduler+0x386>
    4e20:	0b 30       	cpi	r16, 0x0B	; 11
    4e22:	11 05       	cpc	r17, r1
    4e24:	98 f0       	brcs	.+38     	; 0x4e4c <_nrk_scheduler+0x38a>
    4e26:	c8 01       	movw	r24, r16
    4e28:	0a 97       	sbiw	r24, 0x0a	; 10
    4e2a:	8a 3f       	cpi	r24, 0xFA	; 250
    4e2c:	91 05       	cpc	r25, r1
    4e2e:	30 f4       	brcc	.+12     	; 0x4e3c <_nrk_scheduler+0x37a>
    4e30:	8c 01       	movw	r16, r24
    4e32:	09 97       	sbiw	r24, 0x09	; 9
    4e34:	58 f4       	brcc	.+22     	; 0x4e4c <_nrk_scheduler+0x38a>
    4e36:	09 e0       	ldi	r16, 0x09	; 9
    4e38:	10 e0       	ldi	r17, 0x00	; 0
    4e3a:	08 c0       	rjmp	.+16     	; 0x4e4c <_nrk_scheduler+0x38a>
    4e3c:	05 50       	subi	r16, 0x05	; 5
    4e3e:	11 40       	sbci	r17, 0x01	; 1
    4e40:	18 f4       	brcc	.+6      	; 0x4e48 <_nrk_scheduler+0x386>
    4e42:	00 ef       	ldi	r16, 0xF0	; 240
    4e44:	10 e0       	ldi	r17, 0x00	; 0
    4e46:	02 c0       	rjmp	.+4      	; 0x4e4c <_nrk_scheduler+0x38a>
    4e48:	0a ef       	ldi	r16, 0xFA	; 250
    4e4a:	10 e0       	ldi	r17, 0x00	; 0
    4e4c:	40 93 6f 06 	sts	0x066F, r20
    4e50:	30 93 7d 06 	sts	0x067D, r19
    4e54:	20 93 7c 06 	sts	0x067C, r18
    4e58:	00 93 ad 05 	sts	0x05AD, r16
    4e5c:	0e 94 1f 28 	call	0x503e	; 0x503e <_nrk_os_timer_get>
    4e60:	99 27       	eor	r25, r25
    4e62:	80 17       	cp	r24, r16
    4e64:	91 07       	cpc	r25, r17
    4e66:	40 f0       	brcs	.+16     	; 0x4e78 <_nrk_scheduler+0x3b6>
    4e68:	0e 94 1f 28 	call	0x503e	; 0x503e <_nrk_os_timer_get>
    4e6c:	08 2f       	mov	r16, r24
    4e6e:	11 27       	eor	r17, r17
    4e70:	0e 5f       	subi	r16, 0xFE	; 254
    4e72:	1f 4f       	sbci	r17, 0xFF	; 255
    4e74:	00 93 ad 05 	sts	0x05AD, r16
    4e78:	ee 20       	and	r14, r14
    4e7a:	11 f0       	breq	.+4      	; 0x4e80 <_nrk_scheduler+0x3be>
    4e7c:	10 92 70 06 	sts	0x0670, r1
    4e80:	80 2f       	mov	r24, r16
    4e82:	0e 94 b0 27 	call	0x4f60	; 0x4f60 <_nrk_set_next_wakeup>
    4e86:	6e ee       	ldi	r22, 0xEE	; 238
    4e88:	72 e0       	ldi	r23, 0x02	; 2
    4e8a:	c4 01       	movw	r24, r8
    4e8c:	0e 94 a4 28 	call	0x5148	; 0x5148 <nrk_high_speed_timer_wait>
    4e90:	0e 94 3e 2b 	call	0x567c	; 0x567c <nrk_stack_pointer_restore>
    4e94:	0e 94 6b 2b 	call	0x56d6	; 0x56d6 <nrk_start_high_ready_task>
    4e98:	df 91       	pop	r29
    4e9a:	cf 91       	pop	r28
    4e9c:	1f 91       	pop	r17
    4e9e:	0f 91       	pop	r16
    4ea0:	ff 90       	pop	r15
    4ea2:	ef 90       	pop	r14
    4ea4:	df 90       	pop	r13
    4ea6:	cf 90       	pop	r12
    4ea8:	bf 90       	pop	r11
    4eaa:	af 90       	pop	r10
    4eac:	9f 90       	pop	r9
    4eae:	8f 90       	pop	r8
    4eb0:	08 95       	ret

00004eb2 <nrk_spin_wait_us>:
	...

nrk_task_type PIN_TASK;
NRK_STK pin_task_stack[NRK_APP_STACKSIZE];
void pin_task (void);

void nrk_create_taskset ();
    4eba:	01 97       	sbiw	r24, 0x01	; 1
    4ebc:	d1 f7       	brne	.-12     	; 0x4eb2 <nrk_spin_wait_us>
    4ebe:	08 95       	ret

00004ec0 <_nrk_high_speed_timer_stop>:
		nrk_wait_until_next_period ();
	}
}

void rx_task ()
{
    4ec0:	10 92 81 00 	sts	0x0081, r1
    4ec4:	08 95       	ret

00004ec6 <_nrk_high_speed_timer_start>:
	uint8_t i, len;
	int8_t rssi, val;
	uint8_t *local_rx_buf;
	nrk_time_t check_period;
	printf ("rx_task PID=%d\r\n", nrk_get_pid ());
    4ec6:	81 e0       	ldi	r24, 0x01	; 1
    4ec8:	80 93 81 00 	sts	0x0081, r24
    4ecc:	08 95       	ret

00004ece <_nrk_high_speed_timer_reset>:
	bmac_init (25);

	// By default the RX check rate is 100ms
	// below shows how to change that
	check_period.secs=0;
	check_period.nano_secs=40*NANOS_PER_MS; // Fastest we could safely go
    4ece:	83 b5       	in	r24, 0x23	; 35
    4ed0:	81 60       	ori	r24, 0x01	; 1
    4ed2:	83 bd       	out	0x23, r24	; 35
	val=bmac_set_rx_check_rate(check_period);
    4ed4:	10 92 85 00 	sts	0x0085, r1
    4ed8:	10 92 84 00 	sts	0x0084, r1
    4edc:	08 95       	ret

00004ede <_nrk_high_speed_timer_get>:
	nrk_gpio_direction(NRK_DEBUG_2,NRK_PIN_OUTPUT);//PD.0
	nrk_gpio_direction(NRK_DEBUG_0,NRK_PIN_OUTPUT);//PA.3
	nrk_gpio_direction(NRK_DEBUG_1,NRK_PIN_OUTPUT);//PA.4

	while (1) {
		// Wait until an RX packet is received
    4ede:	cf 93       	push	r28
    4ee0:	df 93       	push	r29
    4ee2:	cd b7       	in	r28, 0x3d	; 61
    4ee4:	de b7       	in	r29, 0x3e	; 62
    4ee6:	22 97       	sbiw	r28, 0x02	; 2
    4ee8:	0f b6       	in	r0, 0x3f	; 63
    4eea:	f8 94       	cli
    4eec:	de bf       	out	0x3e, r29	; 62
    4eee:	0f be       	out	0x3f, r0	; 63
    4ef0:	cd bf       	out	0x3d, r28	; 61
		val = bmac_wait_until_rx_pkt ();
		// Get the RX packet 
		//nrk_led_set (ORANGE_LED);
    4ef2:	80 91 84 00 	lds	r24, 0x0084
    4ef6:	90 91 85 00 	lds	r25, 0x0085
    4efa:	9a 83       	std	Y+2, r25	; 0x02
    4efc:	89 83       	std	Y+1, r24	; 0x01
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
		
    4efe:	89 81       	ldd	r24, Y+1	; 0x01
    4f00:	9a 81       	ldd	r25, Y+2	; 0x02
    4f02:	22 96       	adiw	r28, 0x02	; 2
    4f04:	0f b6       	in	r0, 0x3f	; 63
    4f06:	f8 94       	cli
    4f08:	de bf       	out	0x3e, r29	; 62
    4f0a:	0f be       	out	0x3f, r0	; 63
    4f0c:	cd bf       	out	0x3d, r28	; 61
    4f0e:	df 91       	pop	r29
    4f10:	cf 91       	pop	r28
    4f12:	08 95       	ret

00004f14 <_nrk_os_timer_stop>:
		printf ("%c=%c\r\n", rx_buf[0], rx_buf[2]);
		
		switch(rx_buf[0]) {
			case 'A': // ~0xxx
				nrk_led_clr(RED_LED);
    4f14:	10 92 b1 00 	sts	0x00B1, r1
				nrk_gpio_set(NRK_DEBUG_3);
    4f18:	e0 e7       	ldi	r30, 0x70	; 112
    4f1a:	f0 e0       	ldi	r31, 0x00	; 0
    4f1c:	80 81       	ld	r24, Z
    4f1e:	8d 7f       	andi	r24, 0xFD	; 253
    4f20:	80 83       	st	Z, r24
				break;
    4f22:	80 81       	ld	r24, Z
    4f24:	8e 7f       	andi	r24, 0xFE	; 254
    4f26:	80 83       	st	Z, r24
    4f28:	08 95       	ret

00004f2a <_nrk_os_timer_set>:
			case 'B': // ~1xxx
				nrk_led_set(RED_LED);
				nrk_gpio_clr(NRK_DEBUG_3);
				break;
		}
    4f2a:	80 93 b2 00 	sts	0x00B2, r24
    4f2e:	08 95       	ret

00004f30 <_nrk_os_timer_start>:
		switch(rx_buf[2]) {
			case '-': // ~x000
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
    4f30:	e0 e7       	ldi	r30, 0x70	; 112
    4f32:	f0 e0       	ldi	r31, 0x00	; 0
    4f34:	80 81       	ld	r24, Z
    4f36:	83 60       	ori	r24, 0x03	; 3
    4f38:	80 83       	st	Z, r24
				nrk_led_clr(BLUE_LED);
    4f3a:	83 e0       	ldi	r24, 0x03	; 3
    4f3c:	80 93 b1 00 	sts	0x00B1, r24
    4f40:	08 95       	ret

00004f42 <_nrk_os_timer_reset>:
				nrk_led_clr(GREEN_LED);
				break;
			case 'U': // ~x001
				nrk_gpio_clr(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
    4f42:	83 b5       	in	r24, 0x23	; 35
    4f44:	82 60       	ori	r24, 0x02	; 2
    4f46:	83 bd       	out	0x23, r24	; 35
				nrk_led_set(ORANGE_LED);
    4f48:	10 92 b2 00 	sts	0x00B2, r1
				nrk_led_clr(BLUE_LED);
    4f4c:	10 92 a1 05 	sts	0x05A1, r1
				nrk_led_clr(GREEN_LED);
    4f50:	10 92 ad 05 	sts	0x05AD, r1
    4f54:	08 95       	ret

00004f56 <_nrk_get_next_wakeup>:
				break;
			case 'D': // ~x010
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_clr(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
    4f56:	80 91 b3 00 	lds	r24, 0x00B3
    4f5a:	8f 5f       	subi	r24, 0xFF	; 255
				nrk_led_set(BLUE_LED);
    4f5c:	99 27       	eor	r25, r25
    4f5e:	08 95       	ret

00004f60 <_nrk_set_next_wakeup>:
				nrk_led_clr(GREEN_LED);
				break;
			case 'L': // ~x011
				nrk_gpio_clr(NRK_DEBUG_0);
    4f60:	81 50       	subi	r24, 0x01	; 1
    4f62:	80 93 b3 00 	sts	0x00B3, r24
    4f66:	08 95       	ret

00004f68 <nrk_timer_int_stop>:
				nrk_gpio_clr(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
				nrk_led_set(BLUE_LED);
				nrk_led_clr(GREEN_LED);
    4f68:	88 23       	and	r24, r24
    4f6a:	11 f4       	brne	.+4      	; 0x4f70 <nrk_timer_int_stop+0x8>
				break;
			case 'R': // ~x100
    4f6c:	10 92 71 00 	sts	0x0071, r1
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_clr(NRK_DEBUG_2);
    4f70:	8f ef       	ldi	r24, 0xFF	; 255
    4f72:	9f ef       	ldi	r25, 0xFF	; 255
    4f74:	08 95       	ret

00004f76 <nrk_timer_int_reset>:
				nrk_led_clr(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
				nrk_led_set(GREEN_LED);
				break;
    4f76:	88 23       	and	r24, r24
    4f78:	19 f0       	breq	.+6      	; 0x4f80 <nrk_timer_int_reset+0xa>
    4f7a:	8f ef       	ldi	r24, 0xFF	; 255
    4f7c:	9f ef       	ldi	r25, 0xFF	; 255
    4f7e:	08 95       	ret
			case 'B': // ~x101
				nrk_gpio_clr(NRK_DEBUG_0);
    4f80:	10 92 95 00 	sts	0x0095, r1
    4f84:	10 92 94 00 	sts	0x0094, r1
    4f88:	81 e0       	ldi	r24, 0x01	; 1
    4f8a:	90 e0       	ldi	r25, 0x00	; 0
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_clr(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
    4f8c:	08 95       	ret

00004f8e <nrk_timer_int_read>:
				nrk_led_set(GREEN_LED);
				break;
		}
		
    4f8e:	88 23       	and	r24, r24
    4f90:	19 f0       	breq	.+6      	; 0x4f98 <nrk_timer_int_read+0xa>
    4f92:	80 e0       	ldi	r24, 0x00	; 0
    4f94:	90 e0       	ldi	r25, 0x00	; 0
    4f96:	08 95       	ret
		
		//nrk_led_clr (ORANGE_LED);
    4f98:	80 91 94 00 	lds	r24, 0x0094
    4f9c:	90 91 95 00 	lds	r25, 0x0095
		//nrk_led_toggle (BLUE_LED);
		// Release the RX buffer so future packets can arrive 
		bmac_rx_pkt_release ();
	}
    4fa0:	08 95       	ret

00004fa2 <nrk_timer_int_start>:

}

void nrk_create_taskset ()
    4fa2:	88 23       	and	r24, r24
    4fa4:	19 f0       	breq	.+6      	; 0x4fac <nrk_timer_int_start+0xa>
    4fa6:	8f ef       	ldi	r24, 0xFF	; 255
    4fa8:	9f ef       	ldi	r25, 0xFF	; 255
    4faa:	08 95       	ret
{
/*
    4fac:	82 e0       	ldi	r24, 0x02	; 2
    4fae:	80 93 71 00 	sts	0x0071, r24
    4fb2:	81 e0       	ldi	r24, 0x01	; 1
    4fb4:	90 e0       	ldi	r25, 0x00	; 0
	PIN_TASK.task = pin_task;
	PIN_TASK.Ptos = (void *) &pin_task_stack[NRK_APP_STACKSIZE - 1];
	PIN_TASK.Pbos = (void *) &pin_task_stack[0];
	PIN_TASK.prio = 1;
    4fb6:	08 95       	ret

00004fb8 <nrk_timer_int_configure>:
	PIN_TASK.FirstActivation = TRUE;
	PIN_TASK.Type = BASIC_TASK;
	PIN_TASK.SchType = PREEMPTIVE;
	PIN_TASK.period.secs = 3;
    4fb8:	88 23       	and	r24, r24
    4fba:	19 f0       	breq	.+6      	; 0x4fc2 <nrk_timer_int_configure+0xa>
    4fbc:	8f ef       	ldi	r24, 0xFF	; 255
    4fbe:	9f ef       	ldi	r25, 0xFF	; 255
    4fc0:	08 95       	ret
	PIN_TASK.period.nano_secs = 100 * NANOS_PER_MS;
	PIN_TASK.cpu_reserve.secs = 0;
    4fc2:	cb 01       	movw	r24, r22
    4fc4:	01 97       	sbiw	r24, 0x01	; 1
    4fc6:	05 97       	sbiw	r24, 0x05	; 5
    4fc8:	10 f4       	brcc	.+4      	; 0x4fce <nrk_timer_int_configure+0x16>
    4fca:	60 93 ab 05 	sts	0x05AB, r22
	PIN_TASK.cpu_reserve.nano_secs = 50 * NANOS_PER_MS;
    4fce:	10 92 90 00 	sts	0x0090, r1
	PIN_TASK.offset.secs = 0;
    4fd2:	88 e0       	ldi	r24, 0x08	; 8
    4fd4:	80 93 91 00 	sts	0x0091, r24
	PIN_TASK.offset.nano_secs = 0;
    4fd8:	85 2f       	mov	r24, r21
    4fda:	99 27       	eor	r25, r25
    4fdc:	80 93 99 00 	sts	0x0099, r24
	nrk_activate_task (&PIN_TASK);
    4fe0:	40 93 98 00 	sts	0x0098, r20
*/
    4fe4:	30 93 9d 05 	sts	0x059D, r19
    4fe8:	20 93 9c 05 	sts	0x059C, r18

    4fec:	80 91 ab 05 	lds	r24, 0x05AB
    4ff0:	81 30       	cpi	r24, 0x01	; 1
    4ff2:	21 f4       	brne	.+8      	; 0x4ffc <nrk_timer_int_configure+0x44>
    4ff4:	80 91 91 00 	lds	r24, 0x0091
    4ff8:	81 60       	ori	r24, 0x01	; 1
    4ffa:	0b c0       	rjmp	.+22     	; 0x5012 <nrk_timer_int_configure+0x5a>
	RX_TASK.task = rx_task;
	RX_TASK.Ptos = (void *) &rx_task_stack[NRK_APP_STACKSIZE - 1];
    4ffc:	82 30       	cpi	r24, 0x02	; 2
    4ffe:	21 f4       	brne	.+8      	; 0x5008 <nrk_timer_int_configure+0x50>
    5000:	80 91 91 00 	lds	r24, 0x0091
    5004:	82 60       	ori	r24, 0x02	; 2
    5006:	05 c0       	rjmp	.+10     	; 0x5012 <nrk_timer_int_configure+0x5a>
	RX_TASK.Pbos = (void *) &rx_task_stack[0];
	RX_TASK.prio = 2;
    5008:	83 30       	cpi	r24, 0x03	; 3
    500a:	31 f4       	brne	.+12     	; 0x5018 <nrk_timer_int_configure+0x60>
    500c:	80 91 91 00 	lds	r24, 0x0091
    5010:	83 60       	ori	r24, 0x03	; 3
    5012:	80 93 91 00 	sts	0x0091, r24
    5016:	08 c0       	rjmp	.+16     	; 0x5028 <nrk_timer_int_configure+0x70>
	RX_TASK.FirstActivation = TRUE;
	RX_TASK.Type = BASIC_TASK;
    5018:	84 30       	cpi	r24, 0x04	; 4
    501a:	21 f4       	brne	.+8      	; 0x5024 <nrk_timer_int_configure+0x6c>
    501c:	80 91 91 00 	lds	r24, 0x0091
    5020:	84 60       	ori	r24, 0x04	; 4
    5022:	f7 cf       	rjmp	.-18     	; 0x5012 <nrk_timer_int_configure+0x5a>
	RX_TASK.SchType = PREEMPTIVE;
	RX_TASK.period.secs = 0;
    5024:	85 30       	cpi	r24, 0x05	; 5
    5026:	19 f0       	breq	.+6      	; 0x502e <nrk_timer_int_configure+0x76>
    5028:	81 e0       	ldi	r24, 0x01	; 1
    502a:	90 e0       	ldi	r25, 0x00	; 0
    502c:	08 95       	ret
    502e:	80 91 91 00 	lds	r24, 0x0091
    5032:	85 60       	ori	r24, 0x05	; 5
    5034:	80 93 91 00 	sts	0x0091, r24
    5038:	81 e0       	ldi	r24, 0x01	; 1
    503a:	90 e0       	ldi	r25, 0x00	; 0
	RX_TASK.period.nano_secs = 40 * NANOS_PER_MS;;
	RX_TASK.cpu_reserve.secs = 0;
	RX_TASK.cpu_reserve.nano_secs = 40 * NANOS_PER_MS;;
	RX_TASK.offset.secs = 0;
	RX_TASK.offset.nano_secs = 0;
	nrk_activate_task (&RX_TASK);
    503c:	08 95       	ret

0000503e <_nrk_os_timer_get>:

	printf ("Create done\r\n");
}
    503e:	80 91 b2 00 	lds	r24, 0x00B2
    5042:	99 27       	eor	r25, r25
    5044:	08 95       	ret

00005046 <__vector_13>:
    5046:	0f 92       	push	r0
    5048:	0f b6       	in	r0, 0x3f	; 63
    504a:	0f 92       	push	r0
    504c:	1f 92       	push	r1
    504e:	2f 92       	push	r2
    5050:	3f 92       	push	r3
    5052:	4f 92       	push	r4
    5054:	5f 92       	push	r5
    5056:	6f 92       	push	r6
    5058:	7f 92       	push	r7
    505a:	8f 92       	push	r8
    505c:	9f 92       	push	r9
    505e:	af 92       	push	r10
    5060:	bf 92       	push	r11
    5062:	cf 92       	push	r12
    5064:	df 92       	push	r13
    5066:	ef 92       	push	r14
    5068:	ff 92       	push	r15
    506a:	0f 93       	push	r16
    506c:	1f 93       	push	r17
    506e:	2f 93       	push	r18
    5070:	3f 93       	push	r19
    5072:	4f 93       	push	r20
    5074:	5f 93       	push	r21
    5076:	6f 93       	push	r22
    5078:	7f 93       	push	r23
    507a:	8f 93       	push	r24
    507c:	9f 93       	push	r25
    507e:	af 93       	push	r26
    5080:	bf 93       	push	r27
    5082:	cf 93       	push	r28
    5084:	df 93       	push	r29
    5086:	ef 93       	push	r30
    5088:	ff 93       	push	r31
    508a:	a0 91 7c 06 	lds	r26, 0x067C
    508e:	b0 91 7d 06 	lds	r27, 0x067D
    5092:	0d b6       	in	r0, 0x3d	; 61
    5094:	0d 92       	st	X+, r0
    5096:	0e b6       	in	r0, 0x3e	; 62
    5098:	0d 92       	st	X+, r0
    509a:	1f 92       	push	r1
    509c:	a0 91 eb 03 	lds	r26, 0x03EB
    50a0:	b0 91 ec 03 	lds	r27, 0x03EC
    50a4:	1e 90       	ld	r1, -X
    50a6:	be bf       	out	0x3e, r27	; 62
    50a8:	ad bf       	out	0x3d, r26	; 61
    50aa:	08 95       	ret

000050ac <__vector_17>:
    50ac:	1f 92       	push	r1
    50ae:	0f 92       	push	r0
    50b0:	0f b6       	in	r0, 0x3f	; 63
    50b2:	0f 92       	push	r0
    50b4:	11 24       	eor	r1, r1
    50b6:	0f 90       	pop	r0
    50b8:	0f be       	out	0x3f, r0	; 63
    50ba:	0f 90       	pop	r0
    50bc:	1f 90       	pop	r1
    50be:	18 95       	reti

000050c0 <__vector_32>:
    50c0:	1f 92       	push	r1
    50c2:	0f 92       	push	r0
    50c4:	0f b6       	in	r0, 0x3f	; 63
    50c6:	0f 92       	push	r0
    50c8:	11 24       	eor	r1, r1
    50ca:	2f 93       	push	r18
    50cc:	3f 93       	push	r19
    50ce:	4f 93       	push	r20
    50d0:	5f 93       	push	r21
    50d2:	6f 93       	push	r22
    50d4:	7f 93       	push	r23
    50d6:	8f 93       	push	r24
    50d8:	9f 93       	push	r25
    50da:	af 93       	push	r26
    50dc:	bf 93       	push	r27
    50de:	ef 93       	push	r30
    50e0:	ff 93       	push	r31
    50e2:	e0 91 9c 05 	lds	r30, 0x059C
    50e6:	f0 91 9d 05 	lds	r31, 0x059D
    50ea:	30 97       	sbiw	r30, 0x00	; 0
    50ec:	11 f0       	breq	.+4      	; 0x50f2 <__vector_32+0x32>
    50ee:	09 95       	icall
    50f0:	04 c0       	rjmp	.+8      	; 0x50fa <__vector_32+0x3a>
    50f2:	60 e0       	ldi	r22, 0x00	; 0
    50f4:	8a e0       	ldi	r24, 0x0A	; 10
    50f6:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <nrk_kernel_error_add>
    50fa:	ff 91       	pop	r31
    50fc:	ef 91       	pop	r30
    50fe:	bf 91       	pop	r27
    5100:	af 91       	pop	r26
    5102:	9f 91       	pop	r25
    5104:	8f 91       	pop	r24
    5106:	7f 91       	pop	r23
    5108:	6f 91       	pop	r22
    510a:	5f 91       	pop	r21
    510c:	4f 91       	pop	r20
    510e:	3f 91       	pop	r19
    5110:	2f 91       	pop	r18
    5112:	0f 90       	pop	r0
    5114:	0f be       	out	0x3f, r0	; 63
    5116:	0f 90       	pop	r0
    5118:	1f 90       	pop	r1
    511a:	18 95       	reti

0000511c <__vector_default>:
    511c:	1f 92       	push	r1
    511e:	0f 92       	push	r0
    5120:	0f b6       	in	r0, 0x3f	; 63
    5122:	0f 92       	push	r0
    5124:	11 24       	eor	r1, r1
    5126:	2f 93       	push	r18
    5128:	3f 93       	push	r19
    512a:	4f 93       	push	r20
    512c:	5f 93       	push	r21
    512e:	6f 93       	push	r22
    5130:	7f 93       	push	r23
    5132:	8f 93       	push	r24
    5134:	9f 93       	push	r25
    5136:	af 93       	push	r26
    5138:	bf 93       	push	r27
    513a:	ef 93       	push	r30
    513c:	ff 93       	push	r31
    513e:	60 e0       	ldi	r22, 0x00	; 0
    5140:	8a e0       	ldi	r24, 0x0A	; 10
    5142:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <nrk_kernel_error_add>
    5146:	ff cf       	rjmp	.-2      	; 0x5146 <__vector_default+0x2a>

00005148 <nrk_high_speed_timer_wait>:
	// bmac will try to receive fainter packets.  If the value is set
	// too high or too low performance will suffer greatly.
	// bmac_set_cca_thresh(-45); 


	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
    5148:	cf 93       	push	r28
    514a:	df 93       	push	r29
    514c:	cd b7       	in	r28, 0x3d	; 61
    514e:	de b7       	in	r29, 0x3e	; 62
    5150:	22 97       	sbiw	r28, 0x02	; 2
    5152:	0f b6       	in	r0, 0x3f	; 63
    5154:	f8 94       	cli
    5156:	de bf       	out	0x3e, r29	; 62
    5158:	0f be       	out	0x3f, r0	; 63
    515a:	cd bf       	out	0x3d, r28	; 61
    515c:	fc 01       	movw	r30, r24
	// This sets the next RX buffer.
	// This can be called at anytime before releaseing the packet
    515e:	8f ef       	ldi	r24, 0xFF	; 255
    5160:	e9 37       	cpi	r30, 0x79	; 121
    5162:	f8 07       	cpc	r31, r24
    5164:	10 f0       	brcs	.+4      	; 0x516a <nrk_high_speed_timer_wait+0x22>
    5166:	e0 e0       	ldi	r30, 0x00	; 0
    5168:	f0 e0       	ldi	r31, 0x00	; 0
	// if you wish to do a zero-copy buffer switch
    516a:	9f 01       	movw	r18, r30
    516c:	44 27       	eor	r20, r20
    516e:	55 27       	eor	r21, r21
    5170:	cb 01       	movw	r24, r22
    5172:	aa 27       	eor	r26, r26
    5174:	bb 27       	eor	r27, r27
    5176:	28 0f       	add	r18, r24
    5178:	39 1f       	adc	r19, r25
    517a:	4a 1f       	adc	r20, r26
    517c:	5b 1f       	adc	r21, r27
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
    517e:	21 30       	cpi	r18, 0x01	; 1
    5180:	80 e0       	ldi	r24, 0x00	; 0
    5182:	38 07       	cpc	r19, r24
    5184:	81 e0       	ldi	r24, 0x01	; 1
    5186:	48 07       	cpc	r20, r24
    5188:	80 e0       	ldi	r24, 0x00	; 0
    518a:	58 07       	cpc	r21, r24
    518c:	78 f0       	brcs	.+30     	; 0x51ac <nrk_high_speed_timer_wait+0x64>

	while (1) {
		// Wait until an RX packet is received
		val = bmac_wait_until_rx_pkt ();
		// Get the RX packet 
		//nrk_led_set (ORANGE_LED);
    518e:	80 91 84 00 	lds	r24, 0x0084
    5192:	90 91 85 00 	lds	r25, 0x0085
    5196:	9a 83       	std	Y+2, r25	; 0x02
    5198:	89 83       	std	Y+1, r24	; 0x01
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
		
    519a:	89 81       	ldd	r24, Y+1	; 0x01
    519c:	9a 81       	ldd	r25, Y+2	; 0x02
	// This can be called at anytime before releaseing the packet
	// if you wish to do a zero-copy buffer switch
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);

	bmac_auto_ack_disable();

    519e:	e8 17       	cp	r30, r24
    51a0:	f9 07       	cpc	r31, r25
    51a2:	a8 f3       	brcs	.-22     	; 0x518e <nrk_high_speed_timer_wait+0x46>
	// This sets the next RX buffer.
	// This can be called at anytime before releaseing the packet
	// if you wish to do a zero-copy buffer switch
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);

	bmac_auto_ack_disable();
    51a4:	20 50       	subi	r18, 0x00	; 0
    51a6:	30 40       	sbci	r19, 0x00	; 0
    51a8:	41 40       	sbci	r20, 0x01	; 1
    51aa:	50 40       	sbci	r21, 0x00	; 0

	while (1) {
		// Wait until an RX packet is received
		val = bmac_wait_until_rx_pkt ();
		// Get the RX packet 
		//nrk_led_set (ORANGE_LED);
    51ac:	80 91 84 00 	lds	r24, 0x0084
    51b0:	90 91 85 00 	lds	r25, 0x0085
    51b4:	9a 83       	std	Y+2, r25	; 0x02
    51b6:	89 83       	std	Y+1, r24	; 0x01
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
		
    51b8:	89 81       	ldd	r24, Y+1	; 0x01
    51ba:	9a 81       	ldd	r25, Y+2	; 0x02
	bmac_auto_ack_disable();

	//set port direction as output
	nrk_gpio_direction(NRK_DEBUG_3,NRK_PIN_OUTPUT);//PD.1
	nrk_gpio_direction(NRK_DEBUG_2,NRK_PIN_OUTPUT);//PD.0
	nrk_gpio_direction(NRK_DEBUG_0,NRK_PIN_OUTPUT);//PA.3
    51bc:	82 17       	cp	r24, r18
    51be:	93 07       	cpc	r25, r19
    51c0:	a8 f3       	brcs	.-22     	; 0x51ac <nrk_high_speed_timer_wait+0x64>
    51c2:	22 96       	adiw	r28, 0x02	; 2
    51c4:	0f b6       	in	r0, 0x3f	; 63
    51c6:	f8 94       	cli
    51c8:	de bf       	out	0x3e, r29	; 62
    51ca:	0f be       	out	0x3f, r0	; 63
    51cc:	cd bf       	out	0x3d, r28	; 61
    51ce:	df 91       	pop	r29
    51d0:	cf 91       	pop	r28
    51d2:	08 95       	ret

000051d4 <_nrk_setup_timer>:
void nrk_create_taskset ();

uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];

int main ()
{
    51d4:	ef 92       	push	r14
    51d6:	ff 92       	push	r15
    51d8:	1f 93       	push	r17
	uint16_t div;
    51da:	9e ef       	ldi	r25, 0xFE	; 254
    51dc:	90 93 ad 05 	sts	0x05AD, r25
	nrk_setup_ports ();
	nrk_setup_uart (UART_BAUDRATE_115K2);

    51e0:	80 e2       	ldi	r24, 0x20	; 32
    51e2:	80 93 b6 00 	sts	0x00B6, r24
	nrk_init ();
    51e6:	90 93 b3 00 	sts	0x00B3, r25

    51ea:	13 e0       	ldi	r17, 0x03	; 3
    51ec:	17 bb       	out	0x17, r17	; 23
	nrk_led_clr (0);
    51ee:	82 e0       	ldi	r24, 0x02	; 2
    51f0:	80 93 b0 00 	sts	0x00B0, r24
	nrk_led_clr (1);
    51f4:	91 eb       	ldi	r25, 0xB1	; 177
    51f6:	e9 2e       	mov	r14, r25
    51f8:	f1 2c       	mov	r15, r1
    51fa:	f7 01       	movw	r30, r14
    51fc:	10 83       	st	Z, r17
	nrk_led_clr (2);
    51fe:	83 b5       	in	r24, 0x23	; 35
    5200:	82 60       	ori	r24, 0x02	; 2
    5202:	83 bd       	out	0x23, r24	; 35
	nrk_led_clr (3);

    5204:	17 bb       	out	0x17, r17	; 23
	nrk_time_set (0, 0);

    5206:	14 bd       	out	0x24, r17	; 36
	bmac_task_config ();

	nrk_create_taskset ();
    5208:	83 b5       	in	r24, 0x23	; 35
    520a:	82 60       	ori	r24, 0x02	; 2
    520c:	83 bd       	out	0x23, r24	; 35
	nrk_start ();

	return 0;
}
    520e:	10 92 80 00 	sts	0x0080, r1

    5212:	81 e0       	ldi	r24, 0x01	; 1
    5214:	80 93 81 00 	sts	0x0081, r24
void pin_task ()
    5218:	10 92 85 00 	sts	0x0085, r1
    521c:	10 92 84 00 	sts	0x0084, r1
{
    5220:	83 b5       	in	r24, 0x23	; 35
    5222:	82 60       	ori	r24, 0x02	; 2
    5224:	83 bd       	out	0x23, r24	; 35
	while(1) {
    5226:	83 b5       	in	r24, 0x23	; 35
    5228:	81 60       	ori	r24, 0x01	; 1
    522a:	83 bd       	out	0x23, r24	; 35
		nrk_led_toggle (RED_LED);
		nrk_wait_until_next_period ();
    522c:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <_nrk_os_timer_reset>
		switch(rx_buf[2]) {
			case '-': // ~x000
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_set(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_clr(ORANGE_LED);
    5230:	e0 e7       	ldi	r30, 0x70	; 112
    5232:	f0 e0       	ldi	r31, 0x00	; 0
    5234:	80 81       	ld	r24, Z
    5236:	83 60       	ori	r24, 0x03	; 3
    5238:	80 83       	st	Z, r24
				nrk_led_clr(BLUE_LED);
    523a:	f7 01       	movw	r30, r14
    523c:	10 83       	st	Z, r17
{
	while(1) {
		nrk_led_toggle (RED_LED);
		nrk_wait_until_next_period ();
		nrk_led_toggle (BLUE_LED);
		nrk_wait_until_next_period ();
    523e:	10 92 a1 05 	sts	0x05A1, r1
    5242:	1f 91       	pop	r17
    5244:	ff 90       	pop	r15
    5246:	ef 90       	pop	r14
    5248:	08 95       	ret

0000524a <nrk_ext_int_enable>:
#include <bmac.h>
#include <nrk_error.h>

nrk_task_type RX_TASK;
NRK_STK rx_task_stack[NRK_APP_STACKSIZE];
void rx_task (void);
    524a:	88 23       	and	r24, r24
    524c:	11 f4       	brne	.+4      	; 0x5252 <nrk_ext_int_enable+0x8>
    524e:	e8 9a       	sbi	0x1d, 0	; 29
    5250:	33 c0       	rjmp	.+102    	; 0x52b8 <nrk_ext_int_enable+0x6e>

    5252:	81 30       	cpi	r24, 0x01	; 1
    5254:	11 f4       	brne	.+4      	; 0x525a <nrk_ext_int_enable+0x10>
    5256:	e9 9a       	sbi	0x1d, 1	; 29
    5258:	2f c0       	rjmp	.+94     	; 0x52b8 <nrk_ext_int_enable+0x6e>
nrk_task_type PIN_TASK;
    525a:	82 30       	cpi	r24, 0x02	; 2
    525c:	11 f4       	brne	.+4      	; 0x5262 <nrk_ext_int_enable+0x18>
    525e:	ea 9a       	sbi	0x1d, 2	; 29
    5260:	2b c0       	rjmp	.+86     	; 0x52b8 <nrk_ext_int_enable+0x6e>
NRK_STK pin_task_stack[NRK_APP_STACKSIZE];
    5262:	83 30       	cpi	r24, 0x03	; 3
    5264:	21 f4       	brne	.+8      	; 0x526e <nrk_ext_int_enable+0x24>
    5266:	80 91 6b 00 	lds	r24, 0x006B
    526a:	81 60       	ori	r24, 0x01	; 1
    526c:	23 c0       	rjmp	.+70     	; 0x52b4 <nrk_ext_int_enable+0x6a>
void pin_task (void);
    526e:	84 30       	cpi	r24, 0x04	; 4
    5270:	21 f4       	brne	.+8      	; 0x527a <nrk_ext_int_enable+0x30>
    5272:	80 91 6b 00 	lds	r24, 0x006B
    5276:	82 60       	ori	r24, 0x02	; 2
    5278:	1d c0       	rjmp	.+58     	; 0x52b4 <nrk_ext_int_enable+0x6a>

    527a:	85 30       	cpi	r24, 0x05	; 5
    527c:	21 f4       	brne	.+8      	; 0x5286 <nrk_ext_int_enable+0x3c>
    527e:	80 91 6b 00 	lds	r24, 0x006B
    5282:	84 60       	ori	r24, 0x04	; 4
    5284:	17 c0       	rjmp	.+46     	; 0x52b4 <nrk_ext_int_enable+0x6a>
void nrk_create_taskset ();
    5286:	86 30       	cpi	r24, 0x06	; 6
    5288:	21 f4       	brne	.+8      	; 0x5292 <nrk_ext_int_enable+0x48>
    528a:	80 91 6b 00 	lds	r24, 0x006B
    528e:	88 60       	ori	r24, 0x08	; 8
    5290:	11 c0       	rjmp	.+34     	; 0x52b4 <nrk_ext_int_enable+0x6a>

    5292:	87 30       	cpi	r24, 0x07	; 7
    5294:	21 f4       	brne	.+8      	; 0x529e <nrk_ext_int_enable+0x54>
    5296:	80 91 6b 00 	lds	r24, 0x006B
    529a:	80 61       	ori	r24, 0x10	; 16
    529c:	0b c0       	rjmp	.+22     	; 0x52b4 <nrk_ext_int_enable+0x6a>
uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];
    529e:	88 30       	cpi	r24, 0x08	; 8
    52a0:	21 f4       	brne	.+8      	; 0x52aa <nrk_ext_int_enable+0x60>
    52a2:	80 91 6b 00 	lds	r24, 0x006B
    52a6:	80 62       	ori	r24, 0x20	; 32
    52a8:	05 c0       	rjmp	.+10     	; 0x52b4 <nrk_ext_int_enable+0x6a>

    52aa:	89 30       	cpi	r24, 0x09	; 9
    52ac:	41 f4       	brne	.+16     	; 0x52be <nrk_ext_int_enable+0x74>
    52ae:	80 91 6b 00 	lds	r24, 0x006B
    52b2:	80 64       	ori	r24, 0x40	; 64
    52b4:	80 93 6b 00 	sts	0x006B, r24
    52b8:	81 e0       	ldi	r24, 0x01	; 1
    52ba:	90 e0       	ldi	r25, 0x00	; 0
    52bc:	08 95       	ret
int main ()
    52be:	8a 30       	cpi	r24, 0x0A	; 10
    52c0:	19 f0       	breq	.+6      	; 0x52c8 <nrk_ext_int_enable+0x7e>
    52c2:	8f ef       	ldi	r24, 0xFF	; 255
    52c4:	9f ef       	ldi	r25, 0xFF	; 255
    52c6:	08 95       	ret
    52c8:	80 91 6b 00 	lds	r24, 0x006B
    52cc:	80 68       	ori	r24, 0x80	; 128
    52ce:	80 93 6b 00 	sts	0x006B, r24
    52d2:	81 e0       	ldi	r24, 0x01	; 1
    52d4:	90 e0       	ldi	r25, 0x00	; 0
{
	uint16_t div;
    52d6:	08 95       	ret

000052d8 <nrk_ext_int_disable>:
	nrk_setup_ports ();
	nrk_setup_uart (UART_BAUDRATE_115K2);

	nrk_init ();
    52d8:	88 23       	and	r24, r24
    52da:	11 f4       	brne	.+4      	; 0x52e0 <nrk_ext_int_disable+0x8>
    52dc:	e8 98       	cbi	0x1d, 0	; 29
    52de:	31 c0       	rjmp	.+98     	; 0x5342 <nrk_ext_int_disable+0x6a>

    52e0:	81 30       	cpi	r24, 0x01	; 1
    52e2:	11 f0       	breq	.+4      	; 0x52e8 <nrk_ext_int_disable+0x10>
	nrk_led_clr (0);
    52e4:	82 30       	cpi	r24, 0x02	; 2
    52e6:	11 f4       	brne	.+4      	; 0x52ec <nrk_ext_int_disable+0x14>
    52e8:	e9 98       	cbi	0x1d, 1	; 29
    52ea:	2b c0       	rjmp	.+86     	; 0x5342 <nrk_ext_int_disable+0x6a>
	nrk_led_clr (1);
    52ec:	83 30       	cpi	r24, 0x03	; 3
    52ee:	21 f4       	brne	.+8      	; 0x52f8 <nrk_ext_int_disable+0x20>
    52f0:	80 91 6b 00 	lds	r24, 0x006B
    52f4:	8e 7f       	andi	r24, 0xFE	; 254
    52f6:	23 c0       	rjmp	.+70     	; 0x533e <nrk_ext_int_disable+0x66>
	nrk_led_clr (2);
    52f8:	84 30       	cpi	r24, 0x04	; 4
    52fa:	21 f4       	brne	.+8      	; 0x5304 <nrk_ext_int_disable+0x2c>
    52fc:	80 91 6b 00 	lds	r24, 0x006B
    5300:	8d 7f       	andi	r24, 0xFD	; 253
    5302:	1d c0       	rjmp	.+58     	; 0x533e <nrk_ext_int_disable+0x66>
	nrk_led_clr (3);
    5304:	85 30       	cpi	r24, 0x05	; 5
    5306:	21 f4       	brne	.+8      	; 0x5310 <nrk_ext_int_disable+0x38>
    5308:	80 91 6b 00 	lds	r24, 0x006B
    530c:	8b 7f       	andi	r24, 0xFB	; 251
    530e:	17 c0       	rjmp	.+46     	; 0x533e <nrk_ext_int_disable+0x66>

    5310:	86 30       	cpi	r24, 0x06	; 6
    5312:	21 f4       	brne	.+8      	; 0x531c <nrk_ext_int_disable+0x44>
    5314:	80 91 6b 00 	lds	r24, 0x006B
    5318:	87 7f       	andi	r24, 0xF7	; 247
    531a:	11 c0       	rjmp	.+34     	; 0x533e <nrk_ext_int_disable+0x66>
	nrk_time_set (0, 0);
    531c:	87 30       	cpi	r24, 0x07	; 7
    531e:	21 f4       	brne	.+8      	; 0x5328 <nrk_ext_int_disable+0x50>
    5320:	80 91 6b 00 	lds	r24, 0x006B
    5324:	8f 7e       	andi	r24, 0xEF	; 239
    5326:	0b c0       	rjmp	.+22     	; 0x533e <nrk_ext_int_disable+0x66>

    5328:	88 30       	cpi	r24, 0x08	; 8
    532a:	21 f4       	brne	.+8      	; 0x5334 <nrk_ext_int_disable+0x5c>
    532c:	80 91 6b 00 	lds	r24, 0x006B
    5330:	8f 7d       	andi	r24, 0xDF	; 223
    5332:	05 c0       	rjmp	.+10     	; 0x533e <nrk_ext_int_disable+0x66>
	bmac_task_config ();
    5334:	89 30       	cpi	r24, 0x09	; 9
    5336:	41 f4       	brne	.+16     	; 0x5348 <nrk_ext_int_disable+0x70>
    5338:	80 91 6b 00 	lds	r24, 0x006B
    533c:	8f 7b       	andi	r24, 0xBF	; 191
    533e:	80 93 6b 00 	sts	0x006B, r24
    5342:	81 e0       	ldi	r24, 0x01	; 1
    5344:	90 e0       	ldi	r25, 0x00	; 0
    5346:	08 95       	ret

    5348:	8a 30       	cpi	r24, 0x0A	; 10
    534a:	19 f0       	breq	.+6      	; 0x5352 <nrk_ext_int_disable+0x7a>
    534c:	8f ef       	ldi	r24, 0xFF	; 255
    534e:	9f ef       	ldi	r25, 0xFF	; 255
    5350:	08 95       	ret
    5352:	80 91 6b 00 	lds	r24, 0x006B
    5356:	8f 77       	andi	r24, 0x7F	; 127
    5358:	80 93 6b 00 	sts	0x006B, r24
    535c:	81 e0       	ldi	r24, 0x01	; 1
    535e:	90 e0       	ldi	r25, 0x00	; 0
	nrk_create_taskset ();
	nrk_start ();
    5360:	08 95       	ret

00005362 <nrk_ext_int_configure>:

	return 0;
}

void pin_task ()
{
    5362:	88 23       	and	r24, r24
    5364:	39 f5       	brne	.+78     	; 0x53b4 <nrk_ext_int_configure+0x52>
	while(1) {
		nrk_led_toggle (RED_LED);
    5366:	50 93 9b 06 	sts	0x069B, r21
    536a:	40 93 9a 06 	sts	0x069A, r20
		nrk_wait_until_next_period ();
    536e:	66 23       	and	r22, r22
    5370:	21 f4       	brne	.+8      	; 0x537a <nrk_ext_int_configure+0x18>
    5372:	80 91 69 00 	lds	r24, 0x0069
    5376:	8c 7f       	andi	r24, 0xFC	; 252
    5378:	45 c0       	rjmp	.+138    	; 0x5404 <nrk_ext_int_configure+0xa2>
		nrk_led_toggle (BLUE_LED);
    537a:	61 30       	cpi	r22, 0x01	; 1
    537c:	49 f4       	brne	.+18     	; 0x5390 <nrk_ext_int_configure+0x2e>
		nrk_wait_until_next_period ();
    537e:	80 91 69 00 	lds	r24, 0x0069
    5382:	8d 7f       	andi	r24, 0xFD	; 253
    5384:	80 93 69 00 	sts	0x0069, r24
    5388:	80 91 69 00 	lds	r24, 0x0069
    538c:	81 60       	ori	r24, 0x01	; 1
    538e:	3a c0       	rjmp	.+116    	; 0x5404 <nrk_ext_int_configure+0xa2>
	}
    5390:	62 30       	cpi	r22, 0x02	; 2
    5392:	49 f4       	brne	.+18     	; 0x53a6 <nrk_ext_int_configure+0x44>
}
    5394:	80 91 69 00 	lds	r24, 0x0069
    5398:	82 60       	ori	r24, 0x02	; 2
    539a:	80 93 69 00 	sts	0x0069, r24
    539e:	80 91 69 00 	lds	r24, 0x0069
    53a2:	8e 7f       	andi	r24, 0xFE	; 254
    53a4:	2f c0       	rjmp	.+94     	; 0x5404 <nrk_ext_int_configure+0xa2>

    53a6:	63 30       	cpi	r22, 0x03	; 3
    53a8:	09 f0       	breq	.+2      	; 0x53ac <nrk_ext_int_configure+0x4a>
    53aa:	69 c0       	rjmp	.+210    	; 0x547e <nrk_ext_int_configure+0x11c>
    53ac:	80 91 69 00 	lds	r24, 0x0069
    53b0:	83 60       	ori	r24, 0x03	; 3
    53b2:	28 c0       	rjmp	.+80     	; 0x5404 <nrk_ext_int_configure+0xa2>
void rx_task ()
{
	uint8_t i, len;
    53b4:	81 30       	cpi	r24, 0x01	; 1
    53b6:	49 f5       	brne	.+82     	; 0x540a <nrk_ext_int_configure+0xa8>
	int8_t rssi, val;
	uint8_t *local_rx_buf;
    53b8:	50 93 99 06 	sts	0x0699, r21
    53bc:	40 93 98 06 	sts	0x0698, r20
	nrk_time_t check_period;
    53c0:	66 23       	and	r22, r22
    53c2:	21 f4       	brne	.+8      	; 0x53cc <nrk_ext_int_configure+0x6a>
    53c4:	80 91 69 00 	lds	r24, 0x0069
    53c8:	83 7f       	andi	r24, 0xF3	; 243
    53ca:	1c c0       	rjmp	.+56     	; 0x5404 <nrk_ext_int_configure+0xa2>
	printf ("rx_task PID=%d\r\n", nrk_get_pid ());
    53cc:	61 30       	cpi	r22, 0x01	; 1
    53ce:	49 f4       	brne	.+18     	; 0x53e2 <nrk_ext_int_configure+0x80>

    53d0:	80 91 69 00 	lds	r24, 0x0069
    53d4:	87 7f       	andi	r24, 0xF7	; 247
    53d6:	80 93 69 00 	sts	0x0069, r24
    53da:	80 91 69 00 	lds	r24, 0x0069
    53de:	84 60       	ori	r24, 0x04	; 4
    53e0:	11 c0       	rjmp	.+34     	; 0x5404 <nrk_ext_int_configure+0xa2>
	// init bmac on channel 25 
    53e2:	62 30       	cpi	r22, 0x02	; 2
    53e4:	49 f4       	brne	.+18     	; 0x53f8 <nrk_ext_int_configure+0x96>
	bmac_init (25);
    53e6:	80 91 69 00 	lds	r24, 0x0069
    53ea:	88 60       	ori	r24, 0x08	; 8
    53ec:	80 93 69 00 	sts	0x0069, r24
    53f0:	80 91 69 00 	lds	r24, 0x0069
    53f4:	8b 7f       	andi	r24, 0xFB	; 251
    53f6:	06 c0       	rjmp	.+12     	; 0x5404 <nrk_ext_int_configure+0xa2>

    53f8:	63 30       	cpi	r22, 0x03	; 3
    53fa:	09 f0       	breq	.+2      	; 0x53fe <nrk_ext_int_configure+0x9c>
    53fc:	40 c0       	rjmp	.+128    	; 0x547e <nrk_ext_int_configure+0x11c>
    53fe:	80 91 69 00 	lds	r24, 0x0069
    5402:	8c 60       	ori	r24, 0x0C	; 12
    5404:	80 93 69 00 	sts	0x0069, r24
    5408:	37 c0       	rjmp	.+110    	; 0x5478 <nrk_ext_int_configure+0x116>
	// By default the RX check rate is 100ms
	// below shows how to change that
	check_period.secs=0;
    540a:	82 30       	cpi	r24, 0x02	; 2
    540c:	31 f5       	brne	.+76     	; 0x545a <nrk_ext_int_configure+0xf8>
	check_period.nano_secs=40*NANOS_PER_MS; // Fastest we could safely go
	val=bmac_set_rx_check_rate(check_period);
    540e:	50 93 99 06 	sts	0x0699, r21
    5412:	40 93 98 06 	sts	0x0698, r20

    5416:	66 23       	and	r22, r22
    5418:	21 f4       	brne	.+8      	; 0x5422 <nrk_ext_int_configure+0xc0>
    541a:	80 91 69 00 	lds	r24, 0x0069
    541e:	8f 7c       	andi	r24, 0xCF	; 207
    5420:	f1 cf       	rjmp	.-30     	; 0x5404 <nrk_ext_int_configure+0xa2>
	// The default Clear Channel Assement RSSI threshold is -45
    5422:	61 30       	cpi	r22, 0x01	; 1
    5424:	49 f4       	brne	.+18     	; 0x5438 <nrk_ext_int_configure+0xd6>
	// Setting this value higher means that you will only trigger
    5426:	80 91 69 00 	lds	r24, 0x0069
    542a:	8f 7d       	andi	r24, 0xDF	; 223
    542c:	80 93 69 00 	sts	0x0069, r24
    5430:	80 91 69 00 	lds	r24, 0x0069
    5434:	80 61       	ori	r24, 0x10	; 16
    5436:	e6 cf       	rjmp	.-52     	; 0x5404 <nrk_ext_int_configure+0xa2>
	// receive with a very strong signal.  Setting this lower means
    5438:	62 30       	cpi	r22, 0x02	; 2
    543a:	49 f4       	brne	.+18     	; 0x544e <nrk_ext_int_configure+0xec>
	// bmac will try to receive fainter packets.  If the value is set
    543c:	80 91 69 00 	lds	r24, 0x0069
    5440:	80 62       	ori	r24, 0x20	; 32
    5442:	80 93 69 00 	sts	0x0069, r24
    5446:	80 91 69 00 	lds	r24, 0x0069
    544a:	8f 7e       	andi	r24, 0xEF	; 239
    544c:	db cf       	rjmp	.-74     	; 0x5404 <nrk_ext_int_configure+0xa2>
	// too high or too low performance will suffer greatly.
    544e:	63 30       	cpi	r22, 0x03	; 3
    5450:	b1 f4       	brne	.+44     	; 0x547e <nrk_ext_int_configure+0x11c>
    5452:	80 91 69 00 	lds	r24, 0x0069
    5456:	80 63       	ori	r24, 0x30	; 48
    5458:	d5 cf       	rjmp	.-86     	; 0x5404 <nrk_ext_int_configure+0xa2>
	// bmac_set_cca_thresh(-45); 


	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
	// This sets the next RX buffer.
	// This can be called at anytime before releaseing the packet
    545a:	83 50       	subi	r24, 0x03	; 3
    545c:	88 30       	cpi	r24, 0x08	; 8
    545e:	18 f0       	brcs	.+6      	; 0x5466 <nrk_ext_int_configure+0x104>
    5460:	8f ef       	ldi	r24, 0xFF	; 255
    5462:	9f ef       	ldi	r25, 0xFF	; 255
    5464:	08 95       	ret
	// if you wish to do a zero-copy buffer switch
    5466:	80 91 68 00 	lds	r24, 0x0068
    546a:	81 60       	ori	r24, 0x01	; 1
    546c:	80 93 68 00 	sts	0x0068, r24
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);
    5470:	50 93 9f 06 	sts	0x069F, r21
    5474:	40 93 9e 06 	sts	0x069E, r20
    5478:	81 e0       	ldi	r24, 0x01	; 1
    547a:	90 e0       	ldi	r25, 0x00	; 0
    547c:	08 95       	ret

    547e:	81 e0       	ldi	r24, 0x01	; 1
    5480:	90 e0       	ldi	r25, 0x00	; 0
	bmac_auto_ack_disable();

	//set port direction as output
    5482:	08 95       	ret

00005484 <__vector_1>:
	while (1) {
		// Wait until an RX packet is received
		val = bmac_wait_until_rx_pkt ();
		// Get the RX packet 
		//nrk_led_set (ORANGE_LED);
		local_rx_buf = bmac_rx_pkt_get (&len, &rssi);
    5484:	1f 92       	push	r1
    5486:	0f 92       	push	r0
    5488:	0f b6       	in	r0, 0x3f	; 63
    548a:	0f 92       	push	r0
    548c:	11 24       	eor	r1, r1
    548e:	2f 93       	push	r18
    5490:	3f 93       	push	r19
    5492:	4f 93       	push	r20
    5494:	5f 93       	push	r21
    5496:	6f 93       	push	r22
    5498:	7f 93       	push	r23
    549a:	8f 93       	push	r24
    549c:	9f 93       	push	r25
    549e:	af 93       	push	r26
    54a0:	bf 93       	push	r27
    54a2:	ef 93       	push	r30
    54a4:	ff 93       	push	r31
		
    54a6:	e0 91 9a 06 	lds	r30, 0x069A
    54aa:	f0 91 9b 06 	lds	r31, 0x069B
    54ae:	30 97       	sbiw	r30, 0x00	; 0
    54b0:	11 f0       	breq	.+4      	; 0x54b6 <__vector_1+0x32>
    54b2:	09 95       	icall
    54b4:	04 c0       	rjmp	.+8      	; 0x54be <__vector_1+0x3a>
		printf ("%c=%c\r\n", rx_buf[0], rx_buf[2]);
		
    54b6:	60 e0       	ldi	r22, 0x00	; 0
    54b8:	8a e0       	ldi	r24, 0x0A	; 10
    54ba:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <nrk_kernel_error_add>
    54be:	ff 91       	pop	r31
    54c0:	ef 91       	pop	r30
    54c2:	bf 91       	pop	r27
    54c4:	af 91       	pop	r26
    54c6:	9f 91       	pop	r25
    54c8:	8f 91       	pop	r24
    54ca:	7f 91       	pop	r23
    54cc:	6f 91       	pop	r22
    54ce:	5f 91       	pop	r21
    54d0:	4f 91       	pop	r20
    54d2:	3f 91       	pop	r19
    54d4:	2f 91       	pop	r18
    54d6:	0f 90       	pop	r0
    54d8:	0f be       	out	0x3f, r0	; 63
    54da:	0f 90       	pop	r0
    54dc:	1f 90       	pop	r1
    54de:	18 95       	reti

000054e0 <__vector_9>:
	bmac_auto_ack_disable();

	//set port direction as output
	nrk_gpio_direction(NRK_DEBUG_3,NRK_PIN_OUTPUT);//PD.1
	nrk_gpio_direction(NRK_DEBUG_2,NRK_PIN_OUTPUT);//PD.0
	nrk_gpio_direction(NRK_DEBUG_0,NRK_PIN_OUTPUT);//PA.3
    54e0:	1f 92       	push	r1
    54e2:	0f 92       	push	r0
    54e4:	0f b6       	in	r0, 0x3f	; 63
    54e6:	0f 92       	push	r0
    54e8:	11 24       	eor	r1, r1
    54ea:	2f 93       	push	r18
    54ec:	3f 93       	push	r19
    54ee:	4f 93       	push	r20
    54f0:	5f 93       	push	r21
    54f2:	6f 93       	push	r22
    54f4:	7f 93       	push	r23
    54f6:	8f 93       	push	r24
    54f8:	9f 93       	push	r25
    54fa:	af 93       	push	r26
    54fc:	bf 93       	push	r27
    54fe:	ef 93       	push	r30
    5500:	ff 93       	push	r31
	nrk_gpio_direction(NRK_DEBUG_1,NRK_PIN_OUTPUT);//PA.4
    5502:	e0 91 9e 06 	lds	r30, 0x069E
    5506:	f0 91 9f 06 	lds	r31, 0x069F
    550a:	30 97       	sbiw	r30, 0x00	; 0
    550c:	11 f0       	breq	.+4      	; 0x5512 <__vector_9+0x32>
    550e:	09 95       	icall
    5510:	04 c0       	rjmp	.+8      	; 0x551a <__vector_9+0x3a>

	while (1) {
    5512:	60 e0       	ldi	r22, 0x00	; 0
    5514:	8a e0       	ldi	r24, 0x0A	; 10
    5516:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <nrk_kernel_error_add>
    551a:	ff 91       	pop	r31
    551c:	ef 91       	pop	r30
    551e:	bf 91       	pop	r27
    5520:	af 91       	pop	r26
    5522:	9f 91       	pop	r25
    5524:	8f 91       	pop	r24
    5526:	7f 91       	pop	r23
    5528:	6f 91       	pop	r22
    552a:	5f 91       	pop	r21
    552c:	4f 91       	pop	r20
    552e:	3f 91       	pop	r19
    5530:	2f 91       	pop	r18
    5532:	0f 90       	pop	r0
    5534:	0f be       	out	0x3f, r0	; 63
    5536:	0f 90       	pop	r0
    5538:	1f 90       	pop	r1
    553a:	18 95       	reti

0000553c <_nrk_startup_ok>:
#include <avr/sleep.h>
#include <hal.h>
#include <bmac.h>
#include <nrk_error.h>

nrk_task_type RX_TASK;
    553c:	80 91 b0 00 	lds	r24, 0x00B0
    5540:	90 e0       	ldi	r25, 0x00	; 0
    5542:	81 11       	cpse	r24, r1
    5544:	91 e0       	ldi	r25, 0x01	; 1
    5546:	81 e0       	ldi	r24, 0x01	; 1
    5548:	98 27       	eor	r25, r24
NRK_STK rx_task_stack[NRK_APP_STACKSIZE];
void rx_task (void);
    554a:	89 2f       	mov	r24, r25
    554c:	99 27       	eor	r25, r25
    554e:	08 95       	ret

00005550 <update_watchdog>:

nrk_task_type PIN_TASK;
NRK_STK pin_task_stack[NRK_APP_STACKSIZE];
    5550:	08 95       	ret

00005552 <nrk_watchdog_check>:

	nrk_led_clr (0);
	nrk_led_clr (1);
	nrk_led_clr (2);
	nrk_led_clr (3);

    5552:	04 b6       	in	r0, 0x34	; 52
    5554:	03 fc       	sbrc	r0, 3
    5556:	03 c0       	rjmp	.+6      	; 0x555e <nrk_watchdog_check+0xc>
    5558:	81 e0       	ldi	r24, 0x01	; 1
    555a:	90 e0       	ldi	r25, 0x00	; 0
    555c:	08 95       	ret
    555e:	8f ef       	ldi	r24, 0xFF	; 255
    5560:	9f ef       	ldi	r25, 0xFF	; 255
	nrk_time_set (0, 0);

    5562:	08 95       	ret

00005564 <nrk_watchdog_reset>:
	bmac_task_config ();

	nrk_create_taskset ();
	nrk_start ();
    5564:	a8 95       	wdr
    5566:	08 95       	ret

00005568 <nrk_watchdog_disable>:
#include <avr/sleep.h>
#include <hal.h>
#include <bmac.h>
#include <nrk_error.h>

nrk_task_type RX_TASK;
    5568:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <nrk_int_disable>
	nrk_time_set (0, 0);

	bmac_task_config ();

	nrk_create_taskset ();
	nrk_start ();
    556c:	a8 95       	wdr
#include <bmac.h>
#include <nrk_error.h>

nrk_task_type RX_TASK;
NRK_STK rx_task_stack[NRK_APP_STACKSIZE];
void rx_task (void);
    556e:	84 b7       	in	r24, 0x34	; 52
    5570:	87 7f       	andi	r24, 0xF7	; 247
    5572:	84 bf       	out	0x34, r24	; 52

    5574:	e0 e6       	ldi	r30, 0x60	; 96
    5576:	f0 e0       	ldi	r31, 0x00	; 0
    5578:	80 81       	ld	r24, Z
    557a:	88 61       	ori	r24, 0x18	; 24
    557c:	80 83       	st	Z, r24
nrk_task_type PIN_TASK;
    557e:	10 82       	st	Z, r1
NRK_STK pin_task_stack[NRK_APP_STACKSIZE];
    5580:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <nrk_int_enable>
    5584:	08 95       	ret

00005586 <nrk_watchdog_enable>:

void nrk_create_taskset ();

uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];

int main ()
    5586:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <nrk_int_disable>
{
    558a:	84 b7       	in	r24, 0x34	; 52
    558c:	87 7f       	andi	r24, 0xF7	; 247
    558e:	84 bf       	out	0x34, r24	; 52
	nrk_time_set (0, 0);

	bmac_task_config ();

	nrk_create_taskset ();
	nrk_start ();
    5590:	a8 95       	wdr
uint8_t rx_buf[RF_MAX_PAYLOAD_SIZE];

int main ()
{
	uint16_t div;
	nrk_setup_ports ();
    5592:	e0 e6       	ldi	r30, 0x60	; 96
    5594:	f0 e0       	ldi	r31, 0x00	; 0
    5596:	80 81       	ld	r24, Z
    5598:	88 61       	ori	r24, 0x18	; 24
    559a:	80 83       	st	Z, r24
	nrk_setup_uart (UART_BAUDRATE_115K2);
    559c:	8d e0       	ldi	r24, 0x0D	; 13
    559e:	80 83       	st	Z, r24

    55a0:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <nrk_int_enable>
    55a4:	08 95       	ret

000055a6 <nrk_battery_save>:
	nrk_create_taskset ();
	nrk_start ();

	return 0;
}

    55a6:	08 95       	ret

000055a8 <nrk_sleep>:
void rx_task ()
{
	uint8_t i, len;
	int8_t rssi, val;
	uint8_t *local_rx_buf;
	nrk_time_t check_period;
    55a8:	83 b7       	in	r24, 0x33	; 51
    55aa:	81 7f       	andi	r24, 0xF1	; 241
    55ac:	86 60       	ori	r24, 0x06	; 6
    55ae:	83 bf       	out	0x33, r24	; 51
	printf ("rx_task PID=%d\r\n", nrk_get_pid ());
    55b0:	83 b7       	in	r24, 0x33	; 51
    55b2:	81 60       	ori	r24, 0x01	; 1
    55b4:	83 bf       	out	0x33, r24	; 51
    55b6:	88 95       	sleep
    55b8:	83 b7       	in	r24, 0x33	; 51
    55ba:	8e 7f       	andi	r24, 0xFE	; 254
    55bc:	83 bf       	out	0x33, r24	; 51
    55be:	08 95       	ret

000055c0 <nrk_idle>:
	// init bmac on channel 25 
	bmac_init (25);

	// By default the RX check rate is 100ms
	// below shows how to change that
	check_period.secs=0;
    55c0:	83 b7       	in	r24, 0x33	; 51
    55c2:	81 7f       	andi	r24, 0xF1	; 241
    55c4:	83 bf       	out	0x33, r24	; 51
	check_period.nano_secs=40*NANOS_PER_MS; // Fastest we could safely go
    55c6:	83 b7       	in	r24, 0x33	; 51
    55c8:	81 60       	ori	r24, 0x01	; 1
    55ca:	83 bf       	out	0x33, r24	; 51
    55cc:	88 95       	sleep
    55ce:	83 b7       	in	r24, 0x33	; 51
    55d0:	8e 7f       	andi	r24, 0xFE	; 254
    55d2:	83 bf       	out	0x33, r24	; 51
    55d4:	08 95       	ret

000055d6 <nrk_task_set_entry_function>:
	val=bmac_set_rx_check_rate(check_period);

	// The default Clear Channel Assement RSSI threshold is -45
	// Setting this value higher means that you will only trigger
	// receive with a very strong signal.  Setting this lower means
	// bmac will try to receive fainter packets.  If the value is set
    55d6:	fc 01       	movw	r30, r24
    55d8:	76 83       	std	Z+6, r23	; 0x06
    55da:	65 83       	std	Z+5, r22	; 0x05
    55dc:	08 95       	ret

000055de <nrk_task_stk_init>:
	// if you wish to do a zero-copy buffer switch
	bmac_rx_pkt_set_buffer (rx_buf, RF_MAX_PAYLOAD_SIZE);

	bmac_auto_ack_disable();

	//set port direction as output
    55de:	fb 01       	movw	r30, r22
    55e0:	da 01       	movw	r26, r20
	nrk_gpio_direction(NRK_DEBUG_3,NRK_PIN_OUTPUT);//PD.1
	nrk_gpio_direction(NRK_DEBUG_2,NRK_PIN_OUTPUT);//PD.0
	nrk_gpio_direction(NRK_DEBUG_0,NRK_PIN_OUTPUT);//PA.3
	nrk_gpio_direction(NRK_DEBUG_1,NRK_PIN_OUTPUT);//PA.4

	while (1) {
    55e2:	25 e5       	ldi	r18, 0x55	; 85
    55e4:	2c 93       	st	X, r18
		
		switch(rx_buf[0]) {
			case 'A': // ~0xxx
				nrk_led_clr(RED_LED);
				nrk_gpio_set(NRK_DEBUG_3);
				break;
    55e6:	32 97       	sbiw	r30, 0x02	; 2
			case 'B': // ~1xxx
				nrk_led_set(RED_LED);
    55e8:	29 2f       	mov	r18, r25
    55ea:	33 27       	eor	r19, r19
    55ec:	20 83       	st	Z, r18
				nrk_gpio_clr(NRK_DEBUG_3);
    55ee:	81 83       	std	Z+1, r24	; 0x01
				break;
		}
    55f0:	32 97       	sbiw	r30, 0x02	; 2
    55f2:	11 82       	std	Z+1, r1	; 0x01
    55f4:	10 82       	st	Z, r1

    55f6:	32 97       	sbiw	r30, 0x02	; 2
    55f8:	11 82       	std	Z+1, r1	; 0x01
    55fa:	10 82       	st	Z, r1
		switch(rx_buf[2]) {
    55fc:	32 97       	sbiw	r30, 0x02	; 2
    55fe:	11 82       	std	Z+1, r1	; 0x01
    5600:	10 82       	st	Z, r1
			case '-': // ~x000
    5602:	32 97       	sbiw	r30, 0x02	; 2
    5604:	11 82       	std	Z+1, r1	; 0x01
    5606:	10 82       	st	Z, r1
				nrk_gpio_set(NRK_DEBUG_0);
    5608:	32 97       	sbiw	r30, 0x02	; 2
    560a:	11 82       	std	Z+1, r1	; 0x01
    560c:	10 82       	st	Z, r1
				nrk_gpio_set(NRK_DEBUG_1);
    560e:	32 97       	sbiw	r30, 0x02	; 2
    5610:	11 82       	std	Z+1, r1	; 0x01
    5612:	10 82       	st	Z, r1
				nrk_gpio_set(NRK_DEBUG_2);
    5614:	32 97       	sbiw	r30, 0x02	; 2
    5616:	11 82       	std	Z+1, r1	; 0x01
    5618:	10 82       	st	Z, r1
				nrk_led_clr(ORANGE_LED);
    561a:	32 97       	sbiw	r30, 0x02	; 2
    561c:	11 82       	std	Z+1, r1	; 0x01
    561e:	10 82       	st	Z, r1
				nrk_led_clr(BLUE_LED);
				nrk_led_clr(GREEN_LED);
    5620:	32 97       	sbiw	r30, 0x02	; 2
    5622:	11 82       	std	Z+1, r1	; 0x01
    5624:	10 82       	st	Z, r1
				break;
    5626:	32 97       	sbiw	r30, 0x02	; 2
    5628:	11 82       	std	Z+1, r1	; 0x01
    562a:	10 82       	st	Z, r1
			case 'U': // ~x001
    562c:	32 97       	sbiw	r30, 0x02	; 2
    562e:	11 82       	std	Z+1, r1	; 0x01
    5630:	10 82       	st	Z, r1
				nrk_gpio_clr(NRK_DEBUG_0);
    5632:	32 97       	sbiw	r30, 0x02	; 2
    5634:	11 82       	std	Z+1, r1	; 0x01
    5636:	10 82       	st	Z, r1
				nrk_gpio_set(NRK_DEBUG_1);
    5638:	32 97       	sbiw	r30, 0x02	; 2
    563a:	11 82       	std	Z+1, r1	; 0x01
    563c:	10 82       	st	Z, r1
				nrk_gpio_set(NRK_DEBUG_2);
    563e:	32 97       	sbiw	r30, 0x02	; 2
    5640:	11 82       	std	Z+1, r1	; 0x01
    5642:	10 82       	st	Z, r1
				nrk_led_set(ORANGE_LED);
    5644:	32 97       	sbiw	r30, 0x02	; 2
    5646:	11 82       	std	Z+1, r1	; 0x01
    5648:	10 82       	st	Z, r1
				nrk_led_clr(BLUE_LED);
    564a:	32 97       	sbiw	r30, 0x02	; 2
    564c:	11 82       	std	Z+1, r1	; 0x01
    564e:	10 82       	st	Z, r1
				nrk_led_clr(GREEN_LED);
    5650:	32 97       	sbiw	r30, 0x02	; 2
    5652:	11 82       	std	Z+1, r1	; 0x01
    5654:	10 82       	st	Z, r1
				break;
			case 'D': // ~x010
				nrk_gpio_set(NRK_DEBUG_0);
				nrk_gpio_clr(NRK_DEBUG_1);
    5656:	cf 01       	movw	r24, r30
    5658:	08 95       	ret

0000565a <nrk_stack_pointer_init>:
			case 'L': // ~x011
				nrk_gpio_clr(NRK_DEBUG_0);
				nrk_gpio_clr(NRK_DEBUG_1);
				nrk_gpio_set(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
				nrk_led_set(BLUE_LED);
    565a:	85 e5       	ldi	r24, 0x55	; 85
    565c:	80 93 7e 21 	sts	0x217E, r24
				nrk_led_clr(GREEN_LED);
				break;
    5660:	ee ef       	ldi	r30, 0xFE	; 254
    5662:	f1 e2       	ldi	r31, 0x21	; 33
    5664:	f0 93 ec 03 	sts	0x03EC, r31
    5668:	e0 93 eb 03 	sts	0x03EB, r30
			case 'R': // ~x100
				nrk_gpio_set(NRK_DEBUG_0);
    566c:	21 ee       	ldi	r18, 0xE1	; 225
    566e:	37 e1       	ldi	r19, 0x17	; 23
    5670:	83 2f       	mov	r24, r19
    5672:	99 27       	eor	r25, r25
    5674:	80 83       	st	Z, r24
				nrk_gpio_set(NRK_DEBUG_1);
    5676:	20 93 ff 21 	sts	0x21FF, r18
    567a:	08 95       	ret

0000567c <nrk_stack_pointer_restore>:
				nrk_gpio_clr(NRK_DEBUG_2);
				nrk_led_set(ORANGE_LED);
				nrk_led_clr(BLUE_LED);
				nrk_led_set(GREEN_LED);
				break;
		}
    567c:	21 ee       	ldi	r18, 0xE1	; 225
    567e:	37 e1       	ldi	r19, 0x17	; 23
    5680:	83 2f       	mov	r24, r19
    5682:	99 27       	eor	r25, r25
    5684:	80 93 fe 21 	sts	0x21FE, r24
		
    5688:	20 93 ff 21 	sts	0x21FF, r18
    568c:	08 95       	ret

0000568e <nrk_target_start>:
		//nrk_led_clr (ORANGE_LED);
		//nrk_led_toggle (BLUE_LED);
		// Release the RX buffer so future packets can arrive 
		bmac_rx_pkt_release ();
	}

    568e:	0e 94 ea 28 	call	0x51d4	; 0x51d4 <_nrk_setup_timer>
}
    5692:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <nrk_int_enable>
    5696:	08 95       	ret

00005698 <nrk_task_set_stk>:
	// receive with a very strong signal.  Setting this lower means
	// bmac will try to receive fainter packets.  If the value is set
	// too high or too low performance will suffer greatly.
	// bmac_set_cca_thresh(-45); 


    5698:	ef 92       	push	r14
    569a:	ff 92       	push	r15
    569c:	0f 93       	push	r16
    569e:	1f 93       	push	r17
    56a0:	cf 93       	push	r28
    56a2:	df 93       	push	r29
    56a4:	7c 01       	movw	r14, r24
    56a6:	8b 01       	movw	r16, r22
    56a8:	ea 01       	movw	r28, r20
	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));
	// This sets the next RX buffer.
    56aa:	40 32       	cpi	r20, 0x20	; 32
    56ac:	51 05       	cpc	r21, r1
    56ae:	18 f4       	brcc	.+6      	; 0x56b6 <nrk_task_set_stk+0x1e>
    56b0:	81 e1       	ldi	r24, 0x11	; 17
    56b2:	0e 94 00 1b 	call	0x3600	; 0x3600 <nrk_error_add>
	// This can be called at anytime before releaseing the packet
    56b6:	c8 01       	movw	r24, r16
    56b8:	01 97       	sbiw	r24, 0x01	; 1
    56ba:	8c 0f       	add	r24, r28
    56bc:	9d 1f       	adc	r25, r29
    56be:	f7 01       	movw	r30, r14
    56c0:	92 83       	std	Z+2, r25	; 0x02
    56c2:	81 83       	std	Z+1, r24	; 0x01
	// if you wish to do a zero-copy buffer switch
    56c4:	14 83       	std	Z+4, r17	; 0x04
    56c6:	03 83       	std	Z+3, r16	; 0x03
    56c8:	df 91       	pop	r29
    56ca:	cf 91       	pop	r28
    56cc:	1f 91       	pop	r17
    56ce:	0f 91       	pop	r16
    56d0:	ff 90       	pop	r15
    56d2:	ef 90       	pop	r14
    56d4:	08 95       	ret

000056d6 <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    56d6:	a0 91 6d 06 	lds	r26, 0x066D
	lds r27,nrk_high_ready_TCB+1
    56da:	b0 91 6e 06 	lds	r27, 0x066E

    	;x points to &OSTCB[x]
    
	ld r28,x+
    56de:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    56e0:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    56e2:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    56e4:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    56e6:	ff 91       	pop	r31
	pop r30
    56e8:	ef 91       	pop	r30
	pop r29
    56ea:	df 91       	pop	r29
	pop r28
    56ec:	cf 91       	pop	r28
	pop r27
    56ee:	bf 91       	pop	r27
	pop r26
    56f0:	af 91       	pop	r26
	pop r25
    56f2:	9f 91       	pop	r25
	pop r24			
    56f4:	8f 91       	pop	r24
	pop r23
    56f6:	7f 91       	pop	r23
	pop r22
    56f8:	6f 91       	pop	r22
	pop r21
    56fa:	5f 91       	pop	r21
	pop r20	
    56fc:	4f 91       	pop	r20
	pop r19
    56fe:	3f 91       	pop	r19
	pop r18	
    5700:	2f 91       	pop	r18
	pop r17
    5702:	1f 91       	pop	r17
	pop r16
    5704:	0f 91       	pop	r16
	pop r15
    5706:	ff 90       	pop	r15
	pop r14
    5708:	ef 90       	pop	r14
	pop r13
    570a:	df 90       	pop	r13
	pop r12
    570c:	cf 90       	pop	r12
	pop r11
    570e:	bf 90       	pop	r11
	pop r10
    5710:	af 90       	pop	r10
	pop r9
    5712:	9f 90       	pop	r9
	pop r8
    5714:	8f 90       	pop	r8
	pop r7
    5716:	7f 90       	pop	r7
	pop r6
    5718:	6f 90       	pop	r6
	pop r5
    571a:	5f 90       	pop	r5
	pop r4
    571c:	4f 90       	pop	r4
	pop r3
    571e:	3f 90       	pop	r3
	pop r2
    5720:	2f 90       	pop	r2
	pop r1
    5722:	1f 90       	pop	r1
	pop r0
    5724:	0f 90       	pop	r0
	out __SREG__, r0
    5726:	0f be       	out	0x3f, r0	; 63
	pop r0	
    5728:	0f 90       	pop	r0
	   
    	reti 
    572a:	18 95       	reti

0000572c <vfprintf>:
#define FL_ALTLWR	0x20
#define FL_NEGATIVE	0x40
#define FL_LONG 	0x80

int vfprintf (FILE * stream, const char *fmt, va_list ap)
{
    572c:	ab e0       	ldi	r26, 0x0B	; 11
    572e:	b0 e0       	ldi	r27, 0x00	; 0
    5730:	ec e9       	ldi	r30, 0x9C	; 156
    5732:	fb e2       	ldi	r31, 0x2B	; 43
    5734:	0c 94 e4 2f 	jmp	0x5fc8	; 0x5fc8 <__prologue_saves__>
    5738:	4c 01       	movw	r8, r24
    573a:	6b 01       	movw	r12, r22
    573c:	7a 01       	movw	r14, r20
    unsigned char c;		/* holds a char from the format string */
    unsigned char flags;
    unsigned char buf[11];	/* size for -1 in octal, without '\0'	*/

    stream->len = 0;
    573e:	fc 01       	movw	r30, r24
    5740:	17 82       	std	Z+7, r1	; 0x07
    5742:	16 82       	std	Z+6, r1	; 0x06

    if ((stream->flags & __SWR) == 0)
    5744:	83 81       	ldd	r24, Z+3	; 0x03
    5746:	81 fd       	sbrc	r24, 1
    5748:	08 c0       	rjmp	.+16     	; 0x575a <vfprintf+0x2e>
    574a:	8f ef       	ldi	r24, 0xFF	; 255
    574c:	9f ef       	ldi	r25, 0xFF	; 255
    574e:	1a c1       	rjmp	.+564    	; 0x5984 <vfprintf+0x258>
	      case 'S':
		flags |= FL_PGMSTRING;
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
    5750:	22 e0       	ldi	r18, 0x02	; 2
    5752:	30 e0       	ldi	r19, 0x00	; 0
    5754:	e2 0e       	add	r14, r18
    5756:	f3 1e       	adc	r15, r19
    5758:	0c c0       	rjmp	.+24     	; 0x5772 <vfprintf+0x46>
	for (;;) {
	    c = GETBYTE (stream->flags, __SPGM, fmt);
	    if (!c) goto ret;
	    if (c == '%') {
		c = GETBYTE (stream->flags, __SPGM, fmt);
		if (c != '%') break;
    575a:	9d eb       	ldi	r25, 0xBD	; 189
    575c:	29 2e       	mov	r2, r25
    575e:	93 e0       	ldi	r25, 0x03	; 3
    5760:	39 2e       	mov	r3, r25
# error
#endif
		putc ('X' + (flags & FL_ALTLWR), stream);
	}
	do {
	    putc (buf[--c], stream);
    5762:	3e 01       	movw	r6, r28
    5764:	08 94       	sec
    5766:	61 1c       	adc	r6, r1
    5768:	71 1c       	adc	r7, r1
    576a:	86 eb       	ldi	r24, 0xB6	; 182
    576c:	48 2e       	mov	r4, r24
    576e:	83 e0       	ldi	r24, 0x03	; 3
    5770:	58 2e       	mov	r5, r24
	return EOF;

    for (;;) {

	for (;;) {
	    c = GETBYTE (stream->flags, __SPGM, fmt);
    5772:	f4 01       	movw	r30, r8
    5774:	03 81       	ldd	r16, Z+3	; 0x03
    5776:	f6 01       	movw	r30, r12
    5778:	03 fd       	sbrc	r16, 3
    577a:	85 91       	lpm	r24, Z+
    577c:	03 ff       	sbrs	r16, 3
    577e:	81 91       	ld	r24, Z+
    5780:	6f 01       	movw	r12, r30
	    if (!c) goto ret;
    5782:	88 23       	and	r24, r24
    5784:	09 f4       	brne	.+2      	; 0x5788 <vfprintf+0x5c>
    5786:	fb c0       	rjmp	.+502    	; 0x597e <vfprintf+0x252>
	    if (c == '%') {
    5788:	85 32       	cpi	r24, 0x25	; 37
    578a:	59 f4       	brne	.+22     	; 0x57a2 <vfprintf+0x76>
		c = GETBYTE (stream->flags, __SPGM, fmt);
    578c:	03 fd       	sbrc	r16, 3
    578e:	65 91       	lpm	r22, Z+
    5790:	03 ff       	sbrs	r16, 3
    5792:	61 91       	ld	r22, Z+
    5794:	6f 01       	movw	r12, r30
		if (c != '%') break;
    5796:	65 32       	cpi	r22, 0x25	; 37
    5798:	19 f0       	breq	.+6      	; 0x57a0 <vfprintf+0x74>
    579a:	16 2f       	mov	r17, r22
    579c:	bb 24       	eor	r11, r11
    579e:	1c c0       	rjmp	.+56     	; 0x57d8 <vfprintf+0xac>
    57a0:	85 e2       	ldi	r24, 0x25	; 37
	    }
	    putc (c, stream);
    57a2:	b4 01       	movw	r22, r8
    57a4:	99 27       	eor	r25, r25
    57a6:	2a c0       	rjmp	.+84     	; 0x57fc <vfprintf+0xd0>

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
	     c = GETBYTE (stream->flags, __SPGM, fmt))
	{
	    if (c && strchr_P (PSTR(" +-.0123456789h"), c))
    57a8:	11 23       	and	r17, r17
    57aa:	59 f1       	breq	.+86     	; 0x5802 <vfprintf+0xd6>
    57ac:	61 2f       	mov	r22, r17
    57ae:	77 27       	eor	r23, r23
    57b0:	c1 01       	movw	r24, r2
    57b2:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <strchr_P>
    57b6:	89 2b       	or	r24, r25
    57b8:	49 f4       	brne	.+18     	; 0x57cc <vfprintf+0xa0>
		continue;
	    if (c == '#') {
    57ba:	13 32       	cpi	r17, 0x23	; 35
    57bc:	19 f4       	brne	.+6      	; 0x57c4 <vfprintf+0x98>
		flags |= FL_ALT;
    57be:	f0 e1       	ldi	r31, 0x10	; 16
    57c0:	bf 2a       	or	r11, r31
    57c2:	04 c0       	rjmp	.+8      	; 0x57cc <vfprintf+0xa0>
		continue;
	    }
	    if (c == 'l') {
    57c4:	1c 36       	cpi	r17, 0x6C	; 108
    57c6:	61 f4       	brne	.+24     	; 0x57e0 <vfprintf+0xb4>
		flags |= FL_LONG;
    57c8:	20 e8       	ldi	r18, 0x80	; 128
    57ca:	b2 2a       	or	r11, r18
	    putc (c, stream);
	}

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
	     c = GETBYTE (stream->flags, __SPGM, fmt))
    57cc:	f6 01       	movw	r30, r12
    57ce:	03 fd       	sbrc	r16, 3
    57d0:	15 91       	lpm	r17, Z+
    57d2:	03 ff       	sbrs	r16, 3
    57d4:	11 91       	ld	r17, Z+
    57d6:	6f 01       	movw	r12, r30
	    }
	    putc (c, stream);
	}

	for (flags = 0;
	     !(flags & FL_LONG);	/* 'll' will detect as error	*/
    57d8:	b7 fe       	sbrs	r11, 7
    57da:	e6 cf       	rjmp	.-52     	; 0x57a8 <vfprintf+0x7c>
	    break;
	}

	/* Only a format character is valid.	*/

	if (c && strchr_P (PSTR("EFGefg"), c)) {
    57dc:	11 23       	and	r17, r17
    57de:	89 f0       	breq	.+34     	; 0x5802 <vfprintf+0xd6>
    57e0:	61 2f       	mov	r22, r17
    57e2:	77 27       	eor	r23, r23
    57e4:	c2 01       	movw	r24, r4
    57e6:	0e 94 2d 2d 	call	0x5a5a	; 0x5a5a <strchr_P>
    57ea:	89 2b       	or	r24, r25
    57ec:	51 f0       	breq	.+20     	; 0x5802 <vfprintf+0xd6>
	    (void) va_arg (ap, double);
    57ee:	24 e0       	ldi	r18, 0x04	; 4
    57f0:	30 e0       	ldi	r19, 0x00	; 0
    57f2:	e2 0e       	add	r14, r18
    57f4:	f3 1e       	adc	r15, r19
	    putc ('?', stream);
    57f6:	b4 01       	movw	r22, r8
    57f8:	8f e3       	ldi	r24, 0x3F	; 63
    57fa:	90 e0       	ldi	r25, 0x00	; 0
    57fc:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <fputc>
    5800:	b8 cf       	rjmp	.-144    	; 0x5772 <vfprintf+0x46>
	}

	{
	    const char * pnt;

	    switch (c) {
    5802:	13 36       	cpi	r17, 0x63	; 99
    5804:	29 f0       	breq	.+10     	; 0x5810 <vfprintf+0xe4>
    5806:	13 37       	cpi	r17, 0x73	; 115
    5808:	81 f0       	breq	.+32     	; 0x582a <vfprintf+0xfe>
    580a:	13 35       	cpi	r17, 0x53	; 83
    580c:	f9 f4       	brne	.+62     	; 0x584c <vfprintf+0x120>
    580e:	0b c0       	rjmp	.+22     	; 0x5826 <vfprintf+0xfa>

	      case 'c':
		putc (va_arg (ap, int), stream);
    5810:	87 01       	movw	r16, r14
    5812:	0e 5f       	subi	r16, 0xFE	; 254
    5814:	1f 4f       	sbci	r17, 0xFF	; 255
    5816:	b4 01       	movw	r22, r8
    5818:	f7 01       	movw	r30, r14
    581a:	80 81       	ld	r24, Z
    581c:	91 81       	ldd	r25, Z+1	; 0x01
    581e:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <fputc>
    5822:	78 01       	movw	r14, r16
    5824:	a6 cf       	rjmp	.-180    	; 0x5772 <vfprintf+0x46>
		continue;

	      case 'S':
		flags |= FL_PGMSTRING;
    5826:	f1 e0       	ldi	r31, 0x01	; 1
    5828:	bf 2a       	or	r11, r31
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
    582a:	f7 01       	movw	r30, r14
    582c:	00 81       	ld	r16, Z
    582e:	11 81       	ldd	r17, Z+1	; 0x01
    5830:	04 c0       	rjmp	.+8      	; 0x583a <vfprintf+0x10e>
	        while ( (c = GETBYTE (flags, FL_PGMSTRING, pnt)) != 0)
		    putc (c, stream);
    5832:	b4 01       	movw	r22, r8
    5834:	99 27       	eor	r25, r25
    5836:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <fputc>
		flags |= FL_PGMSTRING;
		/* FALLTHROUGH */

	      case 's':
		pnt = va_arg (ap, char *);
	        while ( (c = GETBYTE (flags, FL_PGMSTRING, pnt)) != 0)
    583a:	f8 01       	movw	r30, r16
    583c:	b0 fc       	sbrc	r11, 0
    583e:	85 91       	lpm	r24, Z+
    5840:	b0 fe       	sbrs	r11, 0
    5842:	81 91       	ld	r24, Z+
    5844:	8f 01       	movw	r16, r30
    5846:	88 23       	and	r24, r24
    5848:	a1 f7       	brne	.-24     	; 0x5832 <vfprintf+0x106>
    584a:	82 cf       	rjmp	.-252    	; 0x5750 <vfprintf+0x24>
		    putc (c, stream);
		continue;
	    }
	}

	if (c == 'd' || c == 'i') {
    584c:	14 36       	cpi	r17, 0x64	; 100
    584e:	11 f0       	breq	.+4      	; 0x5854 <vfprintf+0x128>
    5850:	19 36       	cpi	r17, 0x69	; 105
    5852:	49 f5       	brne	.+82     	; 0x58a6 <vfprintf+0x17a>
	    long x = (flags & FL_LONG) ? va_arg(ap,long) : va_arg(ap,int);
    5854:	b7 fe       	sbrs	r11, 7
    5856:	0a c0       	rjmp	.+20     	; 0x586c <vfprintf+0x140>
    5858:	f7 01       	movw	r30, r14
    585a:	60 81       	ld	r22, Z
    585c:	71 81       	ldd	r23, Z+1	; 0x01
    585e:	82 81       	ldd	r24, Z+2	; 0x02
    5860:	93 81       	ldd	r25, Z+3	; 0x03
    5862:	24 e0       	ldi	r18, 0x04	; 4
    5864:	30 e0       	ldi	r19, 0x00	; 0
    5866:	e2 0e       	add	r14, r18
    5868:	f3 1e       	adc	r15, r19
    586a:	0d c0       	rjmp	.+26     	; 0x5886 <vfprintf+0x15a>
    586c:	f7 01       	movw	r30, r14
    586e:	80 81       	ld	r24, Z
    5870:	91 81       	ldd	r25, Z+1	; 0x01
    5872:	9c 01       	movw	r18, r24
    5874:	b9 01       	movw	r22, r18
    5876:	88 27       	eor	r24, r24
    5878:	77 fd       	sbrc	r23, 7
    587a:	80 95       	com	r24
    587c:	98 2f       	mov	r25, r24
    587e:	42 e0       	ldi	r20, 0x02	; 2
    5880:	50 e0       	ldi	r21, 0x00	; 0
    5882:	e4 0e       	add	r14, r20
    5884:	f5 1e       	adc	r15, r21
	    flags &= ~FL_ALT;
    5886:	5f ee       	ldi	r21, 0xEF	; 239
    5888:	b5 22       	and	r11, r21
	    if (x < 0) {
    588a:	97 ff       	sbrs	r25, 7
    588c:	09 c0       	rjmp	.+18     	; 0x58a0 <vfprintf+0x174>
		x = -x;
    588e:	90 95       	com	r25
    5890:	80 95       	com	r24
    5892:	70 95       	com	r23
    5894:	61 95       	neg	r22
    5896:	7f 4f       	sbci	r23, 0xFF	; 255
    5898:	8f 4f       	sbci	r24, 0xFF	; 255
    589a:	9f 4f       	sbci	r25, 0xFF	; 255
		/* `putc ('-', stream)' will considarably inlarge stack size.
		   So flag is used.	*/
		flags |= FL_NEGATIVE;
    589c:	e0 e4       	ldi	r30, 0x40	; 64
    589e:	be 2a       	or	r11, r30
	    }
	    c = __ultoa_invert (x, (char *)buf, 10) - (char *)buf;
    58a0:	2a e0       	ldi	r18, 0x0A	; 10
    58a2:	30 e0       	ldi	r19, 0x00	; 0
    58a4:	3a c0       	rjmp	.+116    	; 0x591a <vfprintf+0x1ee>

	} else {
	    int base;

	    switch (c) {
    58a6:	10 37       	cpi	r17, 0x70	; 112
    58a8:	b1 f0       	breq	.+44     	; 0x58d6 <vfprintf+0x1aa>
    58aa:	11 37       	cpi	r17, 0x71	; 113
    58ac:	30 f4       	brcc	.+12     	; 0x58ba <vfprintf+0x18e>
    58ae:	18 35       	cpi	r17, 0x58	; 88
    58b0:	c9 f0       	breq	.+50     	; 0x58e4 <vfprintf+0x1b8>
    58b2:	1f 36       	cpi	r17, 0x6F	; 111
    58b4:	09 f0       	breq	.+2      	; 0x58b8 <vfprintf+0x18c>
    58b6:	63 c0       	rjmp	.+198    	; 0x597e <vfprintf+0x252>
    58b8:	06 c0       	rjmp	.+12     	; 0x58c6 <vfprintf+0x19a>
    58ba:	15 37       	cpi	r17, 0x75	; 117
    58bc:	39 f0       	breq	.+14     	; 0x58cc <vfprintf+0x1a0>
    58be:	18 37       	cpi	r17, 0x78	; 120
    58c0:	09 f0       	breq	.+2      	; 0x58c4 <vfprintf+0x198>
    58c2:	5d c0       	rjmp	.+186    	; 0x597e <vfprintf+0x252>
    58c4:	0a c0       	rjmp	.+20     	; 0x58da <vfprintf+0x1ae>
    58c6:	28 e0       	ldi	r18, 0x08	; 8
    58c8:	30 e0       	ldi	r19, 0x00	; 0
    58ca:	10 c0       	rjmp	.+32     	; 0x58ec <vfprintf+0x1c0>
	      case 'u':
		flags &= ~FL_ALT;
    58cc:	ff ee       	ldi	r31, 0xEF	; 239
    58ce:	bf 22       	and	r11, r31
    58d0:	2a e0       	ldi	r18, 0x0A	; 10
    58d2:	30 e0       	ldi	r19, 0x00	; 0
    58d4:	0b c0       	rjmp	.+22     	; 0x58ec <vfprintf+0x1c0>
		goto ultoa;
	      case 'o':
	        base = 8;
		goto ultoa;
	      case 'p':
	        flags |= FL_ALT;
    58d6:	20 e1       	ldi	r18, 0x10	; 16
    58d8:	b2 2a       	or	r11, r18
		/* no break */
	      case 'x':
		flags |= (FL_ALTHEX | FL_ALTLWR);
    58da:	34 e2       	ldi	r19, 0x24	; 36
    58dc:	b3 2a       	or	r11, r19
    58de:	20 e1       	ldi	r18, 0x10	; 16
    58e0:	30 e0       	ldi	r19, 0x00	; 0
    58e2:	04 c0       	rjmp	.+8      	; 0x58ec <vfprintf+0x1c0>
	        base = 16;
		goto ultoa;
	      case 'X':
		flags |= FL_ALTHEX;
    58e4:	44 e0       	ldi	r20, 0x04	; 4
    58e6:	b4 2a       	or	r11, r20
    58e8:	20 e1       	ldi	r18, 0x10	; 16
    58ea:	32 e0       	ldi	r19, 0x02	; 2
	        base = 16 | XTOA_UPPER;
	      ultoa:
		c = __ultoa_invert ((flags & FL_LONG)
    58ec:	b7 fe       	sbrs	r11, 7
    58ee:	0a c0       	rjmp	.+20     	; 0x5904 <vfprintf+0x1d8>
    58f0:	f7 01       	movw	r30, r14
    58f2:	60 81       	ld	r22, Z
    58f4:	71 81       	ldd	r23, Z+1	; 0x01
    58f6:	82 81       	ldd	r24, Z+2	; 0x02
    58f8:	93 81       	ldd	r25, Z+3	; 0x03
    58fa:	44 e0       	ldi	r20, 0x04	; 4
    58fc:	50 e0       	ldi	r21, 0x00	; 0
    58fe:	e4 0e       	add	r14, r20
    5900:	f5 1e       	adc	r15, r21
    5902:	0b c0       	rjmp	.+22     	; 0x591a <vfprintf+0x1ee>
    5904:	f7 01       	movw	r30, r14
    5906:	80 81       	ld	r24, Z
    5908:	91 81       	ldd	r25, Z+1	; 0x01
    590a:	ac 01       	movw	r20, r24
    590c:	ba 01       	movw	r22, r20
    590e:	88 27       	eor	r24, r24
    5910:	99 27       	eor	r25, r25
    5912:	e2 e0       	ldi	r30, 0x02	; 2
    5914:	f0 e0       	ldi	r31, 0x00	; 0
    5916:	ee 0e       	add	r14, r30
    5918:	ff 1e       	adc	r15, r31
    591a:	a3 01       	movw	r20, r6
    591c:	0e 94 fd 2d 	call	0x5bfa	; 0x5bfa <__ultoa_invert>
    5920:	a8 2e       	mov	r10, r24
    5922:	a6 18       	sub	r10, r6
	        goto ret;
	    }
	}

	/* Integer number output.	*/
	if (flags & FL_NEGATIVE)
    5924:	0b 2d       	mov	r16, r11
    5926:	11 27       	eor	r17, r17
    5928:	06 ff       	sbrs	r16, 6
    592a:	05 c0       	rjmp	.+10     	; 0x5936 <vfprintf+0x20a>
	    putc ('-', stream);
    592c:	b4 01       	movw	r22, r8
    592e:	8d e2       	ldi	r24, 0x2D	; 45
    5930:	90 e0       	ldi	r25, 0x00	; 0
    5932:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <fputc>
	if ((flags & FL_ALT) && (buf[c-1] != '0')) {
    5936:	04 ff       	sbrs	r16, 4
    5938:	15 c0       	rjmp	.+42     	; 0x5964 <vfprintf+0x238>
    593a:	fe 01       	movw	r30, r28
    593c:	ea 0d       	add	r30, r10
    593e:	f1 1d       	adc	r31, r1
    5940:	80 81       	ld	r24, Z
    5942:	80 33       	cpi	r24, 0x30	; 48
    5944:	79 f0       	breq	.+30     	; 0x5964 <vfprintf+0x238>
	    putc ('0', stream);
    5946:	b4 01       	movw	r22, r8
    5948:	80 e3       	ldi	r24, 0x30	; 48
    594a:	90 e0       	ldi	r25, 0x00	; 0
    594c:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <fputc>
	    if (flags & FL_ALTHEX)
    5950:	02 ff       	sbrs	r16, 2
    5952:	08 c0       	rjmp	.+16     	; 0x5964 <vfprintf+0x238>
#if  FL_ALTLWR != 'x' - 'X'
# error
#endif
		putc ('X' + (flags & FL_ALTLWR), stream);
    5954:	00 72       	andi	r16, 0x20	; 32
    5956:	10 70       	andi	r17, 0x00	; 0
    5958:	b4 01       	movw	r22, r8
    595a:	c8 01       	movw	r24, r16
    595c:	88 5a       	subi	r24, 0xA8	; 168
    595e:	9f 4f       	sbci	r25, 0xFF	; 255
    5960:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <fputc>
	}
	do {
	    putc (buf[--c], stream);
    5964:	aa 94       	dec	r10
    5966:	f3 01       	movw	r30, r6
    5968:	ea 0d       	add	r30, r10
    596a:	f1 1d       	adc	r31, r1
    596c:	80 81       	ld	r24, Z
    596e:	b4 01       	movw	r22, r8
    5970:	99 27       	eor	r25, r25
    5972:	0e 94 86 2d 	call	0x5b0c	; 0x5b0c <fputc>
	} while (c);
    5976:	aa 20       	and	r10, r10
    5978:	09 f4       	brne	.+2      	; 0x597c <vfprintf+0x250>
    597a:	fb ce       	rjmp	.-522    	; 0x5772 <vfprintf+0x46>
    597c:	f3 cf       	rjmp	.-26     	; 0x5964 <vfprintf+0x238>

    } /* for (;;) */

  ret:
    return stream->len;
    597e:	f4 01       	movw	r30, r8
    5980:	86 81       	ldd	r24, Z+6	; 0x06
    5982:	97 81       	ldd	r25, Z+7	; 0x07
    5984:	e2 e1       	ldi	r30, 0x12	; 18
    5986:	2b 96       	adiw	r28, 0x0b	; 11
    5988:	0c 94 00 30 	jmp	0x6000	; 0x6000 <__epilogue_restores__>

0000598c <do_rand>:
nrk_task_type PIN_TASK;
NRK_STK pin_task_stack[NRK_APP_STACKSIZE];
void pin_task (void);

void nrk_create_taskset ();

    598c:	a0 e0       	ldi	r26, 0x00	; 0
    598e:	b0 e0       	ldi	r27, 0x00	; 0
    5990:	ec ec       	ldi	r30, 0xCC	; 204
    5992:	fc e2       	ldi	r31, 0x2C	; 44
    5994:	0c 94 ec 2f 	jmp	0x5fd8	; 0x5fd8 <__prologue_saves__+0x10>
    5998:	ec 01       	movw	r28, r24

	nrk_time_set (0, 0);

	bmac_task_config ();

	nrk_create_taskset ();
    599a:	68 81       	ld	r22, Y
    599c:	79 81       	ldd	r23, Y+1	; 0x01
    599e:	8a 81       	ldd	r24, Y+2	; 0x02
    59a0:	9b 81       	ldd	r25, Y+3	; 0x03
	nrk_start ();

    59a2:	61 15       	cp	r22, r1
    59a4:	71 05       	cpc	r23, r1
    59a6:	81 05       	cpc	r24, r1
    59a8:	91 05       	cpc	r25, r1
    59aa:	49 f4       	brne	.+18     	; 0x59be <do_rand+0x32>
    59ac:	84 e2       	ldi	r24, 0x24	; 36
    59ae:	a8 2e       	mov	r10, r24
    59b0:	89 ed       	ldi	r24, 0xD9	; 217
    59b2:	b8 2e       	mov	r11, r24
    59b4:	8b e5       	ldi	r24, 0x5B	; 91
    59b6:	c8 2e       	mov	r12, r24
    59b8:	87 e0       	ldi	r24, 0x07	; 7
    59ba:	d8 2e       	mov	r13, r24
    59bc:	02 c0       	rjmp	.+4      	; 0x59c2 <do_rand+0x36>

	nrk_time_set (0, 0);

	bmac_task_config ();

	nrk_create_taskset ();
    59be:	5b 01       	movw	r10, r22
    59c0:	6c 01       	movw	r12, r24
	nrk_start ();

	return 0;
}

void pin_task ()
    59c2:	c6 01       	movw	r24, r12
    59c4:	b5 01       	movw	r22, r10
    59c6:	2d e1       	ldi	r18, 0x1D	; 29
    59c8:	33 ef       	ldi	r19, 0xF3	; 243
    59ca:	41 e0       	ldi	r20, 0x01	; 1
    59cc:	50 e0       	ldi	r21, 0x00	; 0
    59ce:	0e 94 2f 30 	call	0x605e	; 0x605e <__divmodsi4>
    59d2:	27 ea       	ldi	r18, 0xA7	; 167
    59d4:	31 e4       	ldi	r19, 0x41	; 65
    59d6:	40 e0       	ldi	r20, 0x00	; 0
    59d8:	50 e0       	ldi	r21, 0x00	; 0
    59da:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <__mulsi3>
    59de:	7b 01       	movw	r14, r22
    59e0:	8c 01       	movw	r16, r24
    59e2:	c6 01       	movw	r24, r12
    59e4:	b5 01       	movw	r22, r10
    59e6:	2d e1       	ldi	r18, 0x1D	; 29
    59e8:	33 ef       	ldi	r19, 0xF3	; 243
    59ea:	41 e0       	ldi	r20, 0x01	; 1
    59ec:	50 e0       	ldi	r21, 0x00	; 0
    59ee:	0e 94 2f 30 	call	0x605e	; 0x605e <__divmodsi4>
    59f2:	ca 01       	movw	r24, r20
    59f4:	b9 01       	movw	r22, r18
    59f6:	24 e1       	ldi	r18, 0x14	; 20
    59f8:	3b e0       	ldi	r19, 0x0B	; 11
    59fa:	40 e0       	ldi	r20, 0x00	; 0
    59fc:	50 e0       	ldi	r21, 0x00	; 0
    59fe:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <__mulsi3>
    5a02:	e6 1a       	sub	r14, r22
    5a04:	f7 0a       	sbc	r15, r23
    5a06:	08 0b       	sbc	r16, r24
    5a08:	19 0b       	sbc	r17, r25
{
    5a0a:	17 ff       	sbrs	r17, 7
    5a0c:	08 c0       	rjmp	.+16     	; 0x5a1e <do_rand+0x92>
	while(1) {
    5a0e:	8f ef       	ldi	r24, 0xFF	; 255
    5a10:	9f ef       	ldi	r25, 0xFF	; 255
    5a12:	af ef       	ldi	r26, 0xFF	; 255
    5a14:	bf e7       	ldi	r27, 0x7F	; 127
    5a16:	e8 0e       	add	r14, r24
    5a18:	f9 1e       	adc	r15, r25
    5a1a:	0a 1f       	adc	r16, r26
    5a1c:	1b 1f       	adc	r17, r27
		nrk_led_toggle (RED_LED);
    5a1e:	e8 82       	st	Y, r14
    5a20:	f9 82       	std	Y+1, r15	; 0x01
    5a22:	0a 83       	std	Y+2, r16	; 0x02
    5a24:	1b 83       	std	Y+3, r17	; 0x03
		nrk_wait_until_next_period ();
		nrk_led_toggle (BLUE_LED);
    5a26:	c7 01       	movw	r24, r14
    5a28:	9f 77       	andi	r25, 0x7F	; 127
    5a2a:	ea e0       	ldi	r30, 0x0A	; 10
    5a2c:	cd b7       	in	r28, 0x3d	; 61
    5a2e:	de b7       	in	r29, 0x3e	; 62
    5a30:	0c 94 08 30 	jmp	0x6010	; 0x6010 <__epilogue_restores__+0x10>

00005a34 <rand_r>:
		nrk_wait_until_next_period ();
	}
}

void rx_task ()
{
    5a34:	0e 94 c6 2c 	call	0x598c	; 0x598c <do_rand>
    5a38:	08 95       	ret

00005a3a <rand>:
	nrk_time_t check_period;
	printf ("rx_task PID=%d\r\n", nrk_get_pid ());

	// init bmac on channel 25 
	bmac_init (25);

    5a3a:	88 e9       	ldi	r24, 0x98	; 152
    5a3c:	92 e0       	ldi	r25, 0x02	; 2
    5a3e:	0e 94 c6 2c 	call	0x598c	; 0x598c <do_rand>
    5a42:	08 95       	ret

00005a44 <srand>:
	// By default the RX check rate is 100ms
	// below shows how to change that
	check_period.secs=0;
	check_period.nano_secs=40*NANOS_PER_MS; // Fastest we could safely go
	val=bmac_set_rx_check_rate(check_period);

    5a44:	aa 27       	eor	r26, r26
    5a46:	bb 27       	eor	r27, r27
    5a48:	80 93 98 02 	sts	0x0298, r24
    5a4c:	90 93 99 02 	sts	0x0299, r25
    5a50:	a0 93 9a 02 	sts	0x029A, r26
    5a54:	b0 93 9b 02 	sts	0x029B, r27
    5a58:	08 95       	ret

00005a5a <strchr_P>:
    5a5a:	fc 01       	movw	r30, r24
    5a5c:	05 90       	lpm	r0, Z+
    5a5e:	06 16       	cp	r0, r22
    5a60:	21 f0       	breq	.+8      	; 0x5a6a <strchr_P+0x10>
    5a62:	00 20       	and	r0, r0
    5a64:	d9 f7       	brne	.-10     	; 0x5a5c <strchr_P+0x2>
    5a66:	c0 01       	movw	r24, r0
    5a68:	08 95       	ret
    5a6a:	31 97       	sbiw	r30, 0x01	; 1
    5a6c:	cf 01       	movw	r24, r30
    5a6e:	08 95       	ret

00005a70 <fdevopen>:
   not use for new code.
*/

FILE *
fdevopen(int (*put)(char, FILE *), int (*get)(FILE *))
{
    5a70:	ef 92       	push	r14
    5a72:	ff 92       	push	r15
    5a74:	0f 93       	push	r16
    5a76:	1f 93       	push	r17
    5a78:	cf 93       	push	r28
    5a7a:	df 93       	push	r29
    5a7c:	8c 01       	movw	r16, r24
    5a7e:	7b 01       	movw	r14, r22
	FILE *s;

	if (put == 0 && get == 0)
    5a80:	89 2b       	or	r24, r25
    5a82:	11 f4       	brne	.+4      	; 0x5a88 <fdevopen+0x18>
    5a84:	67 2b       	or	r22, r23
    5a86:	d1 f1       	breq	.+116    	; 0x5afc <fdevopen+0x8c>
		return 0;

	if ((s = calloc(1, sizeof(FILE))) == 0)
    5a88:	6e e0       	ldi	r22, 0x0E	; 14
    5a8a:	70 e0       	ldi	r23, 0x00	; 0
    5a8c:	81 e0       	ldi	r24, 0x01	; 1
    5a8e:	90 e0       	ldi	r25, 0x00	; 0
    5a90:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <calloc>
    5a94:	fc 01       	movw	r30, r24
    5a96:	00 97       	sbiw	r24, 0x00	; 0
    5a98:	89 f1       	breq	.+98     	; 0x5afc <fdevopen+0x8c>
    5a9a:	dc 01       	movw	r26, r24
		return 0;

	s->flags = __SMALLOC;
    5a9c:	80 e8       	ldi	r24, 0x80	; 128
    5a9e:	83 83       	std	Z+3, r24	; 0x03

	if (get != 0) {
    5aa0:	e1 14       	cp	r14, r1
    5aa2:	f1 04       	cpc	r15, r1
    5aa4:	71 f0       	breq	.+28     	; 0x5ac2 <fdevopen+0x52>
		s->get = get;
    5aa6:	f3 86       	std	Z+11, r15	; 0x0b
    5aa8:	e2 86       	std	Z+10, r14	; 0x0a
		s->flags |= __SRD;
    5aaa:	81 e8       	ldi	r24, 0x81	; 129
    5aac:	83 83       	std	Z+3, r24	; 0x03
		if (stdin == 0)
    5aae:	80 91 a0 06 	lds	r24, 0x06A0
    5ab2:	90 91 a1 06 	lds	r25, 0x06A1
    5ab6:	89 2b       	or	r24, r25
    5ab8:	21 f4       	brne	.+8      	; 0x5ac2 <fdevopen+0x52>
			stdin = s;
    5aba:	f0 93 a1 06 	sts	0x06A1, r31
    5abe:	e0 93 a0 06 	sts	0x06A0, r30
	}

	if (put != 0) {
    5ac2:	01 15       	cp	r16, r1
    5ac4:	11 05       	cpc	r17, r1
    5ac6:	e1 f0       	breq	.+56     	; 0x5b00 <fdevopen+0x90>
		s->put = put;
    5ac8:	11 87       	std	Z+9, r17	; 0x09
    5aca:	00 87       	std	Z+8, r16	; 0x08
		s->flags |= __SWR;
    5acc:	83 81       	ldd	r24, Z+3	; 0x03
    5ace:	82 60       	ori	r24, 0x02	; 2
    5ad0:	83 83       	std	Z+3, r24	; 0x03
		if (stdout == 0) {
    5ad2:	80 91 a2 06 	lds	r24, 0x06A2
    5ad6:	90 91 a3 06 	lds	r25, 0x06A3
    5ada:	89 2b       	or	r24, r25
    5adc:	89 f4       	brne	.+34     	; 0x5b00 <fdevopen+0x90>
			stdout = s;
    5ade:	f0 93 a3 06 	sts	0x06A3, r31
    5ae2:	e0 93 a2 06 	sts	0x06A2, r30
			if (stderr == 0)
    5ae6:	80 91 a4 06 	lds	r24, 0x06A4
    5aea:	90 91 a5 06 	lds	r25, 0x06A5
    5aee:	89 2b       	or	r24, r25
    5af0:	39 f4       	brne	.+14     	; 0x5b00 <fdevopen+0x90>
				stderr = s;
    5af2:	f0 93 a5 06 	sts	0x06A5, r31
    5af6:	e0 93 a4 06 	sts	0x06A4, r30
    5afa:	02 c0       	rjmp	.+4      	; 0x5b00 <fdevopen+0x90>
    5afc:	a0 e0       	ldi	r26, 0x00	; 0
    5afe:	b0 e0       	ldi	r27, 0x00	; 0
		}
	}

	return s;
}
    5b00:	cd 01       	movw	r24, r26
    5b02:	e6 e0       	ldi	r30, 0x06	; 6
    5b04:	cd b7       	in	r28, 0x3d	; 61
    5b06:	de b7       	in	r29, 0x3e	; 62
    5b08:	0c 94 0c 30 	jmp	0x6018	; 0x6018 <__epilogue_restores__+0x18>

00005b0c <fputc>:
#include <stdio.h>
#include <stdlib.h>

#include "stdio_private.h"

/** \file */
    5b0c:	0f 93       	push	r16
    5b0e:	1f 93       	push	r17
    5b10:	cf 93       	push	r28
    5b12:	df 93       	push	r29
    5b14:	8c 01       	movw	r16, r24
    5b16:	eb 01       	movw	r28, r22

/** \ingroup avr_stdio
    5b18:	8b 81       	ldd	r24, Y+3	; 0x03
    5b1a:	99 27       	eor	r25, r25
    5b1c:	81 ff       	sbrs	r24, 1
    5b1e:	1b c0       	rjmp	.+54     	; 0x5b56 <fputc+0x4a>
   This function is a replacement for \c fopen().

   It opens a stream for a device where the actual device
    5b20:	82 ff       	sbrs	r24, 2
    5b22:	0d c0       	rjmp	.+26     	; 0x5b3e <fputc+0x32>
   implementation needs to be provided by the application.  If
    5b24:	2e 81       	ldd	r18, Y+6	; 0x06
    5b26:	3f 81       	ldd	r19, Y+7	; 0x07
    5b28:	8c 81       	ldd	r24, Y+4	; 0x04
    5b2a:	9d 81       	ldd	r25, Y+5	; 0x05
    5b2c:	28 17       	cp	r18, r24
    5b2e:	39 07       	cpc	r19, r25
    5b30:	64 f4       	brge	.+24     	; 0x5b4a <fputc+0x3e>
   successful, a pointer to the structure for the opened stream is
    5b32:	e8 81       	ld	r30, Y
    5b34:	f9 81       	ldd	r31, Y+1	; 0x01
    5b36:	01 93       	st	Z+, r16
    5b38:	f9 83       	std	Y+1, r31	; 0x01
    5b3a:	e8 83       	st	Y, r30
    5b3c:	06 c0       	rjmp	.+12     	; 0x5b4a <fputc+0x3e>
   returned.  Reasons for a possible failure currently include that
   neither the \c put nor the \c get argument have been provided, thus
   attempting to open a stream with no IO intent at all, or that
   insufficient dynamic memory is available to establish a new stream.
    5b3e:	e8 85       	ldd	r30, Y+8	; 0x08
    5b40:	f9 85       	ldd	r31, Y+9	; 0x09
    5b42:	80 2f       	mov	r24, r16
    5b44:	09 95       	icall
    5b46:	89 2b       	or	r24, r25
    5b48:	31 f4       	brne	.+12     	; 0x5b56 <fputc+0x4a>

    5b4a:	8e 81       	ldd	r24, Y+6	; 0x06
    5b4c:	9f 81       	ldd	r25, Y+7	; 0x07
    5b4e:	01 96       	adiw	r24, 0x01	; 1
    5b50:	9f 83       	std	Y+7, r25	; 0x07
    5b52:	8e 83       	std	Y+6, r24	; 0x06
    5b54:	02 c0       	rjmp	.+4      	; 0x5b5a <fputc+0x4e>
   If the \c put function pointer is provided, the stream is opened
    5b56:	0f ef       	ldi	r16, 0xFF	; 255
    5b58:	1f ef       	ldi	r17, 0xFF	; 255
   with write intent.  The function passed as \c put shall take two
   arguments, the first a character to write to the device,
   and the second a pointer to FILE, and shall return 0
   if the output was successful, and a nonzero value if the character
    5b5a:	c8 01       	movw	r24, r16
    5b5c:	df 91       	pop	r29
    5b5e:	cf 91       	pop	r28
    5b60:	1f 91       	pop	r17
    5b62:	0f 91       	pop	r16
    5b64:	08 95       	ret

00005b66 <printf>:
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>

#include "stdio_private.h"

    5b66:	a2 e0       	ldi	r26, 0x02	; 2
    5b68:	b0 e0       	ldi	r27, 0x00	; 0
    5b6a:	e9 eb       	ldi	r30, 0xB9	; 185
    5b6c:	fd e2       	ldi	r31, 0x2D	; 45
    5b6e:	0c 94 f4 2f 	jmp	0x5fe8	; 0x5fe8 <__prologue_saves__+0x20>
    5b72:	fe 01       	movw	r30, r28
    5b74:	37 96       	adiw	r30, 0x07	; 7
    5b76:	61 91       	ld	r22, Z+
    5b78:	71 91       	ld	r23, Z+
/** \file */

/** \ingroup avr_stdio
   This function is a replacement for \c fopen().
    5b7a:	fa 83       	std	Y+2, r31	; 0x02
    5b7c:	e9 83       	std	Y+1, r30	; 0x01

    5b7e:	af 01       	movw	r20, r30
    5b80:	80 91 a2 06 	lds	r24, 0x06A2
    5b84:	90 91 a3 06 	lds	r25, 0x06A3
    5b88:	0e 94 96 2b 	call	0x572c	; 0x572c <vfprintf>
    5b8c:	e2 e0       	ldi	r30, 0x02	; 2
    5b8e:	22 96       	adiw	r28, 0x02	; 2
    5b90:	0c 94 10 30 	jmp	0x6020	; 0x6020 <__epilogue_restores__+0x20>

00005b94 <puts>:
#include <stdio.h>
#include <stdlib.h>

#include "stdio_private.h"

/** \file */
    5b94:	0f 93       	push	r16
    5b96:	1f 93       	push	r17
    5b98:	cf 93       	push	r28
    5b9a:	df 93       	push	r29
    5b9c:	8c 01       	movw	r16, r24

/** \ingroup avr_stdio
   This function is a replacement for \c fopen().

    5b9e:	e0 91 a2 06 	lds	r30, 0x06A2
    5ba2:	f0 91 a3 06 	lds	r31, 0x06A3
    5ba6:	83 81       	ldd	r24, Z+3	; 0x03
    5ba8:	81 ff       	sbrs	r24, 1
    5baa:	1f c0       	rjmp	.+62     	; 0x5bea <puts+0x56>
    5bac:	c0 e0       	ldi	r28, 0x00	; 0
    5bae:	d0 e0       	ldi	r29, 0x00	; 0
    5bb0:	0a c0       	rjmp	.+20     	; 0x5bc6 <puts+0x32>
   It opens a stream for a device where the actual device
   implementation needs to be provided by the application.  If
   successful, a pointer to the structure for the opened stream is
   returned.  Reasons for a possible failure currently include that
    5bb2:	fd 01       	movw	r30, r26
    5bb4:	20 85       	ldd	r18, Z+8	; 0x08
    5bb6:	31 85       	ldd	r19, Z+9	; 0x09
    5bb8:	bd 01       	movw	r22, r26
    5bba:	f9 01       	movw	r30, r18
    5bbc:	09 95       	icall
    5bbe:	89 2b       	or	r24, r25
    5bc0:	11 f0       	breq	.+4      	; 0x5bc6 <puts+0x32>
    5bc2:	cf ef       	ldi	r28, 0xFF	; 255
    5bc4:	df ef       	ldi	r29, 0xFF	; 255
/** \ingroup avr_stdio
   This function is a replacement for \c fopen().

   It opens a stream for a device where the actual device
   implementation needs to be provided by the application.  If
   successful, a pointer to the structure for the opened stream is
    5bc6:	f8 01       	movw	r30, r16
    5bc8:	81 91       	ld	r24, Z+
    5bca:	8f 01       	movw	r16, r30
    5bcc:	a0 91 a2 06 	lds	r26, 0x06A2
    5bd0:	b0 91 a3 06 	lds	r27, 0x06A3
    5bd4:	88 23       	and	r24, r24
    5bd6:	69 f7       	brne	.-38     	; 0x5bb2 <puts+0x1e>
   returned.  Reasons for a possible failure currently include that
   neither the \c put nor the \c get argument have been provided, thus
   attempting to open a stream with no IO intent at all, or that
    5bd8:	fd 01       	movw	r30, r26
    5bda:	20 85       	ldd	r18, Z+8	; 0x08
    5bdc:	31 85       	ldd	r19, Z+9	; 0x09
    5bde:	bd 01       	movw	r22, r26
    5be0:	8a e0       	ldi	r24, 0x0A	; 10
    5be2:	f9 01       	movw	r30, r18
    5be4:	09 95       	icall
    5be6:	89 2b       	or	r24, r25
    5be8:	11 f0       	breq	.+4      	; 0x5bee <puts+0x5a>
    5bea:	cf ef       	ldi	r28, 0xFF	; 255
    5bec:	df ef       	ldi	r29, 0xFF	; 255
   insufficient dynamic memory is available to establish a new stream.

   If the \c put function pointer is provided, the stream is opened
   with write intent.  The function passed as \c put shall take two
    5bee:	ce 01       	movw	r24, r28
    5bf0:	df 91       	pop	r29
    5bf2:	cf 91       	pop	r28
    5bf4:	1f 91       	pop	r17
    5bf6:	0f 91       	pop	r16
    5bf8:	08 95       	ret

00005bfa <__ultoa_invert>:
    5bfa:	fa 01       	movw	r30, r20
    5bfc:	aa 27       	eor	r26, r26
    5bfe:	28 30       	cpi	r18, 0x08	; 8
    5c00:	51 f1       	breq	.+84     	; 0x5c56 <__ultoa_invert+0x5c>
    5c02:	20 31       	cpi	r18, 0x10	; 16
    5c04:	81 f1       	breq	.+96     	; 0x5c66 <__ultoa_invert+0x6c>
    5c06:	e8 94       	clt
    5c08:	6f 93       	push	r22
    5c0a:	6e 7f       	andi	r22, 0xFE	; 254
    5c0c:	6e 5f       	subi	r22, 0xFE	; 254
    5c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c10:	8f 4f       	sbci	r24, 0xFF	; 255
    5c12:	9f 4f       	sbci	r25, 0xFF	; 255
    5c14:	af 4f       	sbci	r26, 0xFF	; 255
    5c16:	b1 e0       	ldi	r27, 0x01	; 1
    5c18:	3e d0       	rcall	.+124    	; 0x5c96 <__ultoa_invert+0x9c>
    5c1a:	b4 e0       	ldi	r27, 0x04	; 4
    5c1c:	3c d0       	rcall	.+120    	; 0x5c96 <__ultoa_invert+0x9c>
    5c1e:	67 0f       	add	r22, r23
    5c20:	78 1f       	adc	r23, r24
    5c22:	89 1f       	adc	r24, r25
    5c24:	9a 1f       	adc	r25, r26
    5c26:	a1 1d       	adc	r26, r1
    5c28:	68 0f       	add	r22, r24
    5c2a:	79 1f       	adc	r23, r25
    5c2c:	8a 1f       	adc	r24, r26
    5c2e:	91 1d       	adc	r25, r1
    5c30:	a1 1d       	adc	r26, r1
    5c32:	6a 0f       	add	r22, r26
    5c34:	71 1d       	adc	r23, r1
    5c36:	81 1d       	adc	r24, r1
    5c38:	91 1d       	adc	r25, r1
    5c3a:	a1 1d       	adc	r26, r1
    5c3c:	20 d0       	rcall	.+64     	; 0x5c7e <__ultoa_invert+0x84>
    5c3e:	09 f4       	brne	.+2      	; 0x5c42 <__ultoa_invert+0x48>
    5c40:	68 94       	set
    5c42:	3f 91       	pop	r19
    5c44:	2a e0       	ldi	r18, 0x0A	; 10
    5c46:	26 9f       	mul	r18, r22
    5c48:	11 24       	eor	r1, r1
    5c4a:	30 19       	sub	r19, r0
    5c4c:	30 5d       	subi	r19, 0xD0	; 208
    5c4e:	31 93       	st	Z+, r19
    5c50:	de f6       	brtc	.-74     	; 0x5c08 <__ultoa_invert+0xe>
    5c52:	cf 01       	movw	r24, r30
    5c54:	08 95       	ret
    5c56:	46 2f       	mov	r20, r22
    5c58:	47 70       	andi	r20, 0x07	; 7
    5c5a:	40 5d       	subi	r20, 0xD0	; 208
    5c5c:	41 93       	st	Z+, r20
    5c5e:	b3 e0       	ldi	r27, 0x03	; 3
    5c60:	0f d0       	rcall	.+30     	; 0x5c80 <__ultoa_invert+0x86>
    5c62:	c9 f7       	brne	.-14     	; 0x5c56 <__ultoa_invert+0x5c>
    5c64:	f6 cf       	rjmp	.-20     	; 0x5c52 <__ultoa_invert+0x58>
    5c66:	46 2f       	mov	r20, r22
    5c68:	4f 70       	andi	r20, 0x0F	; 15
    5c6a:	40 5d       	subi	r20, 0xD0	; 208
    5c6c:	4a 33       	cpi	r20, 0x3A	; 58
    5c6e:	18 f0       	brcs	.+6      	; 0x5c76 <__ultoa_invert+0x7c>
    5c70:	49 5d       	subi	r20, 0xD9	; 217
    5c72:	31 fd       	sbrc	r19, 1
    5c74:	40 52       	subi	r20, 0x20	; 32
    5c76:	41 93       	st	Z+, r20
    5c78:	02 d0       	rcall	.+4      	; 0x5c7e <__ultoa_invert+0x84>
    5c7a:	a9 f7       	brne	.-22     	; 0x5c66 <__ultoa_invert+0x6c>
    5c7c:	ea cf       	rjmp	.-44     	; 0x5c52 <__ultoa_invert+0x58>
    5c7e:	b4 e0       	ldi	r27, 0x04	; 4
    5c80:	a6 95       	lsr	r26
    5c82:	97 95       	ror	r25
    5c84:	87 95       	ror	r24
    5c86:	77 95       	ror	r23
    5c88:	67 95       	ror	r22
    5c8a:	ba 95       	dec	r27
    5c8c:	c9 f7       	brne	.-14     	; 0x5c80 <__ultoa_invert+0x86>
    5c8e:	00 97       	sbiw	r24, 0x00	; 0
    5c90:	61 05       	cpc	r22, r1
    5c92:	71 05       	cpc	r23, r1
    5c94:	08 95       	ret
    5c96:	9b 01       	movw	r18, r22
    5c98:	ac 01       	movw	r20, r24
    5c9a:	0a 2e       	mov	r0, r26
    5c9c:	06 94       	lsr	r0
    5c9e:	57 95       	ror	r21
    5ca0:	47 95       	ror	r20
    5ca2:	37 95       	ror	r19
    5ca4:	27 95       	ror	r18
    5ca6:	ba 95       	dec	r27
    5ca8:	c9 f7       	brne	.-14     	; 0x5c9c <__ultoa_invert+0xa2>
    5caa:	62 0f       	add	r22, r18
    5cac:	73 1f       	adc	r23, r19
    5cae:	84 1f       	adc	r24, r20
    5cb0:	95 1f       	adc	r25, r21
    5cb2:	a0 1d       	adc	r26, r0
    5cb4:	08 95       	ret

00005cb6 <calloc>:
#include <stdio.h>
#include <stdlib.h>

#include "stdio_private.h"

/** \file */
    5cb6:	0f 93       	push	r16
    5cb8:	1f 93       	push	r17
    5cba:	cf 93       	push	r28
    5cbc:	df 93       	push	r29

/** \ingroup avr_stdio
   This function is a replacement for \c fopen().
    5cbe:	68 9f       	mul	r22, r24
    5cc0:	80 01       	movw	r16, r0
    5cc2:	69 9f       	mul	r22, r25
    5cc4:	10 0d       	add	r17, r0
    5cc6:	78 9f       	mul	r23, r24
    5cc8:	10 0d       	add	r17, r0
    5cca:	11 24       	eor	r1, r1
    5ccc:	c8 01       	movw	r24, r16
    5cce:	0e 94 77 2e 	call	0x5cee	; 0x5cee <malloc>
    5cd2:	ec 01       	movw	r28, r24
    5cd4:	00 97       	sbiw	r24, 0x00	; 0
    5cd6:	29 f0       	breq	.+10     	; 0x5ce2 <calloc+0x2c>

   It opens a stream for a device where the actual device
    5cd8:	a8 01       	movw	r20, r16
    5cda:	60 e0       	ldi	r22, 0x00	; 0
    5cdc:	70 e0       	ldi	r23, 0x00	; 0
    5cde:	0e 94 75 2f 	call	0x5eea	; 0x5eea <memset>
   implementation needs to be provided by the application.  If
   successful, a pointer to the structure for the opened stream is
    5ce2:	ce 01       	movw	r24, r28
    5ce4:	df 91       	pop	r29
    5ce6:	cf 91       	pop	r28
    5ce8:	1f 91       	pop	r17
    5cea:	0f 91       	pop	r16
    5cec:	08 95       	ret

00005cee <malloc>:
   \c int type.  If an error occurs when trying to read from the
   device, it shall return \c _FDEV_ERR.
   If an end-of-file condition was reached while reading from the
   device, \c _FDEV_EOF shall be returned.

   If both functions are provided, the stream is opened with read
    5cee:	cf 93       	push	r28
    5cf0:	df 93       	push	r29
    5cf2:	ac 01       	movw	r20, r24

   fdevopen() uses calloc() (und thus malloc()) in order to allocate
   the storage for the new stream.

   \note If the macro __STDIO_FDEVOPEN_COMPAT_12 is declared before
   including <stdio.h>, a function prototype for fdevopen() will be
    5cf4:	02 97       	sbiw	r24, 0x02	; 2
    5cf6:	10 f4       	brcc	.+4      	; 0x5cfc <malloc+0xe>
    5cf8:	42 e0       	ldi	r20, 0x02	; 2
    5cfa:	50 e0       	ldi	r21, 0x00	; 0
*/

FILE *
fdevopen(int (*put)(char, FILE *), int (*get)(FILE *))
{
	FILE *s;
    5cfc:	a0 91 a8 06 	lds	r26, 0x06A8
    5d00:	b0 91 a9 06 	lds	r27, 0x06A9
    5d04:	fd 01       	movw	r30, r26
    5d06:	c0 e0       	ldi	r28, 0x00	; 0
    5d08:	d0 e0       	ldi	r29, 0x00	; 0
    5d0a:	20 e0       	ldi	r18, 0x00	; 0
    5d0c:	30 e0       	ldi	r19, 0x00	; 0
    5d0e:	20 c0       	rjmp	.+64     	; 0x5d50 <malloc+0x62>

	if (put == 0 && get == 0)
		return 0;
    5d10:	80 81       	ld	r24, Z
    5d12:	91 81       	ldd	r25, Z+1	; 0x01
    5d14:	84 17       	cp	r24, r20
    5d16:	95 07       	cpc	r25, r21
    5d18:	69 f4       	brne	.+26     	; 0x5d34 <malloc+0x46>
    5d1a:	82 81       	ldd	r24, Z+2	; 0x02
    5d1c:	93 81       	ldd	r25, Z+3	; 0x03

	if ((s = calloc(1, sizeof(FILE))) == 0)
		return 0;

	s->flags = __SMALLOC;
    5d1e:	20 97       	sbiw	r28, 0x00	; 0
    5d20:	19 f0       	breq	.+6      	; 0x5d28 <malloc+0x3a>

    5d22:	9b 83       	std	Y+3, r25	; 0x03
    5d24:	8a 83       	std	Y+2, r24	; 0x02
    5d26:	04 c0       	rjmp	.+8      	; 0x5d30 <malloc+0x42>
	if (get != 0) {
		s->get = get;
    5d28:	90 93 a9 06 	sts	0x06A9, r25
    5d2c:	80 93 a8 06 	sts	0x06A8, r24
		s->flags |= __SRD;
    5d30:	9f 01       	movw	r18, r30
    5d32:	32 c0       	rjmp	.+100    	; 0x5d98 <malloc+0xaa>
		if (stdin == 0)
			stdin = s;
    5d34:	48 17       	cp	r20, r24
    5d36:	59 07       	cpc	r21, r25
    5d38:	38 f4       	brcc	.+14     	; 0x5d48 <malloc+0x5a>
	}
    5d3a:	21 15       	cp	r18, r1
    5d3c:	31 05       	cpc	r19, r1
    5d3e:	19 f0       	breq	.+6      	; 0x5d46 <malloc+0x58>
    5d40:	82 17       	cp	r24, r18
    5d42:	93 07       	cpc	r25, r19
    5d44:	08 f4       	brcc	.+2      	; 0x5d48 <malloc+0x5a>
    5d46:	9c 01       	movw	r18, r24
FILE *
fdevopen(int (*put)(char, FILE *), int (*get)(FILE *))
{
	FILE *s;

	if (put == 0 && get == 0)
    5d48:	ef 01       	movw	r28, r30
    5d4a:	02 80       	ldd	r0, Z+2	; 0x02
    5d4c:	f3 81       	ldd	r31, Z+3	; 0x03
    5d4e:	e0 2d       	mov	r30, r0

FILE *
fdevopen(int (*put)(char, FILE *), int (*get)(FILE *))
{
	FILE *s;

    5d50:	30 97       	sbiw	r30, 0x00	; 0
    5d52:	f1 f6       	brne	.-68     	; 0x5d10 <malloc+0x22>
		}
	}

	return s;
}
    5d54:	21 15       	cp	r18, r1
    5d56:	31 05       	cpc	r19, r1
    5d58:	99 f1       	breq	.+102    	; 0x5dc0 <malloc+0xd2>
    5d5a:	c9 01       	movw	r24, r18
    5d5c:	84 1b       	sub	r24, r20
    5d5e:	95 0b       	sbc	r25, r21
    5d60:	04 97       	sbiw	r24, 0x04	; 4
    5d62:	08 f4       	brcc	.+2      	; 0x5d66 <malloc+0x78>
    5d64:	a9 01       	movw	r20, r18
    5d66:	e0 e0       	ldi	r30, 0x00	; 0
    5d68:	f0 e0       	ldi	r31, 0x00	; 0
    5d6a:	28 c0       	rjmp	.+80     	; 0x5dbc <malloc+0xce>
    5d6c:	8d 91       	ld	r24, X+
    5d6e:	9c 91       	ld	r25, X
    5d70:	11 97       	sbiw	r26, 0x01	; 1
    5d72:	82 17       	cp	r24, r18
    5d74:	93 07       	cpc	r25, r19
    5d76:	f9 f4       	brne	.+62     	; 0x5db6 <malloc+0xc8>
    5d78:	48 17       	cp	r20, r24
    5d7a:	59 07       	cpc	r21, r25
    5d7c:	81 f4       	brne	.+32     	; 0x5d9e <malloc+0xb0>
    5d7e:	ed 01       	movw	r28, r26
    5d80:	8a 81       	ldd	r24, Y+2	; 0x02
    5d82:	9b 81       	ldd	r25, Y+3	; 0x03
    5d84:	30 97       	sbiw	r30, 0x00	; 0
    5d86:	19 f0       	breq	.+6      	; 0x5d8e <malloc+0xa0>
    5d88:	93 83       	std	Z+3, r25	; 0x03
    5d8a:	82 83       	std	Z+2, r24	; 0x02
    5d8c:	04 c0       	rjmp	.+8      	; 0x5d96 <malloc+0xa8>
    5d8e:	90 93 a9 06 	sts	0x06A9, r25
    5d92:	80 93 a8 06 	sts	0x06A8, r24
    5d96:	9d 01       	movw	r18, r26
    5d98:	2e 5f       	subi	r18, 0xFE	; 254
    5d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    5d9c:	4c c0       	rjmp	.+152    	; 0x5e36 <malloc+0x148>
    5d9e:	84 1b       	sub	r24, r20
    5da0:	95 0b       	sbc	r25, r21
    5da2:	fd 01       	movw	r30, r26
    5da4:	e8 0f       	add	r30, r24
    5da6:	f9 1f       	adc	r31, r25
    5da8:	41 93       	st	Z+, r20
    5daa:	51 93       	st	Z+, r21
    5dac:	02 97       	sbiw	r24, 0x02	; 2
    5dae:	8d 93       	st	X+, r24
    5db0:	9c 93       	st	X, r25
    5db2:	9f 01       	movw	r18, r30
    5db4:	40 c0       	rjmp	.+128    	; 0x5e36 <malloc+0x148>
    5db6:	fd 01       	movw	r30, r26
    5db8:	a2 81       	ldd	r26, Z+2	; 0x02
    5dba:	b3 81       	ldd	r27, Z+3	; 0x03
}
    5dbc:	10 97       	sbiw	r26, 0x00	; 0
    5dbe:	b1 f6       	brne	.-84     	; 0x5d6c <malloc+0x7e>
    5dc0:	80 91 a6 06 	lds	r24, 0x06A6
    5dc4:	90 91 a7 06 	lds	r25, 0x06A7
    5dc8:	89 2b       	or	r24, r25
    5dca:	41 f4       	brne	.+16     	; 0x5ddc <malloc+0xee>
    5dcc:	80 91 9e 02 	lds	r24, 0x029E
    5dd0:	90 91 9f 02 	lds	r25, 0x029F
    5dd4:	90 93 a7 06 	sts	0x06A7, r25
    5dd8:	80 93 a6 06 	sts	0x06A6, r24
    5ddc:	20 91 a0 02 	lds	r18, 0x02A0
    5de0:	30 91 a1 02 	lds	r19, 0x02A1
    5de4:	21 15       	cp	r18, r1
    5de6:	31 05       	cpc	r19, r1
    5de8:	49 f4       	brne	.+18     	; 0x5dfc <malloc+0x10e>
    5dea:	8d b7       	in	r24, 0x3d	; 61
    5dec:	28 2f       	mov	r18, r24
    5dee:	33 27       	eor	r19, r19
    5df0:	80 91 9c 02 	lds	r24, 0x029C
    5df4:	90 91 9d 02 	lds	r25, 0x029D
    5df8:	28 1b       	sub	r18, r24
    5dfa:	39 0b       	sbc	r19, r25
    5dfc:	a0 91 a6 06 	lds	r26, 0x06A6
    5e00:	b0 91 a7 06 	lds	r27, 0x06A7
    5e04:	2a 1b       	sub	r18, r26
    5e06:	3b 0b       	sbc	r19, r27
    5e08:	24 17       	cp	r18, r20
    5e0a:	35 07       	cpc	r19, r21
    5e0c:	90 f0       	brcs	.+36     	; 0x5e32 <malloc+0x144>
    5e0e:	ca 01       	movw	r24, r20
    5e10:	02 96       	adiw	r24, 0x02	; 2
    5e12:	28 17       	cp	r18, r24
    5e14:	39 07       	cpc	r19, r25
    5e16:	68 f0       	brcs	.+26     	; 0x5e32 <malloc+0x144>
    5e18:	9d 01       	movw	r18, r26
    5e1a:	2e 5f       	subi	r18, 0xFE	; 254
    5e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    5e1e:	c9 01       	movw	r24, r18
    5e20:	84 0f       	add	r24, r20
    5e22:	95 1f       	adc	r25, r21
    5e24:	90 93 a7 06 	sts	0x06A7, r25
    5e28:	80 93 a6 06 	sts	0x06A6, r24
    5e2c:	4d 93       	st	X+, r20
    5e2e:	5c 93       	st	X, r21
    5e30:	02 c0       	rjmp	.+4      	; 0x5e36 <malloc+0x148>
    5e32:	20 e0       	ldi	r18, 0x00	; 0
    5e34:	30 e0       	ldi	r19, 0x00	; 0
    5e36:	c9 01       	movw	r24, r18
    5e38:	df 91       	pop	r29
    5e3a:	cf 91       	pop	r28
    5e3c:	08 95       	ret

00005e3e <free>:
    5e3e:	cf 93       	push	r28
    5e40:	df 93       	push	r29
    5e42:	00 97       	sbiw	r24, 0x00	; 0
    5e44:	09 f4       	brne	.+2      	; 0x5e48 <free+0xa>
    5e46:	4e c0       	rjmp	.+156    	; 0x5ee4 <free+0xa6>
    5e48:	ec 01       	movw	r28, r24
    5e4a:	22 97       	sbiw	r28, 0x02	; 2
    5e4c:	1b 82       	std	Y+3, r1	; 0x03
    5e4e:	1a 82       	std	Y+2, r1	; 0x02
    5e50:	a0 91 a8 06 	lds	r26, 0x06A8
    5e54:	b0 91 a9 06 	lds	r27, 0x06A9
    5e58:	10 97       	sbiw	r26, 0x00	; 0
    5e5a:	11 f1       	breq	.+68     	; 0x5ea0 <free+0x62>
    5e5c:	40 e0       	ldi	r20, 0x00	; 0
    5e5e:	50 e0       	ldi	r21, 0x00	; 0
    5e60:	01 c0       	rjmp	.+2      	; 0x5e64 <free+0x26>
    5e62:	dc 01       	movw	r26, r24
    5e64:	ac 17       	cp	r26, r28
    5e66:	bd 07       	cpc	r27, r29
    5e68:	00 f1       	brcs	.+64     	; 0x5eaa <free+0x6c>
    5e6a:	bb 83       	std	Y+3, r27	; 0x03
    5e6c:	aa 83       	std	Y+2, r26	; 0x02
    5e6e:	fe 01       	movw	r30, r28
    5e70:	21 91       	ld	r18, Z+
    5e72:	31 91       	ld	r19, Z+
    5e74:	e2 0f       	add	r30, r18
    5e76:	f3 1f       	adc	r31, r19
    5e78:	ea 17       	cp	r30, r26
    5e7a:	fb 07       	cpc	r31, r27
    5e7c:	71 f4       	brne	.+28     	; 0x5e9a <free+0x5c>
    5e7e:	8d 91       	ld	r24, X+
    5e80:	9c 91       	ld	r25, X
    5e82:	11 97       	sbiw	r26, 0x01	; 1
    5e84:	28 0f       	add	r18, r24
    5e86:	39 1f       	adc	r19, r25
    5e88:	2e 5f       	subi	r18, 0xFE	; 254
    5e8a:	3f 4f       	sbci	r19, 0xFF	; 255
    5e8c:	39 83       	std	Y+1, r19	; 0x01
    5e8e:	28 83       	st	Y, r18
    5e90:	fd 01       	movw	r30, r26
    5e92:	82 81       	ldd	r24, Z+2	; 0x02
    5e94:	93 81       	ldd	r25, Z+3	; 0x03
    5e96:	9b 83       	std	Y+3, r25	; 0x03
    5e98:	8a 83       	std	Y+2, r24	; 0x02
    5e9a:	41 15       	cp	r20, r1
    5e9c:	51 05       	cpc	r21, r1
    5e9e:	59 f4       	brne	.+22     	; 0x5eb6 <free+0x78>
    5ea0:	d0 93 a9 06 	sts	0x06A9, r29
    5ea4:	c0 93 a8 06 	sts	0x06A8, r28
    5ea8:	1d c0       	rjmp	.+58     	; 0x5ee4 <free+0xa6>
    5eaa:	fd 01       	movw	r30, r26
    5eac:	82 81       	ldd	r24, Z+2	; 0x02
    5eae:	93 81       	ldd	r25, Z+3	; 0x03
    5eb0:	ad 01       	movw	r20, r26
    5eb2:	00 97       	sbiw	r24, 0x00	; 0
    5eb4:	b1 f6       	brne	.-84     	; 0x5e62 <free+0x24>
    5eb6:	fa 01       	movw	r30, r20
    5eb8:	d3 83       	std	Z+3, r29	; 0x03
    5eba:	c2 83       	std	Z+2, r28	; 0x02
    5ebc:	21 91       	ld	r18, Z+
    5ebe:	31 91       	ld	r19, Z+
    5ec0:	e2 0f       	add	r30, r18
    5ec2:	f3 1f       	adc	r31, r19
    5ec4:	ec 17       	cp	r30, r28
    5ec6:	fd 07       	cpc	r31, r29
    5ec8:	69 f4       	brne	.+26     	; 0x5ee4 <free+0xa6>
    5eca:	88 81       	ld	r24, Y
    5ecc:	99 81       	ldd	r25, Y+1	; 0x01
    5ece:	28 0f       	add	r18, r24
    5ed0:	39 1f       	adc	r19, r25
    5ed2:	2e 5f       	subi	r18, 0xFE	; 254
    5ed4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ed6:	fa 01       	movw	r30, r20
    5ed8:	31 83       	std	Z+1, r19	; 0x01
    5eda:	20 83       	st	Z, r18
    5edc:	8a 81       	ldd	r24, Y+2	; 0x02
    5ede:	9b 81       	ldd	r25, Y+3	; 0x03
    5ee0:	93 83       	std	Z+3, r25	; 0x03
    5ee2:	82 83       	std	Z+2, r24	; 0x02
    5ee4:	df 91       	pop	r29
    5ee6:	cf 91       	pop	r28
    5ee8:	08 95       	ret

00005eea <memset>:
    5eea:	dc 01       	movw	r26, r24
    5eec:	01 c0       	rjmp	.+2      	; 0x5ef0 <memset+0x6>
    5eee:	6d 93       	st	X+, r22
    5ef0:	41 50       	subi	r20, 0x01	; 1
    5ef2:	50 40       	sbci	r21, 0x00	; 0
    5ef4:	e0 f7       	brcc	.-8      	; 0x5eee <memset+0x4>
    5ef6:	08 95       	ret

00005ef8 <__mulsi3>:
    5ef8:	62 9f       	mul	r22, r18
    5efa:	d0 01       	movw	r26, r0
    5efc:	73 9f       	mul	r23, r19
    5efe:	f0 01       	movw	r30, r0
    5f00:	82 9f       	mul	r24, r18
    5f02:	e0 0d       	add	r30, r0
    5f04:	f1 1d       	adc	r31, r1
    5f06:	64 9f       	mul	r22, r20
    5f08:	e0 0d       	add	r30, r0
    5f0a:	f1 1d       	adc	r31, r1
    5f0c:	92 9f       	mul	r25, r18
    5f0e:	f0 0d       	add	r31, r0
    5f10:	83 9f       	mul	r24, r19
    5f12:	f0 0d       	add	r31, r0
    5f14:	74 9f       	mul	r23, r20
    5f16:	f0 0d       	add	r31, r0
    5f18:	65 9f       	mul	r22, r21
    5f1a:	f0 0d       	add	r31, r0
    5f1c:	99 27       	eor	r25, r25
    5f1e:	72 9f       	mul	r23, r18
    5f20:	b0 0d       	add	r27, r0
    5f22:	e1 1d       	adc	r30, r1
    5f24:	f9 1f       	adc	r31, r25
    5f26:	63 9f       	mul	r22, r19
    5f28:	b0 0d       	add	r27, r0
    5f2a:	e1 1d       	adc	r30, r1
    5f2c:	f9 1f       	adc	r31, r25
    5f2e:	bd 01       	movw	r22, r26
    5f30:	cf 01       	movw	r24, r30
    5f32:	11 24       	eor	r1, r1
    5f34:	08 95       	ret

00005f36 <__udivmodhi4>:
    5f36:	aa 1b       	sub	r26, r26
    5f38:	bb 1b       	sub	r27, r27
    5f3a:	51 e1       	ldi	r21, 0x11	; 17
    5f3c:	07 c0       	rjmp	.+14     	; 0x5f4c <__udivmodhi4_ep>

00005f3e <__udivmodhi4_loop>:
    5f3e:	aa 1f       	adc	r26, r26
    5f40:	bb 1f       	adc	r27, r27
    5f42:	a6 17       	cp	r26, r22
    5f44:	b7 07       	cpc	r27, r23
    5f46:	10 f0       	brcs	.+4      	; 0x5f4c <__udivmodhi4_ep>
    5f48:	a6 1b       	sub	r26, r22
    5f4a:	b7 0b       	sbc	r27, r23

00005f4c <__udivmodhi4_ep>:
    5f4c:	88 1f       	adc	r24, r24
    5f4e:	99 1f       	adc	r25, r25
    5f50:	5a 95       	dec	r21
    5f52:	a9 f7       	brne	.-22     	; 0x5f3e <__udivmodhi4_loop>
    5f54:	80 95       	com	r24
    5f56:	90 95       	com	r25
    5f58:	bc 01       	movw	r22, r24
    5f5a:	cd 01       	movw	r24, r26
    5f5c:	08 95       	ret

00005f5e <__divmodhi4>:
    5f5e:	97 fb       	bst	r25, 7
    5f60:	09 2e       	mov	r0, r25
    5f62:	07 26       	eor	r0, r23
    5f64:	0a d0       	rcall	.+20     	; 0x5f7a <__divmodhi4_neg1>
    5f66:	77 fd       	sbrc	r23, 7
    5f68:	04 d0       	rcall	.+8      	; 0x5f72 <__divmodhi4_neg2>
    5f6a:	e5 df       	rcall	.-54     	; 0x5f36 <__udivmodhi4>
    5f6c:	06 d0       	rcall	.+12     	; 0x5f7a <__divmodhi4_neg1>
    5f6e:	00 20       	and	r0, r0
    5f70:	1a f4       	brpl	.+6      	; 0x5f78 <__divmodhi4_exit>

00005f72 <__divmodhi4_neg2>:
    5f72:	70 95       	com	r23
    5f74:	61 95       	neg	r22
    5f76:	7f 4f       	sbci	r23, 0xFF	; 255

00005f78 <__divmodhi4_exit>:
    5f78:	08 95       	ret

00005f7a <__divmodhi4_neg1>:
    5f7a:	f6 f7       	brtc	.-4      	; 0x5f78 <__divmodhi4_exit>
    5f7c:	90 95       	com	r25
    5f7e:	81 95       	neg	r24
    5f80:	9f 4f       	sbci	r25, 0xFF	; 255
    5f82:	08 95       	ret

00005f84 <__udivmodsi4>:
    5f84:	a1 e2       	ldi	r26, 0x21	; 33
    5f86:	1a 2e       	mov	r1, r26
    5f88:	aa 1b       	sub	r26, r26
    5f8a:	bb 1b       	sub	r27, r27
    5f8c:	fd 01       	movw	r30, r26
    5f8e:	0d c0       	rjmp	.+26     	; 0x5faa <__udivmodsi4_ep>

00005f90 <__udivmodsi4_loop>:
    5f90:	aa 1f       	adc	r26, r26
    5f92:	bb 1f       	adc	r27, r27
    5f94:	ee 1f       	adc	r30, r30
    5f96:	ff 1f       	adc	r31, r31
    5f98:	a2 17       	cp	r26, r18
    5f9a:	b3 07       	cpc	r27, r19
    5f9c:	e4 07       	cpc	r30, r20
    5f9e:	f5 07       	cpc	r31, r21
    5fa0:	20 f0       	brcs	.+8      	; 0x5faa <__udivmodsi4_ep>
    5fa2:	a2 1b       	sub	r26, r18
    5fa4:	b3 0b       	sbc	r27, r19
    5fa6:	e4 0b       	sbc	r30, r20
    5fa8:	f5 0b       	sbc	r31, r21

00005faa <__udivmodsi4_ep>:
    5faa:	66 1f       	adc	r22, r22
    5fac:	77 1f       	adc	r23, r23
    5fae:	88 1f       	adc	r24, r24
    5fb0:	99 1f       	adc	r25, r25
    5fb2:	1a 94       	dec	r1
    5fb4:	69 f7       	brne	.-38     	; 0x5f90 <__udivmodsi4_loop>
    5fb6:	60 95       	com	r22
    5fb8:	70 95       	com	r23
    5fba:	80 95       	com	r24
    5fbc:	90 95       	com	r25
    5fbe:	9b 01       	movw	r18, r22
    5fc0:	ac 01       	movw	r20, r24
    5fc2:	bd 01       	movw	r22, r26
    5fc4:	cf 01       	movw	r24, r30
    5fc6:	08 95       	ret

00005fc8 <__prologue_saves__>:
    5fc8:	2f 92       	push	r2
    5fca:	3f 92       	push	r3
    5fcc:	4f 92       	push	r4
    5fce:	5f 92       	push	r5
    5fd0:	6f 92       	push	r6
    5fd2:	7f 92       	push	r7
    5fd4:	8f 92       	push	r8
    5fd6:	9f 92       	push	r9
    5fd8:	af 92       	push	r10
    5fda:	bf 92       	push	r11
    5fdc:	cf 92       	push	r12
    5fde:	df 92       	push	r13
    5fe0:	ef 92       	push	r14
    5fe2:	ff 92       	push	r15
    5fe4:	0f 93       	push	r16
    5fe6:	1f 93       	push	r17
    5fe8:	cf 93       	push	r28
    5fea:	df 93       	push	r29
    5fec:	cd b7       	in	r28, 0x3d	; 61
    5fee:	de b7       	in	r29, 0x3e	; 62
    5ff0:	ca 1b       	sub	r28, r26
    5ff2:	db 0b       	sbc	r29, r27
    5ff4:	0f b6       	in	r0, 0x3f	; 63
    5ff6:	f8 94       	cli
    5ff8:	de bf       	out	0x3e, r29	; 62
    5ffa:	0f be       	out	0x3f, r0	; 63
    5ffc:	cd bf       	out	0x3d, r28	; 61
    5ffe:	09 94       	ijmp

00006000 <__epilogue_restores__>:
    6000:	2a 88       	ldd	r2, Y+18	; 0x12
    6002:	39 88       	ldd	r3, Y+17	; 0x11
    6004:	48 88       	ldd	r4, Y+16	; 0x10
    6006:	5f 84       	ldd	r5, Y+15	; 0x0f
    6008:	6e 84       	ldd	r6, Y+14	; 0x0e
    600a:	7d 84       	ldd	r7, Y+13	; 0x0d
    600c:	8c 84       	ldd	r8, Y+12	; 0x0c
    600e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6010:	aa 84       	ldd	r10, Y+10	; 0x0a
    6012:	b9 84       	ldd	r11, Y+9	; 0x09
    6014:	c8 84       	ldd	r12, Y+8	; 0x08
    6016:	df 80       	ldd	r13, Y+7	; 0x07
    6018:	ee 80       	ldd	r14, Y+6	; 0x06
    601a:	fd 80       	ldd	r15, Y+5	; 0x05
    601c:	0c 81       	ldd	r16, Y+4	; 0x04
    601e:	1b 81       	ldd	r17, Y+3	; 0x03
    6020:	aa 81       	ldd	r26, Y+2	; 0x02
    6022:	b9 81       	ldd	r27, Y+1	; 0x01
    6024:	ce 0f       	add	r28, r30
    6026:	d1 1d       	adc	r29, r1
    6028:	0f b6       	in	r0, 0x3f	; 63
    602a:	f8 94       	cli
    602c:	de bf       	out	0x3e, r29	; 62
    602e:	0f be       	out	0x3f, r0	; 63
    6030:	cd bf       	out	0x3d, r28	; 61
    6032:	ed 01       	movw	r28, r26
    6034:	08 95       	ret

00006036 <__eeprom_read_byte_1F2021>:
    6036:	f9 99       	sbic	0x1f, 1	; 31
    6038:	fe cf       	rjmp	.-4      	; 0x6036 <__eeprom_read_byte_1F2021>
    603a:	b2 bd       	out	0x22, r27	; 34
    603c:	a1 bd       	out	0x21, r26	; 33
    603e:	f8 9a       	sbi	0x1f, 0	; 31
    6040:	11 96       	adiw	r26, 0x01	; 1
    6042:	00 b4       	in	r0, 0x20	; 32
    6044:	08 95       	ret

00006046 <__eeprom_write_byte_1F2021>:
    6046:	f9 99       	sbic	0x1f, 1	; 31
    6048:	fe cf       	rjmp	.-4      	; 0x6046 <__eeprom_write_byte_1F2021>
    604a:	b2 bd       	out	0x22, r27	; 34
    604c:	a1 bd       	out	0x21, r26	; 33
    604e:	00 bc       	out	0x20, r0	; 32
    6050:	11 96       	adiw	r26, 0x01	; 1
    6052:	0f b6       	in	r0, 0x3f	; 63
    6054:	f8 94       	cli
    6056:	fa 9a       	sbi	0x1f, 2	; 31
    6058:	f9 9a       	sbi	0x1f, 1	; 31
    605a:	0f be       	out	0x3f, r0	; 63
    605c:	08 95       	ret

0000605e <__divmodsi4>:
    605e:	97 fb       	bst	r25, 7
    6060:	09 2e       	mov	r0, r25
    6062:	05 26       	eor	r0, r21
    6064:	0e d0       	rcall	.+28     	; 0x6082 <__divmodsi4_neg1>
    6066:	57 fd       	sbrc	r21, 7
    6068:	04 d0       	rcall	.+8      	; 0x6072 <__divmodsi4_neg2>
    606a:	8c df       	rcall	.-232    	; 0x5f84 <__udivmodsi4>
    606c:	0a d0       	rcall	.+20     	; 0x6082 <__divmodsi4_neg1>
    606e:	00 1c       	adc	r0, r0
    6070:	38 f4       	brcc	.+14     	; 0x6080 <__divmodsi4_exit>

00006072 <__divmodsi4_neg2>:
    6072:	50 95       	com	r21
    6074:	40 95       	com	r20
    6076:	30 95       	com	r19
    6078:	21 95       	neg	r18
    607a:	3f 4f       	sbci	r19, 0xFF	; 255
    607c:	4f 4f       	sbci	r20, 0xFF	; 255
    607e:	5f 4f       	sbci	r21, 0xFF	; 255

00006080 <__divmodsi4_exit>:
    6080:	08 95       	ret

00006082 <__divmodsi4_neg1>:
    6082:	f6 f7       	brtc	.-4      	; 0x6080 <__divmodsi4_exit>
    6084:	90 95       	com	r25
    6086:	80 95       	com	r24
    6088:	70 95       	com	r23
    608a:	61 95       	neg	r22
    608c:	7f 4f       	sbci	r23, 0xFF	; 255
    608e:	8f 4f       	sbci	r24, 0xFF	; 255
    6090:	9f 4f       	sbci	r25, 0xFF	; 255
    6092:	08 95       	ret

00006094 <_exit>:
    6094:	ff cf       	rjmp	.-2      	; 0x6094 <_exit>
