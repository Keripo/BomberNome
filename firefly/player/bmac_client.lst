   1               		.file	"bmac_client.c"
   2               	__SREG__ = 0x3f
   3               	__SP_H__ = 0x3e
   4               	__SP_L__ = 0x3d
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.global __do_copy_data
   8               		.global __do_clear_bss
  11               		.text
  12               	.Ltext0:
 134               	.global	nrk_register_drivers
 136               	nrk_register_drivers:
 137               		.stabd	46,0,0
   1:bmac_client.c **** /******************************************************************************
   2:bmac_client.c ****  *  Nano-RK, a real-time operating system for sensor networks.
   3:bmac_client.c ****  *  Copyright (C) 2007, Real-Time and Multimedia Lab, Carnegie Mellon University
   4:bmac_client.c ****  *  All rights reserved.
   5:bmac_client.c ****  *
   6:bmac_client.c ****  *  This is the Open Source Version of Nano-RK included as part of a Dual
   7:bmac_client.c ****  *  Licensing Model. If you are unsure which license to use please refer to:
   8:bmac_client.c ****  *  http://www.nanork.org/nano-RK/wiki/Licensing
   9:bmac_client.c ****  *
  10:bmac_client.c ****  *  This program is free software: you can redistribute it and/or modify
  11:bmac_client.c ****  *  it under the terms of the GNU General Public License as published by
  12:bmac_client.c ****  *  the Free Software Foundation, version 2.0 of the License.
  13:bmac_client.c ****  *
  14:bmac_client.c ****  *  This program is distributed in the hope that it will be useful,
  15:bmac_client.c ****  *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  16:bmac_client.c ****  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  17:bmac_client.c ****  *  GNU General Public License for more details.
  18:bmac_client.c ****  *
  19:bmac_client.c ****  *  You should have received a copy of the GNU General Public License
  20:bmac_client.c ****  *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
  21:bmac_client.c ****  *
  22:bmac_client.c ****  *******************************************************************************/
  23:bmac_client.c **** 
  24:bmac_client.c **** 
  25:bmac_client.c **** #include <nrk.h>
  26:bmac_client.c **** #include <include.h>
  27:bmac_client.c **** #include <ulib.h>
  28:bmac_client.c **** #include <stdio.h>
  29:bmac_client.c **** #include <avr/sleep.h>
  30:bmac_client.c **** #include <hal.h>
  31:bmac_client.c **** #include <bmac.h>
  32:bmac_client.c **** #include <nrk_error.h>
  33:bmac_client.c **** 
  34:bmac_client.c **** #include <nrk_driver_list.h>
  35:bmac_client.c **** #include <nrk_driver.h>
  36:bmac_client.c **** #include <ff_basic_sensor.h>
  37:bmac_client.c **** 
  38:bmac_client.c **** nrk_task_type TX_TASK;
  39:bmac_client.c **** NRK_STK tx_task_stack[NRK_APP_STACKSIZE];
  40:bmac_client.c **** void tx_task (void);
  41:bmac_client.c **** 
  42:bmac_client.c **** void nrk_create_taskset ();
  43:bmac_client.c **** void nrk_register_drivers();
  44:bmac_client.c **** 
  45:bmac_client.c **** uint8_t tx_buf[RF_MAX_PAYLOAD_SIZE];
  46:bmac_client.c **** 
  47:bmac_client.c **** int main ()
  48:bmac_client.c **** {
  49:bmac_client.c **** 	uint16_t div;
  50:bmac_client.c **** 	nrk_setup_ports ();
  51:bmac_client.c **** 	nrk_setup_uart (UART_BAUDRATE_115K2);
  52:bmac_client.c **** 
  53:bmac_client.c **** 	nrk_init ();
  54:bmac_client.c **** 
  55:bmac_client.c **** 	nrk_led_clr (0);
  56:bmac_client.c **** 	nrk_led_clr (1);
  57:bmac_client.c **** 	nrk_led_clr (2);
  58:bmac_client.c **** 	nrk_led_clr (3);
  59:bmac_client.c **** 
  60:bmac_client.c **** 	nrk_time_set (0, 0);
  61:bmac_client.c **** 
  62:bmac_client.c **** 	bmac_task_config ();
  63:bmac_client.c **** 
  64:bmac_client.c **** 	nrk_register_drivers();
  65:bmac_client.c **** 	nrk_create_taskset ();
  66:bmac_client.c **** 	nrk_start ();
  67:bmac_client.c **** 
  68:bmac_client.c **** 	return 0;
  69:bmac_client.c **** }
  70:bmac_client.c **** 
  71:bmac_client.c **** #define THRESHOLD	50
  72:bmac_client.c **** #define L_TRIGGER	990 // Bomb
  73:bmac_client.c **** 
  74:bmac_client.c **** #define PLAYER_NUM	'A'
  75:bmac_client.c **** #define ACTION_NONE	'-'
  76:bmac_client.c **** #define ACTION_UP	'U'	
  77:bmac_client.c **** #define ACTION_DOWN	'D'
  78:bmac_client.c **** #define ACTION_LEFT	'L'
  79:bmac_client.c **** #define ACTION_RIGHT	'R'
  80:bmac_client.c **** #define ACTION_BOMB	'B'
  81:bmac_client.c **** 
  82:bmac_client.c **** void tx_task ()
  83:bmac_client.c **** {
  84:bmac_client.c **** 	uint8_t j, i, val, len, cnt,fd;
  85:bmac_client.c **** 	nrk_sig_t tx_done_signal;
  86:bmac_client.c **** 	uint16_t x_val, y_val, light;
  87:bmac_client.c **** 	uint16_t x_base, y_base;
  88:bmac_client.c **** 	uint16_t x_min, x_max, y_min, y_max;
  89:bmac_client.c **** 	char action;
  90:bmac_client.c **** 	nrk_sig_mask_t ret;
  91:bmac_client.c **** 
  92:bmac_client.c **** 	// init bmac on channel 25 
  93:bmac_client.c **** 	bmac_init (25);
  94:bmac_client.c **** 
  95:bmac_client.c **** 	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));	
  96:bmac_client.c **** 
  97:bmac_client.c **** 	printf ("tx_task PID=%d\r\n", nrk_get_pid ());
  98:bmac_client.c **** 
  99:bmac_client.c **** 	// Wait until the tx_task starts up bmac
 100:bmac_client.c **** 	// This should be called by all tasks using bmac that
 101:bmac_client.c **** 	// do not call bmac_init()...
 102:bmac_client.c **** 	while (!bmac_started ())
 103:bmac_client.c **** 		nrk_wait_until_next_period ();
 104:bmac_client.c **** 
 105:bmac_client.c **** 	// Get and register the tx_done_signal if you want to
 106:bmac_client.c **** 	// do non-blocking transmits
 107:bmac_client.c **** 	tx_done_signal = bmac_get_tx_done_signal ();
 108:bmac_client.c **** 	nrk_signal_register (tx_done_signal);
 109:bmac_client.c **** 
 110:bmac_client.c **** 
 111:bmac_client.c **** 	nrk_gpio_direction(NRK_BUTTON,NRK_PIN_INPUT); //set button as input
 112:bmac_client.c **** 	nrk_gpio_direction(NRK_DEBUG_0,NRK_PIN_OUTPUT);//PA.3
 113:bmac_client.c **** 
 114:bmac_client.c **** 	// Open ADC device as read 
 115:bmac_client.c **** 	fd=nrk_open(FIREFLY_SENSOR_BASIC,READ);
 116:bmac_client.c **** 	if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
 117:bmac_client.c **** 	
 118:bmac_client.c **** 	bmac_auto_ack_disable();
 119:bmac_client.c **** 	for (cnt = 0; cnt < 20; cnt++) {
 120:bmac_client.c **** 		val=nrk_set_status(fd,SENSOR_SELECT,ACC_X);
 121:bmac_client.c **** 		val=nrk_read(fd,&x_val,2);
 122:bmac_client.c **** 		
 123:bmac_client.c **** 		val=nrk_set_status(fd,SENSOR_SELECT,ACC_Y);
 124:bmac_client.c **** 		val=nrk_read(fd,&y_val,2);		
 125:bmac_client.c **** 
 126:bmac_client.c **** 		if (cnt == 0) {
 127:bmac_client.c **** 			x_base = x_val;
 128:bmac_client.c **** 			y_base = y_val;
 129:bmac_client.c **** 		} else {
 130:bmac_client.c **** 			x_base = (x_base + x_val) / 2;
 131:bmac_client.c **** 			y_base = (y_base + y_val) / 2;
 132:bmac_client.c **** 		}
 133:bmac_client.c **** 		printf("calibrate: x=%d, y=%d\r\n", x_base, y_base);
 134:bmac_client.c **** 	}
 135:bmac_client.c **** 	x_min = x_base - THRESHOLD;
 136:bmac_client.c **** 	x_max = x_base + THRESHOLD;
 137:bmac_client.c **** 	y_min = y_base - THRESHOLD;
 138:bmac_client.c **** 	y_max = y_base + THRESHOLD;
 139:bmac_client.c **** 		
 140:bmac_client.c **** 	nrk_led_set (BLUE_LED);	
 141:bmac_client.c **** 	while (1) {
 142:bmac_client.c **** 		
 143:bmac_client.c **** 		// Read new values before waiting
 144:bmac_client.c **** 		//val=nrk_set_status(fd,SENSOR_SELECT,LIGHT);
 145:bmac_client.c **** 		//val=nrk_read(fd,&light,2);
 146:bmac_client.c **** 		
 147:bmac_client.c **** 		val=nrk_set_status(fd,SENSOR_SELECT,ACC_X);
 148:bmac_client.c **** 		val=nrk_read(fd,&x_val,2);
 149:bmac_client.c **** 		
 150:bmac_client.c **** 		val=nrk_set_status(fd,SENSOR_SELECT,ACC_Y);
 151:bmac_client.c **** 		val=nrk_read(fd,&y_val,2);
 152:bmac_client.c **** 
 153:bmac_client.c **** 		//read button value
 154:bmac_client.c **** 		val=nrk_gpio_get(NRK_BUTTON);
 155:bmac_client.c **** 		if(val==0){ //button pressed
 156:bmac_client.c **** 			nrk_gpio_set(NRK_DEBUG_0);
 157:bmac_client.c **** 			nrk_led_set(RED_LED);
 158:bmac_client.c **** 			light = L_TRIGGER;
 159:bmac_client.c **** 		}
 160:bmac_client.c **** 		else {
 161:bmac_client.c **** 			nrk_gpio_clr(NRK_DEBUG_0);
 162:bmac_client.c **** 			nrk_led_clr(RED_LED);
 163:bmac_client.c **** 			light = 0;
 164:bmac_client.c **** 		}
 165:bmac_client.c **** 		
 166:bmac_client.c **** 		// Set output 
 167:bmac_client.c **** 		action = PLAYER_NUM;
 168:bmac_client.c **** 		if (light >= L_TRIGGER) {
 169:bmac_client.c **** 			// Bomb 0bx101
 170:bmac_client.c **** 			action = ACTION_BOMB;
 171:bmac_client.c **** 		} else {
 172:bmac_client.c **** 			if (y_val < y_max && y_val > y_min && x_val < x_max && x_val > x_min) {
 173:bmac_client.c **** 				action = ACTION_NONE;
 174:bmac_client.c **** 			} else if (y_val > y_max && x_val < x_max && x_val > x_min) {
 175:bmac_client.c **** 				action = ACTION_UP;
 176:bmac_client.c **** 			} else if (y_val < y_min && x_val < x_max && x_val > x_min) {
 177:bmac_client.c **** 				action = ACTION_DOWN;
 178:bmac_client.c **** 			} else if (x_val > x_max && y_val < y_max && y_val > y_min) {
 179:bmac_client.c **** 				action = ACTION_RIGHT;
 180:bmac_client.c **** 			} else if (x_val < x_min && y_val < y_max && y_val > y_min) {
 181:bmac_client.c **** 				action = ACTION_LEFT;
 182:bmac_client.c **** 			} else {
 183:bmac_client.c **** 				action = ACTION_NONE;
 184:bmac_client.c **** 			}
 185:bmac_client.c **** 		}
 186:bmac_client.c **** 		sprintf(tx_buf, "%c %c\r\n", PLAYER_NUM, action);
 187:bmac_client.c **** 		printf( "tx_buf=%s",tx_buf );
 188:bmac_client.c **** 		
 189:bmac_client.c **** 
 190:bmac_client.c **** 		// Build a sensor packet
 191:bmac_client.c **** 		/*
 192:bmac_client.c **** 		sprintf (tx_buf,
 193:bmac_client.c **** 			"> Sensor packet #%d: ACC_X=%d ACC_Y=%d ACC_Z=%d AUDIO=%d LIGHT=%d TEMP=%d BATT=%d\r\n",
 194:bmac_client.c **** 			cnt, adxl_x, adxl_y, adxl_z, mic, light, temp, bat);
 195:bmac_client.c **** 		*/		
 196:bmac_client.c **** 		//sprintf (tx_buf, "X=%d Y=%d L=%d\r\n", x_val, y_val, light);
 197:bmac_client.c **** 		//printf( "tx_buf=%s",tx_buf );
 198:bmac_client.c **** 
 199:bmac_client.c **** 
 200:bmac_client.c **** 		//cnt++;
 201:bmac_client.c **** 		//nrk_led_toggle (BLUE_LED);
 202:bmac_client.c **** 
 203:bmac_client.c **** 		// For blocking transmits, use the following function call.
 204:bmac_client.c **** 		// For this there is no need to register  
 205:bmac_client.c **** 		//val=bmac_tx_pkt(tx_buf, strlen(tx_buf));
 206:bmac_client.c **** 
 207:bmac_client.c **** 		// This function shows how to transmit packets in a
 208:bmac_client.c **** 		// non-blocking manner  
 209:bmac_client.c **** 		val = bmac_tx_pkt_nonblocking(tx_buf, strlen (tx_buf));
 210:bmac_client.c **** 		//nrk_kprintf (PSTR ("Tx packet enqueued\r\n"));
 211:bmac_client.c **** 
 212:bmac_client.c **** 		// This functions waits on the tx_done_signal
 213:bmac_client.c **** 		ret = nrk_event_wait (SIG(tx_done_signal));
 214:bmac_client.c **** 
 215:bmac_client.c **** 		// Just check to be sure signal is okay
 216:bmac_client.c **** 		//if(ret & SIG(tx_done_signal) == 0 ) 
 217:bmac_client.c **** 		//	nrk_kprintf (PSTR ("TX done signal error\r\n"));
 218:bmac_client.c **** 
 219:bmac_client.c **** 		// Task gets control again after TX complete
 220:bmac_client.c **** 		//nrk_kprintf (PSTR ("Tx task sent data!\r\n"));
 221:bmac_client.c **** 		nrk_led_toggle (BLUE_LED);
 222:bmac_client.c **** 		//nrk_wait_until_next_period ();
 223:bmac_client.c **** 	}
 224:bmac_client.c **** 
 225:bmac_client.c **** }
 226:bmac_client.c **** 
 227:bmac_client.c **** void nrk_create_taskset ()
 228:bmac_client.c **** {
 229:bmac_client.c **** 	TX_TASK.task = tx_task;
 230:bmac_client.c **** 	TX_TASK.Ptos = (void *) &tx_task_stack[NRK_APP_STACKSIZE - 1];
 231:bmac_client.c **** 	TX_TASK.Pbos = (void *) &tx_task_stack[0];
 232:bmac_client.c **** 	TX_TASK.prio = 2;
 233:bmac_client.c **** 	TX_TASK.FirstActivation = TRUE;
 234:bmac_client.c **** 	TX_TASK.Type = BASIC_TASK;
 235:bmac_client.c **** 	TX_TASK.SchType = PREEMPTIVE;
 236:bmac_client.c **** 	TX_TASK.period.secs = 0;
 237:bmac_client.c **** 	TX_TASK.period.nano_secs = 10* NANOS_PER_MS;
 238:bmac_client.c **** 	TX_TASK.cpu_reserve.secs = 0;
 239:bmac_client.c **** 	TX_TASK.cpu_reserve.nano_secs = 0;//30* NANOS_PER_MS;
 240:bmac_client.c **** 	TX_TASK.offset.secs = 0;
 241:bmac_client.c **** 	TX_TASK.offset.nano_secs = 0;
 242:bmac_client.c **** 	nrk_activate_task (&TX_TASK);
 243:bmac_client.c **** 
 244:bmac_client.c **** 
 245:bmac_client.c **** 
 246:bmac_client.c **** 	printf ("Create done\r\n");
 247:bmac_client.c **** }
 248:bmac_client.c **** 
 249:bmac_client.c **** 
 250:bmac_client.c **** void nrk_register_drivers()
 251:bmac_client.c **** {
 139               	.LM0:
 140               	.LFBB1:
 141               	/* prologue: frame size=0 */
 142               	/* prologue end (size=0) */
 252:bmac_client.c **** 	int8_t val;
 253:bmac_client.c **** 
 254:bmac_client.c **** 	// Register the Basic FireFly Sensor device driver
 255:bmac_client.c **** 	// Make sure to add: 
 256:bmac_client.c **** 	//     #define NRK_MAX_DRIVER_CNT  
 257:bmac_client.c **** 	//     in nrk_cfg.h
 258:bmac_client.c **** 	// Make sure to add: 
 259:bmac_client.c **** 	//     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
 260:bmac_client.c **** 	//     in makefile
 261:bmac_client.c **** 	val=nrk_register_driver( &dev_manager_ff_sensors,FIREFLY_SENSOR_BASIC);
 144               	.LM1:
 145 0000 61E0      		ldi r22,lo8(1)
 146 0002 80E0      		ldi r24,lo8(pm(dev_manager_ff_sensors))
 147 0004 90E0      		ldi r25,hi8(pm(dev_manager_ff_sensors))
 148 0006 0E94 0000 		call nrk_register_driver
 262:bmac_client.c **** 	if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
 150               	.LM2:
 151 000a 8F3F      		cpi r24,lo8(-1)
 152 000c 01F4      		brne .L4
 154               	.LM3:
 155 000e 80E0      		ldi r24,lo8(__c.2444)
 156 0010 90E0      		ldi r25,hi8(__c.2444)
 157 0012 0E94 0000 		call nrk_kprintf
 158               	.L4:
 159 0016 0895      		ret
 160               	/* epilogue: frame size=0 */
 161               	/* epilogue: noreturn */
 162               	/* epilogue end (size=0) */
 163               	/* function nrk_register_drivers size 12 (12) */
 165               	.Lscope1:
 167               		.stabd	78,0,0
 168               		.data
 169               	.LC0:
 170 0000 4372 6561 		.string	"Create done\r"
 170      7465 2064 
 170      6F6E 650D 
 170      00
 171               		.text
 173               	.global	nrk_create_taskset
 175               	nrk_create_taskset:
 176               		.stabd	46,0,0
 178               	.LM4:
 179               	.LFBB2:
 180               	/* prologue: frame size=0 */
 181               	/* prologue end (size=0) */
 183               	.LM5:
 184 0018 80E0      		ldi r24,lo8(pm(tx_task))
 185 001a 90E0      		ldi r25,hi8(pm(tx_task))
 186 001c 9093 0000 		sts (TX_TASK+5)+1,r25
 187 0020 8093 0000 		sts TX_TASK+5,r24
 189               	.LM6:
 190 0024 80E0      		ldi r24,lo8(tx_task_stack+255)
 191 0026 90E0      		ldi r25,hi8(tx_task_stack+255)
 192 0028 9093 0000 		sts (TX_TASK+1)+1,r25
 193 002c 8093 0000 		sts TX_TASK+1,r24
 195               	.LM7:
 196 0030 80E0      		ldi r24,lo8(tx_task_stack)
 197 0032 90E0      		ldi r25,hi8(tx_task_stack)
 198 0034 9093 0000 		sts (TX_TASK+3)+1,r25
 199 0038 8093 0000 		sts TX_TASK+3,r24
 201               	.LM8:
 202 003c 82E0      		ldi r24,lo8(2)
 203 003e 8093 0000 		sts TX_TASK+8,r24
 205               	.LM9:
 206 0042 81E0      		ldi r24,lo8(1)
 207 0044 8093 0000 		sts TX_TASK+7,r24
 209               	.LM10:
 210 0048 8093 0000 		sts TX_TASK+9,r24
 212               	.LM11:
 213 004c 8093 0000 		sts TX_TASK+10,r24
 215               	.LM12:
 216 0050 1092 0000 		sts TX_TASK+11,__zero_reg__
 217 0054 1092 0000 		sts (TX_TASK+11)+1,__zero_reg__
 218 0058 1092 0000 		sts (TX_TASK+11)+2,__zero_reg__
 219 005c 1092 0000 		sts (TX_TASK+11)+3,__zero_reg__
 221               	.LM13:
 222 0060 80E8      		ldi r24,lo8(10000000)
 223 0062 96E9      		ldi r25,hi8(10000000)
 224 0064 A8E9      		ldi r26,hlo8(10000000)
 225 0066 B0E0      		ldi r27,hhi8(10000000)
 226 0068 8093 0000 		sts TX_TASK+15,r24
 227 006c 9093 0000 		sts (TX_TASK+15)+1,r25
 228 0070 A093 0000 		sts (TX_TASK+15)+2,r26
 229 0074 B093 0000 		sts (TX_TASK+15)+3,r27
 231               	.LM14:
 232 0078 1092 0000 		sts TX_TASK+19,__zero_reg__
 233 007c 1092 0000 		sts (TX_TASK+19)+1,__zero_reg__
 234 0080 1092 0000 		sts (TX_TASK+19)+2,__zero_reg__
 235 0084 1092 0000 		sts (TX_TASK+19)+3,__zero_reg__
 237               	.LM15:
 238 0088 1092 0000 		sts TX_TASK+23,__zero_reg__
 239 008c 1092 0000 		sts (TX_TASK+23)+1,__zero_reg__
 240 0090 1092 0000 		sts (TX_TASK+23)+2,__zero_reg__
 241 0094 1092 0000 		sts (TX_TASK+23)+3,__zero_reg__
 243               	.LM16:
 244 0098 1092 0000 		sts TX_TASK+27,__zero_reg__
 245 009c 1092 0000 		sts (TX_TASK+27)+1,__zero_reg__
 246 00a0 1092 0000 		sts (TX_TASK+27)+2,__zero_reg__
 247 00a4 1092 0000 		sts (TX_TASK+27)+3,__zero_reg__
 249               	.LM17:
 250 00a8 1092 0000 		sts TX_TASK+31,__zero_reg__
 251 00ac 1092 0000 		sts (TX_TASK+31)+1,__zero_reg__
 252 00b0 1092 0000 		sts (TX_TASK+31)+2,__zero_reg__
 253 00b4 1092 0000 		sts (TX_TASK+31)+3,__zero_reg__
 255               	.LM18:
 256 00b8 80E0      		ldi r24,lo8(TX_TASK)
 257 00ba 90E0      		ldi r25,hi8(TX_TASK)
 258 00bc 0E94 0000 		call nrk_activate_task
 260               	.LM19:
 261 00c0 80E0      		ldi r24,lo8(.LC0)
 262 00c2 90E0      		ldi r25,hi8(.LC0)
 263 00c4 0E94 0000 		call puts
 264               	/* epilogue: frame size=0 */
 265 00c8 0895      		ret
 266               	/* epilogue end (size=1) */
 267               	/* function nrk_create_taskset size 89 (88) */
 269               	.Lscope2:
 271               		.stabd	78,0,0
 272               		.data
 273               	.LC1:
 274 000d 7478 5F74 		.string	"tx_task PID=%d\r\n"
 274      6173 6B20 
 274      5049 443D 
 274      2564 0D0A 
 274      00
 275               	.LC2:
 276 001e 6361 6C69 		.string	"calibrate: x=%d, y=%d\r\n"
 276      6272 6174 
 276      653A 2078 
 276      3D25 642C 
 276      2079 3D25 
 277               	.LC3:
 278 0036 2563 2025 		.string	"%c %c\r\n"
 278      630D 0A00 
 279               	.LC4:
 280 003e 7478 5F62 		.string	"tx_buf=%s"
 280      7566 3D25 
 280      7300 
 281               		.text
 283               	.global	tx_task
 285               	tx_task:
 286               		.stabd	46,0,0
 288               	.LM20:
 289               	.LFBB3:
 290               	/* prologue: frame size=10 */
 291 00ca 2F92      		push r2
 292 00cc 3F92      		push r3
 293 00ce 4F92      		push r4
 294 00d0 5F92      		push r5
 295 00d2 6F92      		push r6
 296 00d4 7F92      		push r7
 297 00d6 8F92      		push r8
 298 00d8 9F92      		push r9
 299 00da AF92      		push r10
 300 00dc BF92      		push r11
 301 00de CF92      		push r12
 302 00e0 DF92      		push r13
 303 00e2 EF92      		push r14
 304 00e4 FF92      		push r15
 305 00e6 0F93      		push r16
 306 00e8 1F93      		push r17
 307 00ea CF93      		push r28
 308 00ec DF93      		push r29
 309 00ee CDB7      		in r28,__SP_L__
 310 00f0 DEB7      		in r29,__SP_H__
 311 00f2 2A97      		sbiw r28,10
 312 00f4 0FB6      		in __tmp_reg__,__SREG__
 313 00f6 F894      		cli
 314 00f8 DEBF      		out __SP_H__,r29
 315 00fa 0FBE      		out __SREG__,__tmp_reg__
 316 00fc CDBF      		out __SP_L__,r28
 317               	/* prologue end (size=26) */
 319               	.LM21:
 320 00fe 89E1      		ldi r24,lo8(25)
 321 0100 0E94 0000 		call bmac_init
 323               	.LM22:
 324 0104 0E94 0000 		call nrk_get_pid
 325 0108 9927      		clr r25
 326 010a 9F93      		push r25
 327 010c 8F93      		push r24
 328 010e 80E0      		ldi r24,lo8(.LC1)
 329 0110 90E0      		ldi r25,hi8(.LC1)
 330 0112 9F93      		push r25
 331 0114 8F93      		push r24
 332 0116 0E94 0000 		call printf
 334               	.LM23:
 335 011a 0F90      		pop __tmp_reg__
 336 011c 0F90      		pop __tmp_reg__
 337 011e 0F90      		pop __tmp_reg__
 338 0120 0F90      		pop __tmp_reg__
 339 0122 00C0      		rjmp .L8
 340               	.L9:
 342               	.LM24:
 343 0124 0E94 0000 		call nrk_wait_until_next_period
 344               	.L8:
 346               	.LM25:
 347 0128 0E94 0000 		call bmac_started
 348 012c 8823      		tst r24
 349 012e 01F0      		breq .L9
 351               	.LM26:
 352 0130 0E94 0000 		call bmac_get_tx_done_signal
 353 0134 8D83      		std Y+5,r24
 355               	.LM27:
 356 0136 0E94 0000 		call nrk_signal_register
 358               	.LM28:
 359 013a 8091 0000 		lds r24,NRK_BUTTON
 360 013e 8A87      		std Y+10,r24
 361 0140 60E0      		ldi r22,lo8(0)
 362 0142 0E94 0000 		call nrk_gpio_direction
 364               	.LM29:
 365 0146 6090 0000 		lds r6,NRK_DEBUG_0
 366 014a 61E0      		ldi r22,lo8(1)
 367 014c 862D      		mov r24,r6
 368 014e 0E94 0000 		call nrk_gpio_direction
 370               	.LM30:
 371 0152 65E0      		ldi r22,lo8(5)
 372 0154 81E0      		ldi r24,lo8(1)
 373 0156 0E94 0000 		call nrk_open
 374 015a 782E      		mov r7,r24
 376               	.LM31:
 377 015c 0E94 0000 		call bmac_auto_ack_disable
 378 0160 CC24      		clr r12
 379 0162 DD24      		clr r13
 381               	.LM32:
 382 0164 2E01      		movw r4,r28
 383 0166 0894      		sec
 384 0168 411C      		adc r4,__zero_reg__
 385 016a 511C      		adc r5,__zero_reg__
 387               	.LM33:
 388 016c E3E0      		ldi r30,lo8(3)
 389 016e 8E2E      		mov r8,r30
 390 0170 912C      		mov r9,__zero_reg__
 391 0172 8C0E      		add r8,r28
 392 0174 9D1E      		adc r9,r29
 394               	.LM34:
 395 0176 70E0      		ldi r23,lo8(.LC2)
 396 0178 A72E      		mov r10,r23
 397 017a 70E0      		ldi r23,hi8(.LC2)
 398 017c B72E      		mov r11,r23
 399               	.L11:
 401               	.LM35:
 402 017e 42E0      		ldi r20,lo8(2)
 403 0180 61E0      		ldi r22,lo8(1)
 404 0182 872D      		mov r24,r7
 405 0184 0E94 0000 		call nrk_set_status
 407               	.LM36:
 408 0188 5986      		std Y+9,r5
 409 018a 4886      		std Y+8,r4
 410 018c 42E0      		ldi r20,lo8(2)
 411 018e B201      		movw r22,r4
 412 0190 872D      		mov r24,r7
 413 0192 0E94 0000 		call nrk_read
 415               	.LM37:
 416 0196 45E0      		ldi r20,lo8(5)
 417 0198 61E0      		ldi r22,lo8(1)
 418 019a 872D      		mov r24,r7
 419 019c 0E94 0000 		call nrk_set_status
 421               	.LM38:
 422 01a0 9F82      		std Y+7,r9
 423 01a2 8E82      		std Y+6,r8
 424 01a4 42E0      		ldi r20,lo8(2)
 425 01a6 B401      		movw r22,r8
 426 01a8 872D      		mov r24,r7
 427 01aa 0E94 0000 		call nrk_read
 428 01ae 8981      		ldd r24,Y+1
 429 01b0 9A81      		ldd r25,Y+2
 430 01b2 2B81      		ldd r18,Y+3
 431 01b4 3C81      		ldd r19,Y+4
 433               	.LM39:
 434 01b6 CC20      		tst r12
 435 01b8 01F4      		brne .L12
 437               	.LM40:
 438 01ba 8C01      		movw r16,r24
 440               	.LM41:
 441 01bc 7901      		movw r14,r18
 442 01be 00C0      		rjmp .L14
 443               	.L12:
 445               	.LM42:
 446 01c0 080F      		add r16,r24
 447 01c2 191F      		adc r17,r25
 448 01c4 1695      		lsr r17
 449 01c6 0795      		ror r16
 451               	.LM43:
 452 01c8 E20E      		add r14,r18
 453 01ca F31E      		adc r15,r19
 454 01cc F694      		lsr r15
 455 01ce E794      		ror r14
 456               	.L14:
 458               	.LM44:
 459 01d0 FF92      		push r15
 460 01d2 EF92      		push r14
 461 01d4 1F93      		push r17
 462 01d6 0F93      		push r16
 463 01d8 BF92      		push r11
 464 01da AF92      		push r10
 465 01dc 0E94 0000 		call printf
 466 01e0 0894      		sec
 467 01e2 C11C      		adc r12,__zero_reg__
 468 01e4 D11C      		adc r13,__zero_reg__
 470               	.LM45:
 471 01e6 8DB7      		in r24,__SP_L__
 472 01e8 9EB7      		in r25,__SP_H__
 473 01ea 0696      		adiw r24,6
 474 01ec 0FB6      		in __tmp_reg__,__SREG__
 475 01ee F894      		cli
 476 01f0 9EBF      		out __SP_H__,r25
 477 01f2 0FBE      		out __SREG__,__tmp_reg__
 478 01f4 8DBF      		out __SP_L__,r24
 479 01f6 94E1      		ldi r25,lo8(20)
 480 01f8 C916      		cp r12,r25
 481 01fa D104      		cpc r13,__zero_reg__
 482 01fc 01F0      		breq .+2
 483 01fe 00C0      		rjmp .L11
 485               	.LM46:
 486 0200 4EEC      		ldi r20,lo8(-50)
 487 0202 842E      		mov r8,r20
 488 0204 4FEF      		ldi r20,hi8(-50)
 489 0206 942E      		mov r9,r20
 490 0208 800E      		add r8,r16
 491 020a 911E      		adc r9,r17
 493               	.LM47:
 494 020c 32E3      		ldi r19,lo8(50)
 495 020e A32E      		mov r10,r19
 496 0210 B12C      		mov r11,__zero_reg__
 497 0212 A00E      		add r10,r16
 498 0214 B11E      		adc r11,r17
 500               	.LM48:
 501 0216 2EEC      		ldi r18,lo8(-50)
 502 0218 C22E      		mov r12,r18
 503 021a 2FEF      		ldi r18,hi8(-50)
 504 021c D22E      		mov r13,r18
 505 021e CE0C      		add r12,r14
 506 0220 DF1C      		adc r13,r15
 508               	.LM49:
 509 0222 8701      		movw r16,r14
 510 0224 0E5C      		subi r16,lo8(-(50))
 511 0226 1F4F      		sbci r17,hi8(-(50))
 513               	.LM50:
 514 0228 81E0      		ldi r24,lo8(1)
 515 022a 90E0      		ldi r25,hi8(1)
 516 022c 0E94 0000 		call nrk_led_set
 518               	.LM51:
 519 0230 90E0      		ldi r25,lo8(tx_buf)
 520 0232 E92E      		mov r14,r25
 521 0234 90E0      		ldi r25,hi8(tx_buf)
 522 0236 F92E      		mov r15,r25
 524               	.LM52:
 525 0238 81E0      		ldi r24,lo8(1)
 526 023a 282E      		mov r2,r24
 527 023c 312C      		mov r3,__zero_reg__
 528 023e 412C      		mov r4,__zero_reg__
 529 0240 512C      		mov r5,__zero_reg__
 530 0242 0D80      		ldd r0,Y+5
 531 0244 00C0      		rjmp 2f
 532 0246 220C      	1:	lsl r2
 533 0248 331C      		rol r3
 534 024a 441C      		rol r4
 535 024c 551C      		rol r5
 536 024e 0A94      	2:	dec r0
 537 0250 02F4      		brpl 1b
 538               	.L16:
 540               	.LM53:
 541 0252 42E0      		ldi r20,lo8(2)
 542 0254 61E0      		ldi r22,lo8(1)
 543 0256 872D      		mov r24,r7
 544 0258 0E94 0000 		call nrk_set_status
 546               	.LM54:
 547 025c 42E0      		ldi r20,lo8(2)
 548 025e 6885      		ldd r22,Y+8
 549 0260 7985      		ldd r23,Y+9
 550 0262 872D      		mov r24,r7
 551 0264 0E94 0000 		call nrk_read
 553               	.LM55:
 554 0268 45E0      		ldi r20,lo8(5)
 555 026a 61E0      		ldi r22,lo8(1)
 556 026c 872D      		mov r24,r7
 557 026e 0E94 0000 		call nrk_set_status
 559               	.LM56:
 560 0272 42E0      		ldi r20,lo8(2)
 561 0274 6E81      		ldd r22,Y+6
 562 0276 7F81      		ldd r23,Y+7
 563 0278 872D      		mov r24,r7
 564 027a 0E94 0000 		call nrk_read
 566               	.LM57:
 567 027e 8A85      		ldd r24,Y+10
 568 0280 0E94 0000 		call nrk_gpio_get
 570               	.LM58:
 571 0284 8823      		tst r24
 572 0286 01F4      		brne .L17
 574               	.LM59:
 575 0288 862D      		mov r24,r6
 576 028a 0E94 0000 		call nrk_gpio_set
 578               	.LM60:
 579 028e 83E0      		ldi r24,lo8(3)
 580 0290 90E0      		ldi r25,hi8(3)
 581 0292 0E94 0000 		call nrk_led_set
 582 0296 82E4      		ldi r24,lo8(66)
 583 0298 00C0      		rjmp .L19
 584               	.L17:
 586               	.LM61:
 587 029a 862D      		mov r24,r6
 588 029c 0E94 0000 		call nrk_gpio_clr
 590               	.LM62:
 591 02a0 83E0      		ldi r24,lo8(3)
 592 02a2 90E0      		ldi r25,hi8(3)
 593 02a4 0E94 0000 		call nrk_led_clr
 595               	.LM63:
 596 02a8 8B81      		ldd r24,Y+3
 597 02aa 9C81      		ldd r25,Y+4
 598 02ac 8017      		cp r24,r16
 599 02ae 9107      		cpc r25,r17
 600 02b0 00F4      		brsh .L20
 601 02b2 C816      		cp r12,r24
 602 02b4 D906      		cpc r13,r25
 603 02b6 00F4      		brsh .L22
 604 02b8 2981      		ldd r18,Y+1
 605 02ba 3A81      		ldd r19,Y+2
 606 02bc 2A15      		cp r18,r10
 607 02be 3B05      		cpc r19,r11
 608 02c0 00F4      		brsh .L24
 609 02c2 8216      		cp r8,r18
 610 02c4 9306      		cpc r9,r19
 611 02c6 00F4      		brsh .L24
 612 02c8 00C0      		rjmp .L26
 613               	.L20:
 615               	.LM64:
 616 02ca 0817      		cp r16,r24
 617 02cc 1907      		cpc r17,r25
 618 02ce 00F4      		brsh .L22
 619 02d0 2981      		ldd r18,Y+1
 620 02d2 3A81      		ldd r19,Y+2
 621 02d4 2A15      		cp r18,r10
 622 02d6 3B05      		cpc r19,r11
 623 02d8 00F4      		brsh .L22
 624 02da 8216      		cp r8,r18
 625 02dc 9306      		cpc r9,r19
 626 02de 00F4      		brsh .L22
 627 02e0 85E5      		ldi r24,lo8(85)
 628 02e2 00C0      		rjmp .L19
 629               	.L22:
 631               	.LM65:
 632 02e4 8C15      		cp r24,r12
 633 02e6 9D05      		cpc r25,r13
 634 02e8 00F4      		brsh .L24
 635 02ea 2981      		ldd r18,Y+1
 636 02ec 3A81      		ldd r19,Y+2
 637 02ee 2A15      		cp r18,r10
 638 02f0 3B05      		cpc r19,r11
 639 02f2 00F4      		brsh .L24
 640 02f4 8216      		cp r8,r18
 641 02f6 9306      		cpc r9,r19
 642 02f8 00F4      		brsh .L24
 643 02fa 84E4      		ldi r24,lo8(68)
 644 02fc 00C0      		rjmp .L19
 645               	.L24:
 647               	.LM66:
 648 02fe 2981      		ldd r18,Y+1
 649 0300 3A81      		ldd r19,Y+2
 650 0302 A216      		cp r10,r18
 651 0304 B306      		cpc r11,r19
 652 0306 00F4      		brsh .L33
 653 0308 8017      		cp r24,r16
 654 030a 9107      		cpc r25,r17
 655 030c 00F4      		brsh .L33
 656 030e C816      		cp r12,r24
 657 0310 D906      		cpc r13,r25
 658 0312 00F4      		brsh .L33
 659 0314 82E5      		ldi r24,lo8(82)
 660 0316 00C0      		rjmp .L19
 661               	.L33:
 663               	.LM67:
 664 0318 2815      		cp r18,r8
 665 031a 3905      		cpc r19,r9
 666 031c 00F4      		brsh .L26
 667 031e 8017      		cp r24,r16
 668 0320 9107      		cpc r25,r17
 669 0322 00F4      		brsh .L26
 670 0324 C816      		cp r12,r24
 671 0326 D906      		cpc r13,r25
 672 0328 00F4      		brsh .L26
 673 032a 8CE4      		ldi r24,lo8(76)
 674 032c 00C0      		rjmp .L19
 675               	.L26:
 676 032e 8DE2      		ldi r24,lo8(45)
 677               	.L19:
 679               	.LM68:
 680 0330 9927      		clr r25
 681 0332 9F93      		push r25
 682 0334 8F93      		push r24
 683 0336 81E4      		ldi r24,lo8(65)
 684 0338 90E0      		ldi r25,hi8(65)
 685 033a 9F93      		push r25
 686 033c 8F93      		push r24
 687 033e 80E0      		ldi r24,lo8(.LC3)
 688 0340 90E0      		ldi r25,hi8(.LC3)
 689 0342 9F93      		push r25
 690 0344 8F93      		push r24
 691 0346 FF92      		push r15
 692 0348 EF92      		push r14
 693 034a 0E94 0000 		call sprintf
 695               	.LM69:
 696 034e FF92      		push r15
 697 0350 EF92      		push r14
 698 0352 80E0      		ldi r24,lo8(.LC4)
 699 0354 90E0      		ldi r25,hi8(.LC4)
 700 0356 9F93      		push r25
 701 0358 8F93      		push r24
 702 035a 0E94 0000 		call printf
 704               	.LM70:
 705 035e F701      		movw r30,r14
 706 0360 0190      		ld __tmp_reg__,Z+
 707 0362 0020      		tst __tmp_reg__
 708 0364 01F4      		brne .-6
 709 0366 3197      		sbiw r30,1
 710 0368 E050      		subi r30,lo8(tx_buf)
 711 036a F040      		sbci r31,hi8(tx_buf)
 712 036c 6E2F      		mov r22,r30
 713 036e C701      		movw r24,r14
 714 0370 0E94 0000 		call bmac_tx_pkt_nonblocking
 716               	.LM71:
 717 0374 C201      		movw r24,r4
 718 0376 B101      		movw r22,r2
 719 0378 0E94 0000 		call nrk_event_wait
 721               	.LM72:
 722 037c 81E0      		ldi r24,lo8(1)
 723 037e 90E0      		ldi r25,hi8(1)
 724 0380 0E94 0000 		call nrk_led_toggle
 726               	.LM73:
 727 0384 8DB7      		in r24,__SP_L__
 728 0386 9EB7      		in r25,__SP_H__
 729 0388 0C96      		adiw r24,12
 730 038a 0FB6      		in __tmp_reg__,__SREG__
 731 038c F894      		cli
 732 038e 9EBF      		out __SP_H__,r25
 733 0390 0FBE      		out __SREG__,__tmp_reg__
 734 0392 8DBF      		out __SP_L__,r24
 735 0394 00C0      		rjmp .L16
 736               	/* epilogue: frame size=10 */
 737               	/* epilogue: noreturn */
 738               	/* epilogue end (size=0) */
 739               	/* function tx_task size 358 (332) */
 754               	.Lscope3:
 756               		.stabd	78,0,0
 758               	.global	main
 760               	main:
 761               		.stabd	46,0,0
 763               	.LM74:
 764               	.LFBB4:
 765               	/* prologue: frame size=0 */
 766 0396 C0E0      		ldi r28,lo8(__stack - 0)
 767 0398 D0E0      		ldi r29,hi8(__stack - 0)
 768 039a DEBF      		out __SP_H__,r29
 769 039c CDBF      		out __SP_L__,r28
 770               	/* prologue end (size=4) */
 772               	.LM75:
 773 039e 0E94 0000 		call nrk_setup_ports
 775               	.LM76:
 776 03a2 87E0      		ldi r24,lo8(7)
 777 03a4 90E0      		ldi r25,hi8(7)
 778 03a6 0E94 0000 		call nrk_setup_uart
 780               	.LM77:
 781 03aa 0E94 0000 		call nrk_init
 783               	.LM78:
 784 03ae 80E0      		ldi r24,lo8(0)
 785 03b0 90E0      		ldi r25,hi8(0)
 786 03b2 0E94 0000 		call nrk_led_clr
 788               	.LM79:
 789 03b6 81E0      		ldi r24,lo8(1)
 790 03b8 90E0      		ldi r25,hi8(1)
 791 03ba 0E94 0000 		call nrk_led_clr
 793               	.LM80:
 794 03be 82E0      		ldi r24,lo8(2)
 795 03c0 90E0      		ldi r25,hi8(2)
 796 03c2 0E94 0000 		call nrk_led_clr
 798               	.LM81:
 799 03c6 83E0      		ldi r24,lo8(3)
 800 03c8 90E0      		ldi r25,hi8(3)
 801 03ca 0E94 0000 		call nrk_led_clr
 803               	.LM82:
 804 03ce 20E0      		ldi r18,lo8(0)
 805 03d0 30E0      		ldi r19,hi8(0)
 806 03d2 40E0      		ldi r20,hlo8(0)
 807 03d4 50E0      		ldi r21,hhi8(0)
 808 03d6 60E0      		ldi r22,lo8(0)
 809 03d8 70E0      		ldi r23,hi8(0)
 810 03da 80E0      		ldi r24,hlo8(0)
 811 03dc 90E0      		ldi r25,hhi8(0)
 812 03de 0E94 0000 		call nrk_time_set
 814               	.LM83:
 815 03e2 0E94 0000 		call bmac_task_config
 817               	.LM84:
 818 03e6 0E94 0000 		call nrk_register_drivers
 820               	.LM85:
 821 03ea 0E94 0000 		call nrk_create_taskset
 823               	.LM86:
 824 03ee 0E94 0000 		call nrk_start
 826               	.LM87:
 827 03f2 80E0      		ldi r24,lo8(0)
 828 03f4 90E0      		ldi r25,hi8(0)
 829               	/* epilogue: frame size=0 */
 830 03f6 0C94 0000 		jmp exit
 831               	/* epilogue end (size=2) */
 832               	/* function main size 50 (44) */
 834               	.Lscope4:
 836               		.stabd	78,0,0
 837               		.section	.progmem.data,"a",@progbits
 840               	__c.2444:
 841 0000 4661 696C 		.string	"Failed to load my ADC driver\r\n"
 841      6564 2074 
 841      6F20 6C6F 
 841      6164 206D 
 841      7920 4144 
 842               		.comm _nrk_signal_list,4,1
 843               		.comm nrk_idle_task_stk,128,1
 844               		.comm nrk_kernel_stk_ptr,2,1
 845               		.comm tx_reserve,1,1
 846               		.comm bmac_task,35,1
 847               		.comm bmac_task_stack,128,1
 848               		.comm cca_active,1,1
 849               		.comm bmac_rx_pkt_signal,1,1
 850               		.comm bmac_tx_pkt_done_signal,1,1
 851               		.comm bmac_enable_signal,1,1
 852               		.comm bmac_rfRxInfo,9,1
 853               		.comm bmac_rfTxInfo,7,1
 854               		.comm error_task,1,1
 855               		.comm error_num,1,1
 856               		.comm TX_TASK,35,1
 857               		.comm tx_task_stack,256,1
 858               		.comm tx_buf,116,1
 877               		.text
 879               	.Letext0:
 880               	/* File "bmac_client.c": code  509 = 0x01fd ( 476), prologues  30, epilogues   3 */
DEFINED SYMBOLS
                            *ABS*:00000000 bmac_client.c
     /tmp/ccAjDRMu.s:2      *ABS*:0000003f __SREG__
     /tmp/ccAjDRMu.s:3      *ABS*:0000003e __SP_H__
     /tmp/ccAjDRMu.s:4      *ABS*:0000003d __SP_L__
     /tmp/ccAjDRMu.s:5      *ABS*:00000000 __tmp_reg__
     /tmp/ccAjDRMu.s:6      *ABS*:00000001 __zero_reg__
     /tmp/ccAjDRMu.s:136    .text:00000000 nrk_register_drivers
     /tmp/ccAjDRMu.s:840    .progmem.data:00000000 __c.2444
     /tmp/ccAjDRMu.s:175    .text:00000018 nrk_create_taskset
     /tmp/ccAjDRMu.s:285    .text:000000ca tx_task
                            *COM*:00000023 TX_TASK
                            *COM*:00000100 tx_task_stack
                            *COM*:00000074 tx_buf
     /tmp/ccAjDRMu.s:760    .text:00000396 main
                            *COM*:00000004 _nrk_signal_list
                            *COM*:00000080 nrk_idle_task_stk
                            *COM*:00000002 nrk_kernel_stk_ptr
                            *COM*:00000001 tx_reserve
                            *COM*:00000023 bmac_task
                            *COM*:00000080 bmac_task_stack
                            *COM*:00000001 cca_active
                            *COM*:00000001 bmac_rx_pkt_signal
                            *COM*:00000001 bmac_tx_pkt_done_signal
                            *COM*:00000001 bmac_enable_signal
                            *COM*:00000009 bmac_rfRxInfo
                            *COM*:00000007 bmac_rfTxInfo
                            *COM*:00000001 error_task
                            *COM*:00000001 error_num

UNDEFINED SYMBOLS
__do_copy_data
__do_clear_bss
dev_manager_ff_sensors
nrk_register_driver
nrk_kprintf
nrk_activate_task
puts
bmac_init
nrk_get_pid
printf
nrk_wait_until_next_period
bmac_started
bmac_get_tx_done_signal
nrk_signal_register
NRK_BUTTON
nrk_gpio_direction
NRK_DEBUG_0
nrk_open
bmac_auto_ack_disable
nrk_set_status
nrk_read
nrk_led_set
nrk_gpio_get
nrk_gpio_set
nrk_gpio_clr
nrk_led_clr
sprintf
bmac_tx_pkt_nonblocking
nrk_event_wait
nrk_led_toggle
__stack
nrk_setup_ports
nrk_setup_uart
nrk_init
nrk_time_set
bmac_task_config
nrk_start
exit
