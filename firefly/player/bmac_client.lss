
bmac_client.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800200  000066b8  0000672c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000066b8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003ed  008002c4  0000677c  000067f0  2**0
                  ALLOC
  3 .stab         0000ff3c  00000000  00000000  000067f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000062ec  00000000  00000000  0001672c  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <__ctors_end>
       4:	0c 94 2e 2d 	jmp	0x5a5c	; 0x5a5c <__vector_1>
       8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
       c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      10:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      14:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      18:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      1c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      20:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      24:	0c 94 5c 2d 	jmp	0x5ab8	; 0x5ab8 <__vector_9>
      28:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      2c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      30:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      34:	0c 94 0f 2b 	jmp	0x561e	; 0x561e <__vector_13>
      38:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      3c:	0c 94 0f 2b 	jmp	0x561e	; 0x561e <__vector_13>
      40:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      44:	0c 94 42 2b 	jmp	0x5684	; 0x5684 <__vector_17>
      48:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      4c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      50:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      54:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      58:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      5c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      60:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      64:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      68:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      6c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      70:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      74:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      78:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      7c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      80:	0c 94 4c 2b 	jmp	0x5698	; 0x5698 <__vector_32>
      84:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      88:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      8c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      90:	0c 94 00 19 	jmp	0x3200	; 0x3200 <__vector_36>
      94:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      98:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      9c:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      a0:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      a4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      a8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      ac:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      b0:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      b4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      b8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      bc:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      c0:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      c4:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      c8:	0c 94 08 02 	jmp	0x410	; 0x410 <__bad_interrupt>
      cc:	60 1c       	adc	r6, r0
      ce:	66 1c       	adc	r6, r6
      d0:	69 1c       	adc	r6, r9
      d2:	6c 1c       	adc	r6, r12
      d4:	6f 1c       	adc	r6, r15
      d6:	72 1c       	adc	r7, r2
      d8:	78 1c       	adc	r7, r8
      da:	75 1c       	adc	r7, r5
      dc:	7b 1c       	adc	r7, r11
      de:	7e 1c       	adc	r7, r14
      e0:	81 1c       	adc	r8, r1
      e2:	87 1c       	adc	r8, r7
      e4:	8a 1c       	adc	r8, r10
      e6:	8d 1c       	adc	r8, r13
      e8:	90 1c       	adc	r9, r0
      ea:	84 1c       	adc	r8, r4
      ec:	5d 1c       	adc	r5, r13
      ee:	63 1c       	adc	r6, r3

000000f0 <__c.2444>:
      f0:	46 61 69 6c 65 64 20 74 6f 20 6c 6f 61 64 20 6d     Failed to load m
     100:	79 20 41 44 43 20 64 72 69 76 65 72 0d 0a 00        y ADC driver...

0000010f <__c.2625>:
     10f:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     11f:	74 69 6e 67 20 65 6e 61 62 6c 65 20 73 69 67 6e     ting enable sign
     12f:	61 6c 20 66 61 69 6c 65 64 0d 0a 00                 al failed...

0000013b <__c.2623>:
     13b:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     14b:	74 69 6e 67 20 74 78 20 73 69 67 6e 61 6c 20 66     ting tx signal f
     15b:	61 69 6c 65 64 0d 0a 00                             ailed...

00000163 <__c.2621>:
     163:	42 4d 41 43 20 45 52 52 4f 52 3a 20 63 72 65 61     BMAC ERROR: crea
     173:	74 69 6e 67 20 72 78 20 73 69 67 6e 61 6c 20 66     ting rx signal f
     183:	61 69 6c 65 64 0d 0a 00                             ailed...

0000018b <__c.2733>:
     18b:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 52     CC2420 ERROR:  R
     19b:	65 6c 65 61 73 65 20 6f 66 20 73 65 6d 61 70 68     elease of semaph
     1ab:	6f 72 65 20 66 61 69 6c 65 64 0d 0a 00              ore failed...

000001b8 <__c.2671>:
     1b8:	43 43 32 34 32 30 20 45 52 52 4f 52 3a 20 20 41     CC2420 ERROR:  A
     1c8:	63 63 65 73 73 20 74 6f 20 73 65 6d 61 70 68 6f     ccess to semapho
     1d8:	72 65 20 66 61 69 6c 65 64 0d 0a 00                 re failed...

000001e4 <__c.2381>:
     1e4:	55 4e 4b 4f 57 4e 00                                UNKOWN.

000001eb <__c.2378>:
     1eb:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     1fb:	20 53 65 6d 61 70 68 6f 72 65 00                     Semaphore.

00000206 <__c.2375>:
     206:	46 61 69 6c 65 64 20 74 6f 20 63 72 65 61 74 65     Failed to create
     216:	20 53 69 67 6e 61 6c 00                              Signal.

0000021e <__c.2372>:
     21e:	4b 65 72 6e 65 6c 20 66 75 6e 63 74 69 6f 6e 20     Kernel function 
     22e:	6e 6f 74 20 69 6d 70 6c 65 6d 65 6e 74 65 64 00     not implemented.

0000023e <__c.2369>:
     23e:	44 65 76 69 63 65 20 44 72 69 76 65 72 20 45 72     Device Driver Er
     24e:	72 6f 72 00                                         ror.

00000252 <__c.2366>:
     252:	57 61 74 63 68 64 6f 67 20 52 65 73 74 61 72 74     Watchdog Restart
	...

00000263 <__c.2363>:
     263:	54 69 6d 65 72 20 4f 76 65 72 66 6c 6f 77 00        Timer Overflow.

00000272 <__c.2360>:
     272:	55 6e 68 61 6e 64 6c 65 64 20 49 6e 74 65 72 72     Unhandled Interr
     282:	75 70 74 20 56 65 63 74 6f 72 00                    upt Vector.

0000028d <__c.2357>:
     28d:	4c 6f 77 20 56 6f 6c 74 61 67 65 00                 Low Voltage.

00000299 <__c.2354>:
     299:	45 78 74 72 61 20 54 61 73 6b 20 73 74 61 72 74     Extra Task start
     2a9:	65 64 2c 20 69 73 20 6e 72 6b 5f 63 66 67 2e 68     ed, is nrk_cfg.h
     2b9:	20 6f 6b 3f 00                                       ok?.

000002be <__c.2351>:
     2be:	49 64 6c 65 20 6f 72 20 4b 65 72 6e 65 6c 20 53     Idle or Kernel S
     2ce:	74 61 63 6b 20 4f 76 65 72 66 6c 6f 77 00           tack Overflow.

000002dc <__c.2348>:
     2dc:	55 6e 65 78 70 65 63 74 65 64 20 52 65 73 74 61     Unexpected Resta
     2ec:	72 74 00                                            rt.

000002ef <__c.2345>:
     2ef:	44 75 70 6c 69 63 61 74 65 64 20 54 61 73 6b 20     Duplicated Task 
     2ff:	49 44 00                                            ID.

00000302 <__c.2342>:
     302:	53 63 68 65 64 75 6c 65 72 20 4d 69 73 73 65 64     Scheduler Missed
     312:	20 57 61 6b 65 75 70 00                              Wakeup.

0000031a <__c.2339>:
     31a:	54 61 73 6b 20 52 65 73 65 72 76 65 20 56 69 6f     Task Reserve Vio
     32a:	6c 61 74 65 64 00                                   lated.

00000330 <__c.2336>:
     330:	52 65 73 65 72 76 65 20 45 72 72 6f 72 20 69 6e     Reserve Error in
     340:	20 53 63 68 65 64 75 6c 65 72 00                     Scheduler.

0000034b <__c.2333>:
     34b:	49 6e 76 61 6c 69 64 20 53 74 61 63 6b 20 50 6f     Invalid Stack Po
     35b:	69 6e 74 65 72 00                                   inter.

00000361 <__c.2330>:
     361:	54 61 73 6b 20 53 74 61 63 6b 20 4f 76 65 72 66     Task Stack Overf
     371:	6c 6f 77 00                                         low.

00000375 <__c.2326>:
     375:	53 74 61 63 6b 20 77 61 73 20 6e 6f 74 20 64 65     Stack was not de
     385:	66 69 6e 65 64 20 61 73 20 6c 61 72 67 65 20 65     fined as large e
     395:	6e 6f 75 67 68 21 00                                nough!.

0000039c <__c.2323>:
     39c:	29 3a 20 00                                         ): .

000003a0 <__c.2321>:
     3a0:	2a 4e 52 4b 20 45 52 52 4f 52 28 00                 *NRK ERROR(.

000003ac <__c.2254>:
     3ac:	0d 0a 53 54 41 43 4b 20 44 55 4d 50 0d 0a 00        ..STACK DUMP...

000003bb <__c.2047>:
     3bb:	45 46 47 65 66 67 00                                EFGefg.

000003c2 <__c.2041>:
     3c2:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

000003d2 <__ctors_end>:
     3d2:	11 24       	eor	r1, r1
     3d4:	1f be       	out	0x3f, r1	; 63
     3d6:	cf ef       	ldi	r28, 0xFF	; 255
     3d8:	d1 e2       	ldi	r29, 0x21	; 33
     3da:	de bf       	out	0x3e, r29	; 62
     3dc:	cd bf       	out	0x3d, r28	; 61

000003de <__do_copy_data>:
     3de:	12 e0       	ldi	r17, 0x02	; 2
     3e0:	a0 e0       	ldi	r26, 0x00	; 0
     3e2:	b2 e0       	ldi	r27, 0x02	; 2
     3e4:	e8 eb       	ldi	r30, 0xB8	; 184
     3e6:	f6 e6       	ldi	r31, 0x66	; 102
     3e8:	00 e0       	ldi	r16, 0x00	; 0
     3ea:	0b bf       	out	0x3b, r16	; 59
     3ec:	02 c0       	rjmp	.+4      	; 0x3f2 <__do_copy_data+0x14>
     3ee:	07 90       	elpm	r0, Z+
     3f0:	0d 92       	st	X+, r0
     3f2:	a4 3c       	cpi	r26, 0xC4	; 196
     3f4:	b1 07       	cpc	r27, r17
     3f6:	d9 f7       	brne	.-10     	; 0x3ee <__do_copy_data+0x10>

000003f8 <__do_clear_bss>:
     3f8:	16 e0       	ldi	r17, 0x06	; 6
     3fa:	a4 ec       	ldi	r26, 0xC4	; 196
     3fc:	b2 e0       	ldi	r27, 0x02	; 2
     3fe:	01 c0       	rjmp	.+2      	; 0x402 <.do_clear_bss_start>

00000400 <.do_clear_bss_loop>:
     400:	1d 92       	st	X+, r1

00000402 <.do_clear_bss_start>:
     402:	a1 3b       	cpi	r26, 0xB1	; 177
     404:	b1 07       	cpc	r27, r17
     406:	e1 f7       	brne	.-8      	; 0x400 <.do_clear_bss_loop>
     408:	0e 94 d5 03 	call	0x7aa	; 0x7aa <main>
     40c:	0c 94 5b 33 	jmp	0x66b6	; 0x66b6 <_exit>

00000410 <__bad_interrupt>:
     410:	0c 94 7a 2b 	jmp	0x56f4	; 0x56f4 <__vector_default>

00000414 <nrk_register_drivers>:
	//     #define NRK_MAX_DRIVER_CNT  
	//     in nrk_cfg.h
	// Make sure to add: 
	//     SRC += $(ROOT_DIR)/src/drivers/platform/$(PLATFORM_TYPE)/source/ff_basic_sensor.c
	//     in makefile
	val=nrk_register_driver( &dev_manager_ff_sensors,FIREFLY_SENSOR_BASIC);
     414:	61 e0       	ldi	r22, 0x01	; 1
     416:	86 e9       	ldi	r24, 0x96	; 150
     418:	98 e0       	ldi	r25, 0x08	; 8
     41a:	0e 94 2c 29 	call	0x5258	; 0x5258 <nrk_register_driver>
	if(val==NRK_ERROR) nrk_kprintf( PSTR("Failed to load my ADC driver\r\n") );
     41e:	8f 3f       	cpi	r24, 0xFF	; 255
     420:	21 f4       	brne	.+8      	; 0x42a <nrk_register_drivers+0x16>
     422:	80 ef       	ldi	r24, 0xF0	; 240
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 ed 18 	call	0x31da	; 0x31da <nrk_kprintf>
     42a:	08 95       	ret

0000042c <nrk_create_taskset>:

}

void nrk_create_taskset ()
{
	TX_TASK.task = tx_task;
     42c:	8f e6       	ldi	r24, 0x6F	; 111
     42e:	92 e0       	ldi	r25, 0x02	; 2
     430:	90 93 72 04 	sts	0x0472, r25
     434:	80 93 71 04 	sts	0x0471, r24
	TX_TASK.Ptos = (void *) &tx_task_stack[NRK_APP_STACKSIZE - 1];
     438:	83 ec       	ldi	r24, 0xC3	; 195
     43a:	93 e0       	ldi	r25, 0x03	; 3
     43c:	90 93 6e 04 	sts	0x046E, r25
     440:	80 93 6d 04 	sts	0x046D, r24
	TX_TASK.Pbos = (void *) &tx_task_stack[0];
     444:	84 ec       	ldi	r24, 0xC4	; 196
     446:	92 e0       	ldi	r25, 0x02	; 2
     448:	90 93 70 04 	sts	0x0470, r25
     44c:	80 93 6f 04 	sts	0x046F, r24
	TX_TASK.prio = 2;
     450:	82 e0       	ldi	r24, 0x02	; 2
     452:	80 93 74 04 	sts	0x0474, r24
	TX_TASK.FirstActivation = TRUE;
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	80 93 73 04 	sts	0x0473, r24
	TX_TASK.Type = BASIC_TASK;
     45c:	80 93 75 04 	sts	0x0475, r24
	TX_TASK.SchType = PREEMPTIVE;
     460:	80 93 76 04 	sts	0x0476, r24
	TX_TASK.period.secs = 0;
     464:	10 92 77 04 	sts	0x0477, r1
     468:	10 92 78 04 	sts	0x0478, r1
     46c:	10 92 79 04 	sts	0x0479, r1
     470:	10 92 7a 04 	sts	0x047A, r1
	TX_TASK.period.nano_secs = 10* NANOS_PER_MS;
     474:	80 e8       	ldi	r24, 0x80	; 128
     476:	96 e9       	ldi	r25, 0x96	; 150
     478:	a8 e9       	ldi	r26, 0x98	; 152
     47a:	b0 e0       	ldi	r27, 0x00	; 0
     47c:	80 93 7b 04 	sts	0x047B, r24
     480:	90 93 7c 04 	sts	0x047C, r25
     484:	a0 93 7d 04 	sts	0x047D, r26
     488:	b0 93 7e 04 	sts	0x047E, r27
	TX_TASK.cpu_reserve.secs = 0;
     48c:	10 92 7f 04 	sts	0x047F, r1
     490:	10 92 80 04 	sts	0x0480, r1
     494:	10 92 81 04 	sts	0x0481, r1
     498:	10 92 82 04 	sts	0x0482, r1
	TX_TASK.cpu_reserve.nano_secs = 0;//30* NANOS_PER_MS;
     49c:	10 92 83 04 	sts	0x0483, r1
     4a0:	10 92 84 04 	sts	0x0484, r1
     4a4:	10 92 85 04 	sts	0x0485, r1
     4a8:	10 92 86 04 	sts	0x0486, r1
	TX_TASK.offset.secs = 0;
     4ac:	10 92 87 04 	sts	0x0487, r1
     4b0:	10 92 88 04 	sts	0x0488, r1
     4b4:	10 92 89 04 	sts	0x0489, r1
     4b8:	10 92 8a 04 	sts	0x048A, r1
	TX_TASK.offset.nano_secs = 0;
     4bc:	10 92 8b 04 	sts	0x048B, r1
     4c0:	10 92 8c 04 	sts	0x048C, r1
     4c4:	10 92 8d 04 	sts	0x048D, r1
     4c8:	10 92 8e 04 	sts	0x048E, r1
	nrk_activate_task (&TX_TASK);
     4cc:	8c e6       	ldi	r24, 0x6C	; 108
     4ce:	94 e0       	ldi	r25, 0x04	; 4
     4d0:	0e 94 da 23 	call	0x47b4	; 0x47b4 <nrk_activate_task>



	printf ("Create done\r\n");
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	92 e0       	ldi	r25, 0x02	; 2
     4d8:	0e 94 b6 30 	call	0x616c	; 0x616c <puts>
     4dc:	08 95       	ret

000004de <tx_task>:
#define ACTION_LEFT	'L'
#define ACTION_RIGHT	'R'
#define ACTION_BOMB	'B'

void tx_task ()
{
     4de:	2f 92       	push	r2
     4e0:	3f 92       	push	r3
     4e2:	4f 92       	push	r4
     4e4:	5f 92       	push	r5
     4e6:	6f 92       	push	r6
     4e8:	7f 92       	push	r7
     4ea:	8f 92       	push	r8
     4ec:	9f 92       	push	r9
     4ee:	af 92       	push	r10
     4f0:	bf 92       	push	r11
     4f2:	cf 92       	push	r12
     4f4:	df 92       	push	r13
     4f6:	ef 92       	push	r14
     4f8:	ff 92       	push	r15
     4fa:	0f 93       	push	r16
     4fc:	1f 93       	push	r17
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	cd b7       	in	r28, 0x3d	; 61
     504:	de b7       	in	r29, 0x3e	; 62
     506:	2a 97       	sbiw	r28, 0x0a	; 10
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	de bf       	out	0x3e, r29	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	cd bf       	out	0x3d, r28	; 61
	uint16_t x_min, x_max, y_min, y_max;
	char action;
	nrk_sig_mask_t ret;

	// init bmac on channel 25 
	bmac_init (25);
     512:	89 e1       	ldi	r24, 0x19	; 25
     514:	0e 94 82 06 	call	0xd04	; 0xd04 <bmac_init>

	if(val==NRK_ERROR) nrk_kprintf( PSTR("ERROR setting bmac rate\r\n" ));	

	printf ("tx_task PID=%d\r\n", nrk_get_pid ());
     518:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <nrk_get_pid>
     51c:	99 27       	eor	r25, r25
     51e:	9f 93       	push	r25
     520:	8f 93       	push	r24
     522:	8d e0       	ldi	r24, 0x0D	; 13
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	9f 93       	push	r25
     528:	8f 93       	push	r24
     52a:	0e 94 9f 30 	call	0x613e	; 0x613e <printf>

	// Wait until the tx_task starts up bmac
	// This should be called by all tasks using bmac that
	// do not call bmac_init()...
	while (!bmac_started ())
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	02 c0       	rjmp	.+4      	; 0x53c <tx_task+0x5e>
		nrk_wait_until_next_period ();
     538:	0e 94 9c 23 	call	0x4738	; 0x4738 <nrk_wait_until_next_period>
	printf ("tx_task PID=%d\r\n", nrk_get_pid ());

	// Wait until the tx_task starts up bmac
	// This should be called by all tasks using bmac that
	// do not call bmac_init()...
	while (!bmac_started ())
     53c:	0e 94 94 04 	call	0x928	; 0x928 <bmac_started>
     540:	88 23       	and	r24, r24
     542:	d1 f3       	breq	.-12     	; 0x538 <tx_task+0x5a>
		nrk_wait_until_next_period ();

	// Get and register the tx_done_signal if you want to
	// do non-blocking transmits
	tx_done_signal = bmac_get_tx_done_signal ();
     544:	0e 94 05 06 	call	0xc0a	; 0xc0a <bmac_get_tx_done_signal>
     548:	8d 83       	std	Y+5, r24	; 0x05
	nrk_signal_register (tx_done_signal);
     54a:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <nrk_signal_register>


	nrk_gpio_direction(NRK_BUTTON,NRK_PIN_INPUT); //set button as input
     54e:	80 91 4a 02 	lds	r24, 0x024A
     552:	8a 87       	std	Y+10, r24	; 0x0a
     554:	60 e0       	ldi	r22, 0x00	; 0
     556:	0e 94 dd 16 	call	0x2dba	; 0x2dba <nrk_gpio_direction>
	nrk_gpio_direction(NRK_DEBUG_0,NRK_PIN_OUTPUT);//PA.3
     55a:	60 90 48 02 	lds	r6, 0x0248
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	86 2d       	mov	r24, r6
     562:	0e 94 dd 16 	call	0x2dba	; 0x2dba <nrk_gpio_direction>

	// Open ADC device as read 
	fd=nrk_open(FIREFLY_SENSOR_BASIC,READ);
     566:	65 e0       	ldi	r22, 0x05	; 5
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	0e 94 49 29 	call	0x5292	; 0x5292 <nrk_open>
     56e:	78 2e       	mov	r7, r24
	if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
	
	bmac_auto_ack_disable();
     570:	0e 94 56 07 	call	0xeac	; 0xeac <bmac_auto_ack_disable>
     574:	cc 24       	eor	r12, r12
     576:	dd 24       	eor	r13, r13
	for (cnt = 0; cnt < 20; cnt++) {
		val=nrk_set_status(fd,SENSOR_SELECT,ACC_X);
		val=nrk_read(fd,&x_val,2);
     578:	2e 01       	movw	r4, r28
     57a:	08 94       	sec
     57c:	41 1c       	adc	r4, r1
     57e:	51 1c       	adc	r5, r1
		
		val=nrk_set_status(fd,SENSOR_SELECT,ACC_Y);
		val=nrk_read(fd,&y_val,2);		
     580:	e3 e0       	ldi	r30, 0x03	; 3
     582:	8e 2e       	mov	r8, r30
     584:	91 2c       	mov	r9, r1
     586:	8c 0e       	add	r8, r28
     588:	9d 1e       	adc	r9, r29
			y_base = y_val;
		} else {
			x_base = (x_base + x_val) / 2;
			y_base = (y_base + y_val) / 2;
		}
		printf("calibrate: x=%d, y=%d\r\n", x_base, y_base);
     58a:	7e e1       	ldi	r23, 0x1E	; 30
     58c:	a7 2e       	mov	r10, r23
     58e:	72 e0       	ldi	r23, 0x02	; 2
     590:	b7 2e       	mov	r11, r23
	fd=nrk_open(FIREFLY_SENSOR_BASIC,READ);
	if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
	
	bmac_auto_ack_disable();
	for (cnt = 0; cnt < 20; cnt++) {
		val=nrk_set_status(fd,SENSOR_SELECT,ACC_X);
     592:	42 e0       	ldi	r20, 0x02	; 2
     594:	61 e0       	ldi	r22, 0x01	; 1
     596:	87 2d       	mov	r24, r7
     598:	0e 94 bc 29 	call	0x5378	; 0x5378 <nrk_set_status>
		val=nrk_read(fd,&x_val,2);
     59c:	59 86       	std	Y+9, r5	; 0x09
     59e:	48 86       	std	Y+8, r4	; 0x08
     5a0:	42 e0       	ldi	r20, 0x02	; 2
     5a2:	b2 01       	movw	r22, r4
     5a4:	87 2d       	mov	r24, r7
     5a6:	0e 94 de 29 	call	0x53bc	; 0x53bc <nrk_read>
		
		val=nrk_set_status(fd,SENSOR_SELECT,ACC_Y);
     5aa:	45 e0       	ldi	r20, 0x05	; 5
     5ac:	61 e0       	ldi	r22, 0x01	; 1
     5ae:	87 2d       	mov	r24, r7
     5b0:	0e 94 bc 29 	call	0x5378	; 0x5378 <nrk_set_status>
		val=nrk_read(fd,&y_val,2);		
     5b4:	9f 82       	std	Y+7, r9	; 0x07
     5b6:	8e 82       	std	Y+6, r8	; 0x06
     5b8:	42 e0       	ldi	r20, 0x02	; 2
     5ba:	b4 01       	movw	r22, r8
     5bc:	87 2d       	mov	r24, r7
     5be:	0e 94 de 29 	call	0x53bc	; 0x53bc <nrk_read>
     5c2:	89 81       	ldd	r24, Y+1	; 0x01
     5c4:	9a 81       	ldd	r25, Y+2	; 0x02
     5c6:	2b 81       	ldd	r18, Y+3	; 0x03
     5c8:	3c 81       	ldd	r19, Y+4	; 0x04

		if (cnt == 0) {
     5ca:	cc 20       	and	r12, r12
     5cc:	19 f4       	brne	.+6      	; 0x5d4 <tx_task+0xf6>
			x_base = x_val;
     5ce:	8c 01       	movw	r16, r24
			y_base = y_val;
     5d0:	79 01       	movw	r14, r18
     5d2:	08 c0       	rjmp	.+16     	; 0x5e4 <tx_task+0x106>
		} else {
			x_base = (x_base + x_val) / 2;
     5d4:	08 0f       	add	r16, r24
     5d6:	19 1f       	adc	r17, r25
     5d8:	16 95       	lsr	r17
     5da:	07 95       	ror	r16
			y_base = (y_base + y_val) / 2;
     5dc:	e2 0e       	add	r14, r18
     5de:	f3 1e       	adc	r15, r19
     5e0:	f6 94       	lsr	r15
     5e2:	e7 94       	ror	r14
		}
		printf("calibrate: x=%d, y=%d\r\n", x_base, y_base);
     5e4:	ff 92       	push	r15
     5e6:	ef 92       	push	r14
     5e8:	1f 93       	push	r17
     5ea:	0f 93       	push	r16
     5ec:	bf 92       	push	r11
     5ee:	af 92       	push	r10
     5f0:	0e 94 9f 30 	call	0x613e	; 0x613e <printf>
     5f4:	08 94       	sec
     5f6:	c1 1c       	adc	r12, r1
     5f8:	d1 1c       	adc	r13, r1
	// Open ADC device as read 
	fd=nrk_open(FIREFLY_SENSOR_BASIC,READ);
	if(fd==NRK_ERROR) nrk_kprintf(PSTR("Failed to open sensor driver\r\n"));
	
	bmac_auto_ack_disable();
	for (cnt = 0; cnt < 20; cnt++) {
     5fa:	8d b7       	in	r24, 0x3d	; 61
     5fc:	9e b7       	in	r25, 0x3e	; 62
     5fe:	06 96       	adiw	r24, 0x06	; 6
     600:	0f b6       	in	r0, 0x3f	; 63
     602:	f8 94       	cli
     604:	9e bf       	out	0x3e, r25	; 62
     606:	0f be       	out	0x3f, r0	; 63
     608:	8d bf       	out	0x3d, r24	; 61
     60a:	94 e1       	ldi	r25, 0x14	; 20
     60c:	c9 16       	cp	r12, r25
     60e:	d1 04       	cpc	r13, r1
     610:	09 f0       	breq	.+2      	; 0x614 <tx_task+0x136>
     612:	bf cf       	rjmp	.-130    	; 0x592 <tx_task+0xb4>
			x_base = (x_base + x_val) / 2;
			y_base = (y_base + y_val) / 2;
		}
		printf("calibrate: x=%d, y=%d\r\n", x_base, y_base);
	}
	x_min = x_base - THRESHOLD;
     614:	4e ec       	ldi	r20, 0xCE	; 206
     616:	84 2e       	mov	r8, r20
     618:	4f ef       	ldi	r20, 0xFF	; 255
     61a:	94 2e       	mov	r9, r20
     61c:	80 0e       	add	r8, r16
     61e:	91 1e       	adc	r9, r17
	x_max = x_base + THRESHOLD;
     620:	32 e3       	ldi	r19, 0x32	; 50
     622:	a3 2e       	mov	r10, r19
     624:	b1 2c       	mov	r11, r1
     626:	a0 0e       	add	r10, r16
     628:	b1 1e       	adc	r11, r17
	y_min = y_base - THRESHOLD;
     62a:	2e ec       	ldi	r18, 0xCE	; 206
     62c:	c2 2e       	mov	r12, r18
     62e:	2f ef       	ldi	r18, 0xFF	; 255
     630:	d2 2e       	mov	r13, r18
     632:	ce 0c       	add	r12, r14
     634:	df 1c       	adc	r13, r15
	y_max = y_base + THRESHOLD;
     636:	87 01       	movw	r16, r14
     638:	0e 5c       	subi	r16, 0xCE	; 206
     63a:	1f 4f       	sbci	r17, 0xFF	; 255
		
	nrk_led_set (BLUE_LED);	
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 3f 18 	call	0x307e	; 0x307e <nrk_led_set>
				action = ACTION_LEFT;
			} else {
				action = ACTION_NONE;
			}
		}
		sprintf(tx_buf, "%c %c\r\n", PLAYER_NUM, action);
     644:	98 ef       	ldi	r25, 0xF8	; 248
     646:	e9 2e       	mov	r14, r25
     648:	93 e0       	ldi	r25, 0x03	; 3
     64a:	f9 2e       	mov	r15, r25
		// non-blocking manner  
		val = bmac_tx_pkt_nonblocking(tx_buf, strlen (tx_buf));
		//nrk_kprintf (PSTR ("Tx packet enqueued\r\n"));

		// This functions waits on the tx_done_signal
		ret = nrk_event_wait (SIG(tx_done_signal));
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	28 2e       	mov	r2, r24
     650:	31 2c       	mov	r3, r1
     652:	41 2c       	mov	r4, r1
     654:	51 2c       	mov	r5, r1
     656:	0d 80       	ldd	r0, Y+5	; 0x05
     658:	04 c0       	rjmp	.+8      	; 0x662 <tx_task+0x184>
     65a:	22 0c       	add	r2, r2
     65c:	33 1c       	adc	r3, r3
     65e:	44 1c       	adc	r4, r4
     660:	55 1c       	adc	r5, r5
     662:	0a 94       	dec	r0
     664:	d2 f7       	brpl	.-12     	; 0x65a <tx_task+0x17c>
		
		// Read new values before waiting
		//val=nrk_set_status(fd,SENSOR_SELECT,LIGHT);
		//val=nrk_read(fd,&light,2);
		
		val=nrk_set_status(fd,SENSOR_SELECT,ACC_X);
     666:	42 e0       	ldi	r20, 0x02	; 2
     668:	61 e0       	ldi	r22, 0x01	; 1
     66a:	87 2d       	mov	r24, r7
     66c:	0e 94 bc 29 	call	0x5378	; 0x5378 <nrk_set_status>
		val=nrk_read(fd,&x_val,2);
     670:	42 e0       	ldi	r20, 0x02	; 2
     672:	68 85       	ldd	r22, Y+8	; 0x08
     674:	79 85       	ldd	r23, Y+9	; 0x09
     676:	87 2d       	mov	r24, r7
     678:	0e 94 de 29 	call	0x53bc	; 0x53bc <nrk_read>
		
		val=nrk_set_status(fd,SENSOR_SELECT,ACC_Y);
     67c:	45 e0       	ldi	r20, 0x05	; 5
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	87 2d       	mov	r24, r7
     682:	0e 94 bc 29 	call	0x5378	; 0x5378 <nrk_set_status>
		val=nrk_read(fd,&y_val,2);
     686:	42 e0       	ldi	r20, 0x02	; 2
     688:	6e 81       	ldd	r22, Y+6	; 0x06
     68a:	7f 81       	ldd	r23, Y+7	; 0x07
     68c:	87 2d       	mov	r24, r7
     68e:	0e 94 de 29 	call	0x53bc	; 0x53bc <nrk_read>

		//read button value
		val=nrk_gpio_get(NRK_BUTTON);
     692:	8a 85       	ldd	r24, Y+10	; 0x0a
     694:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <nrk_gpio_get>
		if(val==0){ //button pressed
     698:	88 23       	and	r24, r24
     69a:	49 f4       	brne	.+18     	; 0x6ae <tx_task+0x1d0>
			nrk_gpio_set(NRK_DEBUG_0);
     69c:	86 2d       	mov	r24, r6
     69e:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_gpio_set>
			nrk_led_set(RED_LED);
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	0e 94 3f 18 	call	0x307e	; 0x307e <nrk_led_set>
     6aa:	82 e4       	ldi	r24, 0x42	; 66
     6ac:	4b c0       	rjmp	.+150    	; 0x744 <tx_task+0x266>
			light = L_TRIGGER;
		}
		else {
			nrk_gpio_clr(NRK_DEBUG_0);
     6ae:	86 2d       	mov	r24, r6
     6b0:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <nrk_gpio_clr>
			nrk_led_clr(RED_LED);
     6b4:	83 e0       	ldi	r24, 0x03	; 3
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	0e 94 22 18 	call	0x3044	; 0x3044 <nrk_led_clr>
		action = PLAYER_NUM;
		if (light >= L_TRIGGER) {
			// Bomb 0bx101
			action = ACTION_BOMB;
		} else {
			if (y_val < y_max && y_val > y_min && x_val < x_max && x_val > x_min) {
     6bc:	8b 81       	ldd	r24, Y+3	; 0x03
     6be:	9c 81       	ldd	r25, Y+4	; 0x04
     6c0:	80 17       	cp	r24, r16
     6c2:	91 07       	cpc	r25, r17
     6c4:	60 f4       	brcc	.+24     	; 0x6de <tx_task+0x200>
     6c6:	c8 16       	cp	r12, r24
     6c8:	d9 06       	cpc	r13, r25
     6ca:	b0 f4       	brcc	.+44     	; 0x6f8 <tx_task+0x21a>
     6cc:	29 81       	ldd	r18, Y+1	; 0x01
     6ce:	3a 81       	ldd	r19, Y+2	; 0x02
     6d0:	2a 15       	cp	r18, r10
     6d2:	3b 05       	cpc	r19, r11
     6d4:	f0 f4       	brcc	.+60     	; 0x712 <tx_task+0x234>
     6d6:	82 16       	cp	r8, r18
     6d8:	93 06       	cpc	r9, r19
     6da:	d8 f4       	brcc	.+54     	; 0x712 <tx_task+0x234>
     6dc:	32 c0       	rjmp	.+100    	; 0x742 <tx_task+0x264>
				action = ACTION_NONE;
			} else if (y_val > y_max && x_val < x_max && x_val > x_min) {
     6de:	08 17       	cp	r16, r24
     6e0:	19 07       	cpc	r17, r25
     6e2:	50 f4       	brcc	.+20     	; 0x6f8 <tx_task+0x21a>
     6e4:	29 81       	ldd	r18, Y+1	; 0x01
     6e6:	3a 81       	ldd	r19, Y+2	; 0x02
     6e8:	2a 15       	cp	r18, r10
     6ea:	3b 05       	cpc	r19, r11
     6ec:	28 f4       	brcc	.+10     	; 0x6f8 <tx_task+0x21a>
     6ee:	82 16       	cp	r8, r18
     6f0:	93 06       	cpc	r9, r19
     6f2:	10 f4       	brcc	.+4      	; 0x6f8 <tx_task+0x21a>
     6f4:	85 e5       	ldi	r24, 0x55	; 85
     6f6:	26 c0       	rjmp	.+76     	; 0x744 <tx_task+0x266>
				action = ACTION_UP;
			} else if (y_val < y_min && x_val < x_max && x_val > x_min) {
     6f8:	8c 15       	cp	r24, r12
     6fa:	9d 05       	cpc	r25, r13
     6fc:	50 f4       	brcc	.+20     	; 0x712 <tx_task+0x234>
     6fe:	29 81       	ldd	r18, Y+1	; 0x01
     700:	3a 81       	ldd	r19, Y+2	; 0x02
     702:	2a 15       	cp	r18, r10
     704:	3b 05       	cpc	r19, r11
     706:	28 f4       	brcc	.+10     	; 0x712 <tx_task+0x234>
     708:	82 16       	cp	r8, r18
     70a:	93 06       	cpc	r9, r19
     70c:	10 f4       	brcc	.+4      	; 0x712 <tx_task+0x234>
     70e:	84 e4       	ldi	r24, 0x44	; 68
     710:	19 c0       	rjmp	.+50     	; 0x744 <tx_task+0x266>
				action = ACTION_DOWN;
			} else if (x_val > x_max && y_val < y_max && y_val > y_min) {
     712:	29 81       	ldd	r18, Y+1	; 0x01
     714:	3a 81       	ldd	r19, Y+2	; 0x02
     716:	a2 16       	cp	r10, r18
     718:	b3 06       	cpc	r11, r19
     71a:	40 f4       	brcc	.+16     	; 0x72c <tx_task+0x24e>
     71c:	80 17       	cp	r24, r16
     71e:	91 07       	cpc	r25, r17
     720:	28 f4       	brcc	.+10     	; 0x72c <tx_task+0x24e>
     722:	c8 16       	cp	r12, r24
     724:	d9 06       	cpc	r13, r25
     726:	10 f4       	brcc	.+4      	; 0x72c <tx_task+0x24e>
     728:	82 e5       	ldi	r24, 0x52	; 82
     72a:	0c c0       	rjmp	.+24     	; 0x744 <tx_task+0x266>
				action = ACTION_RIGHT;
			} else if (x_val < x_min && y_val < y_max && y_val > y_min) {
     72c:	28 15       	cp	r18, r8
     72e:	39 05       	cpc	r19, r9
     730:	40 f4       	brcc	.+16     	; 0x742 <tx_task+0x264>
     732:	80 17       	cp	r24, r16
     734:	91 07       	cpc	r25, r17
     736:	28 f4       	brcc	.+10     	; 0x742 <tx_task+0x264>
     738:	c8 16       	cp	r12, r24
     73a:	d9 06       	cpc	r13, r25
     73c:	10 f4       	brcc	.+4      	; 0x742 <tx_task+0x264>
     73e:	8c e4       	ldi	r24, 0x4C	; 76
     740:	01 c0       	rjmp	.+2      	; 0x744 <tx_task+0x266>
     742:	8d e2       	ldi	r24, 0x2D	; 45
				action = ACTION_LEFT;
			} else {
				action = ACTION_NONE;
			}
		}
		sprintf(tx_buf, "%c %c\r\n", PLAYER_NUM, action);
     744:	99 27       	eor	r25, r25
     746:	9f 93       	push	r25
     748:	8f 93       	push	r24
     74a:	81 e4       	ldi	r24, 0x41	; 65
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	9f 93       	push	r25
     750:	8f 93       	push	r24
     752:	86 e3       	ldi	r24, 0x36	; 54
     754:	92 e0       	ldi	r25, 0x02	; 2
     756:	9f 93       	push	r25
     758:	8f 93       	push	r24
     75a:	ff 92       	push	r15
     75c:	ef 92       	push	r14
     75e:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <sprintf>
		printf( "tx_buf=%s",tx_buf );
     762:	ff 92       	push	r15
     764:	ef 92       	push	r14
     766:	8e e3       	ldi	r24, 0x3E	; 62
     768:	92 e0       	ldi	r25, 0x02	; 2
     76a:	9f 93       	push	r25
     76c:	8f 93       	push	r24
     76e:	0e 94 9f 30 	call	0x613e	; 0x613e <printf>
		// For this there is no need to register  
		//val=bmac_tx_pkt(tx_buf, strlen(tx_buf));

		// This function shows how to transmit packets in a
		// non-blocking manner  
		val = bmac_tx_pkt_nonblocking(tx_buf, strlen (tx_buf));
     772:	f7 01       	movw	r30, r14
     774:	01 90       	ld	r0, Z+
     776:	00 20       	and	r0, r0
     778:	e9 f7       	brne	.-6      	; 0x774 <tx_task+0x296>
     77a:	31 97       	sbiw	r30, 0x01	; 1
     77c:	e8 5f       	subi	r30, 0xF8	; 248
     77e:	f3 40       	sbci	r31, 0x03	; 3
     780:	6e 2f       	mov	r22, r30
     782:	c7 01       	movw	r24, r14
     784:	0e 94 29 04 	call	0x852	; 0x852 <bmac_tx_pkt_nonblocking>
		//nrk_kprintf (PSTR ("Tx packet enqueued\r\n"));

		// This functions waits on the tx_done_signal
		ret = nrk_event_wait (SIG(tx_done_signal));
     788:	c2 01       	movw	r24, r4
     78a:	b1 01       	movw	r22, r2
     78c:	0e 94 b6 20 	call	0x416c	; 0x416c <nrk_event_wait>
		//if(ret & SIG(tx_done_signal) == 0 ) 
		//	nrk_kprintf (PSTR ("TX done signal error\r\n"));

		// Task gets control again after TX complete
		//nrk_kprintf (PSTR ("Tx task sent data!\r\n"));
		nrk_led_toggle (BLUE_LED);
     790:	81 e0       	ldi	r24, 0x01	; 1
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	0e 94 05 18 	call	0x300a	; 0x300a <nrk_led_toggle>
		//nrk_wait_until_next_period ();
	}
     798:	8d b7       	in	r24, 0x3d	; 61
     79a:	9e b7       	in	r25, 0x3e	; 62
     79c:	0c 96       	adiw	r24, 0x0c	; 12
     79e:	0f b6       	in	r0, 0x3f	; 63
     7a0:	f8 94       	cli
     7a2:	9e bf       	out	0x3e, r25	; 62
     7a4:	0f be       	out	0x3f, r0	; 63
     7a6:	8d bf       	out	0x3d, r24	; 61
     7a8:	5e cf       	rjmp	.-324    	; 0x666 <tx_task+0x188>

000007aa <main>:
void nrk_register_drivers();

uint8_t tx_buf[RF_MAX_PAYLOAD_SIZE];

int main ()
{
     7aa:	cf ef       	ldi	r28, 0xFF	; 255
     7ac:	d1 e2       	ldi	r29, 0x21	; 33
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	cd bf       	out	0x3d, r28	; 61
	uint16_t div;
	nrk_setup_ports ();
     7b2:	0e 94 82 14 	call	0x2904	; 0x2904 <nrk_setup_ports>
	nrk_setup_uart (UART_BAUDRATE_115K2);
     7b6:	87 e0       	ldi	r24, 0x07	; 7
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	0e 94 b7 18 	call	0x316e	; 0x316e <nrk_setup_uart>

	nrk_init ();
     7be:	0e 94 75 1b 	call	0x36ea	; 0x36ea <nrk_init>

	nrk_led_clr (0);
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 22 18 	call	0x3044	; 0x3044 <nrk_led_clr>
	nrk_led_clr (1);
     7ca:	81 e0       	ldi	r24, 0x01	; 1
     7cc:	90 e0       	ldi	r25, 0x00	; 0
     7ce:	0e 94 22 18 	call	0x3044	; 0x3044 <nrk_led_clr>
	nrk_led_clr (2);
     7d2:	82 e0       	ldi	r24, 0x02	; 2
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	0e 94 22 18 	call	0x3044	; 0x3044 <nrk_led_clr>
	nrk_led_clr (3);
     7da:	83 e0       	ldi	r24, 0x03	; 3
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	0e 94 22 18 	call	0x3044	; 0x3044 <nrk_led_clr>

	nrk_time_set (0, 0);
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	60 e0       	ldi	r22, 0x00	; 0
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <nrk_time_set>

	bmac_task_config ();
     7f6:	0e 94 ad 04 	call	0x95a	; 0x95a <bmac_task_config>

	nrk_register_drivers();
     7fa:	0e 94 0a 02 	call	0x414	; 0x414 <nrk_register_drivers>
	nrk_create_taskset ();
     7fe:	0e 94 16 02 	call	0x42c	; 0x42c <nrk_create_taskset>
	nrk_start ();
     802:	0e 94 15 1b 	call	0x362a	; 0x362a <nrk_start>

	return 0;
}
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	0c 94 5b 33 	jmp	0x66b6	; 0x66b6 <_exit>

0000080e <rf_rx_callback>:

/**
 *  This is a callback if you require immediate response to a packet
 */
RF_RX_INFO *rf_rx_callback (RF_RX_INFO * pRRI)
{
     80e:	08 95       	ret

00000810 <bmac_tx_reserve_set>:
  return nrk_reserve_set(tx_reserve, period,pkts,NULL);
else return NRK_ERROR;
#else
return NRK_ERROR;
#endif
}
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	9f ef       	ldi	r25, 0xFF	; 255
     814:	08 95       	ret

00000816 <bmac_tx_reserve_get>:
  return nrk_reserve_get(tx_reserve);
else return 0;
#else
return 0;
#endif
}
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	08 95       	ret

0000081c <bmac_addr_decode_dest_mac>:
return NRK_OK;
}

int8_t  bmac_addr_decode_dest_mac(uint16_t dest) 
{
bmac_rfTxInfo.destAddr=dest;
     81c:	90 93 eb 03 	sts	0x03EB, r25
     820:	80 93 ea 03 	sts	0x03EA, r24
return NRK_OK;
}
     824:	81 e0       	ldi	r24, 0x01	; 1
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	08 95       	ret

0000082a <bmac_set_cca_active>:
return NRK_OK;
}

void bmac_set_cca_active(uint8_t active)
{
cca_active=active;
     82a:	80 93 c4 03 	sts	0x03C4, r24
     82e:	08 95       	ret

00000830 <bmac_rx_pkt_set_buffer>:
else return NRK_OK;
}

int8_t bmac_rx_pkt_set_buffer(uint8_t *buf, uint8_t size)
{
if(buf==NULL) return NRK_ERROR;
     830:	00 97       	sbiw	r24, 0x00	; 0
     832:	19 f4       	brne	.+6      	; 0x83a <bmac_rx_pkt_set_buffer+0xa>
     834:	8f ef       	ldi	r24, 0xFF	; 255
     836:	9f ef       	ldi	r25, 0xFF	; 255
     838:	08 95       	ret
    bmac_rfRxInfo.pPayload = buf;
     83a:	90 93 15 05 	sts	0x0515, r25
     83e:	80 93 14 05 	sts	0x0514, r24
    bmac_rfRxInfo.max_length = size;
     842:	60 93 13 05 	sts	0x0513, r22
    rx_buf_empty=1;
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	80 93 ad 05 	sts	0x05AD, r24
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	90 e0       	ldi	r25, 0x00	; 0
return NRK_OK;
}
     850:	08 95       	ret

00000852 <bmac_tx_pkt_nonblocking>:
    is_enabled=1;
    return NRK_OK;
}

int8_t bmac_tx_pkt_nonblocking(uint8_t *buf, uint8_t len)
{
     852:	9c 01       	movw	r18, r24
  if(tx_data_ready==1) return NRK_ERROR;
     854:	80 91 9f 05 	lds	r24, 0x059F
     858:	81 30       	cpi	r24, 0x01	; 1
     85a:	19 f4       	brne	.+6      	; 0x862 <bmac_tx_pkt_nonblocking+0x10>
     85c:	8f ef       	ldi	r24, 0xFF	; 255
     85e:	9f ef       	ldi	r25, 0xFF	; 255
     860:	08 95       	ret
  tx_data_ready=1;
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	80 93 9f 05 	sts	0x059F, r24
  bmac_rfTxInfo.pPayload=buf;
     868:	30 93 ee 03 	sts	0x03EE, r19
     86c:	20 93 ed 03 	sts	0x03ED, r18
  bmac_rfTxInfo.length=len;
     870:	60 93 ec 03 	sts	0x03EC, r22
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
return NRK_OK;
}
     878:	08 95       	ret

0000087a <bmac_rx_pkt_ready>:
  *rssi=bmac_rfRxInfo.rssi;
  return bmac_rfRxInfo.pPayload;
}

int8_t bmac_rx_pkt_ready(void)
{
     87a:	20 e0       	ldi	r18, 0x00	; 0
     87c:	30 e0       	ldi	r19, 0x00	; 0
     87e:	80 91 ad 05 	lds	r24, 0x05AD
     882:	88 23       	and	r24, r24
     884:	11 f4       	brne	.+4      	; 0x88a <bmac_rx_pkt_ready+0x10>
     886:	21 e0       	ldi	r18, 0x01	; 1
     888:	30 e0       	ldi	r19, 0x00	; 0
return (!rx_buf_empty);
}
     88a:	c9 01       	movw	r24, r18
     88c:	08 95       	ret

0000088e <bmac_rx_pkt_release>:

int8_t bmac_rx_pkt_release(void)
{
    rx_buf_empty=1;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	80 93 ad 05 	sts	0x05AD, r24
return NRK_OK;
}
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	08 95       	ret

0000089a <bmac_disable>:

void bmac_disable()
{
  is_enabled=0;
     89a:	10 92 9e 05 	sts	0x059E, r1
     89e:	08 95       	ret

000008a0 <bmac_set_rx_check_rate>:

}


int8_t bmac_set_rx_check_rate(nrk_time_t period)
{
     8a0:	cf 93       	push	r28
     8a2:	df 93       	push	r29
     8a4:	cd b7       	in	r28, 0x3d	; 61
     8a6:	de b7       	in	r29, 0x3e	; 62
     8a8:	28 97       	sbiw	r28, 0x08	; 8
     8aa:	0f b6       	in	r0, 0x3f	; 63
     8ac:	f8 94       	cli
     8ae:	de bf       	out	0x3e, r29	; 62
     8b0:	0f be       	out	0x3f, r0	; 63
     8b2:	cd bf       	out	0x3d, r28	; 61
     8b4:	29 83       	std	Y+1, r18	; 0x01
     8b6:	3a 83       	std	Y+2, r19	; 0x02
     8b8:	4b 83       	std	Y+3, r20	; 0x03
     8ba:	5c 83       	std	Y+4, r21	; 0x04
     8bc:	6d 83       	std	Y+5, r22	; 0x05
     8be:	7e 83       	std	Y+6, r23	; 0x06
     8c0:	8f 83       	std	Y+7, r24	; 0x07
     8c2:	98 87       	std	Y+8, r25	; 0x08
     8c4:	2d 81       	ldd	r18, Y+5	; 0x05
     8c6:	3e 81       	ldd	r19, Y+6	; 0x06
     8c8:	4f 81       	ldd	r20, Y+7	; 0x07
     8ca:	58 85       	ldd	r21, Y+8	; 0x08
     8cc:	89 81       	ldd	r24, Y+1	; 0x01
     8ce:	9a 81       	ldd	r25, Y+2	; 0x02
     8d0:	ab 81       	ldd	r26, Y+3	; 0x03
     8d2:	bc 81       	ldd	r27, Y+4	; 0x04
if(period.secs==0 && period.nano_secs < BMAC_MIN_CHECK_RATE_MS*NANOS_PER_MS)
     8d4:	00 97       	sbiw	r24, 0x00	; 0
     8d6:	a1 05       	cpc	r26, r1
     8d8:	b1 05       	cpc	r27, r1
     8da:	59 f4       	brne	.+22     	; 0x8f2 <bmac_set_rx_check_rate+0x52>
     8dc:	20 30       	cpi	r18, 0x00	; 0
     8de:	6d e2       	ldi	r22, 0x2D	; 45
     8e0:	36 07       	cpc	r19, r22
     8e2:	61 e3       	ldi	r22, 0x31	; 49
     8e4:	46 07       	cpc	r20, r22
     8e6:	61 e0       	ldi	r22, 0x01	; 1
     8e8:	56 07       	cpc	r21, r22
     8ea:	18 f4       	brcc	.+6      	; 0x8f2 <bmac_set_rx_check_rate+0x52>
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	9f ef       	ldi	r25, 0xFF	; 255
     8f0:	12 c0       	rjmp	.+36     	; 0x916 <bmac_set_rx_check_rate+0x76>
	return NRK_ERROR;
_bmac_check_period.secs=period.secs;
     8f2:	80 93 a1 05 	sts	0x05A1, r24
     8f6:	90 93 a2 05 	sts	0x05A2, r25
     8fa:	a0 93 a3 05 	sts	0x05A3, r26
     8fe:	b0 93 a4 05 	sts	0x05A4, r27
_bmac_check_period.nano_secs=period.nano_secs;
     902:	20 93 a5 05 	sts	0x05A5, r18
     906:	30 93 a6 05 	sts	0x05A6, r19
     90a:	40 93 a7 05 	sts	0x05A7, r20
     90e:	50 93 a8 05 	sts	0x05A8, r21
     912:	81 e0       	ldi	r24, 0x01	; 1
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	28 96       	adiw	r28, 0x08	; 8
     918:	0f b6       	in	r0, 0x3f	; 63
     91a:	f8 94       	cli
     91c:	de bf       	out	0x3e, r29	; 62
     91e:	0f be       	out	0x3f, r0	; 63
     920:	cd bf       	out	0x3d, r28	; 61
     922:	df 91       	pop	r29
     924:	cf 91       	pop	r28
     926:	08 95       	ret

00000928 <bmac_started>:
return NRK_OK;
}

int8_t bmac_started()
{
     928:	80 91 9d 05 	lds	r24, 0x059D
return bmac_running;
}
     92c:	99 27       	eor	r25, r25
     92e:	87 fd       	sbrc	r24, 7
     930:	90 95       	com	r25
     932:	08 95       	ret

00000934 <_b_pow>:

uint8_t _b_pow(uint8_t in)
{
uint8_t i;
uint8_t result;
if(in<=1) return 1;
     934:	82 30       	cpi	r24, 0x02	; 2
     936:	18 f4       	brcc	.+6      	; 0x93e <_b_pow+0xa>
     938:	81 e0       	ldi	r24, 0x01	; 1
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	08 95       	ret
if(in>7) in=6; // cap it at 128 
     93e:	88 30       	cpi	r24, 0x08	; 8
     940:	08 f0       	brcs	.+2      	; 0x944 <_b_pow+0x10>
     942:	86 e0       	ldi	r24, 0x06	; 6
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	20 e0       	ldi	r18, 0x00	; 0
     948:	30 e0       	ldi	r19, 0x00	; 0
result=1;
for(i=0; i<in; i++ )
  result=result*2;
     94a:	99 0f       	add	r25, r25
     94c:	2f 5f       	subi	r18, 0xFF	; 255
     94e:	3f 4f       	sbci	r19, 0xFF	; 255
uint8_t i;
uint8_t result;
if(in<=1) return 1;
if(in>7) in=6; // cap it at 128 
result=1;
for(i=0; i<in; i++ )
     950:	28 17       	cp	r18, r24
     952:	d8 f3       	brcs	.-10     	; 0x94a <_b_pow+0x16>
  result=result*2;
return result;
     954:	89 2f       	mov	r24, r25
     956:	99 27       	eor	r25, r25
}
     958:	08 95       	ret

0000095a <bmac_task_config>:


void bmac_task_config ()
{
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
    nrk_task_set_entry_function( &bmac_task, bmac_nw_task);
     95e:	06 ec       	ldi	r16, 0xC6	; 198
     960:	13 e0       	ldi	r17, 0x03	; 3
     962:	65 e6       	ldi	r22, 0x65	; 101
     964:	77 e0       	ldi	r23, 0x07	; 7
     966:	c8 01       	movw	r24, r16
     968:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <nrk_task_set_entry_function>
    nrk_task_set_stk( &bmac_task, bmac_task_stack, BMAC_STACK_SIZE);
     96c:	40 e8       	ldi	r20, 0x80	; 128
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	6f e8       	ldi	r22, 0x8F	; 143
     972:	74 e0       	ldi	r23, 0x04	; 4
     974:	c8 01       	movw	r24, r16
     976:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <nrk_task_set_stk>
    bmac_task.prio = BMAC_TASK_PRIORITY;
     97a:	84 e1       	ldi	r24, 0x14	; 20
     97c:	80 93 ce 03 	sts	0x03CE, r24
    bmac_task.FirstActivation = TRUE;
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	80 93 cd 03 	sts	0x03CD, r24
    bmac_task.Type = BASIC_TASK;
     986:	80 93 cf 03 	sts	0x03CF, r24
    bmac_task.SchType = PREEMPTIVE;
     98a:	80 93 d0 03 	sts	0x03D0, r24
    bmac_task.period.secs = 0;
     98e:	10 92 d1 03 	sts	0x03D1, r1
     992:	10 92 d2 03 	sts	0x03D2, r1
     996:	10 92 d3 03 	sts	0x03D3, r1
     99a:	10 92 d4 03 	sts	0x03D4, r1
    bmac_task.period.nano_secs = BMAC_MIN_CHECK_RATE_MS * NANOS_PER_MS;
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	9d e2       	ldi	r25, 0x2D	; 45
     9a2:	a1 e3       	ldi	r26, 0x31	; 49
     9a4:	b1 e0       	ldi	r27, 0x01	; 1
     9a6:	80 93 d5 03 	sts	0x03D5, r24
     9aa:	90 93 d6 03 	sts	0x03D6, r25
     9ae:	a0 93 d7 03 	sts	0x03D7, r26
     9b2:	b0 93 d8 03 	sts	0x03D8, r27
    bmac_task.cpu_reserve.secs = 10;      // bmac reserve , 0 to disable
     9b6:	8a e0       	ldi	r24, 0x0A	; 10
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	a0 e0       	ldi	r26, 0x00	; 0
     9bc:	b0 e0       	ldi	r27, 0x00	; 0
     9be:	80 93 d9 03 	sts	0x03D9, r24
     9c2:	90 93 da 03 	sts	0x03DA, r25
     9c6:	a0 93 db 03 	sts	0x03DB, r26
     9ca:	b0 93 dc 03 	sts	0x03DC, r27
    bmac_task.cpu_reserve.nano_secs = 0;
     9ce:	10 92 dd 03 	sts	0x03DD, r1
     9d2:	10 92 de 03 	sts	0x03DE, r1
     9d6:	10 92 df 03 	sts	0x03DF, r1
     9da:	10 92 e0 03 	sts	0x03E0, r1
    bmac_task.offset.secs = 0;
     9de:	10 92 e1 03 	sts	0x03E1, r1
     9e2:	10 92 e2 03 	sts	0x03E2, r1
     9e6:	10 92 e3 03 	sts	0x03E3, r1
     9ea:	10 92 e4 03 	sts	0x03E4, r1
    bmac_task.offset.nano_secs = 0;
     9ee:	10 92 e5 03 	sts	0x03E5, r1
     9f2:	10 92 e6 03 	sts	0x03E6, r1
     9f6:	10 92 e7 03 	sts	0x03E7, r1
     9fa:	10 92 e8 03 	sts	0x03E8, r1
    #ifdef DEBUG
    printf( "bmac activate\r\n" );
    #endif 
    nrk_activate_task (&bmac_task);
     9fe:	c8 01       	movw	r24, r16
     a00:	0e 94 da 23 	call	0x47b4	; 0x47b4 <nrk_activate_task>
     a04:	1f 91       	pop	r17
     a06:	0f 91       	pop	r16
     a08:	08 95       	ret

00000a0a <bmac_enable>:
  is_enabled=0;
}

void bmac_enable()
{
  is_enabled=1;
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	80 93 9e 05 	sts	0x059E, r24
  nrk_event_signal (bmac_enable_signal);
     a10:	80 91 e9 03 	lds	r24, 0x03E9
     a14:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <nrk_event_signal>
     a18:	08 95       	ret

00000a1a <_bmac_channel_check>:
{
return bmac_running;
}

int8_t _bmac_channel_check()
{
     a1a:	0f 93       	push	r16
     a1c:	1f 93       	push	r17
int8_t val;
rf_polling_rx_on();
     a1e:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <rf_polling_rx_on>
nrk_spin_wait_us(250);
     a22:	8a ef       	ldi	r24, 0xFA	; 250
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_spin_wait_us>
val=CCA_IS_1;
     a2a:	09 b1       	in	r16, 0x09	; 9
rf_rx_off(); 	
     a2c:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <rf_rx_off>
     a30:	11 27       	eor	r17, r17
     a32:	84 e0       	ldi	r24, 0x04	; 4
     a34:	16 95       	lsr	r17
     a36:	07 95       	ror	r16
     a38:	8a 95       	dec	r24
     a3a:	e1 f7       	brne	.-8      	; 0xa34 <_bmac_channel_check+0x1a>
return val;

}
     a3c:	c8 01       	movw	r24, r16
     a3e:	81 70       	andi	r24, 0x01	; 1
     a40:	90 70       	andi	r25, 0x00	; 0
     a42:	1f 91       	pop	r17
     a44:	0f 91       	pop	r16
     a46:	08 95       	ret

00000a48 <_bmac_tx>:
return 0;
}


int8_t _bmac_tx()
{
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
uint16_t b;

#ifdef DEBUG
nrk_kprintf( PSTR("_bmac_tx()\r\n"));
#endif
if(cca_active)
     a50:	80 91 c4 03 	lds	r24, 0x03C4
     a54:	88 23       	and	r24, r24
     a56:	09 f4       	brne	.+2      	; 0xa5a <_bmac_tx+0x12>
     a58:	63 c0       	rjmp	.+198    	; 0xb20 <_bmac_tx+0xd8>
{

// Add random time here to stop nodes from synchronizing with eachother
b=_nrk_time_to_ticks(_bmac_check_period);
     a5a:	20 91 a1 05 	lds	r18, 0x05A1
     a5e:	30 91 a2 05 	lds	r19, 0x05A2
     a62:	40 91 a3 05 	lds	r20, 0x05A3
     a66:	50 91 a4 05 	lds	r21, 0x05A4
     a6a:	60 91 a5 05 	lds	r22, 0x05A5
     a6e:	70 91 a6 05 	lds	r23, 0x05A6
     a72:	80 91 a7 05 	lds	r24, 0x05A7
     a76:	90 91 a8 05 	lds	r25, 0x05A8
     a7a:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <_nrk_time_to_ticks>
     a7e:	8c 01       	movw	r16, r24
b=b/((rand()%10)+1);
     a80:	0e 94 09 30 	call	0x6012	; 0x6012 <rand>
//printf( "waiting %d\r\n",b );
nrk_wait_until_ticks(b);
     a84:	6a e0       	ldi	r22, 0x0A	; 10
     a86:	70 e0       	ldi	r23, 0x00	; 0
     a88:	0e 94 c0 32 	call	0x6580	; 0x6580 <__divmodhi4>
     a8c:	bc 01       	movw	r22, r24
     a8e:	6f 5f       	subi	r22, 0xFF	; 255
     a90:	7f 4f       	sbci	r23, 0xFF	; 255
     a92:	c8 01       	movw	r24, r16
     a94:	0e 94 ac 32 	call	0x6558	; 0x6558 <__udivmodhi4>
     a98:	cb 01       	movw	r24, r22
     a9a:	0e 94 07 23 	call	0x460e	; 0x460e <nrk_wait_until_ticks>
     a9e:	ff 24       	eor	r15, r15
     aa0:	f3 94       	inc	r15
//nrk_wait_ticks(b);

	backoff_count=1;
	do{
	v=_bmac_channel_check();
     aa2:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_bmac_channel_check>
     aa6:	e8 2e       	mov	r14, r24
	if(v==1) break;
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	e8 16       	cp	r14, r24
     aac:	c9 f1       	breq	.+114    	; 0xb20 <_bmac_tx+0xd8>
	// Channel is busy
	backoff=rand()%(_b_pow(backoff_count));
     aae:	0e 94 09 30 	call	0x6012	; 0x6012 <rand>
     ab2:	8c 01       	movw	r16, r24
     ab4:	8f 2d       	mov	r24, r15
     ab6:	0e 94 9a 04 	call	0x934	; 0x934 <_b_pow>
			#ifdef DEBUG
			printf( "backoff %d\r\n",backoff );
			#endif
//	printf( "backoff %d\r\n",backoff );
	nrk_wait_until_next_n_periods(backoff);
     aba:	68 2f       	mov	r22, r24
     abc:	77 27       	eor	r23, r23
     abe:	c8 01       	movw	r24, r16
     ac0:	0e 94 c0 32 	call	0x6580	; 0x6580 <__divmodhi4>
     ac4:	99 27       	eor	r25, r25
     ac6:	0e 94 69 23 	call	0x46d2	; 0x46d2 <nrk_wait_until_next_n_periods>
	backoff_count++;
	if(backoff_count>6) backoff_count=6; // cap it at 64	
	b=_nrk_time_to_ticks(_bmac_check_period);
     aca:	20 91 a1 05 	lds	r18, 0x05A1
     ace:	30 91 a2 05 	lds	r19, 0x05A2
     ad2:	40 91 a3 05 	lds	r20, 0x05A3
     ad6:	50 91 a4 05 	lds	r21, 0x05A4
     ada:	60 91 a5 05 	lds	r22, 0x05A5
     ade:	70 91 a6 05 	lds	r23, 0x05A6
     ae2:	80 91 a7 05 	lds	r24, 0x05A7
     ae6:	90 91 a8 05 	lds	r25, 0x05A8
     aea:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <_nrk_time_to_ticks>
     aee:	8c 01       	movw	r16, r24
	b=b/((rand()%10)+1);
     af0:	0e 94 09 30 	call	0x6012	; 0x6012 <rand>
//	printf( "waiting %d\r\n",b );
	nrk_wait_until_ticks(b);
     af4:	6a e0       	ldi	r22, 0x0A	; 10
     af6:	70 e0       	ldi	r23, 0x00	; 0
     af8:	0e 94 c0 32 	call	0x6580	; 0x6580 <__divmodhi4>
     afc:	bc 01       	movw	r22, r24
     afe:	6f 5f       	subi	r22, 0xFF	; 255
     b00:	7f 4f       	sbci	r23, 0xFF	; 255
     b02:	c8 01       	movw	r24, r16
     b04:	0e 94 ac 32 	call	0x6558	; 0x6558 <__udivmodhi4>
     b08:	cb 01       	movw	r24, r22
     b0a:	0e 94 07 23 	call	0x460e	; 0x460e <nrk_wait_until_ticks>
//	nrk_wait_ticks(b);

	} while(v==0);
     b0e:	ee 20       	and	r14, r14
     b10:	39 f4       	brne	.+14     	; 0xb20 <_bmac_tx+0xd8>
			#ifdef DEBUG
			printf( "backoff %d\r\n",backoff );
			#endif
//	printf( "backoff %d\r\n",backoff );
	nrk_wait_until_next_n_periods(backoff);
	backoff_count++;
     b12:	f3 94       	inc	r15
     b14:	86 e0       	ldi	r24, 0x06	; 6
     b16:	8f 15       	cp	r24, r15
     b18:	20 f6       	brcc	.-120    	; 0xaa2 <_bmac_tx+0x5a>
     b1a:	96 e0       	ldi	r25, 0x06	; 6
     b1c:	f9 2e       	mov	r15, r25
     b1e:	c1 cf       	rjmp	.-126    	; 0xaa2 <_bmac_tx+0x5a>
//	nrk_wait_ticks(b);

	} while(v==0);
}

	rf_test_mode();
     b20:	0e 94 4d 0b 	call	0x169a	; 0x169a <rf_test_mode>
	rf_carrier_on(); 
     b24:	0e 94 04 0b 	call	0x1608	; 0x1608 <rf_carrier_on>
	nrk_wait(_bmac_check_period);
     b28:	20 91 a1 05 	lds	r18, 0x05A1
     b2c:	30 91 a2 05 	lds	r19, 0x05A2
     b30:	40 91 a3 05 	lds	r20, 0x05A3
     b34:	50 91 a4 05 	lds	r21, 0x05A4
     b38:	60 91 a5 05 	lds	r22, 0x05A5
     b3c:	70 91 a6 05 	lds	r23, 0x05A6
     b40:	80 91 a7 05 	lds	r24, 0x05A7
     b44:	90 91 a8 05 	lds	r25, 0x05A8
     b48:	0e 94 ed 21 	call	0x43da	; 0x43da <nrk_wait>
	//nrk_wait_until_next_period();
	rf_carrier_off(); 
     b4c:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <rf_carrier_off>
	rf_data_mode();
     b50:	0e 94 18 0b 	call	0x1630	; 0x1630 <rf_data_mode>
	// send packet
	rf_rx_off();
     b54:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <rf_rx_off>
	pkt_got_ack=rf_tx_packet (&bmac_rfTxInfo);
     b58:	8a ee       	ldi	r24, 0xEA	; 234
     b5a:	93 e0       	ldi	r25, 0x03	; 3
     b5c:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <rf_tx_packet>
     b60:	80 93 a9 05 	sts	0x05A9, r24
	rf_rx_off(); 	
     b64:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <rf_rx_off>
tx_data_ready=0;
     b68:	10 92 9f 05 	sts	0x059F, r1
nrk_event_signal (bmac_tx_pkt_done_signal);
     b6c:	80 91 99 05 	lds	r24, 0x0599
     b70:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <nrk_event_signal>
return NRK_OK;
}
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	08 95       	ret

00000b82 <_bmac_rx>:
return val;

}

int8_t _bmac_rx()
{
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
int8_t n;
uint8_t cnt;
	
	rf_set_rx (&bmac_rfRxInfo, g_chan);
     b86:	60 91 ab 05 	lds	r22, 0x05AB
     b8a:	8f e0       	ldi	r24, 0x0F	; 15
     b8c:	95 e0       	ldi	r25, 0x05	; 5
     b8e:	0e 94 f2 12 	call	0x25e4	; 0x25e4 <rf_set_rx>
        rf_polling_rx_on ();
     b92:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <rf_polling_rx_on>
     b96:	10 e0       	ldi	r17, 0x00	; 0
     b98:	15 c0       	rjmp	.+42     	; 0xbc4 <_bmac_rx+0x42>
	cnt=0;
	while ((n = rf_rx_check_fifop()) == 0)
	{
	cnt++;
     b9a:	1f 5f       	subi	r17, 0xFF	; 255
	nrk_wait(_bmac_check_period);
     b9c:	20 91 a1 05 	lds	r18, 0x05A1
     ba0:	30 91 a2 05 	lds	r19, 0x05A2
     ba4:	40 91 a3 05 	lds	r20, 0x05A3
     ba8:	50 91 a4 05 	lds	r21, 0x05A4
     bac:	60 91 a5 05 	lds	r22, 0x05A5
     bb0:	70 91 a6 05 	lds	r23, 0x05A6
     bb4:	80 91 a7 05 	lds	r24, 0x05A7
     bb8:	90 91 a8 05 	lds	r25, 0x05A8
     bbc:	0e 94 ed 21 	call	0x43da	; 0x43da <nrk_wait>
	//nrk_wait_until_next_period();
	if(cnt>3) { 
     bc0:	14 30       	cpi	r17, 0x04	; 4
     bc2:	61 f0       	breq	.+24     	; 0xbdc <_bmac_rx+0x5a>
uint8_t cnt;
	
	rf_set_rx (&bmac_rfRxInfo, g_chan);
        rf_polling_rx_on ();
	cnt=0;
	while ((n = rf_rx_check_fifop()) == 0)
     bc4:	0e 94 bf 0a 	call	0x157e	; 0x157e <rf_rx_check_fifop>
     bc8:	88 23       	and	r24, r24
     bca:	39 f3       	breq	.-50     	; 0xb9a <_bmac_rx+0x18>
     bcc:	0a c0       	rjmp	.+20     	; 0xbe2 <_bmac_rx+0x60>
        if (n != 0) {
                n = 0;
                // Packet on its way
                cnt=0;
                while ((n = rf_polling_rx_packet ()) == 0) {
                cnt++;
     bce:	1f 5f       	subi	r17, 0xFF	; 255
                nrk_spin_wait_us(100);
     bd0:	84 e6       	ldi	r24, 0x64	; 100
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_spin_wait_us>
                if (cnt > 50) { 
     bd8:	13 33       	cpi	r17, 0x33	; 51
     bda:	21 f4       	brne	.+8      	; 0xbe4 <_bmac_rx+0x62>
			#ifdef DEBUG
			printf( "rx timeout 2\r\n" ); 
			#endif
			rf_rx_off(); 
     bdc:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <rf_rx_off>
     be0:	0a c0       	rjmp	.+20     	; 0xbf6 <_bmac_rx+0x74>
			return 0;
     be2:	10 e0       	ldi	r17, 0x00	; 0
	}
        if (n != 0) {
                n = 0;
                // Packet on its way
                cnt=0;
                while ((n = rf_polling_rx_packet ()) == 0) {
     be4:	0e 94 ad 0b 	call	0x175a	; 0x175a <rf_polling_rx_packet>
     be8:	08 2f       	mov	r16, r24
     bea:	88 23       	and	r24, r24
     bec:	81 f3       	breq	.-32     	; 0xbce <_bmac_rx+0x4c>
			rf_rx_off(); 
			return 0;
			}        
                }
        }
        rf_rx_off();
     bee:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <rf_rx_off>
        if (n == 1) {
     bf2:	01 30       	cpi	r16, 0x01	; 1
     bf4:	19 f0       	breq	.+6      	; 0xbfc <_bmac_rx+0x7a>
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	04 c0       	rjmp	.+8      	; 0xc04 <_bmac_rx+0x82>
                // CRC and checksum passed
    		rx_buf_empty=0;
     bfc:	10 92 ad 05 	sts	0x05AD, r1
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	1f 91       	pop	r17
     c06:	0f 91       	pop	r16
     c08:	08 95       	ret

00000c0a <bmac_get_tx_done_signal>:
return(bmac_rx_pkt_signal);
}

nrk_sig_t bmac_get_tx_done_signal()
{
   nrk_signal_register(bmac_tx_pkt_done_signal); 
     c0a:	80 91 99 05 	lds	r24, 0x0599
     c0e:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <nrk_signal_register>
     c12:	80 91 99 05 	lds	r24, 0x0599
return(bmac_tx_pkt_done_signal);
}
     c16:	99 27       	eor	r25, r25
     c18:	87 fd       	sbrc	r24, 7
     c1a:	90 95       	com	r25
     c1c:	08 95       	ret

00000c1e <bmac_get_rx_pkt_signal>:
return NRK_OK;
}

nrk_sig_t bmac_get_rx_pkt_signal()
{
   nrk_signal_register(bmac_rx_pkt_signal); 
     c1e:	80 91 f5 03 	lds	r24, 0x03F5
     c22:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <nrk_signal_register>
     c26:	80 91 f5 03 	lds	r24, 0x03F5
return(bmac_rx_pkt_signal);
}
     c2a:	99 27       	eor	r25, r25
     c2c:	87 fd       	sbrc	r24, 7
     c2e:	90 95       	com	r25
     c30:	08 95       	ret

00000c32 <bmac_tx_pkt>:
return(bmac_tx_pkt_done_signal);
}


int8_t bmac_tx_pkt(uint8_t *buf, uint8_t len)
{
     c32:	1f 93       	push	r17
     c34:	cf 93       	push	r28
     c36:	df 93       	push	r29
     c38:	ec 01       	movw	r28, r24
     c3a:	16 2f       	mov	r17, r22
uint32_t mask;
if(tx_data_ready==1) return NRK_ERROR;
     c3c:	80 91 9f 05 	lds	r24, 0x059F
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	19 f1       	breq	.+70     	; 0xc8a <bmac_tx_pkt+0x58>
if(tx_reserve!=-1)
	{
	if( nrk_reserve_consume(tx_reserve)==NRK_ERROR ) return NRK_ERROR;
	}
#endif
nrk_signal_register(bmac_tx_pkt_done_signal); 
     c44:	80 91 99 05 	lds	r24, 0x0599
     c48:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <nrk_signal_register>
tx_data_ready=1;
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	80 93 9f 05 	sts	0x059F, r24
bmac_rfTxInfo.pPayload=buf;
     c52:	d0 93 ee 03 	sts	0x03EE, r29
     c56:	c0 93 ed 03 	sts	0x03ED, r28
bmac_rfTxInfo.length=len;
     c5a:	10 93 ec 03 	sts	0x03EC, r17
#ifdef DEBUG
nrk_kprintf( PSTR("Waiting for tx done signal\r\n"));
#endif
mask=nrk_event_wait (SIG(bmac_tx_pkt_done_signal));
     c5e:	61 e0       	ldi	r22, 0x01	; 1
     c60:	70 e0       	ldi	r23, 0x00	; 0
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	00 90 99 05 	lds	r0, 0x0599
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <bmac_tx_pkt+0x42>
     c6c:	66 0f       	add	r22, r22
     c6e:	77 1f       	adc	r23, r23
     c70:	88 1f       	adc	r24, r24
     c72:	99 1f       	adc	r25, r25
     c74:	0a 94       	dec	r0
     c76:	d2 f7       	brpl	.-12     	; 0xc6c <bmac_tx_pkt+0x3a>
     c78:	0e 94 b6 20 	call	0x416c	; 0x416c <nrk_event_wait>
if(pkt_got_ack) return NRK_OK;
     c7c:	80 91 a9 05 	lds	r24, 0x05A9
     c80:	88 23       	and	r24, r24
     c82:	19 f0       	breq	.+6      	; 0xc8a <bmac_tx_pkt+0x58>
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	02 c0       	rjmp	.+4      	; 0xc8e <bmac_tx_pkt+0x5c>
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
     c8c:	9f ef       	ldi	r25, 0xFF	; 255
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	08 95       	ret

00000c96 <bmac_wait_until_rx_pkt>:

int8_t bmac_wait_until_rx_pkt()
{
nrk_sig_mask_t event;

    nrk_signal_register(bmac_rx_pkt_signal); 
     c96:	80 91 f5 03 	lds	r24, 0x03F5
     c9a:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <nrk_signal_register>
    event=nrk_event_wait (SIG(bmac_rx_pkt_signal));
     c9e:	61 e0       	ldi	r22, 0x01	; 1
     ca0:	70 e0       	ldi	r23, 0x00	; 0
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	00 90 f5 03 	lds	r0, 0x03F5
     caa:	04 c0       	rjmp	.+8      	; 0xcb4 <bmac_wait_until_rx_pkt+0x1e>
     cac:	66 0f       	add	r22, r22
     cae:	77 1f       	adc	r23, r23
     cb0:	88 1f       	adc	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	0a 94       	dec	r0
     cb6:	d2 f7       	brpl	.-12     	; 0xcac <bmac_wait_until_rx_pkt+0x16>
     cb8:	0e 94 b6 20 	call	0x416c	; 0x416c <nrk_event_wait>

// Check if it was a time out instead of packet RX signal
if((event & SIG(bmac_rx_pkt_signal)) == 0 ) return NRK_ERROR;
     cbc:	00 90 f5 03 	lds	r0, 0x03F5
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <bmac_wait_until_rx_pkt+0x34>
     cc2:	96 95       	lsr	r25
     cc4:	87 95       	ror	r24
     cc6:	77 95       	ror	r23
     cc8:	67 95       	ror	r22
     cca:	0a 94       	dec	r0
     ccc:	d2 f7       	brpl	.-12     	; 0xcc2 <bmac_wait_until_rx_pkt+0x2c>
     cce:	60 fd       	sbrc	r22, 0
     cd0:	03 c0       	rjmp	.+6      	; 0xcd8 <bmac_wait_until_rx_pkt+0x42>
     cd2:	8f ef       	ldi	r24, 0xFF	; 255
     cd4:	9f ef       	ldi	r25, 0xFF	; 255
     cd6:	08 95       	ret
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	90 e0       	ldi	r25, 0x00	; 0
else return NRK_OK;
}
     cdc:	08 95       	ret

00000cde <bmac_set_channel>:
  rf_set_cca_thresh(thresh); 
return NRK_OK;
}

int8_t bmac_set_channel(uint8_t chan)
{
     cde:	68 2f       	mov	r22, r24
if(chan>26) return NRK_ERROR;
     ce0:	8b 31       	cpi	r24, 0x1B	; 27
     ce2:	18 f0       	brcs	.+6      	; 0xcea <bmac_set_channel+0xc>
     ce4:	8f ef       	ldi	r24, 0xFF	; 255
     ce6:	9f ef       	ldi	r25, 0xFF	; 255
     ce8:	08 95       	ret
g_chan=chan;
     cea:	80 93 ab 05 	sts	0x05AB, r24
rf_init (&bmac_rfRxInfo, chan, 0xFFFF, 0x00000);
     cee:	20 e0       	ldi	r18, 0x00	; 0
     cf0:	30 e0       	ldi	r19, 0x00	; 0
     cf2:	4f ef       	ldi	r20, 0xFF	; 255
     cf4:	5f ef       	ldi	r21, 0xFF	; 255
     cf6:	8f e0       	ldi	r24, 0x0F	; 15
     cf8:	95 e0       	ldi	r25, 0x05	; 5
     cfa:	0e 94 2f 13 	call	0x265e	; 0x265e <rf_init>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	90 e0       	ldi	r25, 0x00	; 0
return NRK_OK;
}
     d02:	08 95       	ret

00000d04 <bmac_init>:
    rx_buf_empty=1;
return NRK_OK;
}

int8_t bmac_init (uint8_t chan)
{
     d04:	1f 93       	push	r17
     d06:	18 2f       	mov	r17, r24
    tx_reserve=-1;
     d08:	8f ef       	ldi	r24, 0xFF	; 255
     d0a:	80 93 9a 05 	sts	0x059A, r24
    cca_active=true;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	80 93 c4 03 	sts	0x03C4, r24
    _bmac_check_period.secs=0;
     d14:	10 92 a1 05 	sts	0x05A1, r1
     d18:	10 92 a2 05 	sts	0x05A2, r1
     d1c:	10 92 a3 05 	sts	0x05A3, r1
     d20:	10 92 a4 05 	sts	0x05A4, r1
    _bmac_check_period.nano_secs=BMAC_DEFAULT_CHECK_RATE_MS*NANOS_PER_MS;
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	91 ee       	ldi	r25, 0xE1	; 225
     d28:	a5 ef       	ldi	r26, 0xF5	; 245
     d2a:	b5 e0       	ldi	r27, 0x05	; 5
     d2c:	80 93 a5 05 	sts	0x05A5, r24
     d30:	90 93 a6 05 	sts	0x05A6, r25
     d34:	a0 93 a7 05 	sts	0x05A7, r26
     d38:	b0 93 a8 05 	sts	0x05A8, r27
    bmac_rx_pkt_signal=nrk_signal_create();
     d3c:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <nrk_signal_create>
     d40:	80 93 f5 03 	sts	0x03F5, r24
    if(bmac_rx_pkt_signal==NRK_ERROR)
     d44:	8f 3f       	cpi	r24, 0xFF	; 255
     d46:	19 f4       	brne	.+6      	; 0xd4e <bmac_init+0x4a>
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating rx signal failed\r\n"));
     d48:	83 e6       	ldi	r24, 0x63	; 99
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	08 c0       	rjmp	.+16     	; 0xd5e <bmac_init+0x5a>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
	return NRK_ERROR;
	}
    bmac_tx_pkt_done_signal=nrk_signal_create();
     d4e:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <nrk_signal_create>
     d52:	80 93 99 05 	sts	0x0599, r24
    if(bmac_tx_pkt_done_signal==NRK_ERROR)
     d56:	8f 3f       	cpi	r24, 0xFF	; 255
     d58:	79 f4       	brne	.+30     	; 0xd78 <bmac_init+0x74>
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating tx signal failed\r\n"));
     d5a:	8b e3       	ldi	r24, 0x3B	; 59
     d5c:	91 e0       	ldi	r25, 0x01	; 1
     d5e:	0e 94 ed 18 	call	0x31da	; 0x31da <nrk_kprintf>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
     d62:	e0 91 7d 06 	lds	r30, 0x067D
     d66:	f0 91 7e 06 	lds	r31, 0x067E
     d6a:	60 85       	ldd	r22, Z+8	; 0x08
     d6c:	8e e0       	ldi	r24, 0x0E	; 14
     d6e:	0e 94 cc 1c 	call	0x3998	; 0x3998 <nrk_kernel_error_add>
     d72:	8f ef       	ldi	r24, 0xFF	; 255
     d74:	9f ef       	ldi	r25, 0xFF	; 255
     d76:	5b c0       	rjmp	.+182    	; 0xe2e <bmac_init+0x12a>
	return NRK_ERROR;
	}
    bmac_enable_signal=nrk_signal_create();
     d78:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <nrk_signal_create>
     d7c:	80 93 e9 03 	sts	0x03E9, r24
    if(bmac_enable_signal==NRK_ERROR)
     d80:	8f 3f       	cpi	r24, 0xFF	; 255
     d82:	19 f4       	brne	.+6      	; 0xd8a <bmac_init+0x86>
	{
	nrk_kprintf(PSTR("BMAC ERROR: creating enable signal failed\r\n"));
     d84:	8f e0       	ldi	r24, 0x0F	; 15
     d86:	91 e0       	ldi	r25, 0x01	; 1
     d88:	ea cf       	rjmp	.-44     	; 0xd5e <bmac_init+0x5a>
	nrk_kernel_error_add(NRK_SIGNAL_CREATE_ERROR,nrk_cur_task_TCB->task_ID);
	return NRK_ERROR;
	}

    
    tx_data_ready=0;
     d8a:	10 92 9f 05 	sts	0x059F, r1
    // Set the one main rx buffer
    rx_buf_empty=0;
     d8e:	10 92 ad 05 	sts	0x05AD, r1
    bmac_rfRxInfo.pPayload = NULL;
     d92:	10 92 15 05 	sts	0x0515, r1
     d96:	10 92 14 05 	sts	0x0514, r1
    bmac_rfRxInfo.max_length = 0;
     d9a:	10 92 13 05 	sts	0x0513, r1

    // Setup the cc2420 chip
    rf_init (&bmac_rfRxInfo, chan, 0xffff, 0);
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	4f ef       	ldi	r20, 0xFF	; 255
     da4:	5f ef       	ldi	r21, 0xFF	; 255
     da6:	61 2f       	mov	r22, r17
     da8:	8f e0       	ldi	r24, 0x0F	; 15
     daa:	95 e0       	ldi	r25, 0x05	; 5
     dac:	0e 94 2f 13 	call	0x265e	; 0x265e <rf_init>
    g_chan=chan;
     db0:	10 93 ab 05 	sts	0x05AB, r17
 
    FASTSPI_SETREG(CC2420_RSSI, 0xE580); // CCA THR=-25
     db4:	40 98       	cbi	0x08, 0	; 8
     db6:	83 e1       	ldi	r24, 0x13	; 19
     db8:	8e bd       	out	0x2e, r24	; 46
     dba:	0d b4       	in	r0, 0x2d	; 45
     dbc:	07 fe       	sbrs	r0, 7
     dbe:	fd cf       	rjmp	.-6      	; 0xdba <bmac_init+0xb6>
     dc0:	85 ee       	ldi	r24, 0xE5	; 229
     dc2:	8e bd       	out	0x2e, r24	; 46
     dc4:	0d b4       	in	r0, 0x2d	; 45
     dc6:	07 fe       	sbrs	r0, 7
     dc8:	fd cf       	rjmp	.-6      	; 0xdc4 <bmac_init+0xc0>
     dca:	80 e8       	ldi	r24, 0x80	; 128
     dcc:	8e bd       	out	0x2e, r24	; 46
     dce:	0d b4       	in	r0, 0x2d	; 45
     dd0:	07 fe       	sbrs	r0, 7
     dd2:	fd cf       	rjmp	.-6      	; 0xdce <bmac_init+0xca>
     dd4:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_TXCTRL, 0x80FF); // TX TURNAROUND = 128 us
     dd6:	40 98       	cbi	0x08, 0	; 8
     dd8:	85 e1       	ldi	r24, 0x15	; 21
     dda:	8e bd       	out	0x2e, r24	; 46
     ddc:	0d b4       	in	r0, 0x2d	; 45
     dde:	07 fe       	sbrs	r0, 7
     de0:	fd cf       	rjmp	.-6      	; 0xddc <bmac_init+0xd8>
     de2:	80 e8       	ldi	r24, 0x80	; 128
     de4:	8e bd       	out	0x2e, r24	; 46
     de6:	0d b4       	in	r0, 0x2d	; 45
     de8:	07 fe       	sbrs	r0, 7
     dea:	fd cf       	rjmp	.-6      	; 0xde6 <bmac_init+0xe2>
     dec:	8f ef       	ldi	r24, 0xFF	; 255
     dee:	8e bd       	out	0x2e, r24	; 46
     df0:	0d b4       	in	r0, 0x2d	; 45
     df2:	07 fe       	sbrs	r0, 7
     df4:	fd cf       	rjmp	.-6      	; 0xdf0 <bmac_init+0xec>
     df6:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x0A56); 
     df8:	40 98       	cbi	0x08, 0	; 8
     dfa:	87 e1       	ldi	r24, 0x17	; 23
     dfc:	8e bd       	out	0x2e, r24	; 46
     dfe:	0d b4       	in	r0, 0x2d	; 45
     e00:	07 fe       	sbrs	r0, 7
     e02:	fd cf       	rjmp	.-6      	; 0xdfe <bmac_init+0xfa>
     e04:	8a e0       	ldi	r24, 0x0A	; 10
     e06:	8e bd       	out	0x2e, r24	; 46
     e08:	0d b4       	in	r0, 0x2d	; 45
     e0a:	07 fe       	sbrs	r0, 7
     e0c:	fd cf       	rjmp	.-6      	; 0xe08 <bmac_init+0x104>
     e0e:	86 e5       	ldi	r24, 0x56	; 86
     e10:	8e bd       	out	0x2e, r24	; 46
     e12:	0d b4       	in	r0, 0x2d	; 45
     e14:	07 fe       	sbrs	r0, 7
     e16:	fd cf       	rjmp	.-6      	; 0xe12 <bmac_init+0x10e>
     e18:	40 9a       	sbi	0x08, 0	; 8
    // default cca thresh of -45
    rf_set_cca_thresh(-45); 
     e1a:	83 ed       	ldi	r24, 0xD3	; 211
     e1c:	0e 94 84 0b 	call	0x1708	; 0x1708 <rf_set_cca_thresh>
    bmac_running=1;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	80 93 9d 05 	sts	0x059D, r24
    is_enabled=1;
     e26:	80 93 9e 05 	sts	0x059E, r24
     e2a:	81 e0       	ldi	r24, 0x01	; 1
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	1f 91       	pop	r17
     e30:	08 95       	ret

00000e32 <bmac_set_cca_thresh>:
cca_active=active;
}

int8_t bmac_set_cca_thresh(int8_t thresh)
{
  rf_set_cca_thresh(thresh); 
     e32:	0e 94 84 0b 	call	0x1708	; 0x1708 <rf_set_cca_thresh>
return NRK_OK;
}
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	08 95       	ret

00000e3c <bmac_set_rf_power>:
}


int8_t bmac_set_rf_power(uint8_t power)
{
if(power>31) return NRK_ERROR;
     e3c:	80 32       	cpi	r24, 0x20	; 32
     e3e:	18 f0       	brcs	.+6      	; 0xe46 <bmac_set_rf_power+0xa>
     e40:	8f ef       	ldi	r24, 0xFF	; 255
     e42:	9f ef       	ldi	r25, 0xFF	; 255
     e44:	08 95       	ret
rf_tx_power(power);
     e46:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <rf_tx_power>
     e4a:	81 e0       	ldi	r24, 0x01	; 1
     e4c:	90 e0       	ldi	r25, 0x00	; 0
return NRK_OK;
}
     e4e:	08 95       	ret

00000e50 <bmac_encryption_disable>:
  return NRK_OK;
}

int8_t bmac_encryption_disable()
{
  rf_security_disable();
     e50:	0e 94 2b 0a 	call	0x1456	; 0x1456 <rf_security_disable>
  return NRK_OK;
}
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	08 95       	ret

00000e5a <bmac_encryption_enable>:
  return NRK_OK;
}

int8_t bmac_encryption_enable()
{
  rf_security_enable();
     e5a:	0e 94 05 0a 	call	0x140a	; 0x140a <rf_security_enable>
  return NRK_OK;
}
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	08 95       	ret

00000e64 <bmac_encryption_set_key>:
return rf_security_last_pkt_status();
}

int8_t bmac_encryption_set_key(uint8_t *key, uint8_t len)
{
  if(len!=16) return NRK_ERROR;
     e64:	60 31       	cpi	r22, 0x10	; 16
     e66:	19 f0       	breq	.+6      	; 0xe6e <bmac_encryption_set_key+0xa>
     e68:	8f ef       	ldi	r24, 0xFF	; 255
     e6a:	9f ef       	ldi	r25, 0xFF	; 255
     e6c:	08 95       	ret
  rf_security_set_key(key);
     e6e:	0e 94 05 12 	call	0x240a	; 0x240a <rf_security_set_key>
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	90 e0       	ldi	r25, 0x00	; 0
  return NRK_OK;
}
     e76:	08 95       	ret

00000e78 <bmac_rx_pkt_is_encrypted>:
return NRK_OK;
}

int8_t bmac_rx_pkt_is_encrypted()
{
return rf_security_last_pkt_status();
     e78:	0e 94 ba 09 	call	0x1374	; 0x1374 <rf_security_last_pkt_status>
}
     e7c:	99 27       	eor	r25, r25
     e7e:	87 fd       	sbrc	r24, 7
     e80:	90 95       	com	r25
     e82:	08 95       	ret

00000e84 <bmac_addr_decode_set_my_mac>:
return NRK_OK;
}

int8_t bmac_addr_decode_set_my_mac(uint16_t my_mac)
{
rf_addr_decode_set_my_mac(my_mac);
     e84:	0e 94 ca 11 	call	0x2394	; 0x2394 <rf_addr_decode_set_my_mac>
return NRK_OK;
}
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	08 95       	ret

00000e8e <bmac_addr_decode_enable>:
return NRK_OK;
}

int8_t  bmac_addr_decode_enable() 
{
rf_addr_decode_enable();
     e8e:	0e 94 44 0a 	call	0x1488	; 0x1488 <rf_addr_decode_enable>
return NRK_OK;
}
     e92:	81 e0       	ldi	r24, 0x01	; 1
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	08 95       	ret

00000e98 <bmac_addr_decode_disable>:
return NRK_OK;
}

int8_t  bmac_addr_decode_disable() 
{
rf_addr_decode_disable();
     e98:	0e 94 5f 0a 	call	0x14be	; 0x14be <rf_addr_decode_disable>
return NRK_OK;
}
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	08 95       	ret

00000ea2 <bmac_auto_ack_enable>:
return NRK_OK;
}

int8_t  bmac_auto_ack_enable() 
{
rf_auto_ack_enable();
     ea2:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <rf_auto_ack_enable>
return NRK_OK;
}
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	08 95       	ret

00000eac <bmac_auto_ack_disable>:
}


int8_t  bmac_auto_ack_disable() 
{
rf_auto_ack_disable();
     eac:	0e 94 98 0a 	call	0x1530	; 0x1530 <rf_auto_ack_disable>
return NRK_OK;
}
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	08 95       	ret

00000eb6 <bmac_encryption_set_ctr_counter>:
    return pRRI;
}

int8_t bmac_encryption_set_ctr_counter(uint8_t *counter, uint8_t len)
{
if(len!=4 ) return NRK_ERROR;
     eb6:	64 30       	cpi	r22, 0x04	; 4
     eb8:	19 f0       	breq	.+6      	; 0xec0 <bmac_encryption_set_ctr_counter+0xa>
     eba:	8f ef       	ldi	r24, 0xFF	; 255
     ebc:	9f ef       	ldi	r25, 0xFF	; 255
     ebe:	08 95       	ret
rf_security_set_ctr_counter(counter);
     ec0:	0e 94 be 09 	call	0x137c	; 0x137c <rf_security_set_ctr_counter>
     ec4:	81 e0       	ldi	r24, 0x01	; 1
     ec6:	90 e0       	ldi	r25, 0x00	; 0
   return NRK_OK;
}
     ec8:	08 95       	ret

00000eca <bmac_nw_task>:
  nrk_event_signal (bmac_enable_signal);
}


void bmac_nw_task ()
{
     eca:	02 c0       	rjmp	.+4      	; 0xed0 <bmac_nw_task+0x6>
int8_t v;
uint8_t backoff;
nrk_sig_mask_t event;

while(bmac_started()==0) nrk_wait_until_next_period();
     ecc:	0e 94 9c 23 	call	0x4738	; 0x4738 <nrk_wait_until_next_period>
     ed0:	80 91 9d 05 	lds	r24, 0x059D
     ed4:	88 23       	and	r24, r24
     ed6:	d1 f3       	breq	.-12     	; 0xecc <bmac_nw_task+0x2>

//register the signal after bmac_init has been called
nrk_signal_register(bmac_enable_signal); 
     ed8:	80 91 e9 03 	lds	r24, 0x03E9
     edc:	0e 94 5c 1e 	call	0x3cb8	; 0x3cb8 <nrk_signal_register>

backoff=0;

    while (1) {
	if(is_enabled ) { 
     ee0:	80 91 9e 05 	lds	r24, 0x059E
     ee4:	88 23       	and	r24, r24
     ee6:	49 f1       	breq	.+82     	; 0xf3a <bmac_nw_task+0x70>
	v=1;
	if(rx_buf_empty==1) v=_bmac_channel_check();
     ee8:	80 91 ad 05 	lds	r24, 0x05AD
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	61 f4       	brne	.+24     	; 0xf08 <bmac_nw_task+0x3e>
     ef0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <_bmac_channel_check>
		if(v==0)
     ef4:	88 23       	and	r24, r24
     ef6:	41 f4       	brne	.+16     	; 0xf08 <bmac_nw_task+0x3e>
			{
			if(_bmac_rx()==1)
     ef8:	0e 94 c1 05 	call	0xb82	; 0xb82 <_bmac_rx>
     efc:	81 30       	cpi	r24, 0x01	; 1
     efe:	21 f4       	brne	.+8      	; 0xf08 <bmac_nw_task+0x3e>
				nrk_event_signal (bmac_rx_pkt_signal);
     f00:	80 91 f5 03 	lds	r24, 0x03F5
     f04:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <nrk_event_signal>
		
			} 
		if(tx_data_ready==1)
     f08:	80 91 9f 05 	lds	r24, 0x059F
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	11 f4       	brne	.+4      	; 0xf14 <bmac_nw_task+0x4a>
			{
				_bmac_tx();
     f10:	0e 94 24 05 	call	0xa48	; 0xa48 <_bmac_tx>
			}
	nrk_wait(_bmac_check_period); 
     f14:	20 91 a1 05 	lds	r18, 0x05A1
     f18:	30 91 a2 05 	lds	r19, 0x05A2
     f1c:	40 91 a3 05 	lds	r20, 0x05A3
     f20:	50 91 a4 05 	lds	r21, 0x05A4
     f24:	60 91 a5 05 	lds	r22, 0x05A5
     f28:	70 91 a6 05 	lds	r23, 0x05A6
     f2c:	80 91 a7 05 	lds	r24, 0x05A7
     f30:	90 91 a8 05 	lds	r25, 0x05A8
     f34:	0e 94 ed 21 	call	0x43da	; 0x43da <nrk_wait>
     f38:	d3 cf       	rjmp	.-90     	; 0xee0 <bmac_nw_task+0x16>
	} else {
		event=0;
		do {
    		event=nrk_event_wait (SIG(bmac_enable_signal));
     f3a:	61 e0       	ldi	r22, 0x01	; 1
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	80 e0       	ldi	r24, 0x00	; 0
     f40:	90 e0       	ldi	r25, 0x00	; 0
     f42:	00 90 e9 03 	lds	r0, 0x03E9
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <bmac_nw_task+0x86>
     f48:	66 0f       	add	r22, r22
     f4a:	77 1f       	adc	r23, r23
     f4c:	88 1f       	adc	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	0a 94       	dec	r0
     f52:	d2 f7       	brpl	.-12     	; 0xf48 <bmac_nw_task+0x7e>
     f54:	0e 94 b6 20 	call	0x416c	; 0x416c <nrk_event_wait>
		} while((event & SIG(bmac_enable_signal))==0);
     f58:	00 90 e9 03 	lds	r0, 0x03E9
     f5c:	04 c0       	rjmp	.+8      	; 0xf66 <bmac_nw_task+0x9c>
     f5e:	96 95       	lsr	r25
     f60:	87 95       	ror	r24
     f62:	77 95       	ror	r23
     f64:	67 95       	ror	r22
     f66:	0a 94       	dec	r0
     f68:	d2 f7       	brpl	.-12     	; 0xf5e <bmac_nw_task+0x94>
     f6a:	60 fd       	sbrc	r22, 0
     f6c:	b9 cf       	rjmp	.-142    	; 0xee0 <bmac_nw_task+0x16>
     f6e:	e5 cf       	rjmp	.-54     	; 0xf3a <bmac_nw_task+0x70>

00000f70 <bmac_rx_pkt_get>:
return NRK_ERROR;
}


uint8_t *bmac_rx_pkt_get(uint8_t *len, int8_t *rssi)
{
     f70:	fc 01       	movw	r30, r24
     f72:	db 01       	movw	r26, r22

  if(bmac_rx_pkt_ready()==0) 
     f74:	80 91 ad 05 	lds	r24, 0x05AD
     f78:	88 23       	and	r24, r24
     f7a:	29 f0       	breq	.+10     	; 0xf86 <bmac_rx_pkt_get+0x16>
	{
	*len=0;
     f7c:	10 82       	st	Z, r1
	*rssi=0;
     f7e:	1c 92       	st	X, r1
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	08 95       	ret
	return NULL;
	}
  *len=bmac_rfRxInfo.length;
     f86:	80 91 12 05 	lds	r24, 0x0512
     f8a:	80 83       	st	Z, r24
  *rssi=bmac_rfRxInfo.rssi;
     f8c:	80 91 17 05 	lds	r24, 0x0517
     f90:	8c 93       	st	X, r24
  return bmac_rfRxInfo.pPayload;
     f92:	80 91 14 05 	lds	r24, 0x0514
     f96:	90 91 15 05 	lds	r25, 0x0515
}
     f9a:	08 95       	ret

00000f9c <init_adc>:


void init_adc()
{
// Initialize values here
  ADC_INIT ();
     f9c:	ea e7       	ldi	r30, 0x7A	; 122
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	83 e0       	ldi	r24, 0x03	; 3
     fa2:	80 83       	st	Z, r24
     fa4:	ac e7       	ldi	r26, 0x7C	; 124
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	80 e4       	ldi	r24, 0x40	; 64
     faa:	8c 93       	st	X, r24
  ADC_ENABLE ();
     fac:	80 81       	ld	r24, Z
     fae:	80 68       	ori	r24, 0x80	; 128
     fb0:	80 83       	st	Z, r24
  channel=0;
     fb2:	10 92 af 05 	sts	0x05AF, r1
  ADC_SET_CHANNEL (0);
     fb6:	8c 91       	ld	r24, X
     fb8:	80 7e       	andi	r24, 0xE0	; 224
     fba:	8c 93       	st	X, r24
     fbc:	9c 91       	ld	r25, X
     fbe:	8c 91       	ld	r24, X
     fc0:	80 7e       	andi	r24, 0xE0	; 224
     fc2:	89 2b       	or	r24, r25
     fc4:	8c 93       	st	X, r24
     fc6:	08 95       	ret

00000fc8 <delay>:
	ADC_GET_SAMPLE_10(adc_val);
	return adc_val;
}
void delay()
{
  nrk_spin_wait_us(ADC_SETUP_DELAY);
     fc8:	88 ec       	ldi	r24, 0xC8	; 200
     fca:	90 e0       	ldi	r25, 0x00	; 0
     fcc:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_spin_wait_us>
     fd0:	08 95       	ret

00000fd2 <get_adc_val>:
}

uint16_t get_adc_val()
{                         
	uint16_t adc_val;
	ADC_SAMPLE_SINGLE();
     fd2:	80 91 7a 00 	lds	r24, 0x007A
     fd6:	80 64       	ori	r24, 0x40	; 64
     fd8:	80 93 7a 00 	sts	0x007A, r24
     fdc:	80 91 7a 00 	lds	r24, 0x007A
     fe0:	84 ff       	sbrs	r24, 4
     fe2:	fc cf       	rjmp	.-8      	; 0xfdc <get_adc_val+0xa>
	delay();
     fe4:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <delay>
	ADC_GET_SAMPLE_10(adc_val);
     fe8:	20 91 78 00 	lds	r18, 0x0078
     fec:	33 27       	eor	r19, r19
     fee:	80 91 79 00 	lds	r24, 0x0079
     ff2:	99 27       	eor	r25, r25
     ff4:	98 2f       	mov	r25, r24
     ff6:	88 27       	eor	r24, r24
	return adc_val;
}
     ff8:	82 2b       	or	r24, r18
     ffa:	93 2b       	or	r25, r19
     ffc:	08 95       	ret

00000ffe <read_voltage_status>:
// the cc2420 chip to search for the voltage.
// If the voltage is above 3.3 volts, then the ADC reads
// the external voltage value going through a voltage divider.
// This function will return VOLTS*100
uint16_t read_voltage_status()
{
     ffe:	ff 92       	push	r15
    1000:	0f 93       	push	r16
    1002:	1f 93       	push	r17
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62
    100c:	22 97       	sbiw	r28, 0x02	; 2
    100e:	0f b6       	in	r0, 0x3f	; 63
    1010:	f8 94       	cli
    1012:	de bf       	out	0x3e, r29	; 62
    1014:	0f be       	out	0x3f, r0	; 63
    1016:	cd bf       	out	0x3d, r28	; 61
volatile uint16_t val;
uint8_t check,level;
nrk_sem_t *radio_sem;

radio_sem= rf_get_sem();
    1018:	0e 94 3f 0a 	call	0x147e	; 0x147e <rf_get_sem>
    101c:	8c 01       	movw	r16, r24

// if semaphore not created, then assume you own the radio 
if(radio_sem!=NULL)
    101e:	00 97       	sbiw	r24, 0x00	; 0
    1020:	11 f0       	breq	.+4      	; 0x1026 <read_voltage_status+0x28>
 nrk_sem_pend (radio_sem);
    1022:	0e 94 62 20 	call	0x40c4	; 0x40c4 <nrk_sem_pend>

    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    1026:	15 9a       	sbi	0x02, 5	; 2
    1028:	ff 24       	eor	r15, r15
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
{
val=0x0020 | level;
    102a:	8f 2d       	mov	r24, r15
    102c:	80 62       	ori	r24, 0x20	; 32
    102e:	99 27       	eor	r25, r25
    1030:	9a 83       	std	Y+2, r25	; 0x02
    1032:	89 83       	std	Y+1, r24	; 0x01
FASTSPI_SETREG(CC2420_BATTMON, val);
    1034:	40 98       	cbi	0x08, 0	; 8
    1036:	8b e1       	ldi	r24, 0x1B	; 27
    1038:	8e bd       	out	0x2e, r24	; 46
    103a:	0d b4       	in	r0, 0x2d	; 45
    103c:	07 fe       	sbrs	r0, 7
    103e:	fd cf       	rjmp	.-6      	; 0x103a <read_voltage_status+0x3c>
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	9a 81       	ldd	r25, Y+2	; 0x02
    1044:	89 2f       	mov	r24, r25
    1046:	99 27       	eor	r25, r25
    1048:	8e bd       	out	0x2e, r24	; 46
    104a:	0d b4       	in	r0, 0x2d	; 45
    104c:	07 fe       	sbrs	r0, 7
    104e:	fd cf       	rjmp	.-6      	; 0x104a <read_voltage_status+0x4c>
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	9a 81       	ldd	r25, Y+2	; 0x02
    1054:	8e bd       	out	0x2e, r24	; 46
    1056:	0d b4       	in	r0, 0x2d	; 45
    1058:	07 fe       	sbrs	r0, 7
    105a:	fd cf       	rjmp	.-6      	; 0x1056 <read_voltage_status+0x58>
    105c:	40 9a       	sbi	0x08, 0	; 8
nrk_spin_wait_us(2);
    105e:	82 e0       	ldi	r24, 0x02	; 2
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_spin_wait_us>
FASTSPI_GETREG(CC2420_BATTMON, val);
    1066:	40 98       	cbi	0x08, 0	; 8
    1068:	8b e5       	ldi	r24, 0x5B	; 91
    106a:	8e bd       	out	0x2e, r24	; 46
    106c:	0d b4       	in	r0, 0x2d	; 45
    106e:	07 fe       	sbrs	r0, 7
    1070:	fd cf       	rjmp	.-6      	; 0x106c <read_voltage_status+0x6e>
    1072:	1e bc       	out	0x2e, r1	; 46
    1074:	0d b4       	in	r0, 0x2d	; 45
    1076:	07 fe       	sbrs	r0, 7
    1078:	fd cf       	rjmp	.-6      	; 0x1074 <read_voltage_status+0x76>
    107a:	8e b5       	in	r24, 0x2e	; 46
    107c:	99 27       	eor	r25, r25
    107e:	98 2f       	mov	r25, r24
    1080:	88 27       	eor	r24, r24
    1082:	9a 83       	std	Y+2, r25	; 0x02
    1084:	89 83       	std	Y+1, r24	; 0x01
    1086:	1e bc       	out	0x2e, r1	; 46
    1088:	0d b4       	in	r0, 0x2d	; 45
    108a:	07 fe       	sbrs	r0, 7
    108c:	fd cf       	rjmp	.-6      	; 0x1088 <read_voltage_status+0x8a>
    108e:	89 81       	ldd	r24, Y+1	; 0x01
    1090:	9a 81       	ldd	r25, Y+2	; 0x02
    1092:	2e b5       	in	r18, 0x2e	; 46
    1094:	33 27       	eor	r19, r19
    1096:	28 2b       	or	r18, r24
    1098:	39 2b       	or	r19, r25
    109a:	3a 83       	std	Y+2, r19	; 0x02
    109c:	29 83       	std	Y+1, r18	; 0x01
    109e:	40 9a       	sbi	0x08, 0	; 8
if(val&0x0040) break; 
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	9a 81       	ldd	r25, Y+2	; 0x02
    10a4:	86 fd       	sbrc	r24, 6
    10a6:	05 c0       	rjmp	.+10     	; 0x10b2 <read_voltage_status+0xb4>
level++;
    10a8:	f3 94       	inc	r15
    // activate cc2420 vreg
    SET_VREG_ACTIVE();
    // FIXME: Check at end if VREG needs to be disabled again...

level=0;
while(level<0x1F)
    10aa:	2f e1       	ldi	r18, 0x1F	; 31
    10ac:	f2 16       	cp	r15, r18
    10ae:	09 f0       	breq	.+2      	; 0x10b2 <read_voltage_status+0xb4>
    10b0:	bc cf       	rjmp	.-136    	; 0x102a <read_voltage_status+0x2c>
nrk_spin_wait_us(2);
FASTSPI_GETREG(CC2420_BATTMON, val);
if(val&0x0040) break; 
level++;
}
if(radio_sem!=NULL)
    10b2:	01 15       	cp	r16, r1
    10b4:	11 05       	cpc	r17, r1
    10b6:	19 f0       	breq	.+6      	; 0x10be <read_voltage_status+0xc0>
 nrk_sem_post(radio_sem);
    10b8:	c8 01       	movw	r24, r16
    10ba:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
if(level==0)
    10be:	ff 20       	and	r15, r15
    10c0:	c9 f4       	brne	.+50     	; 0x10f4 <read_voltage_status+0xf6>
  {
  val=get_adc_val();
    10c2:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <get_adc_val>
    10c6:	9a 83       	std	Y+2, r25	; 0x02
    10c8:	89 83       	std	Y+1, r24	; 0x01
  // FIXME:  This probably isn't correct...
  if(val>174) val-=174;
    10ca:	89 81       	ldd	r24, Y+1	; 0x01
    10cc:	9a 81       	ldd	r25, Y+2	; 0x02
    10ce:	8f 3a       	cpi	r24, 0xAF	; 175
    10d0:	91 05       	cpc	r25, r1
    10d2:	30 f0       	brcs	.+12     	; 0x10e0 <read_voltage_status+0xe2>
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	8e 5a       	subi	r24, 0xAE	; 174
    10da:	90 40       	sbci	r25, 0x00	; 0
    10dc:	9a 83       	std	Y+2, r25	; 0x02
    10de:	89 83       	std	Y+1, r24	; 0x01
  if(val<330) val=330;
    10e0:	89 81       	ldd	r24, Y+1	; 0x01
    10e2:	9a 81       	ldd	r25, Y+2	; 0x02
    10e4:	8a 54       	subi	r24, 0x4A	; 74
    10e6:	91 40       	sbci	r25, 0x01	; 1
    10e8:	98 f4       	brcc	.+38     	; 0x1110 <read_voltage_status+0x112>
    10ea:	8a e4       	ldi	r24, 0x4A	; 74
    10ec:	91 e0       	ldi	r25, 0x01	; 1
    10ee:	9a 83       	std	Y+2, r25	; 0x02
    10f0:	89 83       	std	Y+1, r24	; 0x01
    10f2:	0e c0       	rjmp	.+28     	; 0x1110 <read_voltage_status+0x112>
  }
else val=(9000-(level*125)) / 27;
    10f4:	2d e7       	ldi	r18, 0x7D	; 125
    10f6:	f2 9e       	mul	r15, r18
    10f8:	90 01       	movw	r18, r0
    10fa:	11 24       	eor	r1, r1
    10fc:	88 e2       	ldi	r24, 0x28	; 40
    10fe:	93 e2       	ldi	r25, 0x23	; 35
    1100:	82 1b       	sub	r24, r18
    1102:	93 0b       	sbc	r25, r19
    1104:	6b e1       	ldi	r22, 0x1B	; 27
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	0e 94 c0 32 	call	0x6580	; 0x6580 <__divmodhi4>
    110c:	7a 83       	std	Y+2, r23	; 0x02
    110e:	69 83       	std	Y+1, r22	; 0x01

return val;
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	9a 81       	ldd	r25, Y+2	; 0x02
    1114:	22 96       	adiw	r28, 0x02	; 2
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	f8 94       	cli
    111a:	de bf       	out	0x3e, r29	; 62
    111c:	0f be       	out	0x3f, r0	; 63
    111e:	cd bf       	out	0x3d, r28	; 61
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	1f 91       	pop	r17
    1126:	0f 91       	pop	r16
    1128:	ff 90       	pop	r15
    112a:	08 95       	ret

0000112c <dev_manager_ff_sensors>:
x |= ((int8_t) ADCH) << 6; \
} while (0)

uint16_t read_voltage_status();
uint8_t dev_manager_ff_sensors(uint8_t action,uint8_t opt,uint8_t *buffer,uint8_t size)
{
    112c:	cf 92       	push	r12
    112e:	df 92       	push	r13
    1130:	ef 92       	push	r14
    1132:	ff 92       	push	r15
    1134:	0f 93       	push	r16
    1136:	1f 93       	push	r17
    1138:	cf 93       	push	r28
    113a:	df 93       	push	r29
    113c:	98 2f       	mov	r25, r24
    113e:	ea 01       	movw	r28, r20
    1140:	12 2f       	mov	r17, r18
uint8_t count=0;
// key and value get passed as opt and size
uint8_t key=opt;
uint8_t value=size;

     switch(action)
    1142:	82 30       	cpi	r24, 0x02	; 2
    1144:	09 f4       	brne	.+2      	; 0x1148 <dev_manager_ff_sensors+0x1c>
    1146:	81 c0       	rjmp	.+258    	; 0x124a <dev_manager_ff_sensors+0x11e>
    1148:	83 30       	cpi	r24, 0x03	; 3
    114a:	30 f4       	brcc	.+12     	; 0x1158 <dev_manager_ff_sensors+0x2c>
    114c:	88 23       	and	r24, r24
    114e:	71 f0       	breq	.+28     	; 0x116c <dev_manager_ff_sensors+0x40>
    1150:	81 30       	cpi	r24, 0x01	; 1
    1152:	09 f0       	breq	.+2      	; 0x1156 <dev_manager_ff_sensors+0x2a>
    1154:	d2 c0       	rjmp	.+420    	; 0x12fa <dev_manager_ff_sensors+0x1ce>
    1156:	10 c0       	rjmp	.+32     	; 0x1178 <dev_manager_ff_sensors+0x4c>
    1158:	84 30       	cpi	r24, 0x04	; 4
    115a:	09 f4       	brne	.+2      	; 0x115e <dev_manager_ff_sensors+0x32>
    115c:	81 c0       	rjmp	.+258    	; 0x1260 <dev_manager_ff_sensors+0x134>
    115e:	84 30       	cpi	r24, 0x04	; 4
    1160:	08 f4       	brcc	.+2      	; 0x1164 <dev_manager_ff_sensors+0x38>
    1162:	77 c0       	rjmp	.+238    	; 0x1252 <dev_manager_ff_sensors+0x126>
    1164:	85 30       	cpi	r24, 0x05	; 5
    1166:	09 f0       	breq	.+2      	; 0x116a <dev_manager_ff_sensors+0x3e>
    1168:	c8 c0       	rjmp	.+400    	; 0x12fa <dev_manager_ff_sensors+0x1ce>
    116a:	2d c0       	rjmp	.+90     	; 0x11c6 <dev_manager_ff_sensors+0x9a>
     {
            case INIT: 
			// Set the pwr ctrl pin as output
  			DDRF = PWR_CTRL_MASK;
    116c:	80 e8       	ldi	r24, 0x80	; 128
    116e:	80 bb       	out	0x10, r24	; 16
			PORTF |= PWR_CTRL_MASK;
    1170:	8f 9a       	sbi	0x11, 7	; 17
	     		init_adc();  
    1172:	0e 94 ce 07 	call	0xf9c	; 0xf9c <init_adc>
    1176:	6a c0       	rjmp	.+212    	; 0x124c <dev_manager_ff_sensors+0x120>
			is_open=0;
		      return 1;
	     
	    case OPEN:  
		    if(is_open==1) return NRK_ERROR;
    1178:	80 91 ae 05 	lds	r24, 0x05AE
    117c:	81 30       	cpi	r24, 0x01	; 1
    117e:	09 f4       	brne	.+2      	; 0x1182 <dev_manager_ff_sensors+0x56>
    1180:	c3 c0       	rjmp	.+390    	; 0x1308 <dev_manager_ff_sensors+0x1dc>
		    is_open=1; 
    1182:	90 93 ae 05 	sts	0x05AE, r25
		    if(opt&READ_FLAG)
    1186:	77 27       	eor	r23, r23
    1188:	60 ff       	sbrs	r22, 0
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <dev_manager_ff_sensors+0x86>
		    {
		   	// Turn on Sensor Node Power
			PORTF &= ~(PWR_CTRL_MASK);
    118c:	8f 98       	cbi	0x11, 7	; 17
  			channel=0;
    118e:	10 92 af 05 	sts	0x05AF, r1
  			ADC_SET_CHANNEL (0);
    1192:	80 91 7c 00 	lds	r24, 0x007C
    1196:	80 7e       	andi	r24, 0xE0	; 224
    1198:	80 93 7c 00 	sts	0x007C, r24
    119c:	90 91 7c 00 	lds	r25, 0x007C
    11a0:	80 91 7c 00 	lds	r24, 0x007C
    11a4:	80 7e       	andi	r24, 0xE0	; 224
    11a6:	89 2b       	or	r24, r25
    11a8:	80 93 7c 00 	sts	0x007C, r24
			nrk_spin_wait_us(ADC_STARTUP_DELAY);
    11ac:	88 ee       	ldi	r24, 0xE8	; 232
    11ae:	93 e0       	ldi	r25, 0x03	; 3
    11b0:	9f c0       	rjmp	.+318    	; 0x12f0 <dev_manager_ff_sensors+0x1c4>
		    	return NRK_OK;
		    }
		    if(opt&WRITE_FLAG)
    11b2:	61 fd       	sbrc	r22, 1
    11b4:	a9 c0       	rjmp	.+338    	; 0x1308 <dev_manager_ff_sensors+0x1dc>
		    {
		    	return NRK_ERROR;
		    }
		    if(opt&APPEND_FLAG)
    11b6:	62 fd       	sbrc	r22, 2
    11b8:	a7 c0       	rjmp	.+334    	; 0x1308 <dev_manager_ff_sensors+0x1dc>
		    {
		    	return NRK_ERROR;
		    }
		    if(((opt)&(READ_FLAG|WRITE_FLAG|APPEND_FLAG))==0)
    11ba:	67 70       	andi	r22, 0x07	; 7
    11bc:	70 70       	andi	r23, 0x00	; 0
    11be:	67 2b       	or	r22, r23
    11c0:	09 f4       	brne	.+2      	; 0x11c4 <dev_manager_ff_sensors+0x98>
    11c2:	a2 c0       	rjmp	.+324    	; 0x1308 <dev_manager_ff_sensors+0x1dc>
    11c4:	97 c0       	rjmp	.+302    	; 0x12f4 <dev_manager_ff_sensors+0x1c8>
		
	    

             case READ:
	     	      count=0;
		      if(size!=1 && size!=2) return 0;
    11c6:	82 2f       	mov	r24, r18
    11c8:	81 50       	subi	r24, 0x01	; 1
    11ca:	82 30       	cpi	r24, 0x02	; 2
    11cc:	08 f0       	brcs	.+2      	; 0x11d0 <dev_manager_ff_sensors+0xa4>
    11ce:	99 c0       	rjmp	.+306    	; 0x1302 <dev_manager_ff_sensors+0x1d6>
			if(channel!=BAT && channel<7)
    11d0:	90 91 af 05 	lds	r25, 0x05AF
    11d4:	89 2f       	mov	r24, r25
    11d6:	81 50       	subi	r24, 0x01	; 1
    11d8:	86 30       	cpi	r24, 0x06	; 6
    11da:	18 f4       	brcc	.+6      	; 0x11e2 <dev_manager_ff_sensors+0xb6>
			{
			      /* Conversion to 8-bit value*/
			      uint16_t val=get_adc_val();
    11dc:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <get_adc_val>
    11e0:	22 c0       	rjmp	.+68     	; 0x1226 <dev_manager_ff_sensors+0xfa>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
				}


			} else if(channel==BAT)
    11e2:	99 23       	and	r25, r25
    11e4:	19 f4       	brne	.+6      	; 0x11ec <dev_manager_ff_sensors+0xc0>
			{
			uint16_t tmp;
			tmp=read_voltage_status();
    11e6:	0e 94 ff 07 	call	0xffe	; 0xffe <read_voltage_status>
    11ea:	1d c0       	rjmp	.+58     	; 0x1226 <dev_manager_ff_sensors+0xfa>
				}
			if(size==1)
				{
					buffer[count]=(tmp>>2) & 0xFF;
				}
			}else if(channel==AUDIO_P2P)
    11ec:	97 30       	cpi	r25, 0x07	; 7
    11ee:	51 f5       	brne	.+84     	; 0x1244 <dev_manager_ff_sensors+0x118>
    11f0:	f1 e0       	ldi	r31, 0x01	; 1
    11f2:	cf 2e       	mov	r12, r31
    11f4:	f4 e0       	ldi	r31, 0x04	; 4
    11f6:	df 2e       	mov	r13, r31
    11f8:	ee 24       	eor	r14, r14
    11fa:	ff 24       	eor	r15, r15
    11fc:	00 e0       	ldi	r16, 0x00	; 0
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
				{
				val=get_adc_val();
    11fe:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <get_adc_val>
    1202:	8c 15       	cp	r24, r12
    1204:	9d 05       	cpc	r25, r13
    1206:	08 f4       	brcc	.+2      	; 0x120a <dev_manager_ff_sensors+0xde>
    1208:	6c 01       	movw	r12, r24
    120a:	e8 16       	cp	r14, r24
    120c:	f9 06       	cpc	r15, r25
    120e:	08 f4       	brcc	.+2      	; 0x1212 <dev_manager_ff_sensors+0xe6>
    1210:	7c 01       	movw	r14, r24
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
    1212:	8d e7       	ldi	r24, 0x7D	; 125
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_spin_wait_us>
			      //uint16_t val=get_adc_val();
			      uint16_t val,min, max;
			      uint8_t i;
				max=0;
			        min=1025;
			      for(i=0; i<64; i++ )
    121a:	0f 5f       	subi	r16, 0xFF	; 255
    121c:	00 34       	cpi	r16, 0x40	; 64
    121e:	79 f7       	brne	.-34     	; 0x11fe <dev_manager_ff_sensors+0xd2>
				if(val<min)min=val;
				if(val>max)max=val;
				// 8 Khz
				nrk_spin_wait_us(125);	
				}
			 	val=max-min;	
    1220:	c7 01       	movw	r24, r14
    1222:	8c 19       	sub	r24, r12
    1224:	9d 09       	sbc	r25, r13
				if(size==2)
    1226:	12 30       	cpi	r17, 0x02	; 2
    1228:	31 f4       	brne	.+12     	; 0x1236 <dev_manager_ff_sensors+0x10a>
			      	{
					buffer[count]=val  & 0xFF;
    122a:	88 83       	st	Y, r24
			      		count++;
			      		buffer[count]=(val>>8)  & 0xFF;
    122c:	89 2f       	mov	r24, r25
    122e:	99 27       	eor	r25, r25
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	08 c0       	rjmp	.+16     	; 0x1246 <dev_manager_ff_sensors+0x11a>
				}

				if(size==1)
    1236:	11 30       	cpi	r17, 0x01	; 1
    1238:	29 f4       	brne	.+10     	; 0x1244 <dev_manager_ff_sensors+0x118>
			      	{
			      		buffer[count]=(val>>2)  & 0xFF;
    123a:	96 95       	lsr	r25
    123c:	87 95       	ror	r24
    123e:	96 95       	lsr	r25
    1240:	87 95       	ror	r24
    1242:	88 83       	st	Y, r24
    1244:	80 e0       	ldi	r24, 0x00	; 0
				}

			}
			
		      count++;
                      return count;
    1246:	8f 5f       	subi	r24, 0xFF	; 255
    1248:	09 c0       	rjmp	.+18     	; 0x125c <dev_manager_ff_sensors+0x130>

             case CLOSE:
			// Turn off sensor power
			PORTF |= PWR_CTRL_MASK;
    124a:	8f 9a       	sbi	0x11, 7	; 17
		    	is_open=0; 
    124c:	10 92 ae 05 	sts	0x05AE, r1
    1250:	51 c0       	rjmp	.+162    	; 0x12f4 <dev_manager_ff_sensors+0x1c8>
                        return NRK_OK;
             
	     case GET_STATUS:
	     		// use "key" here 
			if(key==SENSOR_SELECT) return channel;
    1252:	61 30       	cpi	r22, 0x01	; 1
    1254:	09 f0       	breq	.+2      	; 0x1258 <dev_manager_ff_sensors+0x12c>
    1256:	58 c0       	rjmp	.+176    	; 0x1308 <dev_manager_ff_sensors+0x1dc>
    1258:	80 91 af 05 	lds	r24, 0x05AF
    125c:	99 27       	eor	r25, r25
    125e:	56 c0       	rjmp	.+172    	; 0x130c <dev_manager_ff_sensors+0x1e0>
	     		return NRK_ERROR;
			
             case SET_STATUS:
	     		// use "key" and "value" here
  			if(key==SENSOR_SELECT) 
    1260:	61 30       	cpi	r22, 0x01	; 1
    1262:	09 f0       	breq	.+2      	; 0x1266 <dev_manager_ff_sensors+0x13a>
    1264:	51 c0       	rjmp	.+162    	; 0x1308 <dev_manager_ff_sensors+0x1dc>
			{
			// Set to audio channel if it is an average value
			if(value==AUDIO_P2P) 
    1266:	27 30       	cpi	r18, 0x07	; 7
    1268:	d9 f4       	brne	.+54     	; 0x12a0 <dev_manager_ff_sensors+0x174>
			  {
				channel=value;
    126a:	20 93 af 05 	sts	0x05AF, r18
				   //ADC_VREF_2_56();	
				ADC_VREF_VCC();	
    126e:	80 91 7c 00 	lds	r24, 0x007C
    1272:	8f 77       	andi	r24, 0x7F	; 127
    1274:	80 93 7c 00 	sts	0x007C, r24
    1278:	80 91 7c 00 	lds	r24, 0x007C
    127c:	80 64       	ori	r24, 0x40	; 64
    127e:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (AUDIO);
    1282:	80 91 7c 00 	lds	r24, 0x007C
    1286:	80 7e       	andi	r24, 0xE0	; 224
    1288:	80 93 7c 00 	sts	0x007C, r24
    128c:	90 91 7c 00 	lds	r25, 0x007C
    1290:	80 91 7c 00 	lds	r24, 0x007C
    1294:	93 60       	ori	r25, 0x03	; 3
    1296:	80 7e       	andi	r24, 0xE0	; 224
    1298:	98 2b       	or	r25, r24
    129a:	90 93 7c 00 	sts	0x007C, r25
    129e:	26 c0       	rjmp	.+76     	; 0x12ec <dev_manager_ff_sensors+0x1c0>
				nrk_spin_wait_us(ADC_SETUP_DELAY);
				return NRK_OK;

			  } else
			  {
				if(value>7) 
    12a0:	28 30       	cpi	r18, 0x08	; 8
    12a2:	20 f0       	brcs	.+8      	; 0x12ac <dev_manager_ff_sensors+0x180>
				{
					_nrk_errno_set(1);
    12a4:	81 e0       	ldi	r24, 0x01	; 1
    12a6:	0e 94 07 1c 	call	0x380e	; 0x380e <_nrk_errno_set>
    12aa:	2e c0       	rjmp	.+92     	; 0x1308 <dev_manager_ff_sensors+0x1dc>
					return NRK_ERROR;
				}
				channel=value;
    12ac:	20 93 af 05 	sts	0x05AF, r18
				if(channel==LIGHT)
    12b0:	21 30       	cpi	r18, 0x01	; 1
    12b2:	49 f4       	brne	.+18     	; 0x12c6 <dev_manager_ff_sensors+0x19a>
				   ADC_VREF_VCC();	
    12b4:	80 91 7c 00 	lds	r24, 0x007C
    12b8:	8f 77       	andi	r24, 0x7F	; 127
    12ba:	80 93 7c 00 	sts	0x007C, r24
    12be:	80 91 7c 00 	lds	r24, 0x007C
    12c2:	80 64       	ori	r24, 0x40	; 64
    12c4:	03 c0       	rjmp	.+6      	; 0x12cc <dev_manager_ff_sensors+0x1a0>
				else
				   ADC_VREF_2_56();	
    12c6:	80 91 7c 00 	lds	r24, 0x007C
    12ca:	80 6c       	ori	r24, 0xC0	; 192
    12cc:	80 93 7c 00 	sts	0x007C, r24
				ADC_SET_CHANNEL (channel);
    12d0:	80 91 7c 00 	lds	r24, 0x007C
    12d4:	80 7e       	andi	r24, 0xE0	; 224
    12d6:	80 93 7c 00 	sts	0x007C, r24
    12da:	90 91 7c 00 	lds	r25, 0x007C
    12de:	80 91 7c 00 	lds	r24, 0x007C
    12e2:	80 7e       	andi	r24, 0xE0	; 224
    12e4:	89 2b       	or	r24, r25
    12e6:	81 2b       	or	r24, r17
    12e8:	80 93 7c 00 	sts	0x007C, r24
				nrk_spin_wait_us(ADC_SETUP_DELAY);
    12ec:	88 ec       	ldi	r24, 0xC8	; 200
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_spin_wait_us>
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	09 c0       	rjmp	.+18     	; 0x130c <dev_manager_ff_sensors+0x1e0>
				return NRK_OK;
			  }
			}
			return NRK_ERROR;
	     default:
		nrk_kernel_error_add(NRK_DEVICE_DRIVER,0);
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	8c e0       	ldi	r24, 0x0C	; 12
    12fe:	0e 94 cc 1c 	call	0x3998	; 0x3998 <nrk_kernel_error_add>
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 c0       	rjmp	.+4      	; 0x130c <dev_manager_ff_sensors+0x1e0>
		 return 0;
    1308:	8f ef       	ldi	r24, 0xFF	; 255
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	df 91       	pop	r29
    130e:	cf 91       	pop	r28
    1310:	1f 91       	pop	r17
    1312:	0f 91       	pop	r16
    1314:	ff 90       	pop	r15
    1316:	ef 90       	pop	r14
    1318:	df 90       	pop	r13
    131a:	cf 90       	pop	r12
    131c:	08 95       	ret

0000131e <halRfSetChannel>:

uint8_t channel;
uint8_t is_open;

// VREF is set to VCC by default
#define ADC_INIT() \
    131e:	99 27       	eor	r25, r25
    do { \
    1320:	9c 01       	movw	r18, r24
    1322:	26 5a       	subi	r18, 0xA6	; 166
    1324:	3e 4b       	sbci	r19, 0xBE	; 190
    1326:	0b 97       	sbiw	r24, 0x0b	; 11
	ADCSRA = BM(ADPS0) | BM(ADPS1); \
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	28 0f       	add	r18, r24
    1332:	39 1f       	adc	r19, r25
	ADMUX = BM(REFS0);  \
} while (0)

    1334:	f8 94       	cli
#define ADC_VREF_VCC() \
    1336:	40 98       	cbi	0x08, 0	; 8
    1338:	88 e1       	ldi	r24, 0x18	; 24
    133a:	8e bd       	out	0x2e, r24	; 46
    133c:	0d b4       	in	r0, 0x2d	; 45
    133e:	07 fe       	sbrs	r0, 7
    1340:	fd cf       	rjmp	.-6      	; 0x133c <halRfSetChannel+0x1e>
    1342:	83 2f       	mov	r24, r19
    1344:	99 27       	eor	r25, r25
    1346:	8e bd       	out	0x2e, r24	; 46
    1348:	0d b4       	in	r0, 0x2d	; 45
    134a:	07 fe       	sbrs	r0, 7
    134c:	fd cf       	rjmp	.-6      	; 0x1348 <halRfSetChannel+0x2a>
    134e:	2e bd       	out	0x2e, r18	; 46
    1350:	0d b4       	in	r0, 0x2d	; 45
    1352:	07 fe       	sbrs	r0, 7
    1354:	fd cf       	rjmp	.-6      	; 0x1350 <halRfSetChannel+0x32>
    1356:	40 9a       	sbi	0x08, 0	; 8
   do { \
    1358:	78 94       	sei
    135a:	08 95       	ret

0000135c <halRfWaitForCrystalOscillator>:
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
    135c:	f8 94       	cli
	    FASTSPI_UPD_STATUS(spiStatusByte);
    135e:	40 98       	cbi	0x08, 0	; 8
    1360:	1e bc       	out	0x2e, r1	; 46
    1362:	0d b4       	in	r0, 0x2d	; 45
    1364:	07 fe       	sbrs	r0, 7
    1366:	fd cf       	rjmp	.-6      	; 0x1362 <halRfWaitForCrystalOscillator+0x6>
    1368:	8e b5       	in	r24, 0x2e	; 46
    136a:	40 9a       	sbi	0x08, 0	; 8
	    ENABLE_GLOBAL_INT();
    136c:	78 94       	sei
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
    136e:	86 ff       	sbrs	r24, 6
    1370:	f5 cf       	rjmp	.-22     	; 0x135c <halRfWaitForCrystalOscillator>
    1372:	08 95       	ret

00001374 <rf_security_last_pkt_status>:
uint8_t tx_ctr[4];
uint8_t rx_ctr[4];

// Returns 1 if the last packet was encrypted, 0 otherwise
uint8_t rf_security_last_pkt_status()
{
    1374:	80 91 c5 05 	lds	r24, 0x05C5
return last_pkt_encrypted;
}
    1378:	99 27       	eor	r25, r25
    137a:	08 95       	ret

0000137c <rf_security_set_ctr_counter>:


void rf_security_set_ctr_counter(uint8_t *counter)
{
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	dc 01       	movw	r26, r24
uint8_t n;
// CTR counter value
FASTSPI_WRITE_RAM(&counter[0],(CC2420RAM_TXNONCE+9),2,n); 
    1382:	40 98       	cbi	0x08, 0	; 8
    1384:	89 ec       	ldi	r24, 0xC9	; 201
    1386:	8e bd       	out	0x2e, r24	; 46
    1388:	0d b4       	in	r0, 0x2d	; 45
    138a:	07 fe       	sbrs	r0, 7
    138c:	fd cf       	rjmp	.-6      	; 0x1388 <rf_security_set_ctr_counter+0xc>
    138e:	80 e8       	ldi	r24, 0x80	; 128
    1390:	8e bd       	out	0x2e, r24	; 46
    1392:	0d b4       	in	r0, 0x2d	; 45
    1394:	07 fe       	sbrs	r0, 7
    1396:	fd cf       	rjmp	.-6      	; 0x1392 <rf_security_set_ctr_counter+0x16>
    1398:	92 e0       	ldi	r25, 0x02	; 2
    139a:	91 50       	subi	r25, 0x01	; 1
    139c:	fd 01       	movw	r30, r26
    139e:	e9 0f       	add	r30, r25
    13a0:	f1 1d       	adc	r31, r1
    13a2:	80 81       	ld	r24, Z
    13a4:	8e bd       	out	0x2e, r24	; 46
    13a6:	0d b4       	in	r0, 0x2d	; 45
    13a8:	07 fe       	sbrs	r0, 7
    13aa:	fd cf       	rjmp	.-6      	; 0x13a6 <rf_security_set_ctr_counter+0x2a>
    13ac:	99 23       	and	r25, r25
    13ae:	a9 f7       	brne	.-22     	; 0x139a <rf_security_set_ctr_counter+0x1e>
    13b0:	40 9a       	sbi	0x08, 0	; 8
FASTSPI_WRITE_RAM(&counter[2],(CC2420RAM_TXNONCE+11),2,n); 
    13b2:	40 98       	cbi	0x08, 0	; 8
    13b4:	8b ec       	ldi	r24, 0xCB	; 203
    13b6:	8e bd       	out	0x2e, r24	; 46
    13b8:	0d b4       	in	r0, 0x2d	; 45
    13ba:	07 fe       	sbrs	r0, 7
    13bc:	fd cf       	rjmp	.-6      	; 0x13b8 <rf_security_set_ctr_counter+0x3c>
    13be:	80 e8       	ldi	r24, 0x80	; 128
    13c0:	8e bd       	out	0x2e, r24	; 46
    13c2:	0d b4       	in	r0, 0x2d	; 45
    13c4:	07 fe       	sbrs	r0, 7
    13c6:	fd cf       	rjmp	.-6      	; 0x13c2 <rf_security_set_ctr_counter+0x46>
    13c8:	92 e0       	ldi	r25, 0x02	; 2
    13ca:	9d 01       	movw	r18, r26
    13cc:	2e 5f       	subi	r18, 0xFE	; 254
    13ce:	3f 4f       	sbci	r19, 0xFF	; 255
    13d0:	e9 01       	movw	r28, r18
    13d2:	91 50       	subi	r25, 0x01	; 1
    13d4:	f9 01       	movw	r30, r18
    13d6:	e9 0f       	add	r30, r25
    13d8:	f1 1d       	adc	r31, r1
    13da:	80 81       	ld	r24, Z
    13dc:	8e bd       	out	0x2e, r24	; 46
    13de:	0d b4       	in	r0, 0x2d	; 45
    13e0:	07 fe       	sbrs	r0, 7
    13e2:	fd cf       	rjmp	.-6      	; 0x13de <rf_security_set_ctr_counter+0x62>
    13e4:	99 23       	and	r25, r25
    13e6:	a1 f7       	brne	.-24     	; 0x13d0 <rf_security_set_ctr_counter+0x54>
    13e8:	40 9a       	sbi	0x08, 0	; 8
tx_ctr[0]=counter[0];
    13ea:	8c 91       	ld	r24, X
    13ec:	80 93 c6 05 	sts	0x05C6, r24
tx_ctr[1]=counter[1];
    13f0:	fd 01       	movw	r30, r26
    13f2:	81 81       	ldd	r24, Z+1	; 0x01
    13f4:	80 93 c7 05 	sts	0x05C7, r24
tx_ctr[2]=counter[2];
    13f8:	88 81       	ld	r24, Y
    13fa:	80 93 c8 05 	sts	0x05C8, r24
tx_ctr[3]=counter[3];
    13fe:	83 81       	ldd	r24, Z+3	; 0x03
    1400:	80 93 c9 05 	sts	0x05C9, r24
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <rf_security_enable>:
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
}

void rf_security_enable(uint8_t *key)
{
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x0306); // Enable CTR encryption with key 0
    140a:	40 98       	cbi	0x08, 0	; 8
    140c:	89 e1       	ldi	r24, 0x19	; 25
    140e:	8e bd       	out	0x2e, r24	; 46
    1410:	0d b4       	in	r0, 0x2d	; 45
    1412:	07 fe       	sbrs	r0, 7
    1414:	fd cf       	rjmp	.-6      	; 0x1410 <rf_security_enable+0x6>
    1416:	83 e0       	ldi	r24, 0x03	; 3
    1418:	8e bd       	out	0x2e, r24	; 46
    141a:	0d b4       	in	r0, 0x2d	; 45
    141c:	07 fe       	sbrs	r0, 7
    141e:	fd cf       	rjmp	.-6      	; 0x141a <rf_security_enable+0x10>
    1420:	86 e0       	ldi	r24, 0x06	; 6
    1422:	8e bd       	out	0x2e, r24	; 46
    1424:	0d b4       	in	r0, 0x2d	; 45
    1426:	07 fe       	sbrs	r0, 7
    1428:	fd cf       	rjmp	.-6      	; 0x1424 <rf_security_enable+0x1a>
    142a:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL1, 0x0e0e); // Encrypt / Decrypt 18 bytes into header
    142c:	40 98       	cbi	0x08, 0	; 8
    142e:	8a e1       	ldi	r24, 0x1A	; 26
    1430:	8e bd       	out	0x2e, r24	; 46
    1432:	0d b4       	in	r0, 0x2d	; 45
    1434:	07 fe       	sbrs	r0, 7
    1436:	fd cf       	rjmp	.-6      	; 0x1432 <rf_security_enable+0x28>
    1438:	8e e0       	ldi	r24, 0x0E	; 14
    143a:	8e bd       	out	0x2e, r24	; 46
    143c:	0d b4       	in	r0, 0x2d	; 45
    143e:	07 fe       	sbrs	r0, 7
    1440:	fd cf       	rjmp	.-6      	; 0x143c <rf_security_enable+0x32>
    1442:	8e e0       	ldi	r24, 0x0E	; 14
    1444:	8e bd       	out	0x2e, r24	; 46
    1446:	0d b4       	in	r0, 0x2d	; 45
    1448:	07 fe       	sbrs	r0, 7
    144a:	fd cf       	rjmp	.-6      	; 0x1446 <rf_security_enable+0x3c>
    144c:	40 9a       	sbi	0x08, 0	; 8

security_enable=1;
    144e:	81 e0       	ldi	r24, 0x01	; 1
    1450:	80 93 b6 05 	sts	0x05B6, r24
    1454:	08 95       	ret

00001456 <rf_security_disable>:



void rf_security_disable()
{
  FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security enable"
    1456:	40 98       	cbi	0x08, 0	; 8
    1458:	89 e1       	ldi	r24, 0x19	; 25
    145a:	8e bd       	out	0x2e, r24	; 46
    145c:	0d b4       	in	r0, 0x2d	; 45
    145e:	07 fe       	sbrs	r0, 7
    1460:	fd cf       	rjmp	.-6      	; 0x145c <rf_security_disable+0x6>
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	8e bd       	out	0x2e, r24	; 46
    1466:	0d b4       	in	r0, 0x2d	; 45
    1468:	07 fe       	sbrs	r0, 7
    146a:	fd cf       	rjmp	.-6      	; 0x1466 <rf_security_disable+0x10>
    146c:	84 ec       	ldi	r24, 0xC4	; 196
    146e:	8e bd       	out	0x2e, r24	; 46
    1470:	0d b4       	in	r0, 0x2d	; 45
    1472:	07 fe       	sbrs	r0, 7
    1474:	fd cf       	rjmp	.-6      	; 0x1470 <rf_security_disable+0x1a>
    1476:	40 9a       	sbi	0x08, 0	; 8
  security_enable=0;
    1478:	10 92 b6 05 	sts	0x05B6, r1
    147c:	08 95       	ret

0000147e <rf_get_sem>:
volatile uint8_t rx_ready;
//-------------------------------------------------------------------------------------------------------
nrk_sem_t* rf_get_sem()
{
return radio_sem;
}
    147e:	80 91 b4 05 	lds	r24, 0x05B4
    1482:	90 91 b5 05 	lds	r25, 0x05B5
    1486:	08 95       	ret

00001488 <rf_addr_decode_enable>:
}


void rf_addr_decode_enable()
{
    mdmctrl0 |= 0x0800;
    1488:	20 91 b7 05 	lds	r18, 0x05B7
    148c:	30 91 b8 05 	lds	r19, 0x05B8
    1490:	38 60       	ori	r19, 0x08	; 8
    1492:	30 93 b8 05 	sts	0x05B8, r19
    1496:	20 93 b7 05 	sts	0x05B7, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    149a:	40 98       	cbi	0x08, 0	; 8
    149c:	81 e1       	ldi	r24, 0x11	; 17
    149e:	8e bd       	out	0x2e, r24	; 46
    14a0:	0d b4       	in	r0, 0x2d	; 45
    14a2:	07 fe       	sbrs	r0, 7
    14a4:	fd cf       	rjmp	.-6      	; 0x14a0 <rf_addr_decode_enable+0x18>
    14a6:	83 2f       	mov	r24, r19
    14a8:	99 27       	eor	r25, r25
    14aa:	8e bd       	out	0x2e, r24	; 46
    14ac:	0d b4       	in	r0, 0x2d	; 45
    14ae:	07 fe       	sbrs	r0, 7
    14b0:	fd cf       	rjmp	.-6      	; 0x14ac <rf_addr_decode_enable+0x24>
    14b2:	2e bd       	out	0x2e, r18	; 46
    14b4:	0d b4       	in	r0, 0x2d	; 45
    14b6:	07 fe       	sbrs	r0, 7
    14b8:	fd cf       	rjmp	.-6      	; 0x14b4 <rf_addr_decode_enable+0x2c>
    14ba:	40 9a       	sbi	0x08, 0	; 8
    14bc:	08 95       	ret

000014be <rf_addr_decode_disable>:
}

void rf_addr_decode_disable()
{
    mdmctrl0 &= (~0x0800);
    14be:	20 91 b7 05 	lds	r18, 0x05B7
    14c2:	30 91 b8 05 	lds	r19, 0x05B8
    14c6:	37 7f       	andi	r19, 0xF7	; 247
    14c8:	30 93 b8 05 	sts	0x05B8, r19
    14cc:	20 93 b7 05 	sts	0x05B7, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);
    14d0:	40 98       	cbi	0x08, 0	; 8
    14d2:	81 e1       	ldi	r24, 0x11	; 17
    14d4:	8e bd       	out	0x2e, r24	; 46
    14d6:	0d b4       	in	r0, 0x2d	; 45
    14d8:	07 fe       	sbrs	r0, 7
    14da:	fd cf       	rjmp	.-6      	; 0x14d6 <rf_addr_decode_disable+0x18>
    14dc:	83 2f       	mov	r24, r19
    14de:	99 27       	eor	r25, r25
    14e0:	8e bd       	out	0x2e, r24	; 46
    14e2:	0d b4       	in	r0, 0x2d	; 45
    14e4:	07 fe       	sbrs	r0, 7
    14e6:	fd cf       	rjmp	.-6      	; 0x14e2 <rf_addr_decode_disable+0x24>
    14e8:	2e bd       	out	0x2e, r18	; 46
    14ea:	0d b4       	in	r0, 0x2d	; 45
    14ec:	07 fe       	sbrs	r0, 7
    14ee:	fd cf       	rjmp	.-6      	; 0x14ea <rf_addr_decode_disable+0x2c>
    14f0:	40 9a       	sbi	0x08, 0	; 8
    14f2:	08 95       	ret

000014f4 <rf_auto_ack_enable>:
}


void rf_auto_ack_enable()
{
    auto_ack_enable=1;
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	80 93 c4 05 	sts	0x05C4, r24
    mdmctrl0 |= 0x0010;
    14fa:	20 91 b7 05 	lds	r18, 0x05B7
    14fe:	30 91 b8 05 	lds	r19, 0x05B8
    1502:	20 61       	ori	r18, 0x10	; 16
    1504:	30 93 b8 05 	sts	0x05B8, r19
    1508:	20 93 b7 05 	sts	0x05B7, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0); 
    150c:	40 98       	cbi	0x08, 0	; 8
    150e:	81 e1       	ldi	r24, 0x11	; 17
    1510:	8e bd       	out	0x2e, r24	; 46
    1512:	0d b4       	in	r0, 0x2d	; 45
    1514:	07 fe       	sbrs	r0, 7
    1516:	fd cf       	rjmp	.-6      	; 0x1512 <rf_auto_ack_enable+0x1e>
    1518:	83 2f       	mov	r24, r19
    151a:	99 27       	eor	r25, r25
    151c:	8e bd       	out	0x2e, r24	; 46
    151e:	0d b4       	in	r0, 0x2d	; 45
    1520:	07 fe       	sbrs	r0, 7
    1522:	fd cf       	rjmp	.-6      	; 0x151e <rf_auto_ack_enable+0x2a>
    1524:	2e bd       	out	0x2e, r18	; 46
    1526:	0d b4       	in	r0, 0x2d	; 45
    1528:	07 fe       	sbrs	r0, 7
    152a:	fd cf       	rjmp	.-6      	; 0x1526 <rf_auto_ack_enable+0x32>
    152c:	40 9a       	sbi	0x08, 0	; 8
    152e:	08 95       	ret

00001530 <rf_auto_ack_disable>:
}

void rf_auto_ack_disable()
{
    auto_ack_enable=0;
    1530:	10 92 c4 05 	sts	0x05C4, r1
    mdmctrl0 &= (~0x0010);
    1534:	20 91 b7 05 	lds	r18, 0x05B7
    1538:	30 91 b8 05 	lds	r19, 0x05B8
    153c:	2f 7e       	andi	r18, 0xEF	; 239
    153e:	30 93 b8 05 	sts	0x05B8, r19
    1542:	20 93 b7 05 	sts	0x05B7, r18
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
    1546:	40 98       	cbi	0x08, 0	; 8
    1548:	81 e1       	ldi	r24, 0x11	; 17
    154a:	8e bd       	out	0x2e, r24	; 46
    154c:	0d b4       	in	r0, 0x2d	; 45
    154e:	07 fe       	sbrs	r0, 7
    1550:	fd cf       	rjmp	.-6      	; 0x154c <rf_auto_ack_disable+0x1c>
    1552:	83 2f       	mov	r24, r19
    1554:	99 27       	eor	r25, r25
    1556:	8e bd       	out	0x2e, r24	; 46
    1558:	0d b4       	in	r0, 0x2d	; 45
    155a:	07 fe       	sbrs	r0, 7
    155c:	fd cf       	rjmp	.-6      	; 0x1558 <rf_auto_ack_disable+0x28>
    155e:	2e bd       	out	0x2e, r18	; 46
    1560:	0d b4       	in	r0, 0x2d	; 45
    1562:	07 fe       	sbrs	r0, 7
    1564:	fd cf       	rjmp	.-6      	; 0x1560 <rf_auto_ack_disable+0x30>
    1566:	40 9a       	sbi	0x08, 0	; 8
    1568:	08 95       	ret

0000156a <rf_busy>:

}

uint8_t rf_busy()
{
return SFD_IS_1;
    156a:	89 b1       	in	r24, 0x09	; 9
    156c:	99 27       	eor	r25, r25
    156e:	66 e0       	ldi	r22, 0x06	; 6
    1570:	96 95       	lsr	r25
    1572:	87 95       	ror	r24
    1574:	6a 95       	dec	r22
    1576:	e1 f7       	brne	.-8      	; 0x1570 <rf_busy+0x6>
}
    1578:	81 70       	andi	r24, 0x01	; 1
    157a:	90 70       	andi	r25, 0x00	; 0
    157c:	08 95       	ret

0000157e <rf_rx_check_fifop>:

uint8_t rf_rx_check_fifop()
{
return FIFOP_IS_1;
    157e:	8c b1       	in	r24, 0x0c	; 12
    1580:	99 27       	eor	r25, r25
    1582:	87 fd       	sbrc	r24, 7
    1584:	90 95       	com	r25
}
    1586:	88 27       	eor	r24, r24
    1588:	99 0f       	add	r25, r25
    158a:	88 1f       	adc	r24, r24
    158c:	99 27       	eor	r25, r25
    158e:	08 95       	ret

00001590 <rf_rx_check_sfd>:


uint8_t rf_rx_check_sfd()
{
return SFD_IS_1;
    1590:	89 b1       	in	r24, 0x09	; 9
    1592:	99 27       	eor	r25, r25
    1594:	e6 e0       	ldi	r30, 0x06	; 6
    1596:	96 95       	lsr	r25
    1598:	87 95       	ror	r24
    159a:	ea 95       	dec	r30
    159c:	e1 f7       	brne	.-8      	; 0x1596 <rf_rx_check_sfd+0x6>
}
    159e:	81 70       	andi	r24, 0x01	; 1
    15a0:	90 70       	andi	r25, 0x00	; 0
    15a2:	08 95       	ret

000015a4 <rf_rx_packet>:
}

int8_t rf_rx_packet()
{
int8_t tmp;
if(rx_ready>0) { tmp=rx_ready; rx_ready=0; return tmp;}
    15a4:	80 91 ca 05 	lds	r24, 0x05CA
    15a8:	88 23       	and	r24, r24
    15aa:	19 f4       	brne	.+6      	; 0x15b2 <rf_rx_packet+0xe>
    15ac:	80 e0       	ldi	r24, 0x00	; 0
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	08 95       	ret
    15b2:	80 91 ca 05 	lds	r24, 0x05CA
    15b6:	10 92 ca 05 	sts	0x05CA, r1
    15ba:	99 27       	eor	r25, r25
    15bc:	87 fd       	sbrc	r24, 7
    15be:	90 95       	com	r25
return 0;
}
    15c0:	08 95       	ret

000015c2 <rf_flush_rx_fifo>:


inline void rf_flush_rx_fifo()
{
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    15c2:	40 98       	cbi	0x08, 0	; 8
    15c4:	88 e0       	ldi	r24, 0x08	; 8
    15c6:	8e bd       	out	0x2e, r24	; 46
    15c8:	0d b4       	in	r0, 0x2d	; 45
    15ca:	07 fe       	sbrs	r0, 7
    15cc:	fd cf       	rjmp	.-6      	; 0x15c8 <rf_flush_rx_fifo+0x6>
    15ce:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_STROBE(CC2420_SFLUSHRX);
    15d0:	40 98       	cbi	0x08, 0	; 8
    15d2:	88 e0       	ldi	r24, 0x08	; 8
    15d4:	8e bd       	out	0x2e, r24	; 46
    15d6:	0d b4       	in	r0, 0x2d	; 45
    15d8:	07 fe       	sbrs	r0, 7
    15da:	fd cf       	rjmp	.-6      	; 0x15d6 <rf_flush_rx_fifo+0x14>
    15dc:	40 9a       	sbi	0x08, 0	; 8
    15de:	08 95       	ret

000015e0 <rf_carrier_off>:
 * stop sending a carrier pulse; set the radio to idle state
 */
void rf_carrier_off()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    15e0:	80 91 b4 05 	lds	r24, 0x05B4
    15e4:	90 91 b5 05 	lds	r25, 0x05B5
    15e8:	0e 94 62 20 	call	0x40c4	; 0x40c4 <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); // stop radio
    15ec:	40 98       	cbi	0x08, 0	; 8
    15ee:	86 e0       	ldi	r24, 0x06	; 6
    15f0:	8e bd       	out	0x2e, r24	; 46
    15f2:	0d b4       	in	r0, 0x2d	; 45
    15f4:	07 fe       	sbrs	r0, 7
    15f6:	fd cf       	rjmp	.-6      	; 0x15f2 <rf_carrier_off+0x12>
    15f8:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    15fa:	80 91 b4 05 	lds	r24, 0x05B4
    15fe:	90 91 b5 05 	lds	r25, 0x05B5
    1602:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    1606:	08 95       	ret

00001608 <rf_carrier_on>:
 * assumes wdrf_radio_test_mode() was called before doing this
 */
void rf_carrier_on()
{
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    1608:	80 91 b4 05 	lds	r24, 0x05B4
    160c:	90 91 b5 05 	lds	r25, 0x05B5
    1610:	0e 94 62 20 	call	0x40c4	; 0x40c4 <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_STXON); // tell radio to start sending
    1614:	40 98       	cbi	0x08, 0	; 8
    1616:	84 e0       	ldi	r24, 0x04	; 4
    1618:	8e bd       	out	0x2e, r24	; 46
    161a:	0d b4       	in	r0, 0x2d	; 45
    161c:	07 fe       	sbrs	r0, 7
    161e:	fd cf       	rjmp	.-6      	; 0x161a <rf_carrier_on+0x12>
    1620:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    1622:	80 91 b4 05 	lds	r24, 0x05B4
    1626:	90 91 b5 05 	lds	r25, 0x05B5
    162a:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    162e:	08 95       	ret

00001630 <rf_data_mode>:

/**********************************************************
 * set the radio into "normal" mode (buffered TXFIFO) and go into (data) receive */
void rf_data_mode() {
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    1630:	80 91 b4 05 	lds	r24, 0x05B4
    1634:	90 91 b5 05 	lds	r25, 0x05B5
    1638:	0e 94 62 20 	call	0x40c4	; 0x40c4 <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    163c:	40 98       	cbi	0x08, 0	; 8
    163e:	86 e0       	ldi	r24, 0x06	; 6
    1640:	8e bd       	out	0x2e, r24	; 46
    1642:	0d b4       	in	r0, 0x2d	; 45
    1644:	07 fe       	sbrs	r0, 7
    1646:	fd cf       	rjmp	.-6      	; 0x1642 <rf_data_mode+0x12>
    1648:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // default MDMCTRL1 value
    164a:	40 98       	cbi	0x08, 0	; 8
    164c:	82 e1       	ldi	r24, 0x12	; 18
    164e:	8e bd       	out	0x2e, r24	; 46
    1650:	0d b4       	in	r0, 0x2d	; 45
    1652:	07 fe       	sbrs	r0, 7
    1654:	fd cf       	rjmp	.-6      	; 0x1650 <rf_data_mode+0x20>
    1656:	85 e0       	ldi	r24, 0x05	; 5
    1658:	8e bd       	out	0x2e, r24	; 46
    165a:	0d b4       	in	r0, 0x2d	; 45
    165c:	07 fe       	sbrs	r0, 7
    165e:	fd cf       	rjmp	.-6      	; 0x165a <rf_data_mode+0x2a>
    1660:	1e bc       	out	0x2e, r1	; 46
    1662:	0d b4       	in	r0, 0x2d	; 45
    1664:	07 fe       	sbrs	r0, 7
    1666:	fd cf       	rjmp	.-6      	; 0x1662 <rf_data_mode+0x32>
    1668:	40 9a       	sbi	0x08, 0	; 8
        FASTSPI_SETREG(CC2420_DACTST, 0); // default value
    166a:	40 98       	cbi	0x08, 0	; 8
    166c:	8e e2       	ldi	r24, 0x2E	; 46
    166e:	8e bd       	out	0x2e, r24	; 46
    1670:	0d b4       	in	r0, 0x2d	; 45
    1672:	07 fe       	sbrs	r0, 7
    1674:	fd cf       	rjmp	.-6      	; 0x1670 <rf_data_mode+0x40>
    1676:	1e bc       	out	0x2e, r1	; 46
    1678:	0d b4       	in	r0, 0x2d	; 45
    167a:	07 fe       	sbrs	r0, 7
    167c:	fd cf       	rjmp	.-6      	; 0x1678 <rf_data_mode+0x48>
    167e:	1e bc       	out	0x2e, r1	; 46
    1680:	0d b4       	in	r0, 0x2d	; 45
    1682:	07 fe       	sbrs	r0, 7
    1684:	fd cf       	rjmp	.-6      	; 0x1680 <rf_data_mode+0x50>
    1686:	40 9a       	sbi	0x08, 0	; 8
        rf_flush_rx_fifo();
    1688:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <rf_flush_rx_fifo>
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    168c:	80 91 b4 05 	lds	r24, 0x05B4
    1690:	90 91 b5 05 	lds	r25, 0x05B5
    1694:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    1698:	08 95       	ret

0000169a <rf_test_mode>:

void rf_test_mode()
{

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    169a:	80 91 b4 05 	lds	r24, 0x05B4
    169e:	90 91 b5 05 	lds	r25, 0x05B5
    16a2:	0e 94 62 20 	call	0x40c4	; 0x40c4 <nrk_sem_pend>
#endif
        FASTSPI_STROBE(CC2420_SRFOFF); //stop radio
    16a6:	40 98       	cbi	0x08, 0	; 8
    16a8:	86 e0       	ldi	r24, 0x06	; 6
    16aa:	8e bd       	out	0x2e, r24	; 46
    16ac:	0d b4       	in	r0, 0x2d	; 45
    16ae:	07 fe       	sbrs	r0, 7
    16b0:	fd cf       	rjmp	.-6      	; 0x16ac <rf_test_mode+0x12>
    16b2:	40 9a       	sbi	0x08, 0	; 8
	// RF studio" uses TX_MODE=3 (CC2420_MDMCTRL1=0x050C)
	// to send an unmodulated carrier; data sheet says TX_MODE 
	// can be 2 or 3. So it should not matter...
	// HOWEVER, using (TX_MODE=3) sometimes causes problems when 
	// going back to "data" mode!
	FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0508); // MDMCTRL1 with TX_MODE=2
    16b4:	40 98       	cbi	0x08, 0	; 8
    16b6:	82 e1       	ldi	r24, 0x12	; 18
    16b8:	8e bd       	out	0x2e, r24	; 46
    16ba:	0d b4       	in	r0, 0x2d	; 45
    16bc:	07 fe       	sbrs	r0, 7
    16be:	fd cf       	rjmp	.-6      	; 0x16ba <rf_test_mode+0x20>
    16c0:	85 e0       	ldi	r24, 0x05	; 5
    16c2:	8e bd       	out	0x2e, r24	; 46
    16c4:	0d b4       	in	r0, 0x2d	; 45
    16c6:	07 fe       	sbrs	r0, 7
    16c8:	fd cf       	rjmp	.-6      	; 0x16c4 <rf_test_mode+0x2a>
    16ca:	88 e0       	ldi	r24, 0x08	; 8
    16cc:	8e bd       	out	0x2e, r24	; 46
    16ce:	0d b4       	in	r0, 0x2d	; 45
    16d0:	07 fe       	sbrs	r0, 7
    16d2:	fd cf       	rjmp	.-6      	; 0x16ce <rf_test_mode+0x34>
    16d4:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_SETREG(CC2420_DACTST, 0x1800); // send unmodulated carrier
    16d6:	40 98       	cbi	0x08, 0	; 8
    16d8:	8e e2       	ldi	r24, 0x2E	; 46
    16da:	8e bd       	out	0x2e, r24	; 46
    16dc:	0d b4       	in	r0, 0x2d	; 45
    16de:	07 fe       	sbrs	r0, 7
    16e0:	fd cf       	rjmp	.-6      	; 0x16dc <rf_test_mode+0x42>
    16e2:	88 e1       	ldi	r24, 0x18	; 24
    16e4:	8e bd       	out	0x2e, r24	; 46
    16e6:	0d b4       	in	r0, 0x2d	; 45
    16e8:	07 fe       	sbrs	r0, 7
    16ea:	fd cf       	rjmp	.-6      	; 0x16e6 <rf_test_mode+0x4c>
    16ec:	1e bc       	out	0x2e, r1	; 46
    16ee:	0d b4       	in	r0, 0x2d	; 45
    16f0:	07 fe       	sbrs	r0, 7
    16f2:	fd cf       	rjmp	.-6      	; 0x16ee <rf_test_mode+0x54>
    16f4:	40 9a       	sbi	0x08, 0	; 8
	rf_flush_rx_fifo();
    16f6:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <rf_flush_rx_fifo>

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    16fa:	80 91 b4 05 	lds	r24, 0x05B4
    16fe:	90 91 b5 05 	lds	r25, 0x05B5
    1702:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    1706:	08 95       	ret

00001708 <rf_set_cca_thresh>:
        FASTSPI_STROBE(CC2420_SFLUSHRX);
        FASTSPI_STROBE(CC2420_SFLUSHRX);
}

void rf_set_cca_thresh(int8_t t)
{
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	08 2f       	mov	r16, r24
// default is -32
// Higher number is less sensitive
uint16_t val;
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    170e:	80 91 b4 05 	lds	r24, 0x05B4
    1712:	90 91 b5 05 	lds	r25, 0x05B5
    1716:	0e 94 62 20 	call	0x40c4	; 0x40c4 <nrk_sem_pend>
#endif

val=(t<<8) | 0x80;
    171a:	11 27       	eor	r17, r17
    171c:	07 fd       	sbrc	r16, 7
    171e:	10 95       	com	r17
    1720:	30 2f       	mov	r19, r16
    1722:	22 27       	eor	r18, r18
    1724:	20 68       	ori	r18, 0x80	; 128
FASTSPI_SETREG(CC2420_RSSI, val); 
    1726:	40 98       	cbi	0x08, 0	; 8
    1728:	83 e1       	ldi	r24, 0x13	; 19
    172a:	8e bd       	out	0x2e, r24	; 46
    172c:	0d b4       	in	r0, 0x2d	; 45
    172e:	07 fe       	sbrs	r0, 7
    1730:	fd cf       	rjmp	.-6      	; 0x172c <rf_set_cca_thresh+0x24>
    1732:	83 2f       	mov	r24, r19
    1734:	99 27       	eor	r25, r25
    1736:	8e bd       	out	0x2e, r24	; 46
    1738:	0d b4       	in	r0, 0x2d	; 45
    173a:	07 fe       	sbrs	r0, 7
    173c:	fd cf       	rjmp	.-6      	; 0x1738 <rf_set_cca_thresh+0x30>
    173e:	2e bd       	out	0x2e, r18	; 46
    1740:	0d b4       	in	r0, 0x2d	; 45
    1742:	07 fe       	sbrs	r0, 7
    1744:	fd cf       	rjmp	.-6      	; 0x1740 <rf_set_cca_thresh+0x38>
    1746:	40 9a       	sbi	0x08, 0	; 8

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    1748:	80 91 b4 05 	lds	r24, 0x05B4
    174c:	90 91 b5 05 	lds	r25, 0x05B5
    1750:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    1754:	1f 91       	pop	r17
    1756:	0f 91       	pop	r16
    1758:	08 95       	ret

0000175a <rf_polling_rx_packet>:
return SFD_IS_1;
}
uint16_t tmp_blah;

int8_t rf_polling_rx_packet()
{
    175a:	cf 93       	push	r28
    175c:	df 93       	push	r29
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
    1762:	24 97       	sbiw	r28, 0x04	; 4
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	de bf       	out	0x3e, r29	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	cd bf       	out	0x3d, r28	; 61
uint8_t tmp;
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    176e:	80 91 b4 05 	lds	r24, 0x05B4
    1772:	90 91 b5 05 	lds	r25, 0x05B5
    1776:	0e 94 62 20 	call	0x40c4	; 0x40c4 <nrk_sem_pend>
#endif

    if(FIFOP_IS_1 )
    177a:	67 9b       	sbis	0x0c, 7	; 12
    177c:	34 c2       	rjmp	.+1128   	; 0x1be6 <rf_polling_rx_packet+0x48c>
	uint16_t frameControlField;
	int8_t length;
	uint8_t pFooter[2];
	uint8_t checksum,rx_checksum,i;
			
	last_pkt_encrypted=0;
    177e:	10 92 c5 05 	sts	0x05C5, r1
    
//	while(!SFD_IS_1);
//  XXX Need to make sure SFD has gone down to be sure packet finished!
//	while(SFD_IS_1);
    // Clean up and exit in case of FIFO overflow, which is indicated by FIFOP = 1 and FIFO = 0
	if((FIFOP_IS_1) && (!(FIFO_IS_1))) {	   
    1782:	67 9b       	sbis	0x0c, 7	; 12
    1784:	25 c0       	rjmp	.+74     	; 0x17d0 <rf_polling_rx_packet+0x76>
    1786:	31 99       	sbic	0x06, 1	; 6
    1788:	23 c0       	rjmp	.+70     	; 0x17d0 <rf_polling_rx_packet+0x76>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    178a:	40 98       	cbi	0x08, 0	; 8
    178c:	8f e7       	ldi	r24, 0x7F	; 127
    178e:	8e bd       	out	0x2e, r24	; 46
    1790:	0d b4       	in	r0, 0x2d	; 45
    1792:	07 fe       	sbrs	r0, 7
    1794:	fd cf       	rjmp	.-6      	; 0x1790 <rf_polling_rx_packet+0x36>
    1796:	1e bc       	out	0x2e, r1	; 46
    1798:	0d b4       	in	r0, 0x2d	; 45
    179a:	07 fe       	sbrs	r0, 7
    179c:	fd cf       	rjmp	.-6      	; 0x1798 <rf_polling_rx_packet+0x3e>
    179e:	8e b5       	in	r24, 0x2e	; 46
    17a0:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    17a2:	40 98       	cbi	0x08, 0	; 8
    17a4:	88 e0       	ldi	r24, 0x08	; 8
    17a6:	8e bd       	out	0x2e, r24	; 46
    17a8:	0d b4       	in	r0, 0x2d	; 45
    17aa:	07 fe       	sbrs	r0, 7
    17ac:	fd cf       	rjmp	.-6      	; 0x17a8 <rf_polling_rx_packet+0x4e>
    17ae:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    17b0:	40 98       	cbi	0x08, 0	; 8
    17b2:	88 e0       	ldi	r24, 0x08	; 8
    17b4:	8e bd       	out	0x2e, r24	; 46
    17b6:	0d b4       	in	r0, 0x2d	; 45
    17b8:	07 fe       	sbrs	r0, 7
    17ba:	fd cf       	rjmp	.-6      	; 0x17b6 <rf_polling_rx_packet+0x5c>
    17bc:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    17be:	80 91 b4 05 	lds	r24, 0x05B4
    17c2:	90 91 b5 05 	lds	r25, 0x05B5
    17c6:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    17ca:	8f ef       	ldi	r24, 0xFF	; 255
    17cc:	9f ef       	ldi	r25, 0xFF	; 255
    17ce:	13 c2       	rjmp	.+1062   	; 0x1bf6 <rf_polling_rx_packet+0x49c>
#endif
	    return -1;
	}

	// Payload length
	FASTSPI_READ_FIFO_BYTE(length);
    17d0:	40 98       	cbi	0x08, 0	; 8
    17d2:	8f e7       	ldi	r24, 0x7F	; 127
    17d4:	8e bd       	out	0x2e, r24	; 46
    17d6:	0d b4       	in	r0, 0x2d	; 45
    17d8:	07 fe       	sbrs	r0, 7
    17da:	fd cf       	rjmp	.-6      	; 0x17d6 <rf_polling_rx_packet+0x7c>
    17dc:	1e bc       	out	0x2e, r1	; 46
    17de:	0d b4       	in	r0, 0x2d	; 45
    17e0:	07 fe       	sbrs	r0, 7
    17e2:	fd cf       	rjmp	.-6      	; 0x17de <rf_polling_rx_packet+0x84>
    17e4:	4e b5       	in	r20, 0x2e	; 46
    17e6:	40 9a       	sbi	0x08, 0	; 8
	length &= RF_LENGTH_MASK; // Ignore MSB
    17e8:	4f 77       	andi	r20, 0x7F	; 127
    // Ignore the packet if the length is too short
    if(length==0){  
    17ea:	19 f5       	brne	.+70     	; 0x1832 <rf_polling_rx_packet+0xd8>
	    // always read 1 byte before flush (data sheet pg 62)
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    17ec:	40 98       	cbi	0x08, 0	; 8
    17ee:	8f e7       	ldi	r24, 0x7F	; 127
    17f0:	8e bd       	out	0x2e, r24	; 46
    17f2:	0d b4       	in	r0, 0x2d	; 45
    17f4:	07 fe       	sbrs	r0, 7
    17f6:	fd cf       	rjmp	.-6      	; 0x17f2 <rf_polling_rx_packet+0x98>
    17f8:	1e bc       	out	0x2e, r1	; 46
    17fa:	0d b4       	in	r0, 0x2d	; 45
    17fc:	07 fe       	sbrs	r0, 7
    17fe:	fd cf       	rjmp	.-6      	; 0x17fa <rf_polling_rx_packet+0xa0>
    1800:	8e b5       	in	r24, 0x2e	; 46
    1802:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1804:	40 98       	cbi	0x08, 0	; 8
    1806:	88 e0       	ldi	r24, 0x08	; 8
    1808:	8e bd       	out	0x2e, r24	; 46
    180a:	0d b4       	in	r0, 0x2d	; 45
    180c:	07 fe       	sbrs	r0, 7
    180e:	fd cf       	rjmp	.-6      	; 0x180a <rf_polling_rx_packet+0xb0>
    1810:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1812:	40 98       	cbi	0x08, 0	; 8
    1814:	88 e0       	ldi	r24, 0x08	; 8
    1816:	8e bd       	out	0x2e, r24	; 46
    1818:	0d b4       	in	r0, 0x2d	; 45
    181a:	07 fe       	sbrs	r0, 7
    181c:	fd cf       	rjmp	.-6      	; 0x1818 <rf_polling_rx_packet+0xbe>
    181e:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    1820:	80 91 b4 05 	lds	r24, 0x05B4
    1824:	90 91 b5 05 	lds	r25, 0x05B5
    1828:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    182c:	8e ef       	ldi	r24, 0xFE	; 254
    182e:	9f ef       	ldi	r25, 0xFF	; 255
    1830:	e2 c1       	rjmp	.+964    	; 0x1bf6 <rf_polling_rx_packet+0x49c>
#endif
	return -2;
	}
    if (length < RF_ACK_PACKET_SIZE || (length-RF_PACKET_OVERHEAD_SIZE)> rfSettings.pRxInfo->max_length) {
    1832:	45 30       	cpi	r20, 0x05	; 5
    1834:	8c f0       	brlt	.+34     	; 0x1858 <rf_polling_rx_packet+0xfe>
    1836:	e0 91 b9 05 	lds	r30, 0x05B9
    183a:	f0 91 ba 05 	lds	r31, 0x05BA
    183e:	24 2f       	mov	r18, r20
    1840:	33 27       	eor	r19, r19
    1842:	27 fd       	sbrc	r18, 7
    1844:	30 95       	com	r19
    1846:	2b 50       	subi	r18, 0x0B	; 11
    1848:	30 40       	sbci	r19, 0x00	; 0
    184a:	84 81       	ldd	r24, Z+4	; 0x04
    184c:	99 27       	eor	r25, r25
    184e:	87 fd       	sbrc	r24, 7
    1850:	90 95       	com	r25
    1852:	82 17       	cp	r24, r18
    1854:	93 07       	cpc	r25, r19
    1856:	f4 f5       	brge	.+124    	; 0x18d4 <rf_polling_rx_packet+0x17a>
    	FASTSPI_READ_FIFO_GARBAGE(length);
    1858:	40 98       	cbi	0x08, 0	; 8
    185a:	8f e7       	ldi	r24, 0x7F	; 127
    185c:	8e bd       	out	0x2e, r24	; 46
    185e:	0d b4       	in	r0, 0x2d	; 45
    1860:	07 fe       	sbrs	r0, 7
    1862:	fd cf       	rjmp	.-6      	; 0x185e <rf_polling_rx_packet+0x104>
    1864:	60 e0       	ldi	r22, 0x00	; 0
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	24 2f       	mov	r18, r20
    186a:	33 27       	eor	r19, r19
    186c:	27 fd       	sbrc	r18, 7
    186e:	30 95       	com	r19
    1870:	06 c0       	rjmp	.+12     	; 0x187e <rf_polling_rx_packet+0x124>
    1872:	1e bc       	out	0x2e, r1	; 46
    1874:	0d b4       	in	r0, 0x2d	; 45
    1876:	07 fe       	sbrs	r0, 7
    1878:	fd cf       	rjmp	.-6      	; 0x1874 <rf_polling_rx_packet+0x11a>
    187a:	6f 5f       	subi	r22, 0xFF	; 255
    187c:	7f 4f       	sbci	r23, 0xFF	; 255
    187e:	86 2f       	mov	r24, r22
    1880:	99 27       	eor	r25, r25
    1882:	82 17       	cp	r24, r18
    1884:	93 07       	cpc	r25, r19
    1886:	14 f4       	brge	.+4      	; 0x188c <rf_polling_rx_packet+0x132>
    1888:	31 99       	sbic	0x06, 1	; 6
    188a:	f3 cf       	rjmp	.-26     	; 0x1872 <rf_polling_rx_packet+0x118>
    188c:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_READ_FIFO_BYTE(tmp);  
    188e:	40 98       	cbi	0x08, 0	; 8
    1890:	8f e7       	ldi	r24, 0x7F	; 127
    1892:	8e bd       	out	0x2e, r24	; 46
    1894:	0d b4       	in	r0, 0x2d	; 45
    1896:	07 fe       	sbrs	r0, 7
    1898:	fd cf       	rjmp	.-6      	; 0x1894 <rf_polling_rx_packet+0x13a>
    189a:	1e bc       	out	0x2e, r1	; 46
    189c:	0d b4       	in	r0, 0x2d	; 45
    189e:	07 fe       	sbrs	r0, 7
    18a0:	fd cf       	rjmp	.-6      	; 0x189c <rf_polling_rx_packet+0x142>
    18a2:	8e b5       	in	r24, 0x2e	; 46
    18a4:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    18a6:	40 98       	cbi	0x08, 0	; 8
    18a8:	88 e0       	ldi	r24, 0x08	; 8
    18aa:	8e bd       	out	0x2e, r24	; 46
    18ac:	0d b4       	in	r0, 0x2d	; 45
    18ae:	07 fe       	sbrs	r0, 7
    18b0:	fd cf       	rjmp	.-6      	; 0x18ac <rf_polling_rx_packet+0x152>
    18b2:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    18b4:	40 98       	cbi	0x08, 0	; 8
    18b6:	88 e0       	ldi	r24, 0x08	; 8
    18b8:	8e bd       	out	0x2e, r24	; 46
    18ba:	0d b4       	in	r0, 0x2d	; 45
    18bc:	07 fe       	sbrs	r0, 7
    18be:	fd cf       	rjmp	.-6      	; 0x18ba <rf_polling_rx_packet+0x160>
    18c0:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    nrk_sem_post(radio_sem);
    18c2:	80 91 b4 05 	lds	r24, 0x05B4
    18c6:	90 91 b5 05 	lds	r25, 0x05B5
    18ca:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    18ce:	8d ef       	ldi	r24, 0xFD	; 253
    18d0:	9f ef       	ldi	r25, 0xFF	; 255
    18d2:	91 c1       	rjmp	.+802    	; 0x1bf6 <rf_polling_rx_packet+0x49c>
	return -3;
	//printf_u( "Bad length: %d %d\n",length, rfSettings.pRxInfo->max_length );
    // Otherwise, if the length is valid, then proceed with the rest of the packet
    } else {
        // Register the payload length
        rfSettings.pRxInfo->length = length - RF_PACKET_OVERHEAD_SIZE - CHECKSUM_OVERHEAD;
    18d4:	e0 91 b9 05 	lds	r30, 0x05B9
    18d8:	f0 91 ba 05 	lds	r31, 0x05BA
    18dc:	4c 50       	subi	r20, 0x0C	; 12
    18de:	43 83       	std	Z+3, r20	; 0x03
        // Read the frame control field and the data sequence number
        FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &frameControlField, 2);
    18e0:	40 98       	cbi	0x08, 0	; 8
    18e2:	8f e7       	ldi	r24, 0x7F	; 127
    18e4:	8e bd       	out	0x2e, r24	; 46
    18e6:	0d b4       	in	r0, 0x2d	; 45
    18e8:	07 fe       	sbrs	r0, 7
    18ea:	fd cf       	rjmp	.-6      	; 0x18e6 <rf_polling_rx_packet+0x18c>
    18ec:	fe 01       	movw	r30, r28
    18ee:	31 96       	adiw	r30, 0x01	; 1
    18f0:	9e 01       	movw	r18, r28
    18f2:	2d 5f       	subi	r18, 0xFD	; 253
    18f4:	3f 4f       	sbci	r19, 0xFF	; 255
    18f6:	1e bc       	out	0x2e, r1	; 46
    18f8:	0d b4       	in	r0, 0x2d	; 45
    18fa:	07 fe       	sbrs	r0, 7
    18fc:	fd cf       	rjmp	.-6      	; 0x18f8 <rf_polling_rx_packet+0x19e>
    18fe:	8e b5       	in	r24, 0x2e	; 46
    1900:	81 93       	st	Z+, r24
    1902:	e2 17       	cp	r30, r18
    1904:	f3 07       	cpc	r31, r19
    1906:	b9 f7       	brne	.-18     	; 0x18f6 <rf_polling_rx_packet+0x19c>
    1908:	40 9a       	sbi	0x08, 0	; 8
        rfSettings.pRxInfo->ackRequest = !!(frameControlField & RF_FCF_ACK_BM);
    190a:	e0 91 b9 05 	lds	r30, 0x05B9
    190e:	f0 91 ba 05 	lds	r31, 0x05BA
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	9a 81       	ldd	r25, Y+2	; 0x02
    1916:	b5 e0       	ldi	r27, 0x05	; 5
    1918:	96 95       	lsr	r25
    191a:	87 95       	ror	r24
    191c:	ba 95       	dec	r27
    191e:	e1 f7       	brne	.-8      	; 0x1918 <rf_polling_rx_packet+0x1be>
    1920:	81 70       	andi	r24, 0x01	; 1
    1922:	87 83       	std	Z+7, r24	; 0x07
    	FASTSPI_READ_FIFO_BYTE(rfSettings.pRxInfo->seqNumber);
    1924:	40 98       	cbi	0x08, 0	; 8
    1926:	8f e7       	ldi	r24, 0x7F	; 127
    1928:	8e bd       	out	0x2e, r24	; 46
    192a:	0d b4       	in	r0, 0x2d	; 45
    192c:	07 fe       	sbrs	r0, 7
    192e:	fd cf       	rjmp	.-6      	; 0x192a <rf_polling_rx_packet+0x1d0>
    1930:	1e bc       	out	0x2e, r1	; 46
    1932:	0d b4       	in	r0, 0x2d	; 45
    1934:	07 fe       	sbrs	r0, 7
    1936:	fd cf       	rjmp	.-6      	; 0x1932 <rf_polling_rx_packet+0x1d8>
    1938:	e0 91 b9 05 	lds	r30, 0x05B9
    193c:	f0 91 ba 05 	lds	r31, 0x05BA
    1940:	8e b5       	in	r24, 0x2e	; 46
    1942:	80 83       	st	Z, r24
    1944:	40 9a       	sbi	0x08, 0	; 8

		// Receive the rest of the packet
		} else {
*/
			// Skip the destination PAN and address (that's taken care of by harware address recognition!)
		FASTSPI_READ_FIFO_GARBAGE(4);
    1946:	40 98       	cbi	0x08, 0	; 8
    1948:	8f e7       	ldi	r24, 0x7F	; 127
    194a:	8e bd       	out	0x2e, r24	; 46
    194c:	0d b4       	in	r0, 0x2d	; 45
    194e:	07 fe       	sbrs	r0, 7
    1950:	fd cf       	rjmp	.-6      	; 0x194c <rf_polling_rx_packet+0x1f2>
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	07 c0       	rjmp	.+14     	; 0x1964 <rf_polling_rx_packet+0x20a>
    1956:	1e bc       	out	0x2e, r1	; 46
    1958:	0d b4       	in	r0, 0x2d	; 45
    195a:	07 fe       	sbrs	r0, 7
    195c:	fd cf       	rjmp	.-6      	; 0x1958 <rf_polling_rx_packet+0x1fe>
    195e:	8f 5f       	subi	r24, 0xFF	; 255
    1960:	84 30       	cpi	r24, 0x04	; 4
    1962:	11 f0       	breq	.+4      	; 0x1968 <rf_polling_rx_packet+0x20e>
    1964:	31 99       	sbic	0x06, 1	; 6
    1966:	f7 cf       	rjmp	.-18     	; 0x1956 <rf_polling_rx_packet+0x1fc>
    1968:	40 9a       	sbi	0x08, 0	; 8

			// Read the source address
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rfSettings.pRxInfo->srcAddr, 2);
    196a:	40 98       	cbi	0x08, 0	; 8
    196c:	8f e7       	ldi	r24, 0x7F	; 127
    196e:	8e bd       	out	0x2e, r24	; 46
    1970:	0d b4       	in	r0, 0x2d	; 45
    1972:	07 fe       	sbrs	r0, 7
    1974:	fd cf       	rjmp	.-6      	; 0x1970 <rf_polling_rx_packet+0x216>
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	1e bc       	out	0x2e, r1	; 46
    197c:	0d b4       	in	r0, 0x2d	; 45
    197e:	07 fe       	sbrs	r0, 7
    1980:	fd cf       	rjmp	.-6      	; 0x197c <rf_polling_rx_packet+0x222>
    1982:	e0 91 b9 05 	lds	r30, 0x05B9
    1986:	f0 91 ba 05 	lds	r31, 0x05BA
    198a:	e2 0f       	add	r30, r18
    198c:	f3 1f       	adc	r31, r19
    198e:	8e b5       	in	r24, 0x2e	; 46
    1990:	81 83       	std	Z+1, r24	; 0x01
    1992:	2f 5f       	subi	r18, 0xFF	; 255
    1994:	3f 4f       	sbci	r19, 0xFF	; 255
    1996:	22 30       	cpi	r18, 0x02	; 2
    1998:	31 05       	cpc	r19, r1
    199a:	79 f7       	brne	.-34     	; 0x197a <rf_polling_rx_packet+0x220>
    199c:	40 9a       	sbi	0x08, 0	; 8

		        if(frameControlField & RF_SEC_BM)
    199e:	89 81       	ldd	r24, Y+1	; 0x01
    19a0:	9a 81       	ldd	r25, Y+2	; 0x02
    19a2:	83 ff       	sbrs	r24, 3
    19a4:	56 c0       	rjmp	.+172    	; 0x1a52 <rf_polling_rx_packet+0x2f8>
			{
				uint8_t n;
				// READ rx_ctr and set it
				FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) &rx_ctr, 4);
    19a6:	40 98       	cbi	0x08, 0	; 8
    19a8:	8f e7       	ldi	r24, 0x7F	; 127
    19aa:	8e bd       	out	0x2e, r24	; 46
    19ac:	0d b4       	in	r0, 0x2d	; 45
    19ae:	07 fe       	sbrs	r0, 7
    19b0:	fd cf       	rjmp	.-6      	; 0x19ac <rf_polling_rx_packet+0x252>
    19b2:	e0 eb       	ldi	r30, 0xB0	; 176
    19b4:	f5 e0       	ldi	r31, 0x05	; 5
    19b6:	1e bc       	out	0x2e, r1	; 46
    19b8:	0d b4       	in	r0, 0x2d	; 45
    19ba:	07 fe       	sbrs	r0, 7
    19bc:	fd cf       	rjmp	.-6      	; 0x19b8 <rf_polling_rx_packet+0x25e>
    19be:	8e b5       	in	r24, 0x2e	; 46
    19c0:	81 93       	st	Z+, r24
    19c2:	85 e0       	ldi	r24, 0x05	; 5
    19c4:	e4 3b       	cpi	r30, 0xB4	; 180
    19c6:	f8 07       	cpc	r31, r24
    19c8:	b1 f7       	brne	.-20     	; 0x19b6 <rf_polling_rx_packet+0x25c>
    19ca:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[0],(CC2420RAM_RXNONCE+9),2,n); 
    19cc:	40 98       	cbi	0x08, 0	; 8
    19ce:	89 e9       	ldi	r24, 0x99	; 153
    19d0:	8e bd       	out	0x2e, r24	; 46
    19d2:	0d b4       	in	r0, 0x2d	; 45
    19d4:	07 fe       	sbrs	r0, 7
    19d6:	fd cf       	rjmp	.-6      	; 0x19d2 <rf_polling_rx_packet+0x278>
    19d8:	80 e8       	ldi	r24, 0x80	; 128
    19da:	8e bd       	out	0x2e, r24	; 46
    19dc:	0d b4       	in	r0, 0x2d	; 45
    19de:	07 fe       	sbrs	r0, 7
    19e0:	fd cf       	rjmp	.-6      	; 0x19dc <rf_polling_rx_packet+0x282>
    19e2:	92 e0       	ldi	r25, 0x02	; 2
    19e4:	91 50       	subi	r25, 0x01	; 1
    19e6:	e9 2f       	mov	r30, r25
    19e8:	ff 27       	eor	r31, r31
    19ea:	e0 55       	subi	r30, 0x50	; 80
    19ec:	fa 4f       	sbci	r31, 0xFA	; 250
    19ee:	80 81       	ld	r24, Z
    19f0:	8e bd       	out	0x2e, r24	; 46
    19f2:	0d b4       	in	r0, 0x2d	; 45
    19f4:	07 fe       	sbrs	r0, 7
    19f6:	fd cf       	rjmp	.-6      	; 0x19f2 <rf_polling_rx_packet+0x298>
    19f8:	99 23       	and	r25, r25
    19fa:	a1 f7       	brne	.-24     	; 0x19e4 <rf_polling_rx_packet+0x28a>
    19fc:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_WRITE_RAM(&rx_ctr[2],(CC2420RAM_RXNONCE+11),2,n); 
    19fe:	40 98       	cbi	0x08, 0	; 8
    1a00:	8b e9       	ldi	r24, 0x9B	; 155
    1a02:	8e bd       	out	0x2e, r24	; 46
    1a04:	0d b4       	in	r0, 0x2d	; 45
    1a06:	07 fe       	sbrs	r0, 7
    1a08:	fd cf       	rjmp	.-6      	; 0x1a04 <rf_polling_rx_packet+0x2aa>
    1a0a:	80 e8       	ldi	r24, 0x80	; 128
    1a0c:	8e bd       	out	0x2e, r24	; 46
    1a0e:	0d b4       	in	r0, 0x2d	; 45
    1a10:	07 fe       	sbrs	r0, 7
    1a12:	fd cf       	rjmp	.-6      	; 0x1a0e <rf_polling_rx_packet+0x2b4>
    1a14:	92 e0       	ldi	r25, 0x02	; 2
    1a16:	91 50       	subi	r25, 0x01	; 1
    1a18:	e9 2f       	mov	r30, r25
    1a1a:	ff 27       	eor	r31, r31
    1a1c:	ee 54       	subi	r30, 0x4E	; 78
    1a1e:	fa 4f       	sbci	r31, 0xFA	; 250
    1a20:	80 81       	ld	r24, Z
    1a22:	8e bd       	out	0x2e, r24	; 46
    1a24:	0d b4       	in	r0, 0x2d	; 45
    1a26:	07 fe       	sbrs	r0, 7
    1a28:	fd cf       	rjmp	.-6      	; 0x1a24 <rf_polling_rx_packet+0x2ca>
    1a2a:	99 23       	and	r25, r25
    1a2c:	a1 f7       	brne	.-24     	; 0x1a16 <rf_polling_rx_packet+0x2bc>
    1a2e:	40 9a       	sbi	0x08, 0	; 8
				FASTSPI_STROBE(CC2420_SRXDEC);  // if packet is encrypted then decrypt 
    1a30:	40 98       	cbi	0x08, 0	; 8
    1a32:	8c e0       	ldi	r24, 0x0C	; 12
    1a34:	8e bd       	out	0x2e, r24	; 46
    1a36:	0d b4       	in	r0, 0x2d	; 45
    1a38:	07 fe       	sbrs	r0, 7
    1a3a:	fd cf       	rjmp	.-6      	; 0x1a36 <rf_polling_rx_packet+0x2dc>
    1a3c:	40 9a       	sbi	0x08, 0	; 8
				last_pkt_encrypted=1;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	80 93 c5 05 	sts	0x05C5, r24
        			rfSettings.pRxInfo->length -= 4;
    1a44:	e0 91 b9 05 	lds	r30, 0x05B9
    1a48:	f0 91 ba 05 	lds	r31, 0x05BA
    1a4c:	83 81       	ldd	r24, Z+3	; 0x03
    1a4e:	84 50       	subi	r24, 0x04	; 4
    1a50:	83 83       	std	Z+3, r24	; 0x03
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
    1a52:	40 98       	cbi	0x08, 0	; 8
    1a54:	8f e7       	ldi	r24, 0x7F	; 127
    1a56:	8e bd       	out	0x2e, r24	; 46
    1a58:	0d b4       	in	r0, 0x2d	; 45
    1a5a:	07 fe       	sbrs	r0, 7
    1a5c:	fd cf       	rjmp	.-6      	; 0x1a58 <rf_polling_rx_packet+0x2fe>
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	11 c0       	rjmp	.+34     	; 0x1a86 <rf_polling_rx_packet+0x32c>
    1a64:	1e bc       	out	0x2e, r1	; 46
    1a66:	0d b4       	in	r0, 0x2d	; 45
    1a68:	07 fe       	sbrs	r0, 7
    1a6a:	fd cf       	rjmp	.-6      	; 0x1a66 <rf_polling_rx_packet+0x30c>
    1a6c:	e0 91 b9 05 	lds	r30, 0x05B9
    1a70:	f0 91 ba 05 	lds	r31, 0x05BA
    1a74:	05 80       	ldd	r0, Z+5	; 0x05
    1a76:	f6 81       	ldd	r31, Z+6	; 0x06
    1a78:	e0 2d       	mov	r30, r0
    1a7a:	e6 0f       	add	r30, r22
    1a7c:	f1 1d       	adc	r31, r1
    1a7e:	8e b5       	in	r24, 0x2e	; 46
    1a80:	80 83       	st	Z, r24
    1a82:	4f 5f       	subi	r20, 0xFF	; 255
    1a84:	5f 4f       	sbci	r21, 0xFF	; 255
    1a86:	64 2f       	mov	r22, r20
    1a88:	e0 91 b9 05 	lds	r30, 0x05B9
    1a8c:	f0 91 ba 05 	lds	r31, 0x05BA
    1a90:	24 2f       	mov	r18, r20
    1a92:	33 27       	eor	r19, r19
    1a94:	83 81       	ldd	r24, Z+3	; 0x03
    1a96:	99 27       	eor	r25, r25
    1a98:	87 fd       	sbrc	r24, 7
    1a9a:	90 95       	com	r25
    1a9c:	28 17       	cp	r18, r24
    1a9e:	39 07       	cpc	r19, r25
    1aa0:	0c f3       	brlt	.-62     	; 0x1a64 <rf_polling_rx_packet+0x30a>
    1aa2:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    1aa4:	40 98       	cbi	0x08, 0	; 8
    1aa6:	8f e7       	ldi	r24, 0x7F	; 127
    1aa8:	8e bd       	out	0x2e, r24	; 46
    1aaa:	0d b4       	in	r0, 0x2d	; 45
    1aac:	07 fc       	sbrc	r0, 7
    1aae:	0a c0       	rjmp	.+20     	; 0x1ac4 <rf_polling_rx_packet+0x36a>
    1ab0:	fc cf       	rjmp	.-8      	; 0x1aaa <rf_polling_rx_packet+0x350>
    1ab2:	0d b4       	in	r0, 0x2d	; 45
    1ab4:	07 fe       	sbrs	r0, 7
    1ab6:	fd cf       	rjmp	.-6      	; 0x1ab2 <rf_polling_rx_packet+0x358>
    1ab8:	5e b5       	in	r21, 0x2e	; 46
    1aba:	40 9a       	sbi	0x08, 0	; 8

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    1abc:	40 98       	cbi	0x08, 0	; 8
    1abe:	8f e7       	ldi	r24, 0x7F	; 127
    1ac0:	8e bd       	out	0x2e, r24	; 46
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <rf_polling_rx_packet+0x36e>
        			rfSettings.pRxInfo->length -= 4;
			}
	
			// Read the packet payload
			FASTSPI_READ_FIFO_NO_WAIT(rfSettings.pRxInfo->pPayload, rfSettings.pRxInfo->length);
			FASTSPI_READ_FIFO_NO_WAIT(&rx_checksum, 1 );
    1ac4:	1e bc       	out	0x2e, r1	; 46
    1ac6:	f5 cf       	rjmp	.-22     	; 0x1ab2 <rf_polling_rx_packet+0x358>

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
    1ac8:	0d b4       	in	r0, 0x2d	; 45
    1aca:	07 fe       	sbrs	r0, 7
    1acc:	fd cf       	rjmp	.-6      	; 0x1ac8 <rf_polling_rx_packet+0x36e>
    1ace:	fe 01       	movw	r30, r28
    1ad0:	33 96       	adiw	r30, 0x03	; 3
    1ad2:	9e 01       	movw	r18, r28
    1ad4:	2b 5f       	subi	r18, 0xFB	; 251
    1ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ad8:	1e bc       	out	0x2e, r1	; 46
    1ada:	0d b4       	in	r0, 0x2d	; 45
    1adc:	07 fe       	sbrs	r0, 7
    1ade:	fd cf       	rjmp	.-6      	; 0x1ada <rf_polling_rx_packet+0x380>
    1ae0:	8e b5       	in	r24, 0x2e	; 46
    1ae2:	81 93       	st	Z+, r24
    1ae4:	e2 17       	cp	r30, r18
    1ae6:	f3 07       	cpc	r31, r19
    1ae8:	b9 f7       	brne	.-18     	; 0x1ad8 <rf_polling_rx_packet+0x37e>
    1aea:	40 9a       	sbi	0x08, 0	; 8
			rfSettings.pRxInfo->rssi = pFooter[0];
    1aec:	e0 91 b9 05 	lds	r30, 0x05B9
    1af0:	f0 91 ba 05 	lds	r31, 0x05BA
    1af4:	8b 81       	ldd	r24, Y+3	; 0x03
    1af6:	80 87       	std	Z+8, r24	; 0x08
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	20 e0       	ldi	r18, 0x00	; 0
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	0a c0       	rjmp	.+20     	; 0x1b14 <rf_polling_rx_packet+0x3ba>
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
    1b00:	e0 91 b9 05 	lds	r30, 0x05B9
    1b04:	f0 91 ba 05 	lds	r31, 0x05BA
    1b08:	85 81       	ldd	r24, Z+5	; 0x05
    1b0a:	96 81       	ldd	r25, Z+6	; 0x06
    1b0c:	a8 0f       	add	r26, r24
    1b0e:	b9 1f       	adc	r27, r25
    1b10:	8c 91       	ld	r24, X
    1b12:	48 0f       	add	r20, r24
    1b14:	82 2f       	mov	r24, r18

			// Read the footer to get the RSSI value
			FASTSPI_READ_FIFO_NO_WAIT((uint8_t*) pFooter, 2);
			rfSettings.pRxInfo->rssi = pFooter[0];
			checksum=0;	
			for(i=0; i<rfSettings.pRxInfo->length; i++ )
    1b16:	e0 91 b9 05 	lds	r30, 0x05B9
    1b1a:	f0 91 ba 05 	lds	r31, 0x05BA
    1b1e:	2f 5f       	subi	r18, 0xFF	; 255
    1b20:	3f 4f       	sbci	r19, 0xFF	; 255
    1b22:	a8 2f       	mov	r26, r24
    1b24:	bb 27       	eor	r27, r27
    1b26:	83 81       	ldd	r24, Z+3	; 0x03
    1b28:	99 27       	eor	r25, r25
    1b2a:	87 fd       	sbrc	r24, 7
    1b2c:	90 95       	com	r25
    1b2e:	a8 17       	cp	r26, r24
    1b30:	b9 07       	cpc	r27, r25
    1b32:	34 f3       	brlt	.-52     	; 0x1b00 <rf_polling_rx_packet+0x3a6>
			{
				checksum+=rfSettings.pRxInfo->pPayload[i];
				//printf( "%d ", rfSettings.pRxInfo->pPayload[i]);
			}

			if(checksum!=rx_checksum) {
    1b34:	45 17       	cp	r20, r21
    1b36:	19 f1       	breq	.+70     	; 0x1b7e <rf_polling_rx_packet+0x424>
				//printf( "Checksum failed %d %d\r",rx_checksum, checksum );
	    			// always read 1 byte before flush (data sheet pg 62)
	   			FASTSPI_READ_FIFO_BYTE(tmp);  
    1b38:	40 98       	cbi	0x08, 0	; 8
    1b3a:	8f e7       	ldi	r24, 0x7F	; 127
    1b3c:	8e bd       	out	0x2e, r24	; 46
    1b3e:	0d b4       	in	r0, 0x2d	; 45
    1b40:	07 fe       	sbrs	r0, 7
    1b42:	fd cf       	rjmp	.-6      	; 0x1b3e <rf_polling_rx_packet+0x3e4>
    1b44:	1e bc       	out	0x2e, r1	; 46
    1b46:	0d b4       	in	r0, 0x2d	; 45
    1b48:	07 fe       	sbrs	r0, 7
    1b4a:	fd cf       	rjmp	.-6      	; 0x1b46 <rf_polling_rx_packet+0x3ec>
    1b4c:	8e b5       	in	r24, 0x2e	; 46
    1b4e:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    1b50:	40 98       	cbi	0x08, 0	; 8
    1b52:	88 e0       	ldi	r24, 0x08	; 8
    1b54:	8e bd       	out	0x2e, r24	; 46
    1b56:	0d b4       	in	r0, 0x2d	; 45
    1b58:	07 fe       	sbrs	r0, 7
    1b5a:	fd cf       	rjmp	.-6      	; 0x1b56 <rf_polling_rx_packet+0x3fc>
    1b5c:	40 9a       	sbi	0x08, 0	; 8
	    			FASTSPI_STROBE(CC2420_SFLUSHRX);
    1b5e:	40 98       	cbi	0x08, 0	; 8
    1b60:	88 e0       	ldi	r24, 0x08	; 8
    1b62:	8e bd       	out	0x2e, r24	; 46
    1b64:	0d b4       	in	r0, 0x2d	; 45
    1b66:	07 fe       	sbrs	r0, 7
    1b68:	fd cf       	rjmp	.-6      	; 0x1b64 <rf_polling_rx_packet+0x40a>
    1b6a:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
    1b6c:	80 91 b4 05 	lds	r24, 0x05B4
    1b70:	90 91 b5 05 	lds	r25, 0x05B5
    1b74:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    1b78:	8c ef       	ldi	r24, 0xFC	; 252
    1b7a:	9f ef       	ldi	r25, 0xFF	; 255
    1b7c:	3c c0       	rjmp	.+120    	; 0x1bf6 <rf_polling_rx_packet+0x49c>
#endif
				return -4;
			}	
			if (pFooter[1] & RF_CRC_OK_BM) {
    1b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b80:	87 ff       	sbrs	r24, 7
    1b82:	0e c0       	rjmp	.+28     	; 0x1ba0 <rf_polling_rx_packet+0x446>
				//rfSettings.pRxInfo = rf_rx_callback(rfSettings.pRxInfo);
				rx_ready++;
    1b84:	80 91 ca 05 	lds	r24, 0x05CA
    1b88:	8f 5f       	subi	r24, 0xFF	; 255
    1b8a:	80 93 ca 05 	sts	0x05CA, r24
#ifdef RADIO_PRIORITY_CEILING
	    			nrk_sem_post(radio_sem);
    1b8e:	80 91 b4 05 	lds	r24, 0x05B4
    1b92:	90 91 b5 05 	lds	r25, 0x05B5
    1b96:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	2b c0       	rjmp	.+86     	; 0x1bf6 <rf_polling_rx_packet+0x49c>
#endif
				return 1;
			} else
	    		{
	    		// always read 1 byte before flush (data sheet pg 62)
	   		FASTSPI_READ_FIFO_BYTE(tmp);  
    1ba0:	40 98       	cbi	0x08, 0	; 8
    1ba2:	8f e7       	ldi	r24, 0x7F	; 127
    1ba4:	8e bd       	out	0x2e, r24	; 46
    1ba6:	0d b4       	in	r0, 0x2d	; 45
    1ba8:	07 fe       	sbrs	r0, 7
    1baa:	fd cf       	rjmp	.-6      	; 0x1ba6 <rf_polling_rx_packet+0x44c>
    1bac:	1e bc       	out	0x2e, r1	; 46
    1bae:	0d b4       	in	r0, 0x2d	; 45
    1bb0:	07 fe       	sbrs	r0, 7
    1bb2:	fd cf       	rjmp	.-6      	; 0x1bae <rf_polling_rx_packet+0x454>
    1bb4:	8e b5       	in	r24, 0x2e	; 46
    1bb6:	40 9a       	sbi	0x08, 0	; 8
			FASTSPI_STROBE(CC2420_SFLUSHRX);
    1bb8:	40 98       	cbi	0x08, 0	; 8
    1bba:	88 e0       	ldi	r24, 0x08	; 8
    1bbc:	8e bd       	out	0x2e, r24	; 46
    1bbe:	0d b4       	in	r0, 0x2d	; 45
    1bc0:	07 fe       	sbrs	r0, 7
    1bc2:	fd cf       	rjmp	.-6      	; 0x1bbe <rf_polling_rx_packet+0x464>
    1bc4:	40 9a       	sbi	0x08, 0	; 8
	    		FASTSPI_STROBE(CC2420_SFLUSHRX);
    1bc6:	40 98       	cbi	0x08, 0	; 8
    1bc8:	88 e0       	ldi	r24, 0x08	; 8
    1bca:	8e bd       	out	0x2e, r24	; 46
    1bcc:	0d b4       	in	r0, 0x2d	; 45
    1bce:	07 fe       	sbrs	r0, 7
    1bd0:	fd cf       	rjmp	.-6      	; 0x1bcc <rf_polling_rx_packet+0x472>
    1bd2:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
	    		nrk_sem_post(radio_sem);
    1bd4:	80 91 b4 05 	lds	r24, 0x05B4
    1bd8:	90 91 b5 05 	lds	r25, 0x05B5
    1bdc:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    1be0:	8b ef       	ldi	r24, 0xFB	; 251
    1be2:	9f ef       	ldi	r25, 0xFF	; 255
    1be4:	08 c0       	rjmp	.+16     	; 0x1bf6 <rf_polling_rx_packet+0x49c>
	}


    }
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    1be6:	80 91 b4 05 	lds	r24, 0x05B4
    1bea:	90 91 b5 05 	lds	r25, 0x05B5
    1bee:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    1bf2:	80 e0       	ldi	r24, 0x00	; 0
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	24 96       	adiw	r28, 0x04	; 4
    1bf8:	0f b6       	in	r0, 0x3f	; 63
    1bfa:	f8 94       	cli
    1bfc:	de bf       	out	0x3e, r29	; 62
    1bfe:	0f be       	out	0x3f, r0	; 63
    1c00:	cd bf       	out	0x3d, r28	; 61
    1c02:	df 91       	pop	r29
    1c04:	cf 91       	pop	r28
    1c06:	08 95       	ret

00001c08 <rf_rx_off>:
//  DESCRIPTION:
//      Disables the CC2420 receiver and the FIFOP interrupt.
//-------------------------------------------------------------------------------------------------------
void rf_rx_off(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    1c08:	80 91 b4 05 	lds	r24, 0x05B4
    1c0c:	90 91 b5 05 	lds	r25, 0x05B5
    1c10:	0e 94 62 20 	call	0x40c4	; 0x40c4 <nrk_sem_pend>
#endif
	// XXX
    	//SET_VREG_INACTIVE();	
	rfSettings.receiveOn = FALSE;
    1c14:	10 92 c1 05 	sts	0x05C1, r1
	FASTSPI_STROBE(CC2420_SRFOFF);
    1c18:	40 98       	cbi	0x08, 0	; 8
    1c1a:	86 e0       	ldi	r24, 0x06	; 6
    1c1c:	8e bd       	out	0x2e, r24	; 46
    1c1e:	0d b4       	in	r0, 0x2d	; 45
    1c20:	07 fe       	sbrs	r0, 7
    1c22:	fd cf       	rjmp	.-6      	; 0x1c1e <rf_rx_off+0x16>
    1c24:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    1c26:	10 92 ca 05 	sts	0x05CA, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    1c2a:	80 91 b4 05 	lds	r24, 0x05B4
    1c2e:	90 91 b5 05 	lds	r25, 0x05B5
    1c32:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    1c36:	08 95       	ret

00001c38 <rf_polling_rx_on>:
    //	ENABLE_FIFOP_INT();
} // rf_rx_on() 

void rf_polling_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    1c38:	80 91 b4 05 	lds	r24, 0x05B4
    1c3c:	90 91 b5 05 	lds	r25, 0x05B5
    1c40:	0e 94 62 20 	call	0x40c4	; 0x40c4 <nrk_sem_pend>
#endif
    	rfSettings.receiveOn = TRUE;
    1c44:	81 e0       	ldi	r24, 0x01	; 1
    1c46:	80 93 c1 05 	sts	0x05C1, r24
	FASTSPI_STROBE(CC2420_SRXON);
    1c4a:	40 98       	cbi	0x08, 0	; 8
    1c4c:	83 e0       	ldi	r24, 0x03	; 3
    1c4e:	8e bd       	out	0x2e, r24	; 46
    1c50:	0d b4       	in	r0, 0x2d	; 45
    1c52:	07 fe       	sbrs	r0, 7
    1c54:	fd cf       	rjmp	.-6      	; 0x1c50 <rf_polling_rx_on+0x18>
    1c56:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    1c58:	40 98       	cbi	0x08, 0	; 8
    1c5a:	88 e0       	ldi	r24, 0x08	; 8
    1c5c:	8e bd       	out	0x2e, r24	; 46
    1c5e:	0d b4       	in	r0, 0x2d	; 45
    1c60:	07 fe       	sbrs	r0, 7
    1c62:	fd cf       	rjmp	.-6      	; 0x1c5e <rf_polling_rx_on+0x26>
    1c64:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    1c66:	10 92 ca 05 	sts	0x05CA, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    1c6a:	80 91 b4 05 	lds	r24, 0x05B4
    1c6e:	90 91 b5 05 	lds	r25, 0x05B5
    1c72:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    1c76:	08 95       	ret

00001c78 <rf_rx_on>:
//      Enables the CC2420 receiver and the FIFOP interrupt. When a packet is received through this
//      interrupt, it will call rf_rx_callback(...), which must be defined by the application
//-------------------------------------------------------------------------------------------------------
void rf_rx_on(void) {
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    1c78:	80 91 b4 05 	lds	r24, 0x05B4
    1c7c:	90 91 b5 05 	lds	r25, 0x05B5
    1c80:	0e 94 62 20 	call	0x40c4	; 0x40c4 <nrk_sem_pend>
#endif
    	rfSettings.receiveOn = TRUE;
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	80 93 c1 05 	sts	0x05C1, r24
	FASTSPI_STROBE(CC2420_SRXON);
    1c8a:	40 98       	cbi	0x08, 0	; 8
    1c8c:	83 e0       	ldi	r24, 0x03	; 3
    1c8e:	8e bd       	out	0x2e, r24	; 46
    1c90:	0d b4       	in	r0, 0x2d	; 45
    1c92:	07 fe       	sbrs	r0, 7
    1c94:	fd cf       	rjmp	.-6      	; 0x1c90 <rf_rx_on+0x18>
    1c96:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    1c98:	40 98       	cbi	0x08, 0	; 8
    1c9a:	88 e0       	ldi	r24, 0x08	; 8
    1c9c:	8e bd       	out	0x2e, r24	; 46
    1c9e:	0d b4       	in	r0, 0x2d	; 45
    1ca0:	07 fe       	sbrs	r0, 7
    1ca2:	fd cf       	rjmp	.-6      	; 0x1c9e <rf_rx_on+0x26>
    1ca4:	40 9a       	sbi	0x08, 0	; 8
	rx_ready=0;
    1ca6:	10 92 ca 05 	sts	0x05CA, r1
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    1caa:	80 91 b4 05 	lds	r24, 0x05B4
    1cae:	90 91 b5 05 	lds	r25, 0x05B5
    1cb2:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    1cb6:	08 95       	ret

00001cb8 <rf_tx_power>:
{
return radio_sem;
}

void rf_tx_power(uint8_t pwr)
{
    1cb8:	1f 93       	push	r17
    1cba:	18 2f       	mov	r17, r24
uint16_t tmp;
    //tmp=0x5070;
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    1cbc:	80 91 b4 05 	lds	r24, 0x05B4
    1cc0:	90 91 b5 05 	lds	r25, 0x05B5
    1cc4:	0e 94 62 20 	call	0x40c4	; 0x40c4 <nrk_sem_pend>
#endif
    tmp=0xA0E0;
    tmp=tmp | (pwr&0x1F);  
    1cc8:	21 2f       	mov	r18, r17
    1cca:	33 27       	eor	r19, r19
    1ccc:	2f 71       	andi	r18, 0x1F	; 31
    1cce:	30 70       	andi	r19, 0x00	; 0
    1cd0:	20 6e       	ori	r18, 0xE0	; 224
    1cd2:	30 6a       	ori	r19, 0xA0	; 160
    FASTSPI_SETREG(CC2420_TXCTRL, tmp);   // Set the FIFOP threshold to maximum
    1cd4:	40 98       	cbi	0x08, 0	; 8
    1cd6:	85 e1       	ldi	r24, 0x15	; 21
    1cd8:	8e bd       	out	0x2e, r24	; 46
    1cda:	0d b4       	in	r0, 0x2d	; 45
    1cdc:	07 fe       	sbrs	r0, 7
    1cde:	fd cf       	rjmp	.-6      	; 0x1cda <rf_tx_power+0x22>
    1ce0:	83 2f       	mov	r24, r19
    1ce2:	99 27       	eor	r25, r25
    1ce4:	8e bd       	out	0x2e, r24	; 46
    1ce6:	0d b4       	in	r0, 0x2d	; 45
    1ce8:	07 fe       	sbrs	r0, 7
    1cea:	fd cf       	rjmp	.-6      	; 0x1ce6 <rf_tx_power+0x2e>
    1cec:	2e bd       	out	0x2e, r18	; 46
    1cee:	0d b4       	in	r0, 0x2d	; 45
    1cf0:	07 fe       	sbrs	r0, 7
    1cf2:	fd cf       	rjmp	.-6      	; 0x1cee <rf_tx_power+0x36>
    1cf4:	40 9a       	sbi	0x08, 0	; 8
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    1cf6:	80 91 b4 05 	lds	r24, 0x05B4
    1cfa:	90 91 b5 05 	lds	r25, 0x05B5
    1cfe:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    1d02:	1f 91       	pop	r17
    1d04:	08 95       	ret

00001d06 <rf_tx_packet>:
//
//  RETURN VALUE:
//		uint8_t
//			Successful transmission (acknowledgment received)
//-------------------------------------------------------------------------------------------------------
uint8_t rf_tx_packet(RF_TX_INFO *pRTI) {
    1d06:	ef 92       	push	r14
    1d08:	ff 92       	push	r15
    1d0a:	0f 93       	push	r16
    1d0c:	1f 93       	push	r17
    1d0e:	cf 93       	push	r28
    1d10:	df 93       	push	r29
    1d12:	cd b7       	in	r28, 0x3d	; 61
    1d14:	de b7       	in	r29, 0x3e	; 62
    1d16:	22 97       	sbiw	r28, 0x02	; 2
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	f8 94       	cli
    1d1c:	de bf       	out	0x3e, r29	; 62
    1d1e:	0f be       	out	0x3f, r0	; 63
    1d20:	cd bf       	out	0x3d, r28	; 61
    1d22:	8c 01       	movw	r16, r24
    uint8_t success;
    uint8_t spiStatusByte;
   uint8_t checksum,i;
	
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend(radio_sem);
    1d24:	80 91 b4 05 	lds	r24, 0x05B4
    1d28:	90 91 b5 05 	lds	r25, 0x05B5
    1d2c:	0e 94 62 20 	call	0x40c4	; 0x40c4 <nrk_sem_pend>
#endif

if(security_enable)
    1d30:	50 91 b6 05 	lds	r21, 0x05B6
    1d34:	55 23       	and	r21, r21
    1d36:	39 f0       	breq	.+14     	; 0x1d46 <rf_tx_packet+0x40>
    FASTSPI_STROBE(CC2420_STXENC);
    1d38:	40 98       	cbi	0x08, 0	; 8
    1d3a:	8d e0       	ldi	r24, 0x0D	; 13
    1d3c:	8e bd       	out	0x2e, r24	; 46
    1d3e:	0d b4       	in	r0, 0x2d	; 45
    1d40:	07 fe       	sbrs	r0, 7
    1d42:	fd cf       	rjmp	.-6      	; 0x1d3e <rf_tx_packet+0x38>
    1d44:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    1d46:	f8 01       	movw	r30, r16
    1d48:	42 81       	ldd	r20, Z+2	; 0x02
    1d4a:	64 2f       	mov	r22, r20
    1d4c:	77 27       	eor	r23, r23
    1d4e:	67 fd       	sbrc	r22, 7
    1d50:	70 95       	com	r23
    1d52:	a0 e0       	ldi	r26, 0x00	; 0
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	08 c0       	rjmp	.+16     	; 0x1d6a <rf_tx_packet+0x64>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    1d5a:	f8 01       	movw	r30, r16
    1d5c:	83 81       	ldd	r24, Z+3	; 0x03
    1d5e:	94 81       	ldd	r25, Z+4	; 0x04
    1d60:	e8 0e       	add	r14, r24
    1d62:	f9 1e       	adc	r15, r25
    1d64:	f7 01       	movw	r30, r14
    1d66:	80 81       	ld	r24, Z
    1d68:	a8 0f       	add	r26, r24
    1d6a:	82 2f       	mov	r24, r18
    1d6c:	2f 5f       	subi	r18, 0xFF	; 255
    1d6e:	3f 4f       	sbci	r19, 0xFF	; 255

if(security_enable)
    FASTSPI_STROBE(CC2420_STXENC);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    1d70:	e8 2e       	mov	r14, r24
    1d72:	ff 24       	eor	r15, r15
    1d74:	e6 16       	cp	r14, r22
    1d76:	f7 06       	cpc	r15, r23
    1d78:	84 f3       	brlt	.-32     	; 0x1d5a <rf_tx_packet+0x54>
    }
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)

    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a slighly higher later since they assume TDMA
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    1d7a:	94 2f       	mov	r25, r20
    1d7c:	94 5f       	subi	r25, 0xF4	; 244
    if(security_enable) packetLength+=4;  // for CTR counter
    1d7e:	51 11       	cpse	r21, r1
    1d80:	9c 5f       	subi	r25, 0xFC	; 252

   	// XXX 2 below are hacks...
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
    // Wait until the transceiver is idle
    while (FIFOP_IS_1 || SFD_IS_1);
    1d82:	67 99       	sbic	0x0c, 7	; 12
    1d84:	fe cf       	rjmp	.-4      	; 0x1d82 <rf_tx_packet+0x7c>
    1d86:	4e 99       	sbic	0x09, 6	; 9
    1d88:	fc cf       	rjmp	.-8      	; 0x1d82 <rf_tx_packet+0x7c>
    // Turn off global interrupts to avoid interference on the SPI interface
    DISABLE_GLOBAL_INT();
    1d8a:	f8 94       	cli
	// Flush the TX FIFO just in case...
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    1d8c:	40 98       	cbi	0x08, 0	; 8
    1d8e:	89 e0       	ldi	r24, 0x09	; 9
    1d90:	8e bd       	out	0x2e, r24	; 46
    1d92:	0d b4       	in	r0, 0x2d	; 45
    1d94:	07 fe       	sbrs	r0, 7
    1d96:	fd cf       	rjmp	.-6      	; 0x1d92 <rf_tx_packet+0x8c>
    1d98:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHTX);
    1d9a:	40 98       	cbi	0x08, 0	; 8
    1d9c:	89 e0       	ldi	r24, 0x09	; 9
    1d9e:	8e bd       	out	0x2e, r24	; 46
    1da0:	0d b4       	in	r0, 0x2d	; 45
    1da2:	07 fe       	sbrs	r0, 7
    1da4:	fd cf       	rjmp	.-6      	; 0x1da0 <rf_tx_packet+0x9a>
    1da6:	40 9a       	sbi	0x08, 0	; 8
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/

    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    1da8:	40 98       	cbi	0x08, 0	; 8
    1daa:	8e e3       	ldi	r24, 0x3E	; 62
    1dac:	8e bd       	out	0x2e, r24	; 46
    1dae:	0d b4       	in	r0, 0x2d	; 45
    1db0:	07 fc       	sbrc	r0, 7
    1db2:	05 c0       	rjmp	.+10     	; 0x1dbe <rf_tx_packet+0xb8>
    1db4:	fc cf       	rjmp	.-8      	; 0x1dae <rf_tx_packet+0xa8>
    1db6:	0d b4       	in	r0, 0x2d	; 45
    1db8:	07 fc       	sbrc	r0, 7
    1dba:	30 c1       	rjmp	.+608    	; 0x201c <rf_tx_packet+0x316>
    1dbc:	fc cf       	rjmp	.-8      	; 0x1db6 <rf_tx_packet+0xb0>
    1dbe:	9e bd       	out	0x2e, r25	; 46
    1dc0:	fa cf       	rjmp	.-12     	; 0x1db6 <rf_tx_packet+0xb0>
    frameControlField = RF_FCF_NOACK;   // default
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    1dc2:	81 e6       	ldi	r24, 0x61	; 97
    1dc4:	98 e8       	ldi	r25, 0x88	; 136
    1dc6:	9a 83       	std	Y+2, r25	; 0x02
    1dc8:	89 83       	std	Y+1, r24	; 0x01
    if(security_enable) frameControlField |= RF_SEC_BM;
    1dca:	55 23       	and	r21, r21
    1dcc:	29 f0       	breq	.+10     	; 0x1dd8 <rf_tx_packet+0xd2>
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd2:	88 60       	ori	r24, 0x08	; 8
    1dd4:	9a 83       	std	Y+2, r25	; 0x02
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    1dd8:	40 98       	cbi	0x08, 0	; 8
    1dda:	8e e3       	ldi	r24, 0x3E	; 62
    1ddc:	8e bd       	out	0x2e, r24	; 46
    1dde:	0d b4       	in	r0, 0x2d	; 45
    1de0:	07 fe       	sbrs	r0, 7
    1de2:	fd cf       	rjmp	.-6      	; 0x1dde <rf_tx_packet+0xd8>
    1de4:	fe 01       	movw	r30, r28
    1de6:	31 96       	adiw	r30, 0x01	; 1
    1de8:	9e 01       	movw	r18, r28
    1dea:	2d 5f       	subi	r18, 0xFD	; 253
    1dec:	3f 4f       	sbci	r19, 0xFF	; 255
    1dee:	80 81       	ld	r24, Z
    1df0:	8e bd       	out	0x2e, r24	; 46
    1df2:	0d b4       	in	r0, 0x2d	; 45
    1df4:	07 fe       	sbrs	r0, 7
    1df6:	fd cf       	rjmp	.-6      	; 0x1df2 <rf_tx_packet+0xec>
    1df8:	31 96       	adiw	r30, 0x01	; 1
    1dfa:	e2 17       	cp	r30, r18
    1dfc:	f3 07       	cpc	r31, r19
    1dfe:	b9 f7       	brne	.-18     	; 0x1dee <rf_tx_packet+0xe8>
    1e00:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    1e02:	40 98       	cbi	0x08, 0	; 8
    1e04:	8e e3       	ldi	r24, 0x3E	; 62
    1e06:	8e bd       	out	0x2e, r24	; 46
    1e08:	0d b4       	in	r0, 0x2d	; 45
    1e0a:	07 fc       	sbrc	r0, 7
    1e0c:	05 c0       	rjmp	.+10     	; 0x1e18 <rf_tx_packet+0x112>
    1e0e:	fc cf       	rjmp	.-8      	; 0x1e08 <rf_tx_packet+0x102>
    1e10:	0d b4       	in	r0, 0x2d	; 45
    1e12:	07 fc       	sbrc	r0, 7
    1e14:	0e c1       	rjmp	.+540    	; 0x2032 <rf_tx_packet+0x32c>
    1e16:	fc cf       	rjmp	.-8      	; 0x1e10 <rf_tx_packet+0x10a>
    1e18:	80 91 bb 05 	lds	r24, 0x05BB
    1e1c:	8e bd       	out	0x2e, r24	; 46
    1e1e:	f8 cf       	rjmp	.-16     	; 0x1e10 <rf_tx_packet+0x10a>
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    1e20:	0d b4       	in	r0, 0x2d	; 45
    1e22:	07 fe       	sbrs	r0, 7
    1e24:	fd cf       	rjmp	.-6      	; 0x1e20 <rf_tx_packet+0x11a>
    1e26:	20 e0       	ldi	r18, 0x00	; 0
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	f9 01       	movw	r30, r18
    1e2c:	e3 54       	subi	r30, 0x43	; 67
    1e2e:	fa 4f       	sbci	r31, 0xFA	; 250
    1e30:	80 81       	ld	r24, Z
    1e32:	8e bd       	out	0x2e, r24	; 46
    1e34:	0d b4       	in	r0, 0x2d	; 45
    1e36:	07 fe       	sbrs	r0, 7
    1e38:	fd cf       	rjmp	.-6      	; 0x1e34 <rf_tx_packet+0x12e>
    1e3a:	2f 5f       	subi	r18, 0xFF	; 255
    1e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e3e:	22 30       	cpi	r18, 0x02	; 2
    1e40:	31 05       	cpc	r19, r1
    1e42:	99 f7       	brne	.-26     	; 0x1e2a <rf_tx_packet+0x124>
    1e44:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    1e46:	40 98       	cbi	0x08, 0	; 8
    1e48:	8e e3       	ldi	r24, 0x3E	; 62
    1e4a:	8e bd       	out	0x2e, r24	; 46
    1e4c:	0d b4       	in	r0, 0x2d	; 45
    1e4e:	07 fe       	sbrs	r0, 7
    1e50:	fd cf       	rjmp	.-6      	; 0x1e4c <rf_tx_packet+0x146>
    1e52:	20 e0       	ldi	r18, 0x00	; 0
    1e54:	30 e0       	ldi	r19, 0x00	; 0
    1e56:	f8 01       	movw	r30, r16
    1e58:	e2 0f       	add	r30, r18
    1e5a:	f3 1f       	adc	r31, r19
    1e5c:	80 81       	ld	r24, Z
    1e5e:	8e bd       	out	0x2e, r24	; 46
    1e60:	0d b4       	in	r0, 0x2d	; 45
    1e62:	07 fe       	sbrs	r0, 7
    1e64:	fd cf       	rjmp	.-6      	; 0x1e60 <rf_tx_packet+0x15a>
    1e66:	2f 5f       	subi	r18, 0xFF	; 255
    1e68:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6a:	22 30       	cpi	r18, 0x02	; 2
    1e6c:	31 05       	cpc	r19, r1
    1e6e:	99 f7       	brne	.-26     	; 0x1e56 <rf_tx_packet+0x150>
    1e70:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    1e72:	40 98       	cbi	0x08, 0	; 8
    1e74:	8e e3       	ldi	r24, 0x3E	; 62
    1e76:	8e bd       	out	0x2e, r24	; 46
    1e78:	0d b4       	in	r0, 0x2d	; 45
    1e7a:	07 fe       	sbrs	r0, 7
    1e7c:	fd cf       	rjmp	.-6      	; 0x1e78 <rf_tx_packet+0x172>
    1e7e:	20 e0       	ldi	r18, 0x00	; 0
    1e80:	30 e0       	ldi	r19, 0x00	; 0
    1e82:	f9 01       	movw	r30, r18
    1e84:	e1 54       	subi	r30, 0x41	; 65
    1e86:	fa 4f       	sbci	r31, 0xFA	; 250
    1e88:	80 81       	ld	r24, Z
    1e8a:	8e bd       	out	0x2e, r24	; 46
    1e8c:	0d b4       	in	r0, 0x2d	; 45
    1e8e:	07 fe       	sbrs	r0, 7
    1e90:	fd cf       	rjmp	.-6      	; 0x1e8c <rf_tx_packet+0x186>
    1e92:	2f 5f       	subi	r18, 0xFF	; 255
    1e94:	3f 4f       	sbci	r19, 0xFF	; 255
    1e96:	22 30       	cpi	r18, 0x02	; 2
    1e98:	31 05       	cpc	r19, r1
    1e9a:	99 f7       	brne	.-26     	; 0x1e82 <rf_tx_packet+0x17c>
    1e9c:	40 9a       	sbi	0x08, 0	; 8
    if(security_enable)
    1e9e:	55 23       	and	r21, r21
    1ea0:	99 f0       	breq	.+38     	; 0x1ec8 <rf_tx_packet+0x1c2>
    	FASTSPI_WRITE_FIFO((uint8_t*) &tx_ctr, 4);         // CTR counter 
    1ea2:	40 98       	cbi	0x08, 0	; 8
    1ea4:	8e e3       	ldi	r24, 0x3E	; 62
    1ea6:	8e bd       	out	0x2e, r24	; 46
    1ea8:	0d b4       	in	r0, 0x2d	; 45
    1eaa:	07 fe       	sbrs	r0, 7
    1eac:	fd cf       	rjmp	.-6      	; 0x1ea8 <rf_tx_packet+0x1a2>
    1eae:	e6 ec       	ldi	r30, 0xC6	; 198
    1eb0:	f5 e0       	ldi	r31, 0x05	; 5
    1eb2:	80 81       	ld	r24, Z
    1eb4:	8e bd       	out	0x2e, r24	; 46
    1eb6:	0d b4       	in	r0, 0x2d	; 45
    1eb8:	07 fe       	sbrs	r0, 7
    1eba:	fd cf       	rjmp	.-6      	; 0x1eb6 <rf_tx_packet+0x1b0>
    1ebc:	31 96       	adiw	r30, 0x01	; 1
    1ebe:	85 e0       	ldi	r24, 0x05	; 5
    1ec0:	ea 3c       	cpi	r30, 0xCA	; 202
    1ec2:	f8 07       	cpc	r31, r24
    1ec4:	b1 f7       	brne	.-20     	; 0x1eb2 <rf_tx_packet+0x1ac>
    1ec6:	40 9a       	sbi	0x08, 0	; 8
   
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    1ec8:	40 98       	cbi	0x08, 0	; 8
    1eca:	8e e3       	ldi	r24, 0x3E	; 62
    1ecc:	8e bd       	out	0x2e, r24	; 46
    1ece:	0d b4       	in	r0, 0x2d	; 45
    1ed0:	07 fe       	sbrs	r0, 7
    1ed2:	fd cf       	rjmp	.-6      	; 0x1ece <rf_tx_packet+0x1c8>
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	0d c0       	rjmp	.+26     	; 0x1ef4 <rf_tx_packet+0x1ee>
    1eda:	f8 01       	movw	r30, r16
    1edc:	83 81       	ldd	r24, Z+3	; 0x03
    1ede:	94 81       	ldd	r25, Z+4	; 0x04
    1ee0:	48 0f       	add	r20, r24
    1ee2:	59 1f       	adc	r21, r25
    1ee4:	fa 01       	movw	r30, r20
    1ee6:	80 81       	ld	r24, Z
    1ee8:	8e bd       	out	0x2e, r24	; 46
    1eea:	0d b4       	in	r0, 0x2d	; 45
    1eec:	07 fe       	sbrs	r0, 7
    1eee:	fd cf       	rjmp	.-6      	; 0x1eea <rf_tx_packet+0x1e4>
    1ef0:	2f 5f       	subi	r18, 0xFF	; 255
    1ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ef4:	42 2f       	mov	r20, r18
    1ef6:	55 27       	eor	r21, r21
    1ef8:	46 17       	cp	r20, r22
    1efa:	57 07       	cpc	r21, r23
    1efc:	74 f3       	brlt	.-36     	; 0x1eda <rf_tx_packet+0x1d4>
    1efe:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    1f00:	40 98       	cbi	0x08, 0	; 8
    1f02:	8e e3       	ldi	r24, 0x3E	; 62
    1f04:	8e bd       	out	0x2e, r24	; 46
    1f06:	0d b4       	in	r0, 0x2d	; 45
    1f08:	07 fc       	sbrc	r0, 7
    1f0a:	05 c0       	rjmp	.+10     	; 0x1f16 <rf_tx_packet+0x210>
    1f0c:	fc cf       	rjmp	.-8      	; 0x1f06 <rf_tx_packet+0x200>
    1f0e:	0d b4       	in	r0, 0x2d	; 45
    1f10:	07 fc       	sbrc	r0, 7
    1f12:	94 c0       	rjmp	.+296    	; 0x203c <rf_tx_packet+0x336>
    1f14:	fc cf       	rjmp	.-8      	; 0x1f0e <rf_tx_packet+0x208>
    1f16:	ae bd       	out	0x2e, r26	; 46
    1f18:	fa cf       	rjmp	.-12     	; 0x1f0e <rf_tx_packet+0x208>

if (pRTI->cca == TRUE)
{
    uint8_t cnt;
     if (!rfSettings.receiveOn)
    1f1a:	80 91 c1 05 	lds	r24, 0x05C1
    1f1e:	88 23       	and	r24, r24
    1f20:	39 f4       	brne	.+14     	; 0x1f30 <rf_tx_packet+0x22a>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    1f22:	40 98       	cbi	0x08, 0	; 8
    1f24:	83 e0       	ldi	r24, 0x03	; 3
    1f26:	8e bd       	out	0x2e, r24	; 46
    1f28:	0d b4       	in	r0, 0x2d	; 45
    1f2a:	07 fe       	sbrs	r0, 7
    1f2c:	fd cf       	rjmp	.-6      	; 0x1f28 <rf_tx_packet+0x222>
    1f2e:	40 9a       	sbi	0x08, 0	; 8
	}
      
      // Wait for the RSSI value to become valid
      do
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    1f30:	40 98       	cbi	0x08, 0	; 8
    1f32:	1e bc       	out	0x2e, r1	; 46
    1f34:	0d b4       	in	r0, 0x2d	; 45
    1f36:	07 fe       	sbrs	r0, 7
    1f38:	fd cf       	rjmp	.-6      	; 0x1f34 <rf_tx_packet+0x22e>
    1f3a:	8e b5       	in	r24, 0x2e	; 46
    1f3c:	40 9a       	sbi	0x08, 0	; 8
	}
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));      
    1f3e:	81 ff       	sbrs	r24, 1
    1f40:	f7 cf       	rjmp	.-18     	; 0x1f30 <rf_tx_packet+0x22a>
    1f42:	00 e0       	ldi	r16, 0x00	; 0
      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    1f44:	40 98       	cbi	0x08, 0	; 8
    1f46:	85 e0       	ldi	r24, 0x05	; 5
    1f48:	8e bd       	out	0x2e, r24	; 46
    1f4a:	0d b4       	in	r0, 0x2d	; 45
    1f4c:	07 fe       	sbrs	r0, 7
    1f4e:	fd cf       	rjmp	.-6      	; 0x1f4a <rf_tx_packet+0x244>
    1f50:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    1f52:	40 98       	cbi	0x08, 0	; 8
    1f54:	1e bc       	out	0x2e, r1	; 46
    1f56:	0d b4       	in	r0, 0x2d	; 45
    1f58:	07 fe       	sbrs	r0, 7
    1f5a:	fd cf       	rjmp	.-6      	; 0x1f56 <rf_tx_packet+0x250>
    1f5c:	1e b5       	in	r17, 0x2e	; 46
    1f5e:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    1f60:	0f 5f       	subi	r16, 0xFF	; 255
	  if (cnt > 100)
    1f62:	05 36       	cpi	r16, 0x65	; 101
    1f64:	51 f4       	brne	.+20     	; 0x1f7a <rf_tx_packet+0x274>
	    {
	      ENABLE_GLOBAL_INT ();
    1f66:	78 94       	sei
	      nrk_sem_post(radio_sem);
    1f68:	80 91 b4 05 	lds	r24, 0x05B4
    1f6c:	90 91 b5 05 	lds	r25, 0x05B5
    1f70:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	68 c0       	rjmp	.+208    	; 0x204a <rf_tx_packet+0x344>
	      return FALSE;
	    }
	  halWait (100);
    1f7a:	84 e6       	ldi	r24, 0x64	; 100
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	0e 94 4e 19 	call	0x329c	; 0x329c <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    1f82:	13 fd       	sbrc	r17, 3
    1f84:	08 c0       	rjmp	.+16     	; 0x1f96 <rf_tx_packet+0x290>
    1f86:	de cf       	rjmp	.-68     	; 0x1f44 <rf_tx_packet+0x23e>
    }
  else
    FASTSPI_STROBE (CC2420_STXON); 
    1f88:	40 98       	cbi	0x08, 0	; 8
    1f8a:	84 e0       	ldi	r24, 0x04	; 4
    1f8c:	8e bd       	out	0x2e, r24	; 46
    1f8e:	0d b4       	in	r0, 0x2d	; 45
    1f90:	07 fe       	sbrs	r0, 7
    1f92:	fd cf       	rjmp	.-6      	; 0x1f8e <rf_tx_packet+0x288>
    1f94:	40 9a       	sbi	0x08, 0	; 8


  ENABLE_GLOBAL_INT();
    1f96:	78 94       	sei
	// Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
  while (!SFD_IS_1);
    1f98:	4e 9b       	sbis	0x09, 6	; 9
    1f9a:	fe cf       	rjmp	.-4      	; 0x1f98 <rf_tx_packet+0x292>
  success = TRUE;

	// Turn interrupts back on
//	ENABLE_GLOBAL_INT();

    while (SFD_IS_1); // wait for packet to finish
    1f9c:	4e 99       	sbic	0x09, 6	; 9
    1f9e:	fe cf       	rjmp	.-4      	; 0x1f9c <rf_tx_packet+0x296>

    // Wait for the acknowledge to be received, if any
    if (auto_ack_enable) {
    1fa0:	80 91 c4 05 	lds	r24, 0x05C4
    1fa4:	88 23       	and	r24, r24
    1fa6:	91 f0       	breq	.+36     	; 0x1fcc <rf_tx_packet+0x2c6>
		//	while (SFD_IS_1);
        // We'll enter RX automatically, so just wait until we can be sure that the 
	// ack reception should have finished
        // The timeout consists of a 12-symbol turnaround time, the ack packet duration, 
	// and a small margin
        halWait((12 * RF_SYMBOL_DURATION) + (RF_ACK_DURATION) + (2 * RF_SYMBOL_DURATION) + 100);
    1fa8:	84 ea       	ldi	r24, 0xA4	; 164
    1faa:	92 e0       	ldi	r25, 0x02	; 2
    1fac:	0e 94 4e 19 	call	0x329c	; 0x329c <halWait>

	if(FIFO_IS_1)
    1fb0:	31 9b       	sbis	0x06, 1	; 6
    1fb2:	0e c0       	rjmp	.+28     	; 0x1fd0 <rf_tx_packet+0x2ca>
	{
	FASTSPI_READ_FIFO_BYTE(length);
    1fb4:	40 98       	cbi	0x08, 0	; 8
    1fb6:	8f e7       	ldi	r24, 0x7F	; 127
    1fb8:	8e bd       	out	0x2e, r24	; 46
    1fba:	0d b4       	in	r0, 0x2d	; 45
    1fbc:	07 fe       	sbrs	r0, 7
    1fbe:	fd cf       	rjmp	.-6      	; 0x1fba <rf_tx_packet+0x2b4>
    1fc0:	1e bc       	out	0x2e, r1	; 46
    1fc2:	0d b4       	in	r0, 0x2d	; 45
    1fc4:	07 fe       	sbrs	r0, 7
    1fc6:	fd cf       	rjmp	.-6      	; 0x1fc2 <rf_tx_packet+0x2bc>
    1fc8:	8e b5       	in	r24, 0x2e	; 46
    1fca:	40 9a       	sbi	0x08, 0	; 8
    1fcc:	11 e0       	ldi	r17, 0x01	; 1
    1fce:	0f c0       	rjmp	.+30     	; 0x1fee <rf_tx_packet+0x2e8>
	length &= RF_LENGTH_MASK; // Ignore MSB
	    success = TRUE;

	}else
	{
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1fd0:	40 98       	cbi	0x08, 0	; 8
    1fd2:	88 e0       	ldi	r24, 0x08	; 8
    1fd4:	8e bd       	out	0x2e, r24	; 46
    1fd6:	0d b4       	in	r0, 0x2d	; 45
    1fd8:	07 fe       	sbrs	r0, 7
    1fda:	fd cf       	rjmp	.-6      	; 0x1fd6 <rf_tx_packet+0x2d0>
    1fdc:	40 9a       	sbi	0x08, 0	; 8
	    FASTSPI_STROBE(CC2420_SFLUSHRX);
    1fde:	40 98       	cbi	0x08, 0	; 8
    1fe0:	88 e0       	ldi	r24, 0x08	; 8
    1fe2:	8e bd       	out	0x2e, r24	; 46
    1fe4:	0d b4       	in	r0, 0x2d	; 45
    1fe6:	07 fe       	sbrs	r0, 7
    1fe8:	fd cf       	rjmp	.-6      	; 0x1fe4 <rf_tx_packet+0x2de>
    1fea:	40 9a       	sbi	0x08, 0	; 8
    1fec:	10 e0       	ldi	r17, 0x00	; 0
    }

    
	// Turn off the receiver if it should not continue to be enabled
    
    DISABLE_GLOBAL_INT();	
    1fee:	f8 94       	cli
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHRX);
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
	//FASTSPI_STROBE(CC2420_SFLUSHTX);
    
	FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    1ff0:	40 98       	cbi	0x08, 0	; 8
    1ff2:	86 e0       	ldi	r24, 0x06	; 6
    1ff4:	8e bd       	out	0x2e, r24	; 46
    1ff6:	0d b4       	in	r0, 0x2d	; 45
    1ff8:	07 fe       	sbrs	r0, 7
    1ffa:	fd cf       	rjmp	.-6      	; 0x1ff6 <rf_tx_packet+0x2f0>
    1ffc:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    1ffe:	78 94       	sei

    // agr XXX hack to test time issue
    //rf_rx_on(); 

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    2000:	80 91 bb 05 	lds	r24, 0x05BB
    2004:	8f 5f       	subi	r24, 0xFF	; 255
    2006:	80 93 bb 05 	sts	0x05BB, r24
//	while (SFD_IS_1);
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    200a:	80 91 b4 05 	lds	r24, 0x05B4
    200e:	90 91 b5 05 	lds	r25, 0x05B5
    2012:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
#endif
    return success;
    2016:	81 2f       	mov	r24, r17
    2018:	99 27       	eor	r25, r25
    201a:	17 c0       	rjmp	.+46     	; 0x204a <rf_tx_packet+0x344>
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/

    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    201c:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = RF_FCF_NOACK;   // default
    201e:	81 e4       	ldi	r24, 0x41	; 65
    2020:	98 e8       	ldi	r25, 0x88	; 136
    2022:	9a 83       	std	Y+2, r25	; 0x02
    2024:	89 83       	std	Y+1, r24	; 0x01
    if(auto_ack_enable) frameControlField |= RF_ACK_BM;
    2026:	80 91 c4 05 	lds	r24, 0x05C4
    202a:	88 23       	and	r24, r24
    202c:	09 f0       	breq	.+2      	; 0x2030 <rf_tx_packet+0x32a>
    202e:	c9 ce       	rjmp	.-622    	; 0x1dc2 <rf_tx_packet+0xbc>
    2030:	cc ce       	rjmp	.-616    	; 0x1dca <rf_tx_packet+0xc4>
    if(security_enable) frameControlField |= RF_SEC_BM;
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    2032:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    2034:	40 98       	cbi	0x08, 0	; 8
    2036:	8e e3       	ldi	r24, 0x3E	; 62
    2038:	8e bd       	out	0x2e, r24	; 46
    203a:	f2 ce       	rjmp	.-540    	; 0x1e20 <rf_tx_packet+0x11a>
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    if(security_enable)
    	FASTSPI_WRITE_FIFO((uint8_t*) &tx_ctr, 4);         // CTR counter 
   
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    203c:	40 9a       	sbi	0x08, 0	; 8

if (pRTI->cca == TRUE)
    203e:	f8 01       	movw	r30, r16
    2040:	85 81       	ldd	r24, Z+5	; 0x05
    2042:	88 23       	and	r24, r24
    2044:	09 f0       	breq	.+2      	; 0x2048 <rf_tx_packet+0x342>
    2046:	69 cf       	rjmp	.-302    	; 0x1f1a <rf_tx_packet+0x214>
    2048:	9f cf       	rjmp	.-194    	; 0x1f88 <rf_tx_packet+0x282>
    204a:	22 96       	adiw	r28, 0x02	; 2
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	df 91       	pop	r29
    2058:	cf 91       	pop	r28
    205a:	1f 91       	pop	r17
    205c:	0f 91       	pop	r16
    205e:	ff 90       	pop	r15
    2060:	ef 90       	pop	r14
    2062:	08 95       	ret

00002064 <rf_tx_tdma_packet>:
/**************************************************************************
This function is the same as normal TX, only it waits until the last
second to send the duty out with the high speed timer.  And by duty, I mean
the packet BIATCH...
**************************************************************************/
uint8_t rf_tx_tdma_packet(RF_TX_INFO *pRTI, uint16_t slot_start_time, uint16_t tx_guard_time) {
    2064:	bf 92       	push	r11
    2066:	cf 92       	push	r12
    2068:	df 92       	push	r13
    206a:	ef 92       	push	r14
    206c:	ff 92       	push	r15
    206e:	0f 93       	push	r16
    2070:	1f 93       	push	r17
    2072:	cf 93       	push	r28
    2074:	df 93       	push	r29
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62
    207a:	22 97       	sbiw	r28, 0x02	; 2
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	de bf       	out	0x3e, r29	; 62
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	8c 01       	movw	r16, r24
    2088:	6b 01       	movw	r12, r22
    208a:	7a 01       	movw	r14, r20
    	uint8_t spiStatusByte;
   	uint8_t checksum,i;
	uint8_t timestamp;

#ifdef RADIO_PRIORITY_CEILING
nrk_sem_pend (radio_sem);
    208c:	80 91 b4 05 	lds	r24, 0x05B4
    2090:	90 91 b5 05 	lds	r25, 0x05B5
    2094:	0e 94 62 20 	call	0x40c4	; 0x40c4 <nrk_sem_pend>
#endif
	timestamp=_nrk_os_timer_get();
    2098:	0e 94 0b 2b 	call	0x5616	; 0x5616 <_nrk_os_timer_get>
	// XXX 2 below are hacks...
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    209c:	40 98       	cbi	0x08, 0	; 8
    209e:	88 e0       	ldi	r24, 0x08	; 8
    20a0:	8e bd       	out	0x2e, r24	; 46
    20a2:	0d b4       	in	r0, 0x2d	; 45
    20a4:	07 fe       	sbrs	r0, 7
    20a6:	fd cf       	rjmp	.-6      	; 0x20a2 <rf_tx_tdma_packet+0x3e>
    20a8:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    20aa:	40 98       	cbi	0x08, 0	; 8
    20ac:	88 e0       	ldi	r24, 0x08	; 8
    20ae:	8e bd       	out	0x2e, r24	; 46
    20b0:	0d b4       	in	r0, 0x2d	; 45
    20b2:	07 fe       	sbrs	r0, 7
    20b4:	fd cf       	rjmp	.-6      	; 0x20b0 <rf_tx_tdma_packet+0x4c>
    20b6:	40 9a       	sbi	0x08, 0	; 8
    // Wait until the transceiver is idle
     while (FIFOP_IS_1 || SFD_IS_1);
    20b8:	67 99       	sbic	0x0c, 7	; 12
    20ba:	fe cf       	rjmp	.-4      	; 0x20b8 <rf_tx_tdma_packet+0x54>
    20bc:	4e 99       	sbic	0x09, 6	; 9
    20be:	fc cf       	rjmp	.-8      	; 0x20b8 <rf_tx_tdma_packet+0x54>
    // Turn off global interrupts to avoid interference on the SPI interface
      DISABLE_GLOBAL_INT();
    20c0:	f8 94       	cli
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    20c2:	40 98       	cbi	0x08, 0	; 8
    20c4:	89 e0       	ldi	r24, 0x09	; 9
    20c6:	8e bd       	out	0x2e, r24	; 46
    20c8:	0d b4       	in	r0, 0x2d	; 45
    20ca:	07 fe       	sbrs	r0, 7
    20cc:	fd cf       	rjmp	.-6      	; 0x20c8 <rf_tx_tdma_packet+0x64>
    20ce:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    20d0:	40 98       	cbi	0x08, 0	; 8
    20d2:	89 e0       	ldi	r24, 0x09	; 9
    20d4:	8e bd       	out	0x2e, r24	; 46
    20d6:	0d b4       	in	r0, 0x2d	; 45
    20d8:	07 fe       	sbrs	r0, 7
    20da:	fd cf       	rjmp	.-6      	; 0x20d6 <rf_tx_tdma_packet+0x72>
    20dc:	40 9a       	sbi	0x08, 0	; 8

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    20de:	f8 01       	movw	r30, r16
    20e0:	62 81       	ldd	r22, Z+2	; 0x02
    20e2:	46 2f       	mov	r20, r22
    20e4:	55 27       	eor	r21, r21
    20e6:	47 fd       	sbrc	r20, 7
    20e8:	50 95       	com	r21
    20ea:	bb 24       	eor	r11, r11
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	07 c0       	rjmp	.+14     	; 0x2100 <rf_tx_tdma_packet+0x9c>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    20f2:	f8 01       	movw	r30, r16
    20f4:	83 81       	ldd	r24, Z+3	; 0x03
    20f6:	94 81       	ldd	r25, Z+4	; 0x04
    20f8:	a8 0f       	add	r26, r24
    20fa:	b9 1f       	adc	r27, r25
    20fc:	8c 91       	ld	r24, X
    20fe:	b8 0e       	add	r11, r24
    2100:	82 2f       	mov	r24, r18
    2102:	2f 5f       	subi	r18, 0xFF	; 255
    2104:	3f 4f       	sbci	r19, 0xFF	; 255
	// Flush the TX FIFO just in case...
	FASTSPI_STROBE(CC2420_SFLUSHTX);
	FASTSPI_STROBE(CC2420_SFLUSHTX);

    checksum=0;
    for(i=0; i<pRTI->length; i++ )
    2106:	a8 2f       	mov	r26, r24
    2108:	bb 27       	eor	r27, r27
    210a:	a4 17       	cp	r26, r20
    210c:	b5 07       	cpc	r27, r21
    210e:	8c f3       	brlt	.-30     	; 0x20f2 <rf_tx_tdma_packet+0x8e>
    {
	// lets do our own payload checksum because we don't trust the CRC
	checksum+=pRTI->pPayload[i];
    }
    packetLength = pRTI->length + RF_PACKET_OVERHEAD_SIZE + CHECKSUM_OVERHEAD;
    2110:	96 2f       	mov	r25, r22
    2112:	94 5f       	subi	r25, 0xF4	; 244
    
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    2114:	40 98       	cbi	0x08, 0	; 8
    2116:	8e e3       	ldi	r24, 0x3E	; 62
    2118:	8e bd       	out	0x2e, r24	; 46
    211a:	0d b4       	in	r0, 0x2d	; 45
    211c:	07 fc       	sbrc	r0, 7
    211e:	05 c0       	rjmp	.+10     	; 0x212a <rf_tx_tdma_packet+0xc6>
    2120:	fc cf       	rjmp	.-8      	; 0x211a <rf_tx_tdma_packet+0xb6>
    2122:	0d b4       	in	r0, 0x2d	; 45
    2124:	07 fc       	sbrc	r0, 7
    2126:	16 c1       	rjmp	.+556    	; 0x2354 <__stack+0x155>
    2128:	fc cf       	rjmp	.-8      	; 0x2122 <rf_tx_tdma_packet+0xbe>
    212a:	9e bd       	out	0x2e, r25	; 46
    212c:	fa cf       	rjmp	.-12     	; 0x2122 <rf_tx_tdma_packet+0xbe>
    212e:	81 e6       	ldi	r24, 0x61	; 97
    2130:	98 e8       	ldi	r25, 0x88	; 136
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    2132:	9a 83       	std	Y+2, r25	; 0x02
    2134:	89 83       	std	Y+1, r24	; 0x01
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    2136:	40 98       	cbi	0x08, 0	; 8
    2138:	8e e3       	ldi	r24, 0x3E	; 62
    213a:	8e bd       	out	0x2e, r24	; 46
    213c:	0d b4       	in	r0, 0x2d	; 45
    213e:	07 fe       	sbrs	r0, 7
    2140:	fd cf       	rjmp	.-6      	; 0x213c <rf_tx_tdma_packet+0xd8>
    2142:	fe 01       	movw	r30, r28
    2144:	31 96       	adiw	r30, 0x01	; 1
    2146:	9e 01       	movw	r18, r28
    2148:	2d 5f       	subi	r18, 0xFD	; 253
    214a:	3f 4f       	sbci	r19, 0xFF	; 255
    214c:	80 81       	ld	r24, Z
    214e:	8e bd       	out	0x2e, r24	; 46
    2150:	0d b4       	in	r0, 0x2d	; 45
    2152:	07 fe       	sbrs	r0, 7
    2154:	fd cf       	rjmp	.-6      	; 0x2150 <rf_tx_tdma_packet+0xec>
    2156:	31 96       	adiw	r30, 0x01	; 1
    2158:	e2 17       	cp	r30, r18
    215a:	f3 07       	cpc	r31, r19
    215c:	b9 f7       	brne	.-18     	; 0x214c <rf_tx_tdma_packet+0xe8>
    215e:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    2160:	40 98       	cbi	0x08, 0	; 8
    2162:	8e e3       	ldi	r24, 0x3E	; 62
    2164:	8e bd       	out	0x2e, r24	; 46
    2166:	0d b4       	in	r0, 0x2d	; 45
    2168:	07 fc       	sbrc	r0, 7
    216a:	05 c0       	rjmp	.+10     	; 0x2176 <rf_tx_tdma_packet+0x112>
    216c:	fc cf       	rjmp	.-8      	; 0x2166 <rf_tx_tdma_packet+0x102>
    216e:	0d b4       	in	r0, 0x2d	; 45
    2170:	07 fc       	sbrc	r0, 7
    2172:	f9 c0       	rjmp	.+498    	; 0x2366 <__stack+0x167>
    2174:	fc cf       	rjmp	.-8      	; 0x216e <rf_tx_tdma_packet+0x10a>
    2176:	80 91 bb 05 	lds	r24, 0x05BB
    217a:	8e bd       	out	0x2e, r24	; 46
    217c:	f8 cf       	rjmp	.-16     	; 0x216e <rf_tx_tdma_packet+0x10a>
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    217e:	0d b4       	in	r0, 0x2d	; 45
    2180:	07 fe       	sbrs	r0, 7
    2182:	fd cf       	rjmp	.-6      	; 0x217e <rf_tx_tdma_packet+0x11a>
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	f9 01       	movw	r30, r18
    218a:	e3 54       	subi	r30, 0x43	; 67
    218c:	fa 4f       	sbci	r31, 0xFA	; 250
    218e:	80 81       	ld	r24, Z
    2190:	8e bd       	out	0x2e, r24	; 46
    2192:	0d b4       	in	r0, 0x2d	; 45
    2194:	07 fe       	sbrs	r0, 7
    2196:	fd cf       	rjmp	.-6      	; 0x2192 <rf_tx_tdma_packet+0x12e>
    2198:	2f 5f       	subi	r18, 0xFF	; 255
    219a:	3f 4f       	sbci	r19, 0xFF	; 255
    219c:	22 30       	cpi	r18, 0x02	; 2
    219e:	31 05       	cpc	r19, r1
    21a0:	99 f7       	brne	.-26     	; 0x2188 <rf_tx_tdma_packet+0x124>
    21a2:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &pRTI->destAddr, 2);            // Dest. address
    21a4:	40 98       	cbi	0x08, 0	; 8
    21a6:	8e e3       	ldi	r24, 0x3E	; 62
    21a8:	8e bd       	out	0x2e, r24	; 46
    21aa:	0d b4       	in	r0, 0x2d	; 45
    21ac:	07 fe       	sbrs	r0, 7
    21ae:	fd cf       	rjmp	.-6      	; 0x21aa <rf_tx_tdma_packet+0x146>
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	f8 01       	movw	r30, r16
    21b6:	e2 0f       	add	r30, r18
    21b8:	f3 1f       	adc	r31, r19
    21ba:	80 81       	ld	r24, Z
    21bc:	8e bd       	out	0x2e, r24	; 46
    21be:	0d b4       	in	r0, 0x2d	; 45
    21c0:	07 fe       	sbrs	r0, 7
    21c2:	fd cf       	rjmp	.-6      	; 0x21be <rf_tx_tdma_packet+0x15a>
    21c4:	2f 5f       	subi	r18, 0xFF	; 255
    21c6:	3f 4f       	sbci	r19, 0xFF	; 255
    21c8:	22 30       	cpi	r18, 0x02	; 2
    21ca:	31 05       	cpc	r19, r1
    21cc:	99 f7       	brne	.-26     	; 0x21b4 <rf_tx_tdma_packet+0x150>
    21ce:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.myAddr, 2);         // Source address
    21d0:	40 98       	cbi	0x08, 0	; 8
    21d2:	8e e3       	ldi	r24, 0x3E	; 62
    21d4:	8e bd       	out	0x2e, r24	; 46
    21d6:	0d b4       	in	r0, 0x2d	; 45
    21d8:	07 fe       	sbrs	r0, 7
    21da:	fd cf       	rjmp	.-6      	; 0x21d6 <rf_tx_tdma_packet+0x172>
    21dc:	20 e0       	ldi	r18, 0x00	; 0
    21de:	30 e0       	ldi	r19, 0x00	; 0
    21e0:	f9 01       	movw	r30, r18
    21e2:	e1 54       	subi	r30, 0x41	; 65
    21e4:	fa 4f       	sbci	r31, 0xFA	; 250
    21e6:	80 81       	ld	r24, Z
    21e8:	8e bd       	out	0x2e, r24	; 46
    21ea:	0d b4       	in	r0, 0x2d	; 45
    21ec:	07 fe       	sbrs	r0, 7
    21ee:	fd cf       	rjmp	.-6      	; 0x21ea <rf_tx_tdma_packet+0x186>
    21f0:	2f 5f       	subi	r18, 0xFF	; 255
    21f2:	3f 4f       	sbci	r19, 0xFF	; 255
    21f4:	22 30       	cpi	r18, 0x02	; 2
    21f6:	31 05       	cpc	r19, r1
    21f8:	99 f7       	brne	.-26     	; 0x21e0 <rf_tx_tdma_packet+0x17c>
    21fa:	40 9a       	sbi	0x08, 0	; 8

    nrk_high_speed_timer_wait(slot_start_time,tx_guard_time);
    21fc:	b7 01       	movw	r22, r14
    21fe:	c6 01       	movw	r24, r12
    2200:	0e 94 90 2b 	call	0x5720	; 0x5720 <nrk_high_speed_timer_wait>
		FASTSPI_STROBE(CC2420_STXONCCA);
		FASTSPI_UPD_STATUS(spiStatusByte);
		halWait(100);
    } while (!(spiStatusByte & BM(CC2420_TX_ACTIVE)));
*/
if (pRTI->cca == TRUE)
    2204:	f8 01       	movw	r30, r16
    2206:	85 81       	ldd	r24, Z+5	; 0x05
    2208:	88 23       	and	r24, r24
    220a:	c1 f1       	breq	.+112    	; 0x227c <__stack+0x7d>
    {
    uint8_t cnt;
      if (!rfSettings.receiveOn)
    220c:	80 91 c1 05 	lds	r24, 0x05C1
    2210:	88 23       	and	r24, r24
    2212:	39 f4       	brne	.+14     	; 0x2222 <__stack+0x23>
	{
	  FASTSPI_STROBE (CC2420_SRXON);
    2214:	40 98       	cbi	0x08, 0	; 8
    2216:	83 e0       	ldi	r24, 0x03	; 3
    2218:	8e bd       	out	0x2e, r24	; 46
    221a:	0d b4       	in	r0, 0x2d	; 45
    221c:	07 fe       	sbrs	r0, 7
    221e:	fd cf       	rjmp	.-6      	; 0x221a <__stack+0x1b>
    2220:	40 9a       	sbi	0x08, 0	; 8
	}

      // Wait for the RSSI value to become valid
      do
	{
	  FASTSPI_UPD_STATUS (spiStatusByte);
    2222:	40 98       	cbi	0x08, 0	; 8
    2224:	1e bc       	out	0x2e, r1	; 46
    2226:	0d b4       	in	r0, 0x2d	; 45
    2228:	07 fe       	sbrs	r0, 7
    222a:	fd cf       	rjmp	.-6      	; 0x2226 <__stack+0x27>
    222c:	8e b5       	in	r24, 0x2e	; 46
    222e:	40 9a       	sbi	0x08, 0	; 8
	}
      while (!(spiStatusByte & BM (CC2420_RSSI_VALID)));
    2230:	81 ff       	sbrs	r24, 1
    2232:	f7 cf       	rjmp	.-18     	; 0x2222 <__stack+0x23>
    2234:	ee 24       	eor	r14, r14

      // TX begins after the CCA check has passed
      cnt = 0;
      do
	{
	  FASTSPI_STROBE (CC2420_STXONCCA);
    2236:	40 98       	cbi	0x08, 0	; 8
    2238:	85 e0       	ldi	r24, 0x05	; 5
    223a:	8e bd       	out	0x2e, r24	; 46
    223c:	0d b4       	in	r0, 0x2d	; 45
    223e:	07 fe       	sbrs	r0, 7
    2240:	fd cf       	rjmp	.-6      	; 0x223c <__stack+0x3d>
    2242:	40 9a       	sbi	0x08, 0	; 8
	  FASTSPI_UPD_STATUS (spiStatusByte);
    2244:	40 98       	cbi	0x08, 0	; 8
    2246:	1e bc       	out	0x2e, r1	; 46
    2248:	0d b4       	in	r0, 0x2d	; 45
    224a:	07 fe       	sbrs	r0, 7
    224c:	fd cf       	rjmp	.-6      	; 0x2248 <__stack+0x49>
    224e:	fe b4       	in	r15, 0x2e	; 46
    2250:	40 9a       	sbi	0x08, 0	; 8
	  cnt++;
    2252:	e3 94       	inc	r14
	  if (cnt > 100)
    2254:	f5 e6       	ldi	r31, 0x65	; 101
    2256:	ef 16       	cp	r14, r31
    2258:	51 f4       	brne	.+20     	; 0x226e <__stack+0x6f>
	    {
	      ENABLE_GLOBAL_INT ();
    225a:	78 94       	sei
		nrk_sem_post(radio_sem);
    225c:	80 91 b4 05 	lds	r24, 0x05B4
    2260:	90 91 b5 05 	lds	r25, 0x05B5
    2264:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    2268:	80 e0       	ldi	r24, 0x00	; 0
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	83 c0       	rjmp	.+262    	; 0x2374 <__stack+0x175>
	      return FALSE;
	    }
	  halWait (100);
    226e:	84 e6       	ldi	r24, 0x64	; 100
    2270:	90 e0       	ldi	r25, 0x00	; 0
    2272:	0e 94 4e 19 	call	0x329c	; 0x329c <halWait>
	}
      while (!(spiStatusByte & BM (CC2420_TX_ACTIVE)));
    2276:	f3 fc       	sbrc	r15, 3
    2278:	08 c0       	rjmp	.+16     	; 0x228a <__stack+0x8b>
    227a:	dd cf       	rjmp	.-70     	; 0x2236 <__stack+0x37>
    }
  else
    FASTSPI_STROBE (CC2420_STXON);
    227c:	40 98       	cbi	0x08, 0	; 8
    227e:	84 e0       	ldi	r24, 0x04	; 4
    2280:	8e bd       	out	0x2e, r24	; 46
    2282:	0d b4       	in	r0, 0x2d	; 45
    2284:	07 fe       	sbrs	r0, 7
    2286:	fd cf       	rjmp	.-6      	; 0x2282 <__stack+0x83>
    2288:	40 9a       	sbi	0x08, 0	; 8
	 //nrk_gpio_set(DEBUG_0);


    // Fill in the rest of the packet now
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    228a:	40 98       	cbi	0x08, 0	; 8
    228c:	8e e3       	ldi	r24, 0x3E	; 62
    228e:	8e bd       	out	0x2e, r24	; 46
    2290:	0d b4       	in	r0, 0x2d	; 45
    2292:	07 fe       	sbrs	r0, 7
    2294:	fd cf       	rjmp	.-6      	; 0x2290 <__stack+0x91>
    2296:	f8 01       	movw	r30, r16
    2298:	82 81       	ldd	r24, Z+2	; 0x02
    229a:	48 2f       	mov	r20, r24
    229c:	55 27       	eor	r21, r21
    229e:	47 fd       	sbrc	r20, 7
    22a0:	50 95       	com	r21
    22a2:	20 e0       	ldi	r18, 0x00	; 0
    22a4:	30 e0       	ldi	r19, 0x00	; 0
    22a6:	0c c0       	rjmp	.+24     	; 0x22c0 <__stack+0xc1>
    22a8:	f8 01       	movw	r30, r16
    22aa:	83 81       	ldd	r24, Z+3	; 0x03
    22ac:	94 81       	ldd	r25, Z+4	; 0x04
    22ae:	a8 0f       	add	r26, r24
    22b0:	b9 1f       	adc	r27, r25
    22b2:	8c 91       	ld	r24, X
    22b4:	8e bd       	out	0x2e, r24	; 46
    22b6:	0d b4       	in	r0, 0x2d	; 45
    22b8:	07 fe       	sbrs	r0, 7
    22ba:	fd cf       	rjmp	.-6      	; 0x22b6 <__stack+0xb7>
    22bc:	2f 5f       	subi	r18, 0xFF	; 255
    22be:	3f 4f       	sbci	r19, 0xFF	; 255
    22c0:	a2 2f       	mov	r26, r18
    22c2:	bb 27       	eor	r27, r27
    22c4:	a4 17       	cp	r26, r20
    22c6:	b5 07       	cpc	r27, r21
    22c8:	7c f3       	brlt	.-34     	; 0x22a8 <__stack+0xa9>
    22ca:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    22cc:	40 98       	cbi	0x08, 0	; 8
    22ce:	8e e3       	ldi	r24, 0x3E	; 62
    22d0:	8e bd       	out	0x2e, r24	; 46
    22d2:	0d b4       	in	r0, 0x2d	; 45
    22d4:	07 fc       	sbrc	r0, 7
    22d6:	05 c0       	rjmp	.+10     	; 0x22e2 <__stack+0xe3>
    22d8:	fc cf       	rjmp	.-8      	; 0x22d2 <__stack+0xd3>
    22da:	0d b4       	in	r0, 0x2d	; 45
    22dc:	07 fc       	sbrc	r0, 7
    22de:	48 c0       	rjmp	.+144    	; 0x2370 <__stack+0x171>
    22e0:	fc cf       	rjmp	.-8      	; 0x22da <__stack+0xdb>
    22e2:	be bc       	out	0x2e, r11	; 46
    22e4:	fa cf       	rjmp	.-12     	; 0x22da <__stack+0xdb>

    //nrk_spin_wait_us(200);
//  FASTSPI_STROBE(CC2420_STXON);
   // Wait for the transmission to begin before exiting (makes sure that this function cannot be called
	// a second time, and thereby cancelling the first transmission (observe the FIFOP + SFD test above).
	while (!SFD_IS_1);
    22e6:	4e 9b       	sbis	0x09, 6	; 9
    22e8:	fe cf       	rjmp	.-4      	; 0x22e6 <__stack+0xe7>
		success = rfSettings.ackReceived;
    }*/

    
	// Turn off the receiver if it should not continue to be enabled
    DISABLE_GLOBAL_INT();
    22ea:	f8 94       	cli
    // XXX hack, temp out
    //if (!rfSettings.receiveOn) { while (SFD_IS_1); /*FASTSPI_STROBE(CC2420_SRFOFF);*/ }
    // while (SFD_IS_1); 
    while (SFD_IS_1); // wait for packet to finish
    22ec:	4e 99       	sbic	0x09, 6	; 9
    22ee:	fe cf       	rjmp	.-4      	; 0x22ec <__stack+0xed>
    	
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    22f0:	40 98       	cbi	0x08, 0	; 8
    22f2:	88 e0       	ldi	r24, 0x08	; 8
    22f4:	8e bd       	out	0x2e, r24	; 46
    22f6:	0d b4       	in	r0, 0x2d	; 45
    22f8:	07 fe       	sbrs	r0, 7
    22fa:	fd cf       	rjmp	.-6      	; 0x22f6 <__stack+0xf7>
    22fc:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHRX);
    22fe:	40 98       	cbi	0x08, 0	; 8
    2300:	88 e0       	ldi	r24, 0x08	; 8
    2302:	8e bd       	out	0x2e, r24	; 46
    2304:	0d b4       	in	r0, 0x2d	; 45
    2306:	07 fe       	sbrs	r0, 7
    2308:	fd cf       	rjmp	.-6      	; 0x2304 <__stack+0x105>
    230a:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    230c:	40 98       	cbi	0x08, 0	; 8
    230e:	89 e0       	ldi	r24, 0x09	; 9
    2310:	8e bd       	out	0x2e, r24	; 46
    2312:	0d b4       	in	r0, 0x2d	; 45
    2314:	07 fe       	sbrs	r0, 7
    2316:	fd cf       	rjmp	.-6      	; 0x2312 <__stack+0x113>
    2318:	40 9a       	sbi	0x08, 0	; 8
	FASTSPI_STROBE(CC2420_SFLUSHTX);
    231a:	40 98       	cbi	0x08, 0	; 8
    231c:	89 e0       	ldi	r24, 0x09	; 9
    231e:	8e bd       	out	0x2e, r24	; 46
    2320:	0d b4       	in	r0, 0x2d	; 45
    2322:	07 fe       	sbrs	r0, 7
    2324:	fd cf       	rjmp	.-6      	; 0x2320 <__stack+0x121>
    2326:	40 9a       	sbi	0x08, 0	; 8

FASTSPI_STROBE(CC2420_SRFOFF);  // shut off radio
    2328:	40 98       	cbi	0x08, 0	; 8
    232a:	86 e0       	ldi	r24, 0x06	; 6
    232c:	8e bd       	out	0x2e, r24	; 46
    232e:	0d b4       	in	r0, 0x2d	; 45
    2330:	07 fe       	sbrs	r0, 7
    2332:	fd cf       	rjmp	.-6      	; 0x232e <__stack+0x12f>
    2334:	40 9a       	sbi	0x08, 0	; 8
    ENABLE_GLOBAL_INT();
    2336:	78 94       	sei
    

    // Increment the sequence number, and return the result
    rfSettings.txSeqNumber++;
    2338:	80 91 bb 05 	lds	r24, 0x05BB
    233c:	8f 5f       	subi	r24, 0xFF	; 255
    233e:	80 93 bb 05 	sts	0x05BB, r24
//	while (SFD_IS_1);
#ifdef RADIO_PRIORITY_CEILING
nrk_sem_post(radio_sem);
    2342:	80 91 b4 05 	lds	r24, 0x05B4
    2346:	90 91 b5 05 	lds	r25, 0x05B5
    234a:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	10 c0       	rjmp	.+32     	; 0x2374 <__stack+0x175>
    
    // Write the packet to the TX FIFO (the FCS is appended automatically when AUTOCRC is enabled)
    // These are only the MAC AGNOSTIC parameters...
    // Slots for example are at a higher layer since they assume TDMA
    
    FASTSPI_WRITE_FIFO((uint8_t*)&packetLength, 1);               // Packet length
    2354:	40 9a       	sbi	0x08, 0	; 8
    frameControlField = pRTI->ackRequest ? RF_FCF_ACK : RF_FCF_NOACK;
    2356:	f8 01       	movw	r30, r16
    2358:	86 81       	ldd	r24, Z+6	; 0x06
    235a:	88 23       	and	r24, r24
    235c:	09 f0       	breq	.+2      	; 0x2360 <__stack+0x161>
    235e:	e7 ce       	rjmp	.-562    	; 0x212e <rf_tx_tdma_packet+0xca>
    2360:	81 e4       	ldi	r24, 0x41	; 65
    2362:	98 e8       	ldi	r25, 0x88	; 136
    2364:	e6 ce       	rjmp	.-564    	; 0x2132 <rf_tx_tdma_packet+0xce>
    FASTSPI_WRITE_FIFO((uint8_t*) &frameControlField, 2);         // Frame control field
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.txSeqNumber, 1);    // Sequence number
    2366:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_WRITE_FIFO((uint8_t*) &rfSettings.panId, 2);          // Dest. PAN ID
    2368:	40 98       	cbi	0x08, 0	; 8
    236a:	8e e3       	ldi	r24, 0x3E	; 62
    236c:	8e bd       	out	0x2e, r24	; 46
    236e:	07 cf       	rjmp	.-498    	; 0x217e <rf_tx_tdma_packet+0x11a>
	 //nrk_gpio_set(DEBUG_0);


    // Fill in the rest of the packet now
    FASTSPI_WRITE_FIFO((uint8_t*) pRTI->pPayload, pRTI->length);  // Payload
    FASTSPI_WRITE_FIFO((uint8_t*) &checksum, 1);         // Checksum
    2370:	40 9a       	sbi	0x08, 0	; 8
    2372:	b9 cf       	rjmp	.-142    	; 0x22e6 <__stack+0xe7>
    2374:	22 96       	adiw	r28, 0x02	; 2
    2376:	0f b6       	in	r0, 0x3f	; 63
    2378:	f8 94       	cli
    237a:	de bf       	out	0x3e, r29	; 62
    237c:	0f be       	out	0x3f, r0	; 63
    237e:	cd bf       	out	0x3d, r28	; 61
    2380:	df 91       	pop	r29
    2382:	cf 91       	pop	r28
    2384:	1f 91       	pop	r17
    2386:	0f 91       	pop	r16
    2388:	ff 90       	pop	r15
    238a:	ef 90       	pop	r14
    238c:	df 90       	pop	r13
    238e:	cf 90       	pop	r12
    2390:	bf 90       	pop	r11
    2392:	08 95       	ret

00002394 <rf_addr_decode_set_my_mac>:
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  
}


void rf_addr_decode_set_my_mac(uint16_t my_mac)
{
    2394:	cf 93       	push	r28
    2396:	df 93       	push	r29
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	22 97       	sbiw	r28, 0x02	; 2
    239e:	0f b6       	in	r0, 0x3f	; 63
    23a0:	f8 94       	cli
    23a2:	de bf       	out	0x3e, r29	; 62
    23a4:	0f be       	out	0x3f, r0	; 63
    23a6:	cd bf       	out	0x3d, r28	; 61
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	89 83       	std	Y+1, r24	; 0x01
uint8_t n;
    rfSettings.myAddr = my_mac;
    23ac:	90 93 c0 05 	sts	0x05C0, r25
    23b0:	80 93 bf 05 	sts	0x05BF, r24
    nrk_spin_wait_us(500);
    23b4:	84 ef       	ldi	r24, 0xF4	; 244
    23b6:	91 e0       	ldi	r25, 0x01	; 1
    23b8:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&my_mac, CC2420RAM_SHORTADDR, 2, n);
    23bc:	40 98       	cbi	0x08, 0	; 8
    23be:	8a ee       	ldi	r24, 0xEA	; 234
    23c0:	8e bd       	out	0x2e, r24	; 46
    23c2:	0d b4       	in	r0, 0x2d	; 45
    23c4:	07 fe       	sbrs	r0, 7
    23c6:	fd cf       	rjmp	.-6      	; 0x23c2 <rf_addr_decode_set_my_mac+0x2e>
    23c8:	80 e8       	ldi	r24, 0x80	; 128
    23ca:	8e bd       	out	0x2e, r24	; 46
    23cc:	0d b4       	in	r0, 0x2d	; 45
    23ce:	07 fe       	sbrs	r0, 7
    23d0:	fd cf       	rjmp	.-6      	; 0x23cc <rf_addr_decode_set_my_mac+0x38>
    23d2:	fe 01       	movw	r30, r28
    23d4:	31 96       	adiw	r30, 0x01	; 1
    23d6:	9e 01       	movw	r18, r28
    23d8:	2d 5f       	subi	r18, 0xFD	; 253
    23da:	3f 4f       	sbci	r19, 0xFF	; 255
    23dc:	80 81       	ld	r24, Z
    23de:	8e bd       	out	0x2e, r24	; 46
    23e0:	0d b4       	in	r0, 0x2d	; 45
    23e2:	07 fe       	sbrs	r0, 7
    23e4:	fd cf       	rjmp	.-6      	; 0x23e0 <rf_addr_decode_set_my_mac+0x4c>
    23e6:	31 96       	adiw	r30, 0x01	; 1
    23e8:	e2 17       	cp	r30, r18
    23ea:	f3 07       	cpc	r31, r19
    23ec:	b9 f7       	brne	.-18     	; 0x23dc <rf_addr_decode_set_my_mac+0x48>
    23ee:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    23f0:	84 ef       	ldi	r24, 0xF4	; 244
    23f2:	91 e0       	ldi	r25, 0x01	; 1
    23f4:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_spin_wait_us>
    23f8:	22 96       	adiw	r28, 0x02	; 2
    23fa:	0f b6       	in	r0, 0x3f	; 63
    23fc:	f8 94       	cli
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	0f be       	out	0x3f, r0	; 63
    2402:	cd bf       	out	0x3d, r28	; 61
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	08 95       	ret

0000240a <rf_security_set_key>:
tx_ctr[3]=counter[3];
}


void rf_security_set_key(uint8_t *key)
{
    240a:	6f 92       	push	r6
    240c:	7f 92       	push	r7
    240e:	8f 92       	push	r8
    2410:	9f 92       	push	r9
    2412:	af 92       	push	r10
    2414:	bf 92       	push	r11
    2416:	cf 92       	push	r12
    2418:	df 92       	push	r13
    241a:	ef 92       	push	r14
    241c:	ff 92       	push	r15
    241e:	0f 93       	push	r16
    2420:	1f 93       	push	r17
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	22 97       	sbiw	r28, 0x02	; 2
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
    2436:	8c 01       	movw	r16, r24
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
    2438:	84 e6       	ldi	r24, 0x64	; 100
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_spin_wait_us>
    2440:	78 01       	movw	r14, r16
    2442:	c1 2c       	mov	r12, r1
    2444:	b1 e0       	ldi	r27, 0x01	; 1
    2446:	db 2e       	mov	r13, r27
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    2448:	3e 01       	movw	r6, r28
    244a:	08 94       	sec
    244c:	61 1c       	adc	r6, r1
    244e:	71 1c       	adc	r7, r1
    2450:	a3 e0       	ldi	r26, 0x03	; 3
    2452:	8a 2e       	mov	r8, r26
    2454:	91 2c       	mov	r9, r1
    2456:	8c 0e       	add	r8, r28
    2458:	9d 1e       	adc	r9, r29

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
	{
    	key_buf=(key[i]<<8)|key[i+1]; 
    245a:	f7 01       	movw	r30, r14
    245c:	80 81       	ld	r24, Z
    245e:	21 81       	ldd	r18, Z+1	; 0x01
    2460:	33 27       	eor	r19, r19
    2462:	99 27       	eor	r25, r25
    2464:	98 2f       	mov	r25, r24
    2466:	88 27       	eor	r24, r24
    2468:	28 2b       	or	r18, r24
    246a:	39 2b       	or	r19, r25
    246c:	3a 83       	std	Y+2, r19	; 0x02
    246e:	29 83       	std	Y+1, r18	; 0x01
   	nrk_spin_wait_us(100); 
    2470:	84 e6       	ldi	r24, 0x64	; 100
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_spin_wait_us>
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
    2478:	40 98       	cbi	0x08, 0	; 8
    247a:	8c 2d       	mov	r24, r12
    247c:	80 68       	ori	r24, 0x80	; 128
    247e:	8e bd       	out	0x2e, r24	; 46
    2480:	0d b4       	in	r0, 0x2d	; 45
    2482:	07 fe       	sbrs	r0, 7
    2484:	fd cf       	rjmp	.-6      	; 0x2480 <rf_security_set_key+0x76>
    2486:	c6 01       	movw	r24, r12
    2488:	95 95       	asr	r25
    248a:	87 95       	ror	r24
    248c:	80 7c       	andi	r24, 0xC0	; 192
    248e:	8e bd       	out	0x2e, r24	; 46
    2490:	0d b4       	in	r0, 0x2d	; 45
    2492:	07 fe       	sbrs	r0, 7
    2494:	fd cf       	rjmp	.-6      	; 0x2490 <rf_security_set_key+0x86>
    2496:	83 01       	movw	r16, r6
    2498:	53 01       	movw	r10, r6
    249a:	f5 01       	movw	r30, r10
    249c:	80 81       	ld	r24, Z
    249e:	8e bd       	out	0x2e, r24	; 46
    24a0:	0d b4       	in	r0, 0x2d	; 45
    24a2:	07 fe       	sbrs	r0, 7
    24a4:	fd cf       	rjmp	.-6      	; 0x24a0 <rf_security_set_key+0x96>
    24a6:	08 94       	sec
    24a8:	a1 1c       	adc	r10, r1
    24aa:	b1 1c       	adc	r11, r1
    24ac:	a8 14       	cp	r10, r8
    24ae:	b9 04       	cpc	r11, r9
    24b0:	a1 f7       	brne	.-24     	; 0x249a <rf_security_set_key+0x90>
    24b2:	40 9a       	sbi	0x08, 0	; 8
    24b4:	08 94       	sec
    24b6:	e1 1c       	adc	r14, r1
    24b8:	f1 1c       	adc	r15, r1
    24ba:	82 e0       	ldi	r24, 0x02	; 2
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	c8 0e       	add	r12, r24
    24c0:	d9 1e       	adc	r13, r25
uint8_t n,i;
uint16_t key_buf;

// Set AES key
nrk_spin_wait_us(100); 
for(i=0; i<8; i++ )
    24c2:	90 e1       	ldi	r25, 0x10	; 16
    24c4:	c9 16       	cp	r12, r25
    24c6:	91 e0       	ldi	r25, 0x01	; 1
    24c8:	d9 06       	cpc	r13, r25
    24ca:	39 f6       	brne	.-114    	; 0x245a <rf_security_set_key+0x50>
   	nrk_spin_wait_us(100); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
    24cc:	84 e6       	ldi	r24, 0x64	; 100
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_spin_wait_us>
    24d4:	20 e1       	ldi	r18, 0x10	; 16
    24d6:	31 e0       	ldi	r19, 0x01	; 1
    24d8:	40 e4       	ldi	r20, 0x40	; 64
    24da:	51 e0       	ldi	r21, 0x01	; 1
for(i=0; i<7; i++ )
	{
    	key_buf=0; 
    24dc:	1a 82       	std	Y+2, r1	; 0x02
    24de:	19 82       	std	Y+1, r1	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    24e0:	40 98       	cbi	0x08, 0	; 8
    24e2:	84 2f       	mov	r24, r20
    24e4:	80 68       	ori	r24, 0x80	; 128
    24e6:	8e bd       	out	0x2e, r24	; 46
    24e8:	0d b4       	in	r0, 0x2d	; 45
    24ea:	07 fe       	sbrs	r0, 7
    24ec:	fd cf       	rjmp	.-6      	; 0x24e8 <rf_security_set_key+0xde>
    24ee:	ca 01       	movw	r24, r20
    24f0:	95 95       	asr	r25
    24f2:	87 95       	ror	r24
    24f4:	80 7c       	andi	r24, 0xC0	; 192
    24f6:	8e bd       	out	0x2e, r24	; 46
    24f8:	0d b4       	in	r0, 0x2d	; 45
    24fa:	07 fe       	sbrs	r0, 7
    24fc:	fd cf       	rjmp	.-6      	; 0x24f8 <rf_security_set_key+0xee>
    24fe:	f8 01       	movw	r30, r16
    2500:	80 81       	ld	r24, Z
    2502:	8e bd       	out	0x2e, r24	; 46
    2504:	0d b4       	in	r0, 0x2d	; 45
    2506:	07 fe       	sbrs	r0, 7
    2508:	fd cf       	rjmp	.-6      	; 0x2504 <rf_security_set_key+0xfa>
    250a:	31 96       	adiw	r30, 0x01	; 1
    250c:	ea 15       	cp	r30, r10
    250e:	fb 05       	cpc	r31, r11
    2510:	b9 f7       	brne	.-18     	; 0x2500 <rf_security_set_key+0xf6>
    2512:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
    2514:	40 98       	cbi	0x08, 0	; 8
    2516:	82 2f       	mov	r24, r18
    2518:	80 68       	ori	r24, 0x80	; 128
    251a:	8e bd       	out	0x2e, r24	; 46
    251c:	0d b4       	in	r0, 0x2d	; 45
    251e:	07 fe       	sbrs	r0, 7
    2520:	fd cf       	rjmp	.-6      	; 0x251c <rf_security_set_key+0x112>
    2522:	c9 01       	movw	r24, r18
    2524:	95 95       	asr	r25
    2526:	87 95       	ror	r24
    2528:	80 7c       	andi	r24, 0xC0	; 192
    252a:	8e bd       	out	0x2e, r24	; 46
    252c:	0d b4       	in	r0, 0x2d	; 45
    252e:	07 fe       	sbrs	r0, 7
    2530:	fd cf       	rjmp	.-6      	; 0x252c <rf_security_set_key+0x122>
    2532:	f8 01       	movw	r30, r16
    2534:	80 81       	ld	r24, Z
    2536:	8e bd       	out	0x2e, r24	; 46
    2538:	0d b4       	in	r0, 0x2d	; 45
    253a:	07 fe       	sbrs	r0, 7
    253c:	fd cf       	rjmp	.-6      	; 0x2538 <rf_security_set_key+0x12e>
    253e:	31 96       	adiw	r30, 0x01	; 1
    2540:	ea 15       	cp	r30, r10
    2542:	fb 05       	cpc	r31, r11
    2544:	b9 f7       	brne	.-18     	; 0x2534 <rf_security_set_key+0x12a>
    2546:	40 9a       	sbi	0x08, 0	; 8
    2548:	2e 5f       	subi	r18, 0xFE	; 254
    254a:	3f 4f       	sbci	r19, 0xFF	; 255
    254c:	4e 5f       	subi	r20, 0xFE	; 254
    254e:	5f 4f       	sbci	r21, 0xFF	; 255
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_KEY0+(i*2)),2,n); 
	}

// Set AES nonce to all zeros
nrk_spin_wait_us(100); 
for(i=0; i<7; i++ )
    2550:	e1 e0       	ldi	r30, 0x01	; 1
    2552:	2e 31       	cpi	r18, 0x1E	; 30
    2554:	3e 07       	cpc	r19, r30
    2556:	11 f6       	brne	.-124    	; 0x24dc <rf_security_set_key+0xd2>
    	key_buf=0; 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+(i*2)),2,n); 
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+(i*2)),2,n); 
	}
	// block counter set 1
    	key_buf=1; 
    2558:	81 e0       	ldi	r24, 0x01	; 1
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	9a 83       	std	Y+2, r25	; 0x02
    255e:	89 83       	std	Y+1, r24	; 0x01
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_TXNONCE+14),2,n); 
    2560:	40 98       	cbi	0x08, 0	; 8
    2562:	8e ec       	ldi	r24, 0xCE	; 206
    2564:	8e bd       	out	0x2e, r24	; 46
    2566:	0d b4       	in	r0, 0x2d	; 45
    2568:	07 fe       	sbrs	r0, 7
    256a:	fd cf       	rjmp	.-6      	; 0x2566 <rf_security_set_key+0x15c>
    256c:	80 e8       	ldi	r24, 0x80	; 128
    256e:	8e bd       	out	0x2e, r24	; 46
    2570:	0d b4       	in	r0, 0x2d	; 45
    2572:	07 fe       	sbrs	r0, 7
    2574:	fd cf       	rjmp	.-6      	; 0x2570 <rf_security_set_key+0x166>
    2576:	f8 01       	movw	r30, r16
    2578:	80 81       	ld	r24, Z
    257a:	8e bd       	out	0x2e, r24	; 46
    257c:	0d b4       	in	r0, 0x2d	; 45
    257e:	07 fe       	sbrs	r0, 7
    2580:	fd cf       	rjmp	.-6      	; 0x257c <rf_security_set_key+0x172>
    2582:	31 96       	adiw	r30, 0x01	; 1
    2584:	ea 15       	cp	r30, r10
    2586:	fb 05       	cpc	r31, r11
    2588:	b9 f7       	brne	.-18     	; 0x2578 <rf_security_set_key+0x16e>
    258a:	40 9a       	sbi	0x08, 0	; 8
    	FASTSPI_WRITE_RAM_LE(&key_buf,(CC2420RAM_RXNONCE+14),2,n); 
    258c:	40 98       	cbi	0x08, 0	; 8
    258e:	8e e9       	ldi	r24, 0x9E	; 158
    2590:	8e bd       	out	0x2e, r24	; 46
    2592:	0d b4       	in	r0, 0x2d	; 45
    2594:	07 fe       	sbrs	r0, 7
    2596:	fd cf       	rjmp	.-6      	; 0x2592 <rf_security_set_key+0x188>
    2598:	80 e8       	ldi	r24, 0x80	; 128
    259a:	8e bd       	out	0x2e, r24	; 46
    259c:	0d b4       	in	r0, 0x2d	; 45
    259e:	07 fe       	sbrs	r0, 7
    25a0:	fd cf       	rjmp	.-6      	; 0x259c <rf_security_set_key+0x192>
    25a2:	f8 01       	movw	r30, r16
    25a4:	80 81       	ld	r24, Z
    25a6:	8e bd       	out	0x2e, r24	; 46
    25a8:	0d b4       	in	r0, 0x2d	; 45
    25aa:	07 fe       	sbrs	r0, 7
    25ac:	fd cf       	rjmp	.-6      	; 0x25a8 <rf_security_set_key+0x19e>
    25ae:	0f 5f       	subi	r16, 0xFF	; 255
    25b0:	1f 4f       	sbci	r17, 0xFF	; 255
    25b2:	0a 15       	cp	r16, r10
    25b4:	1b 05       	cpc	r17, r11
    25b6:	a9 f7       	brne	.-22     	; 0x25a2 <rf_security_set_key+0x198>
    25b8:	40 9a       	sbi	0x08, 0	; 8
    25ba:	22 96       	adiw	r28, 0x02	; 2
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
    25c6:	df 91       	pop	r29
    25c8:	cf 91       	pop	r28
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	ff 90       	pop	r15
    25d0:	ef 90       	pop	r14
    25d2:	df 90       	pop	r13
    25d4:	cf 90       	pop	r12
    25d6:	bf 90       	pop	r11
    25d8:	af 90       	pop	r10
    25da:	9f 90       	pop	r9
    25dc:	8f 90       	pop	r8
    25de:	7f 90       	pop	r7
    25e0:	6f 90       	pop	r6
    25e2:	08 95       	ret

000025e4 <rf_set_rx>:
}



void rf_set_rx(RF_RX_INFO *pRRI, uint8_t channel )
{
    25e4:	1f 93       	push	r17
    25e6:	cf 93       	push	r28
    25e8:	df 93       	push	r29
    25ea:	ec 01       	movw	r28, r24
    25ec:	16 2f       	mov	r17, r22

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    25ee:	80 91 b4 05 	lds	r24, 0x05B4
    25f2:	90 91 b5 05 	lds	r25, 0x05B5
    25f6:	0e 94 62 20 	call	0x40c4	; 0x40c4 <nrk_sem_pend>
#endif

    FASTSPI_STROBE(CC2420_SFLUSHRX);
    25fa:	40 98       	cbi	0x08, 0	; 8
    25fc:	88 e0       	ldi	r24, 0x08	; 8
    25fe:	8e bd       	out	0x2e, r24	; 46
    2600:	0d b4       	in	r0, 0x2d	; 45
    2602:	07 fe       	sbrs	r0, 7
    2604:	fd cf       	rjmp	.-6      	; 0x2600 <rf_set_rx+0x1c>
    2606:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_STROBE(CC2420_SFLUSHRX);
    2608:	40 98       	cbi	0x08, 0	; 8
    260a:	88 e0       	ldi	r24, 0x08	; 8
    260c:	8e bd       	out	0x2e, r24	; 46
    260e:	0d b4       	in	r0, 0x2d	; 45
    2610:	07 fe       	sbrs	r0, 7
    2612:	fd cf       	rjmp	.-6      	; 0x260e <rf_set_rx+0x2a>
    2614:	40 9a       	sbi	0x08, 0	; 8
    halRfSetChannel(channel);
    2616:	81 2f       	mov	r24, r17
    2618:	0e 94 8f 09 	call	0x131e	; 0x131e <halRfSetChannel>
    rfSettings.pRxInfo = pRRI;
    261c:	d0 93 ba 05 	sts	0x05BA, r29
    2620:	c0 93 b9 05 	sts	0x05B9, r28

#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    2624:	80 91 b4 05 	lds	r24, 0x05B4
    2628:	90 91 b5 05 	lds	r25, 0x05B5
    262c:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    2630:	df 91       	pop	r29
    2632:	cf 91       	pop	r28
    2634:	1f 91       	pop	r17
    2636:	08 95       	ret

00002638 <rf_set_channel>:
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
#endif
}
void rf_set_channel( uint8_t channel )
{
    2638:	1f 93       	push	r17
    263a:	18 2f       	mov	r17, r24
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_pend (radio_sem);
    263c:	80 91 b4 05 	lds	r24, 0x05B4
    2640:	90 91 b5 05 	lds	r25, 0x05B5
    2644:	0e 94 62 20 	call	0x40c4	; 0x40c4 <nrk_sem_pend>
#endif
    halRfSetChannel(channel);
    2648:	81 2f       	mov	r24, r17
    264a:	0e 94 8f 09 	call	0x131e	; 0x131e <halRfSetChannel>
#ifdef RADIO_PRIORITY_CEILING
    nrk_sem_post(radio_sem);
    264e:	80 91 b4 05 	lds	r24, 0x05B4
    2652:	90 91 b5 05 	lds	r25, 0x05B5
    2656:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
    265a:	1f 91       	pop	r17
    265c:	08 95       	ret

0000265e <rf_init>:
//      WORD myAddr
//          The 16-bit short address which is used by this node. Must together with the PAN ID form a
//			unique 32-bit identifier to avoid addressing conflicts. Normally, in a 802.15.4 network, the
//			short address will be given to associated nodes by the PAN coordinator.
//-------------------------------------------------------------------------------------------------------
void rf_init(RF_RX_INFO *pRRI, uint8_t channel, uint16_t panId, uint16_t myAddr) {
    265e:	df 92       	push	r13
    2660:	ef 92       	push	r14
    2662:	ff 92       	push	r15
    2664:	0f 93       	push	r16
    2666:	1f 93       	push	r17
    2668:	cf 93       	push	r28
    266a:	df 93       	push	r29
    266c:	cd b7       	in	r28, 0x3d	; 61
    266e:	de b7       	in	r29, 0x3e	; 62
    2670:	22 97       	sbiw	r28, 0x02	; 2
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	de bf       	out	0x3e, r29	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	cd bf       	out	0x3d, r28	; 61
    267c:	8c 01       	movw	r16, r24
    267e:	d6 2e       	mov	r13, r22
    2680:	5a 83       	std	Y+2, r21	; 0x02
    2682:	49 83       	std	Y+1, r20	; 0x01
    2684:	79 01       	movw	r14, r18
    uint8_t n;

#ifdef RADIO_PRIORITY_CEILING
   int8_t v;
    radio_sem = nrk_sem_create(1,RADIO_PRIORITY_CEILING);
    2686:	64 e1       	ldi	r22, 0x14	; 20
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	0e 94 95 1e 	call	0x3d2a	; 0x3d2a <nrk_sem_create>
    268e:	90 93 b5 05 	sts	0x05B5, r25
    2692:	80 93 b4 05 	sts	0x05B4, r24
    if (radio_sem == NULL)
    2696:	89 2b       	or	r24, r25
    2698:	31 f4       	brne	.+12     	; 0x26a6 <rf_init+0x48>
      nrk_kernel_error_add (NRK_SEMAPHORE_CREATE_ERROR, nrk_get_pid ());
    269a:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <nrk_get_pid>
    269e:	68 2f       	mov	r22, r24
    26a0:	8f e0       	ldi	r24, 0x0F	; 15
    26a2:	0e 94 cc 1c 	call	0x3998	; 0x3998 <nrk_kernel_error_add>

  v = nrk_sem_pend (radio_sem);
    26a6:	80 91 b4 05 	lds	r24, 0x05B4
    26aa:	90 91 b5 05 	lds	r25, 0x05B5
    26ae:	0e 94 62 20 	call	0x40c4	; 0x40c4 <nrk_sem_pend>
  if (v == NRK_ERROR) {
    26b2:	8f 3f       	cpi	r24, 0xFF	; 255
    26b4:	21 f4       	brne	.+8      	; 0x26be <rf_init+0x60>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Access to semaphore failed\r\n"));
    26b6:	88 eb       	ldi	r24, 0xB8	; 184
    26b8:	91 e0       	ldi	r25, 0x01	; 1
    26ba:	0e 94 ed 18 	call	0x31da	; 0x31da <nrk_kprintf>
  }
#endif

    // Make sure that the voltage regulator is on, and that the reset pin is inactive
    SET_VREG_ACTIVE();
    26be:	15 9a       	sbi	0x02, 5	; 2
    halWait(1000);
    26c0:	88 ee       	ldi	r24, 0xE8	; 232
    26c2:	93 e0       	ldi	r25, 0x03	; 3
    26c4:	0e 94 4e 19 	call	0x329c	; 0x329c <halWait>
    SET_RESET_ACTIVE();
    26c8:	16 98       	cbi	0x02, 6	; 2
    halWait(1);
    26ca:	81 e0       	ldi	r24, 0x01	; 1
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	0e 94 4e 19 	call	0x329c	; 0x329c <halWait>
    SET_RESET_INACTIVE();
    26d2:	16 9a       	sbi	0x02, 6	; 2
    halWait(100);
    26d4:	84 e6       	ldi	r24, 0x64	; 100
    26d6:	90 e0       	ldi	r25, 0x00	; 0
    26d8:	0e 94 4e 19 	call	0x329c	; 0x329c <halWait>
    // Initialize the FIFOP external interrupt
    //FIFOP_INT_INIT();
    //ENABLE_FIFOP_INT();

    // Turn off all interrupts while we're accessing the CC2420 registers
	DISABLE_GLOBAL_INT();
    26dc:	f8 94       	cli

    // Register modifications
    FASTSPI_STROBE(CC2420_SXOSCON);
    26de:	40 98       	cbi	0x08, 0	; 8
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	8e bd       	out	0x2e, r24	; 46
    26e4:	0d b4       	in	r0, 0x2d	; 45
    26e6:	07 fe       	sbrs	r0, 7
    26e8:	fd cf       	rjmp	.-6      	; 0x26e4 <rf_init+0x86>
    26ea:	40 9a       	sbi	0x08, 0	; 8
    mdmctrl0=0x02E2;
    26ec:	82 ee       	ldi	r24, 0xE2	; 226
    26ee:	92 e0       	ldi	r25, 0x02	; 2
    26f0:	90 93 b8 05 	sts	0x05B8, r25
    26f4:	80 93 b7 05 	sts	0x05B7, r24
    FASTSPI_SETREG(CC2420_MDMCTRL0, mdmctrl0);  // Std Preamble, CRC, no auto ack, no hw addr decoding 
    26f8:	40 98       	cbi	0x08, 0	; 8
    26fa:	81 e1       	ldi	r24, 0x11	; 17
    26fc:	8e bd       	out	0x2e, r24	; 46
    26fe:	0d b4       	in	r0, 0x2d	; 45
    2700:	07 fe       	sbrs	r0, 7
    2702:	fd cf       	rjmp	.-6      	; 0x26fe <rf_init+0xa0>
    2704:	82 e0       	ldi	r24, 0x02	; 2
    2706:	8e bd       	out	0x2e, r24	; 46
    2708:	0d b4       	in	r0, 0x2d	; 45
    270a:	07 fe       	sbrs	r0, 7
    270c:	fd cf       	rjmp	.-6      	; 0x2708 <rf_init+0xaa>
    270e:	82 ee       	ldi	r24, 0xE2	; 226
    2710:	8e bd       	out	0x2e, r24	; 46
    2712:	0d b4       	in	r0, 0x2d	; 45
    2714:	07 fe       	sbrs	r0, 7
    2716:	fd cf       	rjmp	.-6      	; 0x2712 <rf_init+0xb4>
    2718:	40 9a       	sbi	0x08, 0	; 8
    //FASTSPI_SETREG(CC2420_MDMCTRL0, 0x0AF2);  // Turn on automatic packet acknowledgment
						// Turn on hw addre decoding 
    FASTSPI_SETREG(CC2420_MDMCTRL1, 0x0500); // Set the correlation threshold = 20
    271a:	40 98       	cbi	0x08, 0	; 8
    271c:	82 e1       	ldi	r24, 0x12	; 18
    271e:	8e bd       	out	0x2e, r24	; 46
    2720:	0d b4       	in	r0, 0x2d	; 45
    2722:	07 fe       	sbrs	r0, 7
    2724:	fd cf       	rjmp	.-6      	; 0x2720 <rf_init+0xc2>
    2726:	85 e0       	ldi	r24, 0x05	; 5
    2728:	8e bd       	out	0x2e, r24	; 46
    272a:	0d b4       	in	r0, 0x2d	; 45
    272c:	07 fe       	sbrs	r0, 7
    272e:	fd cf       	rjmp	.-6      	; 0x272a <rf_init+0xcc>
    2730:	1e bc       	out	0x2e, r1	; 46
    2732:	0d b4       	in	r0, 0x2d	; 45
    2734:	07 fe       	sbrs	r0, 7
    2736:	fd cf       	rjmp	.-6      	; 0x2732 <rf_init+0xd4>
    2738:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_IOCFG0, 0x007F);   // Set the FIFOP threshold to maximum
    273a:	40 98       	cbi	0x08, 0	; 8
    273c:	8c e1       	ldi	r24, 0x1C	; 28
    273e:	8e bd       	out	0x2e, r24	; 46
    2740:	0d b4       	in	r0, 0x2d	; 45
    2742:	07 fe       	sbrs	r0, 7
    2744:	fd cf       	rjmp	.-6      	; 0x2740 <rf_init+0xe2>
    2746:	1e bc       	out	0x2e, r1	; 46
    2748:	0d b4       	in	r0, 0x2d	; 45
    274a:	07 fe       	sbrs	r0, 7
    274c:	fd cf       	rjmp	.-6      	; 0x2748 <rf_init+0xea>
    274e:	8f e7       	ldi	r24, 0x7F	; 127
    2750:	8e bd       	out	0x2e, r24	; 46
    2752:	0d b4       	in	r0, 0x2d	; 45
    2754:	07 fe       	sbrs	r0, 7
    2756:	fd cf       	rjmp	.-6      	; 0x2752 <rf_init+0xf4>
    2758:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_SECCTRL0, 0x01C4); // Turn off "Security"
    275a:	40 98       	cbi	0x08, 0	; 8
    275c:	89 e1       	ldi	r24, 0x19	; 25
    275e:	8e bd       	out	0x2e, r24	; 46
    2760:	0d b4       	in	r0, 0x2d	; 45
    2762:	07 fe       	sbrs	r0, 7
    2764:	fd cf       	rjmp	.-6      	; 0x2760 <rf_init+0x102>
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	8e bd       	out	0x2e, r24	; 46
    276a:	0d b4       	in	r0, 0x2d	; 45
    276c:	07 fe       	sbrs	r0, 7
    276e:	fd cf       	rjmp	.-6      	; 0x276a <rf_init+0x10c>
    2770:	84 ec       	ldi	r24, 0xC4	; 196
    2772:	8e bd       	out	0x2e, r24	; 46
    2774:	0d b4       	in	r0, 0x2d	; 45
    2776:	07 fe       	sbrs	r0, 7
    2778:	fd cf       	rjmp	.-6      	; 0x2774 <rf_init+0x116>
    277a:	40 9a       	sbi	0x08, 0	; 8
    FASTSPI_SETREG(CC2420_RXCTRL1, 0x1A56); // All default except
    277c:	40 98       	cbi	0x08, 0	; 8
    277e:	87 e1       	ldi	r24, 0x17	; 23
    2780:	8e bd       	out	0x2e, r24	; 46
    2782:	0d b4       	in	r0, 0x2d	; 45
    2784:	07 fe       	sbrs	r0, 7
    2786:	fd cf       	rjmp	.-6      	; 0x2782 <rf_init+0x124>
    2788:	8a e1       	ldi	r24, 0x1A	; 26
    278a:	8e bd       	out	0x2e, r24	; 46
    278c:	0d b4       	in	r0, 0x2d	; 45
    278e:	07 fe       	sbrs	r0, 7
    2790:	fd cf       	rjmp	.-6      	; 0x278c <rf_init+0x12e>
    2792:	86 e5       	ldi	r24, 0x56	; 86
    2794:	8e bd       	out	0x2e, r24	; 46
    2796:	0d b4       	in	r0, 0x2d	; 45
    2798:	07 fe       	sbrs	r0, 7
    279a:	fd cf       	rjmp	.-6      	; 0x2796 <rf_init+0x138>
    279c:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    
   printf( "myAddr=%d\r\n",myAddr );
*/

    nrk_spin_wait_us(500);
    279e:	84 ef       	ldi	r24, 0xF4	; 244
    27a0:	91 e0       	ldi	r25, 0x01	; 1
    27a2:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_spin_wait_us>
    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
    27a6:	40 98       	cbi	0x08, 0	; 8
    27a8:	88 ee       	ldi	r24, 0xE8	; 232
    27aa:	8e bd       	out	0x2e, r24	; 46
    27ac:	0d b4       	in	r0, 0x2d	; 45
    27ae:	07 fe       	sbrs	r0, 7
    27b0:	fd cf       	rjmp	.-6      	; 0x27ac <rf_init+0x14e>
    27b2:	80 e8       	ldi	r24, 0x80	; 128
    27b4:	8e bd       	out	0x2e, r24	; 46
    27b6:	0d b4       	in	r0, 0x2d	; 45
    27b8:	07 fe       	sbrs	r0, 7
    27ba:	fd cf       	rjmp	.-6      	; 0x27b6 <rf_init+0x158>
    27bc:	fe 01       	movw	r30, r28
    27be:	31 96       	adiw	r30, 0x01	; 1
    27c0:	9e 01       	movw	r18, r28
    27c2:	2d 5f       	subi	r18, 0xFD	; 253
    27c4:	3f 4f       	sbci	r19, 0xFF	; 255
    27c6:	80 81       	ld	r24, Z
    27c8:	8e bd       	out	0x2e, r24	; 46
    27ca:	0d b4       	in	r0, 0x2d	; 45
    27cc:	07 fe       	sbrs	r0, 7
    27ce:	fd cf       	rjmp	.-6      	; 0x27ca <rf_init+0x16c>
    27d0:	31 96       	adiw	r30, 0x01	; 1
    27d2:	e2 17       	cp	r30, r18
    27d4:	f3 07       	cpc	r31, r19
    27d6:	b9 f7       	brne	.-18     	; 0x27c6 <rf_init+0x168>
    27d8:	40 9a       	sbi	0x08, 0	; 8
    nrk_spin_wait_us(500);
    27da:	84 ef       	ldi	r24, 0xF4	; 244
    27dc:	91 e0       	ldi	r25, 0x01	; 1
    27de:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_spin_wait_us>

  	ENABLE_GLOBAL_INT();
    27e2:	78 94       	sei

    // Set the RF channel
    halRfSetChannel(channel);
    27e4:	8d 2d       	mov	r24, r13
    27e6:	0e 94 8f 09 	call	0x131e	; 0x131e <halRfSetChannel>

    // Turn interrupts back on
	ENABLE_GLOBAL_INT();
    27ea:	78 94       	sei

	// Set the protocol configuration
	rfSettings.pRxInfo = pRRI;
    27ec:	10 93 ba 05 	sts	0x05BA, r17
    27f0:	00 93 b9 05 	sts	0x05B9, r16
	rfSettings.panId = panId;
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	9a 81       	ldd	r25, Y+2	; 0x02
    27f8:	90 93 be 05 	sts	0x05BE, r25
    27fc:	80 93 bd 05 	sts	0x05BD, r24
	rfSettings.myAddr = myAddr;
    2800:	f0 92 c0 05 	sts	0x05C0, r15
    2804:	e0 92 bf 05 	sts	0x05BF, r14
	rfSettings.txSeqNumber = 0;
    2808:	10 92 bb 05 	sts	0x05BB, r1
        rfSettings.receiveOn = FALSE;
    280c:	10 92 c1 05 	sts	0x05C1, r1

	// Wait for the crystal oscillator to become stable
    halRfWaitForCrystalOscillator();
    2810:	0e 94 ae 09 	call	0x135c	; 0x135c <halRfWaitForCrystalOscillator>
//    FASTSPI_WRITE_RAM_LE(&myAddr, CC2420RAM_SHORTADDR, 2, n);
//    FASTSPI_WRITE_RAM_LE(&panId, CC2420RAM_PANID, 2, n);
  //	ENABLE_GLOBAL_INT();

#ifdef RADIO_PRIORITY_CEILING
  v = nrk_sem_post (radio_sem);
    2814:	80 91 b4 05 	lds	r24, 0x05B4
    2818:	90 91 b5 05 	lds	r25, 0x05B5
    281c:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <nrk_sem_post>
  if (v == NRK_ERROR) {
    2820:	8f 3f       	cpi	r24, 0xFF	; 255
    2822:	39 f4       	brne	.+14     	; 0x2832 <rf_init+0x1d4>
    nrk_kprintf (PSTR ("CC2420 ERROR:  Release of semaphore failed\r\n"));
    2824:	8b e8       	ldi	r24, 0x8B	; 139
    2826:	91 e0       	ldi	r25, 0x01	; 1
    2828:	0e 94 ed 18 	call	0x31da	; 0x31da <nrk_kprintf>
    _nrk_errno_set (2);
    282c:	82 e0       	ldi	r24, 0x02	; 2
    282e:	0e 94 07 1c 	call	0x380e	; 0x380e <_nrk_errno_set>
  }
#endif

auto_ack_enable=0;
    2832:	10 92 c4 05 	sts	0x05C4, r1
security_enable=0;
    2836:	10 92 b6 05 	sts	0x05B6, r1
last_pkt_encrypted=0;
    283a:	10 92 c5 05 	sts	0x05C5, r1
    283e:	22 96       	adiw	r28, 0x02	; 2
    2840:	0f b6       	in	r0, 0x3f	; 63
    2842:	f8 94       	cli
    2844:	de bf       	out	0x3e, r29	; 62
    2846:	0f be       	out	0x3f, r0	; 63
    2848:	cd bf       	out	0x3d, r28	; 61
    284a:	df 91       	pop	r29
    284c:	cf 91       	pop	r28
    284e:	1f 91       	pop	r17
    2850:	0f 91       	pop	r16
    2852:	ff 90       	pop	r15
    2854:	ef 90       	pop	r14
    2856:	df 90       	pop	r13
    2858:	08 95       	ret

0000285a <getc1>:
    285a:	20 91 dd 05 	lds	r18, 0x05DD
    285e:	80 91 cb 05 	lds	r24, 0x05CB
    2862:	28 17       	cp	r18, r24
    2864:	81 f0       	breq	.+32     	; 0x2886 <getc1+0x2c>
    2866:	e2 2f       	mov	r30, r18
    2868:	ff 27       	eor	r31, r31
    286a:	e4 53       	subi	r30, 0x34	; 52
    286c:	fa 4f       	sbci	r31, 0xFA	; 250
    286e:	e0 81       	ld	r30, Z
    2870:	82 2f       	mov	r24, r18
    2872:	8f 5f       	subi	r24, 0xFF	; 255
    2874:	80 93 dd 05 	sts	0x05DD, r24
    2878:	80 31       	cpi	r24, 0x10	; 16
    287a:	11 f4       	brne	.+4      	; 0x2880 <getc1+0x26>
    287c:	10 92 dd 05 	sts	0x05DD, r1
    2880:	8e 2f       	mov	r24, r30
    2882:	99 27       	eor	r25, r25
    2884:	08 95       	ret
    2886:	80 91 c8 00 	lds	r24, 0x00C8
    288a:	87 ff       	sbrs	r24, 7
    288c:	fc cf       	rjmp	.-8      	; 0x2886 <getc1+0x2c>
    288e:	80 91 c8 00 	lds	r24, 0x00C8
    2892:	8f 77       	andi	r24, 0x7F	; 127
    2894:	80 93 c8 00 	sts	0x00C8, r24
    2898:	80 91 ce 00 	lds	r24, 0x00CE
    289c:	99 27       	eor	r25, r25
    289e:	08 95       	ret

000028a0 <nrk_uart_data_ready>:
    28a0:	88 23       	and	r24, r24
    28a2:	51 f4       	brne	.+20     	; 0x28b8 <nrk_uart_data_ready+0x18>
    28a4:	80 91 c0 00 	lds	r24, 0x00C0
    28a8:	99 27       	eor	r25, r25
    28aa:	87 fd       	sbrc	r24, 7
    28ac:	90 95       	com	r25
    28ae:	88 27       	eor	r24, r24
    28b0:	99 0f       	add	r25, r25
    28b2:	88 1f       	adc	r24, r24
    28b4:	99 27       	eor	r25, r25
    28b6:	08 95       	ret
    28b8:	81 30       	cpi	r24, 0x01	; 1
    28ba:	19 f0       	breq	.+6      	; 0x28c2 <nrk_uart_data_ready+0x22>
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	08 95       	ret
    28c2:	20 e0       	ldi	r18, 0x00	; 0
    28c4:	30 e0       	ldi	r19, 0x00	; 0
    28c6:	90 91 dd 05 	lds	r25, 0x05DD
    28ca:	80 91 cb 05 	lds	r24, 0x05CB
    28ce:	98 17       	cp	r25, r24
    28d0:	11 f0       	breq	.+4      	; 0x28d6 <nrk_uart_data_ready+0x36>
    28d2:	21 e0       	ldi	r18, 0x01	; 1
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	c9 01       	movw	r24, r18
    28d8:	08 95       	ret

000028da <PORT_INIT>:
    28da:	85 b7       	in	r24, 0x35	; 53
    28dc:	80 61       	ori	r24, 0x10	; 16
    28de:	85 bf       	out	0x35, r24	; 53
    28e0:	86 e0       	ldi	r24, 0x06	; 6
    28e2:	84 b9       	out	0x04, r24	; 4
    28e4:	87 e0       	ldi	r24, 0x07	; 7
    28e6:	85 b9       	out	0x05, r24	; 5
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	87 b9       	out	0x07, r24	; 7
    28ec:	88 b9       	out	0x08, r24	; 8
    28ee:	8c e3       	ldi	r24, 0x3C	; 60
    28f0:	8d b9       	out	0x0d, r24	; 13
    28f2:	8b e0       	ldi	r24, 0x0B	; 11
    28f4:	8a b9       	out	0x0a, r24	; 10
    28f6:	8e e3       	ldi	r24, 0x3E	; 62
    28f8:	8e b9       	out	0x0e, r24	; 14
    28fa:	88 e7       	ldi	r24, 0x78	; 120
    28fc:	81 b9       	out	0x01, r24	; 1
    28fe:	80 e4       	ldi	r24, 0x40	; 64
    2900:	82 b9       	out	0x02, r24	; 2
    2902:	08 95       	ret

00002904 <nrk_setup_ports>:
    2904:	0e 94 6d 14 	call	0x28da	; 0x28da <PORT_INIT>
    2908:	80 e5       	ldi	r24, 0x50	; 80
    290a:	8c bd       	out	0x2c, r24	; 44
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	8d bd       	out	0x2d, r24	; 45
    2910:	08 95       	ret

00002912 <nrk_gpio_set>:
    2912:	8f 3f       	cpi	r24, 0xFF	; 255
    2914:	09 f4       	brne	.+2      	; 0x2918 <nrk_gpio_set+0x6>
    2916:	7f c0       	rjmp	.+254    	; 0x2a16 <nrk_gpio_set+0x104>
    2918:	48 2f       	mov	r20, r24
    291a:	55 27       	eor	r21, r21
    291c:	9a 01       	movw	r18, r20
    291e:	27 70       	andi	r18, 0x07	; 7
    2920:	30 70       	andi	r19, 0x00	; 0
    2922:	22 30       	cpi	r18, 0x02	; 2
    2924:	31 05       	cpc	r19, r1
    2926:	a9 f1       	breq	.+106    	; 0x2992 <nrk_gpio_set+0x80>
    2928:	23 30       	cpi	r18, 0x03	; 3
    292a:	31 05       	cpc	r19, r1
    292c:	44 f4       	brge	.+16     	; 0x293e <nrk_gpio_set+0x2c>
    292e:	21 15       	cp	r18, r1
    2930:	31 05       	cpc	r19, r1
    2932:	89 f0       	breq	.+34     	; 0x2956 <nrk_gpio_set+0x44>
    2934:	21 30       	cpi	r18, 0x01	; 1
    2936:	31 05       	cpc	r19, r1
    2938:	09 f0       	breq	.+2      	; 0x293c <nrk_gpio_set+0x2a>
    293a:	6d c0       	rjmp	.+218    	; 0x2a16 <nrk_gpio_set+0x104>
    293c:	1c c0       	rjmp	.+56     	; 0x2976 <nrk_gpio_set+0x64>
    293e:	24 30       	cpi	r18, 0x04	; 4
    2940:	31 05       	cpc	r19, r1
    2942:	09 f4       	brne	.+2      	; 0x2946 <nrk_gpio_set+0x34>
    2944:	46 c0       	rjmp	.+140    	; 0x29d2 <nrk_gpio_set+0xc0>
    2946:	24 30       	cpi	r18, 0x04	; 4
    2948:	31 05       	cpc	r19, r1
    294a:	9c f1       	brlt	.+102    	; 0x29b2 <nrk_gpio_set+0xa0>
    294c:	25 30       	cpi	r18, 0x05	; 5
    294e:	31 05       	cpc	r19, r1
    2950:	09 f0       	breq	.+2      	; 0x2954 <nrk_gpio_set+0x42>
    2952:	61 c0       	rjmp	.+194    	; 0x2a16 <nrk_gpio_set+0x104>
    2954:	4e c0       	rjmp	.+156    	; 0x29f2 <nrk_gpio_set+0xe0>
    2956:	22 b1       	in	r18, 0x02	; 2
    2958:	a3 e0       	ldi	r26, 0x03	; 3
    295a:	56 95       	lsr	r21
    295c:	47 95       	ror	r20
    295e:	aa 95       	dec	r26
    2960:	e1 f7       	brne	.-8      	; 0x295a <nrk_gpio_set+0x48>
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	02 c0       	rjmp	.+4      	; 0x296c <nrk_gpio_set+0x5a>
    2968:	88 0f       	add	r24, r24
    296a:	99 1f       	adc	r25, r25
    296c:	4a 95       	dec	r20
    296e:	e2 f7       	brpl	.-8      	; 0x2968 <nrk_gpio_set+0x56>
    2970:	28 2b       	or	r18, r24
    2972:	22 b9       	out	0x02, r18	; 2
    2974:	4d c0       	rjmp	.+154    	; 0x2a10 <nrk_gpio_set+0xfe>
    2976:	85 b1       	in	r24, 0x05	; 5
    2978:	f3 e0       	ldi	r31, 0x03	; 3
    297a:	56 95       	lsr	r21
    297c:	47 95       	ror	r20
    297e:	fa 95       	dec	r31
    2980:	e1 f7       	brne	.-8      	; 0x297a <nrk_gpio_set+0x68>
    2982:	02 c0       	rjmp	.+4      	; 0x2988 <nrk_gpio_set+0x76>
    2984:	22 0f       	add	r18, r18
    2986:	33 1f       	adc	r19, r19
    2988:	4a 95       	dec	r20
    298a:	e2 f7       	brpl	.-8      	; 0x2984 <nrk_gpio_set+0x72>
    298c:	82 2b       	or	r24, r18
    298e:	85 b9       	out	0x05, r24	; 5
    2990:	3f c0       	rjmp	.+126    	; 0x2a10 <nrk_gpio_set+0xfe>
    2992:	28 b1       	in	r18, 0x08	; 8
    2994:	e3 e0       	ldi	r30, 0x03	; 3
    2996:	56 95       	lsr	r21
    2998:	47 95       	ror	r20
    299a:	ea 95       	dec	r30
    299c:	e1 f7       	brne	.-8      	; 0x2996 <nrk_gpio_set+0x84>
    299e:	81 e0       	ldi	r24, 0x01	; 1
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	02 c0       	rjmp	.+4      	; 0x29a8 <nrk_gpio_set+0x96>
    29a4:	88 0f       	add	r24, r24
    29a6:	99 1f       	adc	r25, r25
    29a8:	4a 95       	dec	r20
    29aa:	e2 f7       	brpl	.-8      	; 0x29a4 <nrk_gpio_set+0x92>
    29ac:	28 2b       	or	r18, r24
    29ae:	28 b9       	out	0x08, r18	; 8
    29b0:	2f c0       	rjmp	.+94     	; 0x2a10 <nrk_gpio_set+0xfe>
    29b2:	2b b1       	in	r18, 0x0b	; 11
    29b4:	73 e0       	ldi	r23, 0x03	; 3
    29b6:	56 95       	lsr	r21
    29b8:	47 95       	ror	r20
    29ba:	7a 95       	dec	r23
    29bc:	e1 f7       	brne	.-8      	; 0x29b6 <nrk_gpio_set+0xa4>
    29be:	81 e0       	ldi	r24, 0x01	; 1
    29c0:	90 e0       	ldi	r25, 0x00	; 0
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <nrk_gpio_set+0xb6>
    29c4:	88 0f       	add	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	4a 95       	dec	r20
    29ca:	e2 f7       	brpl	.-8      	; 0x29c4 <nrk_gpio_set+0xb2>
    29cc:	28 2b       	or	r18, r24
    29ce:	2b b9       	out	0x0b, r18	; 11
    29d0:	1f c0       	rjmp	.+62     	; 0x2a10 <nrk_gpio_set+0xfe>
    29d2:	2e b1       	in	r18, 0x0e	; 14
    29d4:	63 e0       	ldi	r22, 0x03	; 3
    29d6:	56 95       	lsr	r21
    29d8:	47 95       	ror	r20
    29da:	6a 95       	dec	r22
    29dc:	e1 f7       	brne	.-8      	; 0x29d6 <nrk_gpio_set+0xc4>
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	02 c0       	rjmp	.+4      	; 0x29e8 <nrk_gpio_set+0xd6>
    29e4:	88 0f       	add	r24, r24
    29e6:	99 1f       	adc	r25, r25
    29e8:	4a 95       	dec	r20
    29ea:	e2 f7       	brpl	.-8      	; 0x29e4 <nrk_gpio_set+0xd2>
    29ec:	28 2b       	or	r18, r24
    29ee:	2e b9       	out	0x0e, r18	; 14
    29f0:	0f c0       	rjmp	.+30     	; 0x2a10 <nrk_gpio_set+0xfe>
    29f2:	21 b3       	in	r18, 0x11	; 17
    29f4:	33 e0       	ldi	r19, 0x03	; 3
    29f6:	56 95       	lsr	r21
    29f8:	47 95       	ror	r20
    29fa:	3a 95       	dec	r19
    29fc:	e1 f7       	brne	.-8      	; 0x29f6 <nrk_gpio_set+0xe4>
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	02 c0       	rjmp	.+4      	; 0x2a08 <nrk_gpio_set+0xf6>
    2a04:	88 0f       	add	r24, r24
    2a06:	99 1f       	adc	r25, r25
    2a08:	4a 95       	dec	r20
    2a0a:	e2 f7       	brpl	.-8      	; 0x2a04 <nrk_gpio_set+0xf2>
    2a0c:	28 2b       	or	r18, r24
    2a0e:	21 bb       	out	0x11, r18	; 17
    2a10:	81 e0       	ldi	r24, 0x01	; 1
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	08 95       	ret
    2a16:	8f ef       	ldi	r24, 0xFF	; 255
    2a18:	9f ef       	ldi	r25, 0xFF	; 255
    2a1a:	08 95       	ret

00002a1c <nrk_gpio_clr>:
    2a1c:	8f 3f       	cpi	r24, 0xFF	; 255
    2a1e:	09 f4       	brne	.+2      	; 0x2a22 <nrk_gpio_clr+0x6>
    2a20:	86 c0       	rjmp	.+268    	; 0x2b2e <nrk_gpio_clr+0x112>
    2a22:	48 2f       	mov	r20, r24
    2a24:	55 27       	eor	r21, r21
    2a26:	9a 01       	movw	r18, r20
    2a28:	27 70       	andi	r18, 0x07	; 7
    2a2a:	30 70       	andi	r19, 0x00	; 0
    2a2c:	22 30       	cpi	r18, 0x02	; 2
    2a2e:	31 05       	cpc	r19, r1
    2a30:	c1 f1       	breq	.+112    	; 0x2aa2 <nrk_gpio_clr+0x86>
    2a32:	23 30       	cpi	r18, 0x03	; 3
    2a34:	31 05       	cpc	r19, r1
    2a36:	44 f4       	brge	.+16     	; 0x2a48 <nrk_gpio_clr+0x2c>
    2a38:	21 15       	cp	r18, r1
    2a3a:	31 05       	cpc	r19, r1
    2a3c:	89 f0       	breq	.+34     	; 0x2a60 <nrk_gpio_clr+0x44>
    2a3e:	21 30       	cpi	r18, 0x01	; 1
    2a40:	31 05       	cpc	r19, r1
    2a42:	09 f0       	breq	.+2      	; 0x2a46 <nrk_gpio_clr+0x2a>
    2a44:	74 c0       	rjmp	.+232    	; 0x2b2e <nrk_gpio_clr+0x112>
    2a46:	1d c0       	rjmp	.+58     	; 0x2a82 <nrk_gpio_clr+0x66>
    2a48:	24 30       	cpi	r18, 0x04	; 4
    2a4a:	31 05       	cpc	r19, r1
    2a4c:	09 f4       	brne	.+2      	; 0x2a50 <nrk_gpio_clr+0x34>
    2a4e:	4b c0       	rjmp	.+150    	; 0x2ae6 <nrk_gpio_clr+0xca>
    2a50:	24 30       	cpi	r18, 0x04	; 4
    2a52:	31 05       	cpc	r19, r1
    2a54:	bc f1       	brlt	.+110    	; 0x2ac4 <nrk_gpio_clr+0xa8>
    2a56:	25 30       	cpi	r18, 0x05	; 5
    2a58:	31 05       	cpc	r19, r1
    2a5a:	09 f0       	breq	.+2      	; 0x2a5e <nrk_gpio_clr+0x42>
    2a5c:	68 c0       	rjmp	.+208    	; 0x2b2e <nrk_gpio_clr+0x112>
    2a5e:	54 c0       	rjmp	.+168    	; 0x2b08 <nrk_gpio_clr+0xec>
    2a60:	22 b1       	in	r18, 0x02	; 2
    2a62:	73 e0       	ldi	r23, 0x03	; 3
    2a64:	56 95       	lsr	r21
    2a66:	47 95       	ror	r20
    2a68:	7a 95       	dec	r23
    2a6a:	e1 f7       	brne	.-8      	; 0x2a64 <nrk_gpio_clr+0x48>
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
    2a70:	02 c0       	rjmp	.+4      	; 0x2a76 <nrk_gpio_clr+0x5a>
    2a72:	88 0f       	add	r24, r24
    2a74:	99 1f       	adc	r25, r25
    2a76:	4a 95       	dec	r20
    2a78:	e2 f7       	brpl	.-8      	; 0x2a72 <nrk_gpio_clr+0x56>
    2a7a:	80 95       	com	r24
    2a7c:	82 23       	and	r24, r18
    2a7e:	82 b9       	out	0x02, r24	; 2
    2a80:	53 c0       	rjmp	.+166    	; 0x2b28 <nrk_gpio_clr+0x10c>
    2a82:	95 b1       	in	r25, 0x05	; 5
    2a84:	63 e0       	ldi	r22, 0x03	; 3
    2a86:	56 95       	lsr	r21
    2a88:	47 95       	ror	r20
    2a8a:	6a 95       	dec	r22
    2a8c:	e1 f7       	brne	.-8      	; 0x2a86 <nrk_gpio_clr+0x6a>
    2a8e:	02 c0       	rjmp	.+4      	; 0x2a94 <nrk_gpio_clr+0x78>
    2a90:	22 0f       	add	r18, r18
    2a92:	33 1f       	adc	r19, r19
    2a94:	4a 95       	dec	r20
    2a96:	e2 f7       	brpl	.-8      	; 0x2a90 <nrk_gpio_clr+0x74>
    2a98:	82 2f       	mov	r24, r18
    2a9a:	80 95       	com	r24
    2a9c:	89 23       	and	r24, r25
    2a9e:	85 b9       	out	0x05, r24	; 5
    2aa0:	43 c0       	rjmp	.+134    	; 0x2b28 <nrk_gpio_clr+0x10c>
    2aa2:	28 b1       	in	r18, 0x08	; 8
    2aa4:	33 e0       	ldi	r19, 0x03	; 3
    2aa6:	56 95       	lsr	r21
    2aa8:	47 95       	ror	r20
    2aaa:	3a 95       	dec	r19
    2aac:	e1 f7       	brne	.-8      	; 0x2aa6 <nrk_gpio_clr+0x8a>
    2aae:	81 e0       	ldi	r24, 0x01	; 1
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	02 c0       	rjmp	.+4      	; 0x2ab8 <nrk_gpio_clr+0x9c>
    2ab4:	88 0f       	add	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	4a 95       	dec	r20
    2aba:	e2 f7       	brpl	.-8      	; 0x2ab4 <nrk_gpio_clr+0x98>
    2abc:	80 95       	com	r24
    2abe:	82 23       	and	r24, r18
    2ac0:	88 b9       	out	0x08, r24	; 8
    2ac2:	32 c0       	rjmp	.+100    	; 0x2b28 <nrk_gpio_clr+0x10c>
    2ac4:	2b b1       	in	r18, 0x0b	; 11
    2ac6:	93 e0       	ldi	r25, 0x03	; 3
    2ac8:	56 95       	lsr	r21
    2aca:	47 95       	ror	r20
    2acc:	9a 95       	dec	r25
    2ace:	e1 f7       	brne	.-8      	; 0x2ac8 <nrk_gpio_clr+0xac>
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	02 c0       	rjmp	.+4      	; 0x2ada <nrk_gpio_clr+0xbe>
    2ad6:	88 0f       	add	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	4a 95       	dec	r20
    2adc:	e2 f7       	brpl	.-8      	; 0x2ad6 <nrk_gpio_clr+0xba>
    2ade:	80 95       	com	r24
    2ae0:	82 23       	and	r24, r18
    2ae2:	8b b9       	out	0x0b, r24	; 11
    2ae4:	21 c0       	rjmp	.+66     	; 0x2b28 <nrk_gpio_clr+0x10c>
    2ae6:	2e b1       	in	r18, 0x0e	; 14
    2ae8:	83 e0       	ldi	r24, 0x03	; 3
    2aea:	56 95       	lsr	r21
    2aec:	47 95       	ror	r20
    2aee:	8a 95       	dec	r24
    2af0:	e1 f7       	brne	.-8      	; 0x2aea <nrk_gpio_clr+0xce>
    2af2:	81 e0       	ldi	r24, 0x01	; 1
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	02 c0       	rjmp	.+4      	; 0x2afc <nrk_gpio_clr+0xe0>
    2af8:	88 0f       	add	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	4a 95       	dec	r20
    2afe:	e2 f7       	brpl	.-8      	; 0x2af8 <nrk_gpio_clr+0xdc>
    2b00:	80 95       	com	r24
    2b02:	82 23       	and	r24, r18
    2b04:	8e b9       	out	0x0e, r24	; 14
    2b06:	10 c0       	rjmp	.+32     	; 0x2b28 <nrk_gpio_clr+0x10c>
    2b08:	21 b3       	in	r18, 0x11	; 17
    2b0a:	b3 e0       	ldi	r27, 0x03	; 3
    2b0c:	56 95       	lsr	r21
    2b0e:	47 95       	ror	r20
    2b10:	ba 95       	dec	r27
    2b12:	e1 f7       	brne	.-8      	; 0x2b0c <nrk_gpio_clr+0xf0>
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	02 c0       	rjmp	.+4      	; 0x2b1e <nrk_gpio_clr+0x102>
    2b1a:	88 0f       	add	r24, r24
    2b1c:	99 1f       	adc	r25, r25
    2b1e:	4a 95       	dec	r20
    2b20:	e2 f7       	brpl	.-8      	; 0x2b1a <nrk_gpio_clr+0xfe>
    2b22:	80 95       	com	r24
    2b24:	82 23       	and	r24, r18
    2b26:	81 bb       	out	0x11, r24	; 17
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	08 95       	ret
    2b2e:	8f ef       	ldi	r24, 0xFF	; 255
    2b30:	9f ef       	ldi	r25, 0xFF	; 255
    2b32:	08 95       	ret

00002b34 <nrk_gpio_get>:
    2b34:	8f 3f       	cpi	r24, 0xFF	; 255
    2b36:	a9 f1       	breq	.+106    	; 0x2ba2 <nrk_gpio_get+0x6e>
    2b38:	28 2f       	mov	r18, r24
    2b3a:	33 27       	eor	r19, r19
    2b3c:	c9 01       	movw	r24, r18
    2b3e:	87 70       	andi	r24, 0x07	; 7
    2b40:	90 70       	andi	r25, 0x00	; 0
    2b42:	82 30       	cpi	r24, 0x02	; 2
    2b44:	91 05       	cpc	r25, r1
    2b46:	a9 f0       	breq	.+42     	; 0x2b72 <nrk_gpio_get+0x3e>
    2b48:	83 30       	cpi	r24, 0x03	; 3
    2b4a:	91 05       	cpc	r25, r1
    2b4c:	2c f4       	brge	.+10     	; 0x2b58 <nrk_gpio_get+0x24>
    2b4e:	00 97       	sbiw	r24, 0x00	; 0
    2b50:	61 f0       	breq	.+24     	; 0x2b6a <nrk_gpio_get+0x36>
    2b52:	01 97       	sbiw	r24, 0x01	; 1
    2b54:	31 f5       	brne	.+76     	; 0x2ba2 <nrk_gpio_get+0x6e>
    2b56:	0b c0       	rjmp	.+22     	; 0x2b6e <nrk_gpio_get+0x3a>
    2b58:	84 30       	cpi	r24, 0x04	; 4
    2b5a:	91 05       	cpc	r25, r1
    2b5c:	71 f0       	breq	.+28     	; 0x2b7a <nrk_gpio_get+0x46>
    2b5e:	84 30       	cpi	r24, 0x04	; 4
    2b60:	91 05       	cpc	r25, r1
    2b62:	4c f0       	brlt	.+18     	; 0x2b76 <nrk_gpio_get+0x42>
    2b64:	05 97       	sbiw	r24, 0x05	; 5
    2b66:	e9 f4       	brne	.+58     	; 0x2ba2 <nrk_gpio_get+0x6e>
    2b68:	0a c0       	rjmp	.+20     	; 0x2b7e <nrk_gpio_get+0x4a>
    2b6a:	80 b1       	in	r24, 0x00	; 0
    2b6c:	09 c0       	rjmp	.+18     	; 0x2b80 <nrk_gpio_get+0x4c>
    2b6e:	83 b1       	in	r24, 0x03	; 3
    2b70:	07 c0       	rjmp	.+14     	; 0x2b80 <nrk_gpio_get+0x4c>
    2b72:	86 b1       	in	r24, 0x06	; 6
    2b74:	05 c0       	rjmp	.+10     	; 0x2b80 <nrk_gpio_get+0x4c>
    2b76:	89 b1       	in	r24, 0x09	; 9
    2b78:	03 c0       	rjmp	.+6      	; 0x2b80 <nrk_gpio_get+0x4c>
    2b7a:	8c b1       	in	r24, 0x0c	; 12
    2b7c:	01 c0       	rjmp	.+2      	; 0x2b80 <nrk_gpio_get+0x4c>
    2b7e:	8f b1       	in	r24, 0x0f	; 15
    2b80:	99 27       	eor	r25, r25
    2b82:	e3 e0       	ldi	r30, 0x03	; 3
    2b84:	36 95       	lsr	r19
    2b86:	27 95       	ror	r18
    2b88:	ea 95       	dec	r30
    2b8a:	e1 f7       	brne	.-8      	; 0x2b84 <nrk_gpio_get+0x50>
    2b8c:	02 c0       	rjmp	.+4      	; 0x2b92 <nrk_gpio_get+0x5e>
    2b8e:	95 95       	asr	r25
    2b90:	87 95       	ror	r24
    2b92:	2a 95       	dec	r18
    2b94:	e2 f7       	brpl	.-8      	; 0x2b8e <nrk_gpio_get+0x5a>
    2b96:	99 27       	eor	r25, r25
    2b98:	87 fd       	sbrc	r24, 7
    2b9a:	90 95       	com	r25
    2b9c:	81 70       	andi	r24, 0x01	; 1
    2b9e:	90 70       	andi	r25, 0x00	; 0
    2ba0:	08 95       	ret
    2ba2:	8f ef       	ldi	r24, 0xFF	; 255
    2ba4:	9f ef       	ldi	r25, 0xFF	; 255
    2ba6:	08 95       	ret

00002ba8 <nrk_gpio_toggle>:
    2ba8:	8f 3f       	cpi	r24, 0xFF	; 255
    2baa:	09 f4       	brne	.+2      	; 0x2bae <nrk_gpio_toggle+0x6>
    2bac:	03 c1       	rjmp	.+518    	; 0x2db4 <nrk_gpio_toggle+0x20c>
    2bae:	28 2f       	mov	r18, r24
    2bb0:	33 27       	eor	r19, r19
    2bb2:	a9 01       	movw	r20, r18
    2bb4:	47 70       	andi	r20, 0x07	; 7
    2bb6:	50 70       	andi	r21, 0x00	; 0
    2bb8:	42 30       	cpi	r20, 0x02	; 2
    2bba:	51 05       	cpc	r21, r1
    2bbc:	09 f4       	brne	.+2      	; 0x2bc0 <nrk_gpio_toggle+0x18>
    2bbe:	5c c0       	rjmp	.+184    	; 0x2c78 <nrk_gpio_toggle+0xd0>
    2bc0:	43 30       	cpi	r20, 0x03	; 3
    2bc2:	51 05       	cpc	r21, r1
    2bc4:	44 f4       	brge	.+16     	; 0x2bd6 <nrk_gpio_toggle+0x2e>
    2bc6:	41 15       	cp	r20, r1
    2bc8:	51 05       	cpc	r21, r1
    2bca:	91 f0       	breq	.+36     	; 0x2bf0 <nrk_gpio_toggle+0x48>
    2bcc:	41 30       	cpi	r20, 0x01	; 1
    2bce:	51 05       	cpc	r21, r1
    2bd0:	09 f0       	breq	.+2      	; 0x2bd4 <nrk_gpio_toggle+0x2c>
    2bd2:	f0 c0       	rjmp	.+480    	; 0x2db4 <nrk_gpio_toggle+0x20c>
    2bd4:	34 c0       	rjmp	.+104    	; 0x2c3e <nrk_gpio_toggle+0x96>
    2bd6:	44 30       	cpi	r20, 0x04	; 4
    2bd8:	51 05       	cpc	r21, r1
    2bda:	09 f4       	brne	.+2      	; 0x2bde <nrk_gpio_toggle+0x36>
    2bdc:	9b c0       	rjmp	.+310    	; 0x2d14 <nrk_gpio_toggle+0x16c>
    2bde:	44 30       	cpi	r20, 0x04	; 4
    2be0:	51 05       	cpc	r21, r1
    2be2:	0c f4       	brge	.+2      	; 0x2be6 <nrk_gpio_toggle+0x3e>
    2be4:	70 c0       	rjmp	.+224    	; 0x2cc6 <nrk_gpio_toggle+0x11e>
    2be6:	45 30       	cpi	r20, 0x05	; 5
    2be8:	51 05       	cpc	r21, r1
    2bea:	09 f0       	breq	.+2      	; 0x2bee <nrk_gpio_toggle+0x46>
    2bec:	e3 c0       	rjmp	.+454    	; 0x2db4 <nrk_gpio_toggle+0x20c>
    2bee:	b9 c0       	rjmp	.+370    	; 0x2d62 <nrk_gpio_toggle+0x1ba>
    2bf0:	80 b1       	in	r24, 0x00	; 0
    2bf2:	a9 01       	movw	r20, r18
    2bf4:	73 e0       	ldi	r23, 0x03	; 3
    2bf6:	56 95       	lsr	r21
    2bf8:	47 95       	ror	r20
    2bfa:	7a 95       	dec	r23
    2bfc:	e1 f7       	brne	.-8      	; 0x2bf6 <nrk_gpio_toggle+0x4e>
    2bfe:	99 27       	eor	r25, r25
    2c00:	04 2e       	mov	r0, r20
    2c02:	02 c0       	rjmp	.+4      	; 0x2c08 <nrk_gpio_toggle+0x60>
    2c04:	95 95       	asr	r25
    2c06:	87 95       	ror	r24
    2c08:	0a 94       	dec	r0
    2c0a:	e2 f7       	brpl	.-8      	; 0x2c04 <nrk_gpio_toggle+0x5c>
    2c0c:	80 fd       	sbrc	r24, 0
    2c0e:	0b c0       	rjmp	.+22     	; 0x2c26 <nrk_gpio_toggle+0x7e>
    2c10:	22 b1       	in	r18, 0x02	; 2
    2c12:	81 e0       	ldi	r24, 0x01	; 1
    2c14:	90 e0       	ldi	r25, 0x00	; 0
    2c16:	02 c0       	rjmp	.+4      	; 0x2c1c <nrk_gpio_toggle+0x74>
    2c18:	88 0f       	add	r24, r24
    2c1a:	99 1f       	adc	r25, r25
    2c1c:	4a 95       	dec	r20
    2c1e:	e2 f7       	brpl	.-8      	; 0x2c18 <nrk_gpio_toggle+0x70>
    2c20:	28 2b       	or	r18, r24
    2c22:	22 b9       	out	0x02, r18	; 2
    2c24:	c4 c0       	rjmp	.+392    	; 0x2dae <nrk_gpio_toggle+0x206>
    2c26:	22 b1       	in	r18, 0x02	; 2
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	90 e0       	ldi	r25, 0x00	; 0
    2c2c:	02 c0       	rjmp	.+4      	; 0x2c32 <nrk_gpio_toggle+0x8a>
    2c2e:	88 0f       	add	r24, r24
    2c30:	99 1f       	adc	r25, r25
    2c32:	4a 95       	dec	r20
    2c34:	e2 f7       	brpl	.-8      	; 0x2c2e <nrk_gpio_toggle+0x86>
    2c36:	80 95       	com	r24
    2c38:	82 23       	and	r24, r18
    2c3a:	82 b9       	out	0x02, r24	; 2
    2c3c:	b8 c0       	rjmp	.+368    	; 0x2dae <nrk_gpio_toggle+0x206>
    2c3e:	83 b1       	in	r24, 0x03	; 3
    2c40:	63 e0       	ldi	r22, 0x03	; 3
    2c42:	36 95       	lsr	r19
    2c44:	27 95       	ror	r18
    2c46:	6a 95       	dec	r22
    2c48:	e1 f7       	brne	.-8      	; 0x2c42 <nrk_gpio_toggle+0x9a>
    2c4a:	99 27       	eor	r25, r25
    2c4c:	02 2e       	mov	r0, r18
    2c4e:	02 c0       	rjmp	.+4      	; 0x2c54 <nrk_gpio_toggle+0xac>
    2c50:	95 95       	asr	r25
    2c52:	87 95       	ror	r24
    2c54:	0a 94       	dec	r0
    2c56:	e2 f7       	brpl	.-8      	; 0x2c50 <nrk_gpio_toggle+0xa8>
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <nrk_gpio_toggle+0xb6>
    2c5a:	44 0f       	add	r20, r20
    2c5c:	55 1f       	adc	r21, r21
    2c5e:	2a 95       	dec	r18
    2c60:	e2 f7       	brpl	.-8      	; 0x2c5a <nrk_gpio_toggle+0xb2>
    2c62:	80 fd       	sbrc	r24, 0
    2c64:	03 c0       	rjmp	.+6      	; 0x2c6c <nrk_gpio_toggle+0xc4>
    2c66:	85 b1       	in	r24, 0x05	; 5
    2c68:	84 2b       	or	r24, r20
    2c6a:	04 c0       	rjmp	.+8      	; 0x2c74 <nrk_gpio_toggle+0xcc>
    2c6c:	95 b1       	in	r25, 0x05	; 5
    2c6e:	84 2f       	mov	r24, r20
    2c70:	80 95       	com	r24
    2c72:	89 23       	and	r24, r25
    2c74:	85 b9       	out	0x05, r24	; 5
    2c76:	9b c0       	rjmp	.+310    	; 0x2dae <nrk_gpio_toggle+0x206>
    2c78:	86 b1       	in	r24, 0x06	; 6
    2c7a:	a9 01       	movw	r20, r18
    2c7c:	93 e0       	ldi	r25, 0x03	; 3
    2c7e:	56 95       	lsr	r21
    2c80:	47 95       	ror	r20
    2c82:	9a 95       	dec	r25
    2c84:	e1 f7       	brne	.-8      	; 0x2c7e <nrk_gpio_toggle+0xd6>
    2c86:	99 27       	eor	r25, r25
    2c88:	04 2e       	mov	r0, r20
    2c8a:	02 c0       	rjmp	.+4      	; 0x2c90 <nrk_gpio_toggle+0xe8>
    2c8c:	95 95       	asr	r25
    2c8e:	87 95       	ror	r24
    2c90:	0a 94       	dec	r0
    2c92:	e2 f7       	brpl	.-8      	; 0x2c8c <nrk_gpio_toggle+0xe4>
    2c94:	80 fd       	sbrc	r24, 0
    2c96:	0b c0       	rjmp	.+22     	; 0x2cae <nrk_gpio_toggle+0x106>
    2c98:	28 b1       	in	r18, 0x08	; 8
    2c9a:	81 e0       	ldi	r24, 0x01	; 1
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <nrk_gpio_toggle+0xfc>
    2ca0:	88 0f       	add	r24, r24
    2ca2:	99 1f       	adc	r25, r25
    2ca4:	4a 95       	dec	r20
    2ca6:	e2 f7       	brpl	.-8      	; 0x2ca0 <nrk_gpio_toggle+0xf8>
    2ca8:	28 2b       	or	r18, r24
    2caa:	28 b9       	out	0x08, r18	; 8
    2cac:	80 c0       	rjmp	.+256    	; 0x2dae <nrk_gpio_toggle+0x206>
    2cae:	28 b1       	in	r18, 0x08	; 8
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	02 c0       	rjmp	.+4      	; 0x2cba <nrk_gpio_toggle+0x112>
    2cb6:	88 0f       	add	r24, r24
    2cb8:	99 1f       	adc	r25, r25
    2cba:	4a 95       	dec	r20
    2cbc:	e2 f7       	brpl	.-8      	; 0x2cb6 <nrk_gpio_toggle+0x10e>
    2cbe:	80 95       	com	r24
    2cc0:	82 23       	and	r24, r18
    2cc2:	88 b9       	out	0x08, r24	; 8
    2cc4:	74 c0       	rjmp	.+232    	; 0x2dae <nrk_gpio_toggle+0x206>
    2cc6:	89 b1       	in	r24, 0x09	; 9
    2cc8:	a9 01       	movw	r20, r18
    2cca:	b3 e0       	ldi	r27, 0x03	; 3
    2ccc:	56 95       	lsr	r21
    2cce:	47 95       	ror	r20
    2cd0:	ba 95       	dec	r27
    2cd2:	e1 f7       	brne	.-8      	; 0x2ccc <nrk_gpio_toggle+0x124>
    2cd4:	99 27       	eor	r25, r25
    2cd6:	04 2e       	mov	r0, r20
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <nrk_gpio_toggle+0x136>
    2cda:	95 95       	asr	r25
    2cdc:	87 95       	ror	r24
    2cde:	0a 94       	dec	r0
    2ce0:	e2 f7       	brpl	.-8      	; 0x2cda <nrk_gpio_toggle+0x132>
    2ce2:	80 fd       	sbrc	r24, 0
    2ce4:	0b c0       	rjmp	.+22     	; 0x2cfc <nrk_gpio_toggle+0x154>
    2ce6:	2b b1       	in	r18, 0x0b	; 11
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	02 c0       	rjmp	.+4      	; 0x2cf2 <nrk_gpio_toggle+0x14a>
    2cee:	88 0f       	add	r24, r24
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	4a 95       	dec	r20
    2cf4:	e2 f7       	brpl	.-8      	; 0x2cee <nrk_gpio_toggle+0x146>
    2cf6:	28 2b       	or	r18, r24
    2cf8:	2b b9       	out	0x0b, r18	; 11
    2cfa:	59 c0       	rjmp	.+178    	; 0x2dae <nrk_gpio_toggle+0x206>
    2cfc:	2b b1       	in	r18, 0x0b	; 11
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	02 c0       	rjmp	.+4      	; 0x2d08 <nrk_gpio_toggle+0x160>
    2d04:	88 0f       	add	r24, r24
    2d06:	99 1f       	adc	r25, r25
    2d08:	4a 95       	dec	r20
    2d0a:	e2 f7       	brpl	.-8      	; 0x2d04 <nrk_gpio_toggle+0x15c>
    2d0c:	80 95       	com	r24
    2d0e:	82 23       	and	r24, r18
    2d10:	8b b9       	out	0x0b, r24	; 11
    2d12:	4d c0       	rjmp	.+154    	; 0x2dae <nrk_gpio_toggle+0x206>
    2d14:	8c b1       	in	r24, 0x0c	; 12
    2d16:	a9 01       	movw	r20, r18
    2d18:	a3 e0       	ldi	r26, 0x03	; 3
    2d1a:	56 95       	lsr	r21
    2d1c:	47 95       	ror	r20
    2d1e:	aa 95       	dec	r26
    2d20:	e1 f7       	brne	.-8      	; 0x2d1a <nrk_gpio_toggle+0x172>
    2d22:	99 27       	eor	r25, r25
    2d24:	04 2e       	mov	r0, r20
    2d26:	02 c0       	rjmp	.+4      	; 0x2d2c <nrk_gpio_toggle+0x184>
    2d28:	95 95       	asr	r25
    2d2a:	87 95       	ror	r24
    2d2c:	0a 94       	dec	r0
    2d2e:	e2 f7       	brpl	.-8      	; 0x2d28 <nrk_gpio_toggle+0x180>
    2d30:	80 fd       	sbrc	r24, 0
    2d32:	0b c0       	rjmp	.+22     	; 0x2d4a <nrk_gpio_toggle+0x1a2>
    2d34:	2e b1       	in	r18, 0x0e	; 14
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <nrk_gpio_toggle+0x198>
    2d3c:	88 0f       	add	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	4a 95       	dec	r20
    2d42:	e2 f7       	brpl	.-8      	; 0x2d3c <nrk_gpio_toggle+0x194>
    2d44:	28 2b       	or	r18, r24
    2d46:	2e b9       	out	0x0e, r18	; 14
    2d48:	32 c0       	rjmp	.+100    	; 0x2dae <nrk_gpio_toggle+0x206>
    2d4a:	2e b1       	in	r18, 0x0e	; 14
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	02 c0       	rjmp	.+4      	; 0x2d56 <nrk_gpio_toggle+0x1ae>
    2d52:	88 0f       	add	r24, r24
    2d54:	99 1f       	adc	r25, r25
    2d56:	4a 95       	dec	r20
    2d58:	e2 f7       	brpl	.-8      	; 0x2d52 <nrk_gpio_toggle+0x1aa>
    2d5a:	80 95       	com	r24
    2d5c:	82 23       	and	r24, r18
    2d5e:	8e b9       	out	0x0e, r24	; 14
    2d60:	26 c0       	rjmp	.+76     	; 0x2dae <nrk_gpio_toggle+0x206>
    2d62:	8f b1       	in	r24, 0x0f	; 15
    2d64:	a9 01       	movw	r20, r18
    2d66:	f3 e0       	ldi	r31, 0x03	; 3
    2d68:	56 95       	lsr	r21
    2d6a:	47 95       	ror	r20
    2d6c:	fa 95       	dec	r31
    2d6e:	e1 f7       	brne	.-8      	; 0x2d68 <nrk_gpio_toggle+0x1c0>
    2d70:	99 27       	eor	r25, r25
    2d72:	04 2e       	mov	r0, r20
    2d74:	02 c0       	rjmp	.+4      	; 0x2d7a <nrk_gpio_toggle+0x1d2>
    2d76:	95 95       	asr	r25
    2d78:	87 95       	ror	r24
    2d7a:	0a 94       	dec	r0
    2d7c:	e2 f7       	brpl	.-8      	; 0x2d76 <nrk_gpio_toggle+0x1ce>
    2d7e:	80 fd       	sbrc	r24, 0
    2d80:	0b c0       	rjmp	.+22     	; 0x2d98 <nrk_gpio_toggle+0x1f0>
    2d82:	21 b3       	in	r18, 0x11	; 17
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	02 c0       	rjmp	.+4      	; 0x2d8e <nrk_gpio_toggle+0x1e6>
    2d8a:	88 0f       	add	r24, r24
    2d8c:	99 1f       	adc	r25, r25
    2d8e:	4a 95       	dec	r20
    2d90:	e2 f7       	brpl	.-8      	; 0x2d8a <nrk_gpio_toggle+0x1e2>
    2d92:	28 2b       	or	r18, r24
    2d94:	21 bb       	out	0x11, r18	; 17
    2d96:	0b c0       	rjmp	.+22     	; 0x2dae <nrk_gpio_toggle+0x206>
    2d98:	21 b3       	in	r18, 0x11	; 17
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	02 c0       	rjmp	.+4      	; 0x2da4 <nrk_gpio_toggle+0x1fc>
    2da0:	88 0f       	add	r24, r24
    2da2:	99 1f       	adc	r25, r25
    2da4:	4a 95       	dec	r20
    2da6:	e2 f7       	brpl	.-8      	; 0x2da0 <nrk_gpio_toggle+0x1f8>
    2da8:	80 95       	com	r24
    2daa:	82 23       	and	r24, r18
    2dac:	81 bb       	out	0x11, r24	; 17
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	08 95       	ret
    2db4:	8f ef       	ldi	r24, 0xFF	; 255
    2db6:	9f ef       	ldi	r25, 0xFF	; 255
    2db8:	08 95       	ret

00002dba <nrk_gpio_direction>:
    2dba:	8f 3f       	cpi	r24, 0xFF	; 255
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <nrk_gpio_direction+0x6>
    2dbe:	12 c1       	rjmp	.+548    	; 0x2fe4 <nrk_gpio_direction+0x22a>
    2dc0:	48 2f       	mov	r20, r24
    2dc2:	55 27       	eor	r21, r21
    2dc4:	66 23       	and	r22, r22
    2dc6:	09 f0       	breq	.+2      	; 0x2dca <nrk_gpio_direction+0x10>
    2dc8:	90 c0       	rjmp	.+288    	; 0x2eea <nrk_gpio_direction+0x130>
    2dca:	ca 01       	movw	r24, r20
    2dcc:	87 70       	andi	r24, 0x07	; 7
    2dce:	90 70       	andi	r25, 0x00	; 0
    2dd0:	82 30       	cpi	r24, 0x02	; 2
    2dd2:	91 05       	cpc	r25, r1
    2dd4:	09 f4       	brne	.+2      	; 0x2dd8 <nrk_gpio_direction+0x1e>
    2dd6:	3e c0       	rjmp	.+124    	; 0x2e54 <nrk_gpio_direction+0x9a>
    2dd8:	83 30       	cpi	r24, 0x03	; 3
    2dda:	91 05       	cpc	r25, r1
    2ddc:	3c f4       	brge	.+14     	; 0x2dec <nrk_gpio_direction+0x32>
    2dde:	00 97       	sbiw	r24, 0x00	; 0
    2de0:	89 f0       	breq	.+34     	; 0x2e04 <nrk_gpio_direction+0x4a>
    2de2:	81 30       	cpi	r24, 0x01	; 1
    2de4:	91 05       	cpc	r25, r1
    2de6:	09 f0       	breq	.+2      	; 0x2dea <nrk_gpio_direction+0x30>
    2de8:	fd c0       	rjmp	.+506    	; 0x2fe4 <nrk_gpio_direction+0x22a>
    2dea:	21 c0       	rjmp	.+66     	; 0x2e2e <nrk_gpio_direction+0x74>
    2dec:	84 30       	cpi	r24, 0x04	; 4
    2dee:	91 05       	cpc	r25, r1
    2df0:	09 f4       	brne	.+2      	; 0x2df4 <nrk_gpio_direction+0x3a>
    2df2:	54 c0       	rjmp	.+168    	; 0x2e9c <nrk_gpio_direction+0xe2>
    2df4:	84 30       	cpi	r24, 0x04	; 4
    2df6:	91 05       	cpc	r25, r1
    2df8:	0c f4       	brge	.+2      	; 0x2dfc <nrk_gpio_direction+0x42>
    2dfa:	3e c0       	rjmp	.+124    	; 0x2e78 <nrk_gpio_direction+0xbe>
    2dfc:	05 97       	sbiw	r24, 0x05	; 5
    2dfe:	09 f0       	breq	.+2      	; 0x2e02 <nrk_gpio_direction+0x48>
    2e00:	f1 c0       	rjmp	.+482    	; 0x2fe4 <nrk_gpio_direction+0x22a>
    2e02:	5e c0       	rjmp	.+188    	; 0x2ec0 <nrk_gpio_direction+0x106>
    2e04:	31 b1       	in	r19, 0x01	; 1
    2e06:	b3 e0       	ldi	r27, 0x03	; 3
    2e08:	56 95       	lsr	r21
    2e0a:	47 95       	ror	r20
    2e0c:	ba 95       	dec	r27
    2e0e:	e1 f7       	brne	.-8      	; 0x2e08 <nrk_gpio_direction+0x4e>
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	90 e0       	ldi	r25, 0x00	; 0
    2e14:	02 c0       	rjmp	.+4      	; 0x2e1a <nrk_gpio_direction+0x60>
    2e16:	88 0f       	add	r24, r24
    2e18:	99 1f       	adc	r25, r25
    2e1a:	4a 95       	dec	r20
    2e1c:	e2 f7       	brpl	.-8      	; 0x2e16 <nrk_gpio_direction+0x5c>
    2e1e:	28 2f       	mov	r18, r24
    2e20:	20 95       	com	r18
    2e22:	23 23       	and	r18, r19
    2e24:	21 b9       	out	0x01, r18	; 1
    2e26:	22 b1       	in	r18, 0x02	; 2
    2e28:	82 2b       	or	r24, r18
    2e2a:	82 b9       	out	0x02, r24	; 2
    2e2c:	d8 c0       	rjmp	.+432    	; 0x2fde <nrk_gpio_direction+0x224>
    2e2e:	24 b1       	in	r18, 0x04	; 4
    2e30:	a3 e0       	ldi	r26, 0x03	; 3
    2e32:	56 95       	lsr	r21
    2e34:	47 95       	ror	r20
    2e36:	aa 95       	dec	r26
    2e38:	e1 f7       	brne	.-8      	; 0x2e32 <nrk_gpio_direction+0x78>
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <nrk_gpio_direction+0x86>
    2e3c:	88 0f       	add	r24, r24
    2e3e:	99 1f       	adc	r25, r25
    2e40:	4a 95       	dec	r20
    2e42:	e2 f7       	brpl	.-8      	; 0x2e3c <nrk_gpio_direction+0x82>
    2e44:	98 2f       	mov	r25, r24
    2e46:	80 95       	com	r24
    2e48:	82 23       	and	r24, r18
    2e4a:	84 b9       	out	0x04, r24	; 4
    2e4c:	85 b1       	in	r24, 0x05	; 5
    2e4e:	98 2b       	or	r25, r24
    2e50:	95 b9       	out	0x05, r25	; 5
    2e52:	c5 c0       	rjmp	.+394    	; 0x2fde <nrk_gpio_direction+0x224>
    2e54:	37 b1       	in	r19, 0x07	; 7
    2e56:	f3 e0       	ldi	r31, 0x03	; 3
    2e58:	56 95       	lsr	r21
    2e5a:	47 95       	ror	r20
    2e5c:	fa 95       	dec	r31
    2e5e:	e1 f7       	brne	.-8      	; 0x2e58 <nrk_gpio_direction+0x9e>
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <nrk_gpio_direction+0xb0>
    2e66:	88 0f       	add	r24, r24
    2e68:	99 1f       	adc	r25, r25
    2e6a:	4a 95       	dec	r20
    2e6c:	e2 f7       	brpl	.-8      	; 0x2e66 <nrk_gpio_direction+0xac>
    2e6e:	28 2f       	mov	r18, r24
    2e70:	20 95       	com	r18
    2e72:	23 23       	and	r18, r19
    2e74:	27 b9       	out	0x07, r18	; 7
    2e76:	35 c0       	rjmp	.+106    	; 0x2ee2 <nrk_gpio_direction+0x128>
    2e78:	3a b1       	in	r19, 0x0a	; 10
    2e7a:	e3 e0       	ldi	r30, 0x03	; 3
    2e7c:	56 95       	lsr	r21
    2e7e:	47 95       	ror	r20
    2e80:	ea 95       	dec	r30
    2e82:	e1 f7       	brne	.-8      	; 0x2e7c <nrk_gpio_direction+0xc2>
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	90 e0       	ldi	r25, 0x00	; 0
    2e88:	02 c0       	rjmp	.+4      	; 0x2e8e <nrk_gpio_direction+0xd4>
    2e8a:	88 0f       	add	r24, r24
    2e8c:	99 1f       	adc	r25, r25
    2e8e:	4a 95       	dec	r20
    2e90:	e2 f7       	brpl	.-8      	; 0x2e8a <nrk_gpio_direction+0xd0>
    2e92:	28 2f       	mov	r18, r24
    2e94:	20 95       	com	r18
    2e96:	23 23       	and	r18, r19
    2e98:	2a b9       	out	0x0a, r18	; 10
    2e9a:	23 c0       	rjmp	.+70     	; 0x2ee2 <nrk_gpio_direction+0x128>
    2e9c:	3d b1       	in	r19, 0x0d	; 13
    2e9e:	73 e0       	ldi	r23, 0x03	; 3
    2ea0:	56 95       	lsr	r21
    2ea2:	47 95       	ror	r20
    2ea4:	7a 95       	dec	r23
    2ea6:	e1 f7       	brne	.-8      	; 0x2ea0 <nrk_gpio_direction+0xe6>
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	02 c0       	rjmp	.+4      	; 0x2eb2 <nrk_gpio_direction+0xf8>
    2eae:	88 0f       	add	r24, r24
    2eb0:	99 1f       	adc	r25, r25
    2eb2:	4a 95       	dec	r20
    2eb4:	e2 f7       	brpl	.-8      	; 0x2eae <nrk_gpio_direction+0xf4>
    2eb6:	28 2f       	mov	r18, r24
    2eb8:	20 95       	com	r18
    2eba:	23 23       	and	r18, r19
    2ebc:	2d b9       	out	0x0d, r18	; 13
    2ebe:	11 c0       	rjmp	.+34     	; 0x2ee2 <nrk_gpio_direction+0x128>
    2ec0:	30 b3       	in	r19, 0x10	; 16
    2ec2:	63 e0       	ldi	r22, 0x03	; 3
    2ec4:	56 95       	lsr	r21
    2ec6:	47 95       	ror	r20
    2ec8:	6a 95       	dec	r22
    2eca:	e1 f7       	brne	.-8      	; 0x2ec4 <nrk_gpio_direction+0x10a>
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	02 c0       	rjmp	.+4      	; 0x2ed6 <nrk_gpio_direction+0x11c>
    2ed2:	88 0f       	add	r24, r24
    2ed4:	99 1f       	adc	r25, r25
    2ed6:	4a 95       	dec	r20
    2ed8:	e2 f7       	brpl	.-8      	; 0x2ed2 <nrk_gpio_direction+0x118>
    2eda:	28 2f       	mov	r18, r24
    2edc:	20 95       	com	r18
    2ede:	23 23       	and	r18, r19
    2ee0:	20 bb       	out	0x10, r18	; 16
    2ee2:	25 b1       	in	r18, 0x05	; 5
    2ee4:	82 2b       	or	r24, r18
    2ee6:	85 b9       	out	0x05, r24	; 5
    2ee8:	7a c0       	rjmp	.+244    	; 0x2fde <nrk_gpio_direction+0x224>
    2eea:	9a 01       	movw	r18, r20
    2eec:	27 70       	andi	r18, 0x07	; 7
    2eee:	30 70       	andi	r19, 0x00	; 0
    2ef0:	22 30       	cpi	r18, 0x02	; 2
    2ef2:	31 05       	cpc	r19, r1
    2ef4:	a9 f1       	breq	.+106    	; 0x2f60 <nrk_gpio_direction+0x1a6>
    2ef6:	23 30       	cpi	r18, 0x03	; 3
    2ef8:	31 05       	cpc	r19, r1
    2efa:	44 f4       	brge	.+16     	; 0x2f0c <nrk_gpio_direction+0x152>
    2efc:	21 15       	cp	r18, r1
    2efe:	31 05       	cpc	r19, r1
    2f00:	89 f0       	breq	.+34     	; 0x2f24 <nrk_gpio_direction+0x16a>
    2f02:	21 30       	cpi	r18, 0x01	; 1
    2f04:	31 05       	cpc	r19, r1
    2f06:	09 f0       	breq	.+2      	; 0x2f0a <nrk_gpio_direction+0x150>
    2f08:	6d c0       	rjmp	.+218    	; 0x2fe4 <nrk_gpio_direction+0x22a>
    2f0a:	1c c0       	rjmp	.+56     	; 0x2f44 <nrk_gpio_direction+0x18a>
    2f0c:	24 30       	cpi	r18, 0x04	; 4
    2f0e:	31 05       	cpc	r19, r1
    2f10:	09 f4       	brne	.+2      	; 0x2f14 <nrk_gpio_direction+0x15a>
    2f12:	46 c0       	rjmp	.+140    	; 0x2fa0 <nrk_gpio_direction+0x1e6>
    2f14:	24 30       	cpi	r18, 0x04	; 4
    2f16:	31 05       	cpc	r19, r1
    2f18:	9c f1       	brlt	.+102    	; 0x2f80 <nrk_gpio_direction+0x1c6>
    2f1a:	25 30       	cpi	r18, 0x05	; 5
    2f1c:	31 05       	cpc	r19, r1
    2f1e:	09 f0       	breq	.+2      	; 0x2f22 <nrk_gpio_direction+0x168>
    2f20:	61 c0       	rjmp	.+194    	; 0x2fe4 <nrk_gpio_direction+0x22a>
    2f22:	4e c0       	rjmp	.+156    	; 0x2fc0 <nrk_gpio_direction+0x206>
    2f24:	21 b1       	in	r18, 0x01	; 1
    2f26:	33 e0       	ldi	r19, 0x03	; 3
    2f28:	56 95       	lsr	r21
    2f2a:	47 95       	ror	r20
    2f2c:	3a 95       	dec	r19
    2f2e:	e1 f7       	brne	.-8      	; 0x2f28 <nrk_gpio_direction+0x16e>
    2f30:	81 e0       	ldi	r24, 0x01	; 1
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	02 c0       	rjmp	.+4      	; 0x2f3a <nrk_gpio_direction+0x180>
    2f36:	88 0f       	add	r24, r24
    2f38:	99 1f       	adc	r25, r25
    2f3a:	4a 95       	dec	r20
    2f3c:	e2 f7       	brpl	.-8      	; 0x2f36 <nrk_gpio_direction+0x17c>
    2f3e:	28 2b       	or	r18, r24
    2f40:	21 b9       	out	0x01, r18	; 1
    2f42:	4d c0       	rjmp	.+154    	; 0x2fde <nrk_gpio_direction+0x224>
    2f44:	84 b1       	in	r24, 0x04	; 4
    2f46:	93 e0       	ldi	r25, 0x03	; 3
    2f48:	56 95       	lsr	r21
    2f4a:	47 95       	ror	r20
    2f4c:	9a 95       	dec	r25
    2f4e:	e1 f7       	brne	.-8      	; 0x2f48 <nrk_gpio_direction+0x18e>
    2f50:	02 c0       	rjmp	.+4      	; 0x2f56 <nrk_gpio_direction+0x19c>
    2f52:	22 0f       	add	r18, r18
    2f54:	33 1f       	adc	r19, r19
    2f56:	4a 95       	dec	r20
    2f58:	e2 f7       	brpl	.-8      	; 0x2f52 <nrk_gpio_direction+0x198>
    2f5a:	82 2b       	or	r24, r18
    2f5c:	84 b9       	out	0x04, r24	; 4
    2f5e:	3f c0       	rjmp	.+126    	; 0x2fde <nrk_gpio_direction+0x224>
    2f60:	27 b1       	in	r18, 0x07	; 7
    2f62:	b3 e0       	ldi	r27, 0x03	; 3
    2f64:	56 95       	lsr	r21
    2f66:	47 95       	ror	r20
    2f68:	ba 95       	dec	r27
    2f6a:	e1 f7       	brne	.-8      	; 0x2f64 <nrk_gpio_direction+0x1aa>
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	02 c0       	rjmp	.+4      	; 0x2f76 <nrk_gpio_direction+0x1bc>
    2f72:	88 0f       	add	r24, r24
    2f74:	99 1f       	adc	r25, r25
    2f76:	4a 95       	dec	r20
    2f78:	e2 f7       	brpl	.-8      	; 0x2f72 <nrk_gpio_direction+0x1b8>
    2f7a:	28 2b       	or	r18, r24
    2f7c:	27 b9       	out	0x07, r18	; 7
    2f7e:	2f c0       	rjmp	.+94     	; 0x2fde <nrk_gpio_direction+0x224>
    2f80:	2a b1       	in	r18, 0x0a	; 10
    2f82:	a3 e0       	ldi	r26, 0x03	; 3
    2f84:	56 95       	lsr	r21
    2f86:	47 95       	ror	r20
    2f88:	aa 95       	dec	r26
    2f8a:	e1 f7       	brne	.-8      	; 0x2f84 <nrk_gpio_direction+0x1ca>
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	02 c0       	rjmp	.+4      	; 0x2f96 <nrk_gpio_direction+0x1dc>
    2f92:	88 0f       	add	r24, r24
    2f94:	99 1f       	adc	r25, r25
    2f96:	4a 95       	dec	r20
    2f98:	e2 f7       	brpl	.-8      	; 0x2f92 <nrk_gpio_direction+0x1d8>
    2f9a:	28 2b       	or	r18, r24
    2f9c:	2a b9       	out	0x0a, r18	; 10
    2f9e:	1f c0       	rjmp	.+62     	; 0x2fde <nrk_gpio_direction+0x224>
    2fa0:	2d b1       	in	r18, 0x0d	; 13
    2fa2:	f3 e0       	ldi	r31, 0x03	; 3
    2fa4:	56 95       	lsr	r21
    2fa6:	47 95       	ror	r20
    2fa8:	fa 95       	dec	r31
    2faa:	e1 f7       	brne	.-8      	; 0x2fa4 <nrk_gpio_direction+0x1ea>
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	02 c0       	rjmp	.+4      	; 0x2fb6 <nrk_gpio_direction+0x1fc>
    2fb2:	88 0f       	add	r24, r24
    2fb4:	99 1f       	adc	r25, r25
    2fb6:	4a 95       	dec	r20
    2fb8:	e2 f7       	brpl	.-8      	; 0x2fb2 <nrk_gpio_direction+0x1f8>
    2fba:	28 2b       	or	r18, r24
    2fbc:	2d b9       	out	0x0d, r18	; 13
    2fbe:	0f c0       	rjmp	.+30     	; 0x2fde <nrk_gpio_direction+0x224>
    2fc0:	20 b3       	in	r18, 0x10	; 16
    2fc2:	e3 e0       	ldi	r30, 0x03	; 3
    2fc4:	56 95       	lsr	r21
    2fc6:	47 95       	ror	r20
    2fc8:	ea 95       	dec	r30
    2fca:	e1 f7       	brne	.-8      	; 0x2fc4 <nrk_gpio_direction+0x20a>
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	90 e0       	ldi	r25, 0x00	; 0
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <nrk_gpio_direction+0x21c>
    2fd2:	88 0f       	add	r24, r24
    2fd4:	99 1f       	adc	r25, r25
    2fd6:	4a 95       	dec	r20
    2fd8:	e2 f7       	brpl	.-8      	; 0x2fd2 <nrk_gpio_direction+0x218>
    2fda:	28 2b       	or	r18, r24
    2fdc:	20 bb       	out	0x10, r18	; 16
    2fde:	81 e0       	ldi	r24, 0x01	; 1
    2fe0:	90 e0       	ldi	r25, 0x00	; 0
    2fe2:	08 95       	ret
    2fe4:	8f ef       	ldi	r24, 0xFF	; 255
    2fe6:	9f ef       	ldi	r25, 0xFF	; 255
    2fe8:	08 95       	ret

00002fea <nrk_get_button>:
    2fea:	88 23       	and	r24, r24
    2fec:	19 f0       	breq	.+6      	; 0x2ff4 <nrk_get_button+0xa>
    2fee:	8f ef       	ldi	r24, 0xFF	; 255
    2ff0:	9f ef       	ldi	r25, 0xFF	; 255
    2ff2:	08 95       	ret
    2ff4:	80 b1       	in	r24, 0x00	; 0
    2ff6:	99 27       	eor	r25, r25
    2ff8:	87 fd       	sbrc	r24, 7
    2ffa:	90 95       	com	r25
    2ffc:	80 95       	com	r24
    2ffe:	90 95       	com	r25
    3000:	88 27       	eor	r24, r24
    3002:	99 0f       	add	r25, r25
    3004:	88 1f       	adc	r24, r24
    3006:	99 27       	eor	r25, r25
    3008:	08 95       	ret

0000300a <nrk_led_toggle>:
    300a:	00 97       	sbiw	r24, 0x00	; 0
    300c:	11 f4       	brne	.+4      	; 0x3012 <nrk_led_toggle+0x8>
    300e:	84 e1       	ldi	r24, 0x14	; 20
    3010:	09 c0       	rjmp	.+18     	; 0x3024 <nrk_led_toggle+0x1a>
    3012:	81 30       	cpi	r24, 0x01	; 1
    3014:	91 05       	cpc	r25, r1
    3016:	11 f4       	brne	.+4      	; 0x301c <nrk_led_toggle+0x12>
    3018:	8c e1       	ldi	r24, 0x1C	; 28
    301a:	04 c0       	rjmp	.+8      	; 0x3024 <nrk_led_toggle+0x1a>
    301c:	82 30       	cpi	r24, 0x02	; 2
    301e:	91 05       	cpc	r25, r1
    3020:	31 f4       	brne	.+12     	; 0x302e <nrk_led_toggle+0x24>
    3022:	84 e2       	ldi	r24, 0x24	; 36
    3024:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <nrk_gpio_toggle>
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	08 95       	ret
    302e:	03 97       	sbiw	r24, 0x03	; 3
    3030:	19 f0       	breq	.+6      	; 0x3038 <nrk_led_toggle+0x2e>
    3032:	8f ef       	ldi	r24, 0xFF	; 255
    3034:	9f ef       	ldi	r25, 0xFF	; 255
    3036:	08 95       	ret
    3038:	8c e2       	ldi	r24, 0x2C	; 44
    303a:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <nrk_gpio_toggle>
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	90 e0       	ldi	r25, 0x00	; 0
    3042:	08 95       	ret

00003044 <nrk_led_clr>:
    3044:	00 97       	sbiw	r24, 0x00	; 0
    3046:	11 f4       	brne	.+4      	; 0x304c <nrk_led_clr+0x8>
    3048:	84 e1       	ldi	r24, 0x14	; 20
    304a:	09 c0       	rjmp	.+18     	; 0x305e <nrk_led_clr+0x1a>
    304c:	81 30       	cpi	r24, 0x01	; 1
    304e:	91 05       	cpc	r25, r1
    3050:	11 f4       	brne	.+4      	; 0x3056 <nrk_led_clr+0x12>
    3052:	8c e1       	ldi	r24, 0x1C	; 28
    3054:	04 c0       	rjmp	.+8      	; 0x305e <nrk_led_clr+0x1a>
    3056:	82 30       	cpi	r24, 0x02	; 2
    3058:	91 05       	cpc	r25, r1
    305a:	31 f4       	brne	.+12     	; 0x3068 <nrk_led_clr+0x24>
    305c:	84 e2       	ldi	r24, 0x24	; 36
    305e:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_gpio_set>
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	08 95       	ret
    3068:	03 97       	sbiw	r24, 0x03	; 3
    306a:	19 f0       	breq	.+6      	; 0x3072 <nrk_led_clr+0x2e>
    306c:	8f ef       	ldi	r24, 0xFF	; 255
    306e:	9f ef       	ldi	r25, 0xFF	; 255
    3070:	08 95       	ret
    3072:	8c e2       	ldi	r24, 0x2C	; 44
    3074:	0e 94 89 14 	call	0x2912	; 0x2912 <nrk_gpio_set>
    3078:	81 e0       	ldi	r24, 0x01	; 1
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	08 95       	ret

0000307e <nrk_led_set>:
    307e:	00 97       	sbiw	r24, 0x00	; 0
    3080:	11 f4       	brne	.+4      	; 0x3086 <nrk_led_set+0x8>
    3082:	84 e1       	ldi	r24, 0x14	; 20
    3084:	09 c0       	rjmp	.+18     	; 0x3098 <nrk_led_set+0x1a>
    3086:	81 30       	cpi	r24, 0x01	; 1
    3088:	91 05       	cpc	r25, r1
    308a:	11 f4       	brne	.+4      	; 0x3090 <nrk_led_set+0x12>
    308c:	8c e1       	ldi	r24, 0x1C	; 28
    308e:	04 c0       	rjmp	.+8      	; 0x3098 <nrk_led_set+0x1a>
    3090:	82 30       	cpi	r24, 0x02	; 2
    3092:	91 05       	cpc	r25, r1
    3094:	31 f4       	brne	.+12     	; 0x30a2 <nrk_led_set+0x24>
    3096:	84 e2       	ldi	r24, 0x24	; 36
    3098:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <nrk_gpio_clr>
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	08 95       	ret
    30a2:	03 97       	sbiw	r24, 0x03	; 3
    30a4:	19 f0       	breq	.+6      	; 0x30ac <nrk_led_set+0x2e>
    30a6:	8f ef       	ldi	r24, 0xFF	; 255
    30a8:	9f ef       	ldi	r25, 0xFF	; 255
    30aa:	08 95       	ret
    30ac:	8c e2       	ldi	r24, 0x2C	; 44
    30ae:	0e 94 0e 15 	call	0x2a1c	; 0x2a1c <nrk_gpio_clr>
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	90 e0       	ldi	r25, 0x00	; 0
    30b6:	08 95       	ret

000030b8 <nrk_gpio_pullups>:
    30b8:	88 23       	and	r24, r24
    30ba:	19 f0       	breq	.+6      	; 0x30c2 <nrk_gpio_pullups+0xa>
    30bc:	85 b7       	in	r24, 0x35	; 53
    30be:	8f 7e       	andi	r24, 0xEF	; 239
    30c0:	02 c0       	rjmp	.+4      	; 0x30c6 <nrk_gpio_pullups+0xe>
    30c2:	85 b7       	in	r24, 0x35	; 53
    30c4:	80 61       	ori	r24, 0x10	; 16
    30c6:	85 bf       	out	0x35, r24	; 53
    30c8:	81 e0       	ldi	r24, 0x01	; 1
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	08 95       	ret

000030ce <putc0>:
    30ce:	98 2f       	mov	r25, r24
    30d0:	80 91 c0 00 	lds	r24, 0x00C0
    30d4:	85 ff       	sbrs	r24, 5
    30d6:	fc cf       	rjmp	.-8      	; 0x30d0 <putc0+0x2>
    30d8:	80 91 c0 00 	lds	r24, 0x00C0
    30dc:	8f 7d       	andi	r24, 0xDF	; 223
    30de:	80 93 c0 00 	sts	0x00C0, r24
    30e2:	90 93 c6 00 	sts	0x00C6, r25
    30e6:	08 95       	ret

000030e8 <putc1>:
    30e8:	98 2f       	mov	r25, r24
    30ea:	80 91 c8 00 	lds	r24, 0x00C8
    30ee:	85 ff       	sbrs	r24, 5
    30f0:	fc cf       	rjmp	.-8      	; 0x30ea <putc1+0x2>
    30f2:	90 93 ce 00 	sts	0x00CE, r25
    30f6:	08 95       	ret

000030f8 <setup_uart0>:
    30f8:	29 2f       	mov	r18, r25
    30fa:	33 27       	eor	r19, r19
    30fc:	20 93 c5 00 	sts	0x00C5, r18
    3100:	80 93 c4 00 	sts	0x00C4, r24
    3104:	86 e0       	ldi	r24, 0x06	; 6
    3106:	80 93 c2 00 	sts	0x00C2, r24
    310a:	e1 ec       	ldi	r30, 0xC1	; 193
    310c:	f0 e0       	ldi	r31, 0x00	; 0
    310e:	80 81       	ld	r24, Z
    3110:	8b 7f       	andi	r24, 0xFB	; 251
    3112:	80 83       	st	Z, r24
    3114:	a0 ec       	ldi	r26, 0xC0	; 192
    3116:	b0 e0       	ldi	r27, 0x00	; 0
    3118:	8c 91       	ld	r24, X
    311a:	82 60       	ori	r24, 0x02	; 2
    311c:	8c 93       	st	X, r24
    311e:	80 81       	ld	r24, Z
    3120:	88 61       	ori	r24, 0x18	; 24
    3122:	80 83       	st	Z, r24
    3124:	08 95       	ret

00003126 <setup_uart1>:
    3126:	29 2f       	mov	r18, r25
    3128:	33 27       	eor	r19, r19
    312a:	20 93 cd 00 	sts	0x00CD, r18
    312e:	80 93 cc 00 	sts	0x00CC, r24
    3132:	86 e0       	ldi	r24, 0x06	; 6
    3134:	80 93 ca 00 	sts	0x00CA, r24
    3138:	e9 ec       	ldi	r30, 0xC9	; 201
    313a:	f0 e0       	ldi	r31, 0x00	; 0
    313c:	80 81       	ld	r24, Z
    313e:	8b 7f       	andi	r24, 0xFB	; 251
    3140:	80 83       	st	Z, r24
    3142:	a8 ec       	ldi	r26, 0xC8	; 200
    3144:	b0 e0       	ldi	r27, 0x00	; 0
    3146:	8c 91       	ld	r24, X
    3148:	82 60       	ori	r24, 0x02	; 2
    314a:	8c 93       	st	X, r24
    314c:	80 81       	ld	r24, Z
    314e:	88 61       	ori	r24, 0x18	; 24
    3150:	80 83       	st	Z, r24
    3152:	08 95       	ret

00003154 <getc0>:
    3154:	80 91 c0 00 	lds	r24, 0x00C0
    3158:	87 ff       	sbrs	r24, 7
    315a:	fc cf       	rjmp	.-8      	; 0x3154 <getc0>
    315c:	80 91 c0 00 	lds	r24, 0x00C0
    3160:	8f 77       	andi	r24, 0x7F	; 127
    3162:	80 93 c0 00 	sts	0x00C0, r24
    3166:	80 91 c6 00 	lds	r24, 0x00C6
    316a:	99 27       	eor	r25, r25
    316c:	08 95       	ret

0000316e <nrk_setup_uart>:
    316e:	0e 94 93 18 	call	0x3126	; 0x3126 <setup_uart1>
    3172:	6d e2       	ldi	r22, 0x2D	; 45
    3174:	74 e1       	ldi	r23, 0x14	; 20
    3176:	84 e7       	ldi	r24, 0x74	; 116
    3178:	98 e1       	ldi	r25, 0x18	; 24
    317a:	0e 94 24 30 	call	0x6048	; 0x6048 <fdevopen>
    317e:	90 93 aa 06 	sts	0x06AA, r25
    3182:	80 93 a9 06 	sts	0x06A9, r24
    3186:	6d e2       	ldi	r22, 0x2D	; 45
    3188:	74 e1       	ldi	r23, 0x14	; 20
    318a:	84 e7       	ldi	r24, 0x74	; 116
    318c:	98 e1       	ldi	r25, 0x18	; 24
    318e:	0e 94 24 30 	call	0x6048	; 0x6048 <fdevopen>
    3192:	90 93 a8 06 	sts	0x06A8, r25
    3196:	80 93 a7 06 	sts	0x06A7, r24
    319a:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <nrk_signal_create>
    319e:	80 93 dc 05 	sts	0x05DC, r24
    31a2:	8f 3f       	cpi	r24, 0xFF	; 255
    31a4:	19 f4       	brne	.+6      	; 0x31ac <nrk_setup_uart+0x3e>
    31a6:	8e e0       	ldi	r24, 0x0E	; 14
    31a8:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <nrk_error_add>
    31ac:	10 92 dd 05 	sts	0x05DD, r1
    31b0:	10 92 cb 05 	sts	0x05CB, r1
    31b4:	80 91 c9 00 	lds	r24, 0x00C9
    31b8:	80 68       	ori	r24, 0x80	; 128
    31ba:	80 93 c9 00 	sts	0x00C9, r24
    31be:	08 95       	ret

000031c0 <nrk_uart_rx_signal_get>:
    31c0:	80 91 dc 05 	lds	r24, 0x05DC
    31c4:	8f 3f       	cpi	r24, 0xFF	; 255
    31c6:	19 f4       	brne	.+6      	; 0x31ce <nrk_uart_rx_signal_get+0xe>
    31c8:	8e e0       	ldi	r24, 0x0E	; 14
    31ca:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <nrk_error_add>
    31ce:	80 91 dc 05 	lds	r24, 0x05DC
    31d2:	99 27       	eor	r25, r25
    31d4:	87 fd       	sbrc	r24, 7
    31d6:	90 95       	com	r25
    31d8:	08 95       	ret

000031da <nrk_kprintf>:
    31da:	cf 93       	push	r28
    31dc:	df 93       	push	r29
    31de:	ec 01       	movw	r28, r24
    31e0:	07 c0       	rjmp	.+14     	; 0x31f0 <nrk_kprintf+0x16>
    31e2:	60 91 a9 06 	lds	r22, 0x06A9
    31e6:	70 91 aa 06 	lds	r23, 0x06AA
    31ea:	99 27       	eor	r25, r25
    31ec:	0e 94 72 30 	call	0x60e4	; 0x60e4 <fputc>
    31f0:	fe 01       	movw	r30, r28
    31f2:	21 96       	adiw	r28, 0x01	; 1
    31f4:	84 91       	lpm	r24, Z
    31f6:	88 23       	and	r24, r24
    31f8:	a1 f7       	brne	.-24     	; 0x31e2 <nrk_kprintf+0x8>
    31fa:	df 91       	pop	r29
    31fc:	cf 91       	pop	r28
    31fe:	08 95       	ret

00003200 <__vector_36>:

    3200:	1f 92       	push	r1
    3202:	0f 92       	push	r0
    3204:	0f b6       	in	r0, 0x3f	; 63
    3206:	0f 92       	push	r0
    3208:	11 24       	eor	r1, r1
    320a:	2f 93       	push	r18
    320c:	3f 93       	push	r19
    320e:	4f 93       	push	r20
    3210:	5f 93       	push	r21
    3212:	6f 93       	push	r22
    3214:	7f 93       	push	r23
    3216:	8f 93       	push	r24
    3218:	9f 93       	push	r25
    321a:	af 93       	push	r26
    321c:	bf 93       	push	r27
    321e:	ef 93       	push	r30
    3220:	ff 93       	push	r31
    3222:	80 91 c9 00 	lds	r24, 0x00C9
    3226:	8f 77       	andi	r24, 0x7F	; 127
    3228:	80 93 c9 00 	sts	0x00C9, r24
    322c:	80 91 c8 00 	lds	r24, 0x00C8
    3230:	87 ff       	sbrs	r24, 7
    3232:	fc cf       	rjmp	.-8      	; 0x322c <__vector_36+0x2c>
    3234:	80 91 c8 00 	lds	r24, 0x00C8
    3238:	8f 77       	andi	r24, 0x7F	; 127
    323a:	80 93 c8 00 	sts	0x00C8, r24
    323e:	90 91 ce 00 	lds	r25, 0x00CE
    3242:	80 91 cb 05 	lds	r24, 0x05CB
    3246:	e8 2f       	mov	r30, r24
    3248:	ff 27       	eor	r31, r31
    324a:	e4 53       	subi	r30, 0x34	; 52
    324c:	fa 4f       	sbci	r31, 0xFA	; 250
    324e:	90 83       	st	Z, r25
    3250:	8f 5f       	subi	r24, 0xFF	; 255
    3252:	80 93 cb 05 	sts	0x05CB, r24
    3256:	80 31       	cpi	r24, 0x10	; 16
    3258:	11 f4       	brne	.+4      	; 0x325e <__vector_36+0x5e>
    325a:	10 92 cb 05 	sts	0x05CB, r1
    325e:	80 91 dc 05 	lds	r24, 0x05DC
    3262:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <nrk_event_signal>
    3266:	80 91 c8 00 	lds	r24, 0x00C8
    326a:	8f 77       	andi	r24, 0x7F	; 127
    326c:	80 93 c8 00 	sts	0x00C8, r24
    3270:	80 91 c9 00 	lds	r24, 0x00C9
    3274:	80 68       	ori	r24, 0x80	; 128
    3276:	80 93 c9 00 	sts	0x00C9, r24
    327a:	ff 91       	pop	r31
    327c:	ef 91       	pop	r30
    327e:	bf 91       	pop	r27
    3280:	af 91       	pop	r26
    3282:	9f 91       	pop	r25
    3284:	8f 91       	pop	r24
    3286:	7f 91       	pop	r23
    3288:	6f 91       	pop	r22
    328a:	5f 91       	pop	r21
    328c:	4f 91       	pop	r20
    328e:	3f 91       	pop	r19
    3290:	2f 91       	pop	r18
    3292:	0f 90       	pop	r0
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	0f 90       	pop	r0
    3298:	1f 90       	pop	r1
    329a:	18 95       	reti

0000329c <halWait>:
	...
    do {
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

    32a4:	01 97       	sbiw	r24, 0x01	; 1
    32a6:	d1 f7       	brne	.-12     	; 0x329c <halWait>
    32a8:	08 95       	ret

000032aa <read_eeprom_current_image_checksum>:
    32aa:	fc 01       	movw	r30, r24

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    32ac:	a7 e0       	ldi	r26, 0x07	; 7
    32ae:	b0 e0       	ldi	r27, 0x00	; 0
    32b0:	0e 94 2c 33 	call	0x6658	; 0x6658 <__eeprom_read_byte_1F2021>
    32b4:	80 2d       	mov	r24, r0
    32b6:	80 83       	st	Z, r24
    32b8:	81 e0       	ldi	r24, 0x01	; 1
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	08 95       	ret

000032be <write_eeprom_current_image_checksum>:
    32be:	fc 01       	movw	r30, r24
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    32c0:	80 81       	ld	r24, Z
    32c2:	a7 e0       	ldi	r26, 0x07	; 7
    32c4:	b0 e0       	ldi	r27, 0x00	; 0
    32c6:	08 2e       	mov	r0, r24
    32c8:	0e 94 34 33 	call	0x6668	; 0x6668 <__eeprom_write_byte_1F2021>
    32cc:	81 e0       	ldi	r24, 0x01	; 1
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	08 95       	ret

000032d2 <nrk_eeprom_read_byte>:

uint8_t 
eeprom_read_byte (const uint8_t *addr) 
{
  uint8_t result;
  __asm__ __volatile__
    32d2:	dc 01       	movw	r26, r24
    32d4:	0e 94 2c 33 	call	0x6658	; 0x6658 <__eeprom_read_byte_1F2021>
    32d8:	80 2d       	mov	r24, r0
*
*  This is the Open Source Version of Nano-RK included as part of a Dual
*  Licensing Model. If you are unsure which license to use please refer to:
*  http://www.nanork.org/nano-RK/wiki/Licensing
*
*  This program is free software: you can redistribute it and/or modify
    32da:	99 27       	eor	r25, r25
    32dc:	08 95       	ret

000032de <read_eeprom_mac_address>:
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
    32de:	fc 01       	movw	r30, r24
    32e0:	a0 e0       	ldi	r26, 0x00	; 0
    32e2:	b0 e0       	ldi	r27, 0x00	; 0
    32e4:	0e 94 2c 33 	call	0x6658	; 0x6658 <__eeprom_read_byte_1F2021>
    32e8:	40 2d       	mov	r20, r0
*  You should have received a copy of the GNU General Public License
*  along with this program.  If not, see <http://www.gnu.org/licenses/>.
*
*  Contributing Authors (specific to this file):
*  Chipcon Development Team 
    32ea:	43 83       	std	Z+3, r20	; 0x03
    32ec:	a1 e0       	ldi	r26, 0x01	; 1
    32ee:	b0 e0       	ldi	r27, 0x00	; 0
    32f0:	0e 94 2c 33 	call	0x6658	; 0x6658 <__eeprom_read_byte_1F2021>
    32f4:	80 2d       	mov	r24, r0
*******************************************************************************/
    32f6:	82 83       	std	Z+2, r24	; 0x02
    32f8:	a2 e0       	ldi	r26, 0x02	; 2
    32fa:	b0 e0       	ldi	r27, 0x00	; 0
    32fc:	0e 94 2c 33 	call	0x6658	; 0x6658 <__eeprom_read_byte_1F2021>
    3300:	30 2d       	mov	r19, r0

    3302:	31 83       	std	Z+1, r19	; 0x01
    3304:	a3 e0       	ldi	r26, 0x03	; 3
    3306:	b0 e0       	ldi	r27, 0x00	; 0
    3308:	0e 94 2c 33 	call	0x6658	; 0x6658 <__eeprom_read_byte_1F2021>
    330c:	90 2d       	mov	r25, r0
#include <include.h>
    330e:	90 83       	st	Z, r25
    3310:	a4 e0       	ldi	r26, 0x04	; 4
    3312:	b0 e0       	ldi	r27, 0x00	; 0
    3314:	0e 94 2c 33 	call	0x6658	; 0x6658 <__eeprom_read_byte_1F2021>
    3318:	20 2d       	mov	r18, r0
#include <ulib.h>

//-------------------------------------------------------------------------------------------------------
    331a:	83 0f       	add	r24, r19
//	void rfWaitForCrystalOscillator(void)
    331c:	84 0f       	add	r24, r20
//
//	DESCRIPTION:
    331e:	89 0f       	add	r24, r25
    3320:	28 17       	cp	r18, r24
    3322:	19 f4       	brne	.+6      	; 0x332a <read_eeprom_mac_address+0x4c>
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	90 e0       	ldi	r25, 0x00	; 0
    3328:	08 95       	ret
    332a:	8f ef       	ldi	r24, 0xFF	; 255
    332c:	9f ef       	ldi	r25, 0xFF	; 255
//		Waits for the crystal oscillator to become stable. The flag is polled via the SPI status byte.
//      
//      Note that this function will lock up if the SXOSCON command strobe has not been given before the
    332e:	08 95       	ret

00003330 <read_eeprom_channel>:
//      function call. Also note that global interrupts will always be enabled when this function 
//      returns.
//-------------------------------------------------------------------------------------------------------
    3330:	fc 01       	movw	r30, r24
    3332:	a5 e0       	ldi	r26, 0x05	; 5
    3334:	b0 e0       	ldi	r27, 0x00	; 0
    3336:	0e 94 2c 33 	call	0x6658	; 0x6658 <__eeprom_read_byte_1F2021>
    333a:	80 2d       	mov	r24, r0
void halRfWaitForCrystalOscillator(void) {
    333c:	80 83       	st	Z, r24
    uint8_t spiStatusByte;

    333e:	81 e0       	ldi	r24, 0x01	; 1
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	08 95       	ret

00003344 <read_eeprom_load_img_pages>:
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

} // halRfWaitForCrystalOscillator

    3344:	fc 01       	movw	r30, r24
    3346:	a6 e0       	ldi	r26, 0x06	; 6
    3348:	b0 e0       	ldi	r27, 0x00	; 0
    334a:	0e 94 2c 33 	call	0x6658	; 0x6658 <__eeprom_read_byte_1F2021>
    334e:	80 2d       	mov	r24, r0
    3350:	80 83       	st	Z, r24
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	08 95       	ret

00003358 <read_eeprom_aes_key>:
    3358:	ac 01       	movw	r20, r24
    335a:	20 e0       	ldi	r18, 0x00	; 0
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	d9 01       	movw	r26, r18
    3360:	18 96       	adiw	r26, 0x08	; 8
    3362:	0e 94 2c 33 	call	0x6658	; 0x6658 <__eeprom_read_byte_1F2021>
    3366:	80 2d       	mov	r24, r0
    3368:	fa 01       	movw	r30, r20
    336a:	e2 0f       	add	r30, r18
    336c:	f3 1f       	adc	r31, r19
    336e:	80 83       	st	Z, r24
    3370:	2f 5f       	subi	r18, 0xFF	; 255
    3372:	3f 4f       	sbci	r19, 0xFF	; 255
    3374:	20 31       	cpi	r18, 0x10	; 16
    3376:	31 05       	cpc	r19, r1
    3378:	91 f7       	brne	.-28     	; 0x335e <read_eeprom_aes_key+0x6>
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	08 95       	ret

00003380 <nrk_eeprom_write_byte>:
    Write a byte \c value to EEPROM address \c addr. */

void 
eeprom_write_byte (uint8_t *addr,uint8_t value)
{
  __asm__ __volatile__ (
    3380:	dc 01       	movw	r26, r24
    3382:	06 2e       	mov	r0, r22
    3384:	0e 94 34 33 	call	0x6668	; 0x6668 <__eeprom_write_byte_1F2021>
    3388:	08 95       	ret

0000338a <write_eeprom_load_img_pages>:
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
    338a:	fc 01       	movw	r30, r24
    338c:	80 81       	ld	r24, Z
    338e:	a6 e0       	ldi	r26, 0x06	; 6
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	08 2e       	mov	r0, r24
    3394:	0e 94 34 33 	call	0x6668	; 0x6668 <__eeprom_write_byte_1F2021>
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
    3398:	81 e0       	ldi	r24, 0x01	; 1
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	08 95       	ret

0000339e <write_eeprom_aes_key>:
    339e:	ac 01       	movw	r20, r24
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	d9 01       	movw	r26, r18
    33a6:	18 96       	adiw	r26, 0x08	; 8
    33a8:	fa 01       	movw	r30, r20
    33aa:	e2 0f       	add	r30, r18
    33ac:	f3 1f       	adc	r31, r19
    33ae:	80 81       	ld	r24, Z
    33b0:	08 2e       	mov	r0, r24
    33b2:	0e 94 34 33 	call	0x6668	; 0x6668 <__eeprom_write_byte_1F2021>
    33b6:	2f 5f       	subi	r18, 0xFF	; 255
    33b8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ba:	20 31       	cpi	r18, 0x10	; 16
    33bc:	31 05       	cpc	r19, r1
    33be:	91 f7       	brne	.-28     	; 0x33a4 <write_eeprom_aes_key+0x6>
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	08 95       	ret

000033c6 <nrk_int_disable>:
    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
    33c6:	f8 94       	cli
    33c8:	08 95       	ret

000033ca <nrk_int_enable>:

} // halRfWaitForCrystalOscillator

    33ca:	78 94       	sei
    33cc:	08 95       	ret

000033ce <nrk_version>:
    33ce:	85 e6       	ldi	r24, 0x65	; 101
    33d0:	90 e0       	ldi	r25, 0x00	; 0
    33d2:	08 95       	ret

000033d4 <_nrk_timer_tick>:
    33d4:	0e 94 34 27 	call	0x4e68	; 0x4e68 <_nrk_scheduler>
    33d8:	08 95       	ret

000033da <nrk_TCB_init>:
    33da:	ef 92       	push	r14
    33dc:	ff 92       	push	r15
    33de:	0f 93       	push	r16
    33e0:	1f 93       	push	r17
    33e2:	cf 93       	push	r28
    33e4:	df 93       	push	r29
    33e6:	ec 01       	movw	r28, r24
    33e8:	8b 01       	movw	r16, r22
    33ea:	7a 01       	movw	r14, r20
    33ec:	89 85       	ldd	r24, Y+9	; 0x09
    33ee:	82 30       	cpi	r24, 0x02	; 2
    33f0:	21 f0       	breq	.+8      	; 0x33fa <nrk_TCB_init+0x20>
    33f2:	80 91 6c 06 	lds	r24, 0x066C
    33f6:	88 83       	st	Y, r24
    33f8:	01 c0       	rjmp	.+2      	; 0x33fc <nrk_TCB_init+0x22>
    33fa:	18 82       	st	Y, r1
    33fc:	80 91 6c 06 	lds	r24, 0x066C
    3400:	84 30       	cpi	r24, 0x04	; 4
    3402:	20 f0       	brcs	.+8      	; 0x340c <nrk_TCB_init+0x32>
    3404:	60 e0       	ldi	r22, 0x00	; 0
    3406:	87 e0       	ldi	r24, 0x07	; 7
    3408:	0e 94 cc 1c 	call	0x3998	; 0x3998 <nrk_kernel_error_add>
    340c:	89 85       	ldd	r24, Y+9	; 0x09
    340e:	82 30       	cpi	r24, 0x02	; 2
    3410:	29 f0       	breq	.+10     	; 0x341c <nrk_TCB_init+0x42>
    3412:	80 91 6c 06 	lds	r24, 0x066C
    3416:	8f 5f       	subi	r24, 0xFF	; 255
    3418:	80 93 6c 06 	sts	0x066C, r24
    341c:	80 91 6c 06 	lds	r24, 0x066C
    3420:	88 23       	and	r24, r24
    3422:	19 f4       	brne	.+6      	; 0x342a <nrk_TCB_init+0x50>
    3424:	81 e0       	ldi	r24, 0x01	; 1
    3426:	80 93 6c 06 	sts	0x066C, r24
    342a:	88 81       	ld	r24, Y
    342c:	99 27       	eor	r25, r25
    342e:	87 fd       	sbrc	r24, 7
    3430:	90 95       	com	r25
    3432:	fc 01       	movw	r30, r24
    3434:	45 e0       	ldi	r20, 0x05	; 5
    3436:	ee 0f       	add	r30, r30
    3438:	ff 1f       	adc	r31, r31
    343a:	4a 95       	dec	r20
    343c:	e1 f7       	brne	.-8      	; 0x3436 <nrk_TCB_init+0x5c>
    343e:	e8 0f       	add	r30, r24
    3440:	f9 1f       	adc	r31, r25
    3442:	e0 52       	subi	r30, 0x20	; 32
    3444:	fa 4f       	sbci	r31, 0xFA	; 250
    3446:	11 83       	std	Z+1, r17	; 0x01
    3448:	00 83       	st	Z, r16
    344a:	88 81       	ld	r24, Y
    344c:	99 27       	eor	r25, r25
    344e:	87 fd       	sbrc	r24, 7
    3450:	90 95       	com	r25
    3452:	fc 01       	movw	r30, r24
    3454:	35 e0       	ldi	r19, 0x05	; 5
    3456:	ee 0f       	add	r30, r30
    3458:	ff 1f       	adc	r31, r31
    345a:	3a 95       	dec	r19
    345c:	e1 f7       	brne	.-8      	; 0x3456 <nrk_TCB_init+0x7c>
    345e:	e8 0f       	add	r30, r24
    3460:	f9 1f       	adc	r31, r25
    3462:	e0 52       	subi	r30, 0x20	; 32
    3464:	fa 4f       	sbci	r31, 0xFA	; 250
    3466:	88 85       	ldd	r24, Y+8	; 0x08
    3468:	82 87       	std	Z+10, r24	; 0x0a
    346a:	88 81       	ld	r24, Y
    346c:	99 27       	eor	r25, r25
    346e:	87 fd       	sbrc	r24, 7
    3470:	90 95       	com	r25
    3472:	fc 01       	movw	r30, r24
    3474:	25 e0       	ldi	r18, 0x05	; 5
    3476:	ee 0f       	add	r30, r30
    3478:	ff 1f       	adc	r31, r31
    347a:	2a 95       	dec	r18
    347c:	e1 f7       	brne	.-8      	; 0x3476 <nrk_TCB_init+0x9c>
    347e:	e8 0f       	add	r30, r24
    3480:	f9 1f       	adc	r31, r25
    3482:	e0 52       	subi	r30, 0x20	; 32
    3484:	fa 4f       	sbci	r31, 0xFA	; 250
    3486:	83 e0       	ldi	r24, 0x03	; 3
    3488:	81 87       	std	Z+9, r24	; 0x09
    348a:	28 81       	ld	r18, Y
    348c:	82 2f       	mov	r24, r18
    348e:	99 27       	eor	r25, r25
    3490:	87 fd       	sbrc	r24, 7
    3492:	90 95       	com	r25
    3494:	fc 01       	movw	r30, r24
    3496:	05 e0       	ldi	r16, 0x05	; 5
    3498:	ee 0f       	add	r30, r30
    349a:	ff 1f       	adc	r31, r31
    349c:	0a 95       	dec	r16
    349e:	e1 f7       	brne	.-8      	; 0x3498 <nrk_TCB_init+0xbe>
    34a0:	e8 0f       	add	r30, r24
    34a2:	f9 1f       	adc	r31, r25
    34a4:	e0 52       	subi	r30, 0x20	; 32
    34a6:	fa 4f       	sbci	r31, 0xFA	; 250
    34a8:	20 87       	std	Z+8, r18	; 0x08
    34aa:	88 81       	ld	r24, Y
    34ac:	99 27       	eor	r25, r25
    34ae:	87 fd       	sbrc	r24, 7
    34b0:	90 95       	com	r25
    34b2:	fc 01       	movw	r30, r24
    34b4:	15 e0       	ldi	r17, 0x05	; 5
    34b6:	ee 0f       	add	r30, r30
    34b8:	ff 1f       	adc	r31, r31
    34ba:	1a 95       	dec	r17
    34bc:	e1 f7       	brne	.-8      	; 0x34b6 <nrk_TCB_init+0xdc>
    34be:	e8 0f       	add	r30, r24
    34c0:	f9 1f       	adc	r31, r25
    34c2:	e0 52       	subi	r30, 0x20	; 32
    34c4:	fa 4f       	sbci	r31, 0xFA	; 250
    34c6:	15 82       	std	Z+5, r1	; 0x05
    34c8:	08 81       	ld	r16, Y
    34ca:	11 27       	eor	r17, r17
    34cc:	07 fd       	sbrc	r16, 7
    34ce:	10 95       	com	r17
    34d0:	2b 85       	ldd	r18, Y+11	; 0x0b
    34d2:	3c 85       	ldd	r19, Y+12	; 0x0c
    34d4:	4d 85       	ldd	r20, Y+13	; 0x0d
    34d6:	5e 85       	ldd	r21, Y+14	; 0x0e
    34d8:	6f 85       	ldd	r22, Y+15	; 0x0f
    34da:	78 89       	ldd	r23, Y+16	; 0x10
    34dc:	89 89       	ldd	r24, Y+17	; 0x11
    34de:	9a 89       	ldd	r25, Y+18	; 0x12
    34e0:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <_nrk_time_to_ticks>
    34e4:	f8 01       	movw	r30, r16
    34e6:	b5 e0       	ldi	r27, 0x05	; 5
    34e8:	ee 0f       	add	r30, r30
    34ea:	ff 1f       	adc	r31, r31
    34ec:	ba 95       	dec	r27
    34ee:	e1 f7       	brne	.-8      	; 0x34e8 <nrk_TCB_init+0x10e>
    34f0:	e0 0f       	add	r30, r16
    34f2:	f1 1f       	adc	r31, r17
    34f4:	e0 52       	subi	r30, 0x20	; 32
    34f6:	fa 4f       	sbci	r31, 0xFA	; 250
    34f8:	94 8f       	std	Z+28, r25	; 0x1c
    34fa:	83 8f       	std	Z+27, r24	; 0x1b
    34fc:	08 81       	ld	r16, Y
    34fe:	11 27       	eor	r17, r17
    3500:	07 fd       	sbrc	r16, 7
    3502:	10 95       	com	r17
    3504:	2b 8d       	ldd	r18, Y+27	; 0x1b
    3506:	3c 8d       	ldd	r19, Y+28	; 0x1c
    3508:	4d 8d       	ldd	r20, Y+29	; 0x1d
    350a:	5e 8d       	ldd	r21, Y+30	; 0x1e
    350c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    350e:	78 a1       	ldd	r23, Y+32	; 0x20
    3510:	89 a1       	ldd	r24, Y+33	; 0x21
    3512:	9a a1       	ldd	r25, Y+34	; 0x22
    3514:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <_nrk_time_to_ticks>
    3518:	f8 01       	movw	r30, r16
    351a:	a5 e0       	ldi	r26, 0x05	; 5
    351c:	ee 0f       	add	r30, r30
    351e:	ff 1f       	adc	r31, r31
    3520:	aa 95       	dec	r26
    3522:	e1 f7       	brne	.-8      	; 0x351c <nrk_TCB_init+0x142>
    3524:	e0 0f       	add	r30, r16
    3526:	f1 1f       	adc	r31, r17
    3528:	e0 52       	subi	r30, 0x20	; 32
    352a:	fa 4f       	sbci	r31, 0xFA	; 250
    352c:	96 8b       	std	Z+22, r25	; 0x16
    352e:	85 8b       	std	Z+21, r24	; 0x15
    3530:	88 81       	ld	r24, Y
    3532:	99 27       	eor	r25, r25
    3534:	87 fd       	sbrc	r24, 7
    3536:	90 95       	com	r25
    3538:	fc 01       	movw	r30, r24
    353a:	75 e0       	ldi	r23, 0x05	; 5
    353c:	ee 0f       	add	r30, r30
    353e:	ff 1f       	adc	r31, r31
    3540:	7a 95       	dec	r23
    3542:	e1 f7       	brne	.-8      	; 0x353c <nrk_TCB_init+0x162>
    3544:	e8 0f       	add	r30, r24
    3546:	f9 1f       	adc	r31, r25
    3548:	e0 52       	subi	r30, 0x20	; 32
    354a:	fa 4f       	sbci	r31, 0xFA	; 250
    354c:	85 89       	ldd	r24, Z+21	; 0x15
    354e:	96 89       	ldd	r25, Z+22	; 0x16
    3550:	23 8d       	ldd	r18, Z+27	; 0x1b
    3552:	34 8d       	ldd	r19, Z+28	; 0x1c
    3554:	82 0f       	add	r24, r18
    3556:	93 1f       	adc	r25, r19
    3558:	90 8f       	std	Z+24, r25	; 0x18
    355a:	87 8b       	std	Z+23, r24	; 0x17
    355c:	08 81       	ld	r16, Y
    355e:	11 27       	eor	r17, r17
    3560:	07 fd       	sbrc	r16, 7
    3562:	10 95       	com	r17
    3564:	2b 89       	ldd	r18, Y+19	; 0x13
    3566:	3c 89       	ldd	r19, Y+20	; 0x14
    3568:	4d 89       	ldd	r20, Y+21	; 0x15
    356a:	5e 89       	ldd	r21, Y+22	; 0x16
    356c:	6f 89       	ldd	r22, Y+23	; 0x17
    356e:	78 8d       	ldd	r23, Y+24	; 0x18
    3570:	89 8d       	ldd	r24, Y+25	; 0x19
    3572:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3574:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <_nrk_time_to_ticks>
    3578:	f8 01       	movw	r30, r16
    357a:	65 e0       	ldi	r22, 0x05	; 5
    357c:	ee 0f       	add	r30, r30
    357e:	ff 1f       	adc	r31, r31
    3580:	6a 95       	dec	r22
    3582:	e1 f7       	brne	.-8      	; 0x357c <nrk_TCB_init+0x1a2>
    3584:	e0 0f       	add	r30, r16
    3586:	f1 1f       	adc	r31, r17
    3588:	e0 52       	subi	r30, 0x20	; 32
    358a:	fa 4f       	sbci	r31, 0xFA	; 250
    358c:	96 8f       	std	Z+30, r25	; 0x1e
    358e:	85 8f       	std	Z+29, r24	; 0x1d
    3590:	88 81       	ld	r24, Y
    3592:	99 27       	eor	r25, r25
    3594:	87 fd       	sbrc	r24, 7
    3596:	90 95       	com	r25
    3598:	fc 01       	movw	r30, r24
    359a:	55 e0       	ldi	r21, 0x05	; 5
    359c:	ee 0f       	add	r30, r30
    359e:	ff 1f       	adc	r31, r31
    35a0:	5a 95       	dec	r21
    35a2:	e1 f7       	brne	.-8      	; 0x359c <nrk_TCB_init+0x1c2>
    35a4:	e8 0f       	add	r30, r24
    35a6:	f9 1f       	adc	r31, r25
    35a8:	e0 52       	subi	r30, 0x20	; 32
    35aa:	fa 4f       	sbci	r31, 0xFA	; 250
    35ac:	85 8d       	ldd	r24, Z+29	; 0x1d
    35ae:	96 8d       	ldd	r25, Z+30	; 0x1e
    35b0:	92 8f       	std	Z+26, r25	; 0x1a
    35b2:	81 8f       	std	Z+25, r24	; 0x19
    35b4:	88 81       	ld	r24, Y
    35b6:	99 27       	eor	r25, r25
    35b8:	87 fd       	sbrc	r24, 7
    35ba:	90 95       	com	r25
    35bc:	fc 01       	movw	r30, r24
    35be:	45 e0       	ldi	r20, 0x05	; 5
    35c0:	ee 0f       	add	r30, r30
    35c2:	ff 1f       	adc	r31, r31
    35c4:	4a 95       	dec	r20
    35c6:	e1 f7       	brne	.-8      	; 0x35c0 <nrk_TCB_init+0x1e6>
    35c8:	e8 0f       	add	r30, r24
    35ca:	f9 1f       	adc	r31, r25
    35cc:	e0 52       	subi	r30, 0x20	; 32
    35ce:	fa 4f       	sbci	r31, 0xFA	; 250
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	90 a3       	std	Z+32, r25	; 0x20
    35d6:	87 8f       	std	Z+31, r24	; 0x1f
    35d8:	88 81       	ld	r24, Y
    35da:	99 27       	eor	r25, r25
    35dc:	87 fd       	sbrc	r24, 7
    35de:	90 95       	com	r25
    35e0:	fc 01       	movw	r30, r24
    35e2:	35 e0       	ldi	r19, 0x05	; 5
    35e4:	ee 0f       	add	r30, r30
    35e6:	ff 1f       	adc	r31, r31
    35e8:	3a 95       	dec	r19
    35ea:	e1 f7       	brne	.-8      	; 0x35e4 <nrk_TCB_init+0x20a>
    35ec:	e8 0f       	add	r30, r24
    35ee:	f9 1f       	adc	r31, r25
    35f0:	e0 52       	subi	r30, 0x20	; 32
    35f2:	fa 4f       	sbci	r31, 0xFA	; 250
    35f4:	f3 82       	std	Z+3, r15	; 0x03
    35f6:	e2 82       	std	Z+2, r14	; 0x02
    35f8:	88 81       	ld	r24, Y
    35fa:	99 27       	eor	r25, r25
    35fc:	87 fd       	sbrc	r24, 7
    35fe:	90 95       	com	r25
    3600:	fc 01       	movw	r30, r24
    3602:	25 e0       	ldi	r18, 0x05	; 5
    3604:	ee 0f       	add	r30, r30
    3606:	ff 1f       	adc	r31, r31
    3608:	2a 95       	dec	r18
    360a:	e1 f7       	brne	.-8      	; 0x3604 <nrk_TCB_init+0x22a>
    360c:	e8 0f       	add	r30, r24
    360e:	f9 1f       	adc	r31, r25
    3610:	e0 52       	subi	r30, 0x20	; 32
    3612:	fa 4f       	sbci	r31, 0xFA	; 250
    3614:	81 e0       	ldi	r24, 0x01	; 1
    3616:	84 87       	std	Z+12, r24	; 0x0c
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	df 91       	pop	r29
    361e:	cf 91       	pop	r28
    3620:	1f 91       	pop	r17
    3622:	0f 91       	pop	r16
    3624:	ff 90       	pop	r15
    3626:	ef 90       	pop	r14
    3628:	08 95       	ret

0000362a <nrk_start>:
    362a:	8f 92       	push	r8
    362c:	9f 92       	push	r9
    362e:	af 92       	push	r10
    3630:	bf 92       	push	r11
    3632:	cf 92       	push	r12
    3634:	df 92       	push	r13
    3636:	ef 92       	push	r14
    3638:	ff 92       	push	r15
    363a:	0f 93       	push	r16
    363c:	1f 93       	push	r17
    363e:	cf 93       	push	r28
    3640:	df 93       	push	r29
    3642:	68 ee       	ldi	r22, 0xE8	; 232
    3644:	a6 2e       	mov	r10, r22
    3646:	65 e0       	ldi	r22, 0x05	; 5
    3648:	b6 2e       	mov	r11, r22
    364a:	cc 24       	eor	r12, r12
    364c:	dd 24       	eor	r13, r13
    364e:	45 01       	movw	r8, r10
    3650:	ec 2c       	mov	r14, r12
    3652:	f5 01       	movw	r30, r10
    3654:	f0 80       	ld	r15, Z
    3656:	ff ef       	ldi	r31, 0xFF	; 255
    3658:	ff 16       	cp	r15, r31
    365a:	91 f0       	breq	.+36     	; 0x3680 <nrk_start+0x56>
    365c:	e4 01       	movw	r28, r8
    365e:	00 e0       	ldi	r16, 0x00	; 0
    3660:	10 e0       	ldi	r17, 0x00	; 0
    3662:	e0 16       	cp	r14, r16
    3664:	39 f0       	breq	.+14     	; 0x3674 <nrk_start+0x4a>
    3666:	88 81       	ld	r24, Y
    3668:	f8 16       	cp	r15, r24
    366a:	21 f4       	brne	.+8      	; 0x3674 <nrk_start+0x4a>
    366c:	6f 2d       	mov	r22, r15
    366e:	85 e0       	ldi	r24, 0x05	; 5
    3670:	0e 94 cc 1c 	call	0x3998	; 0x3998 <nrk_kernel_error_add>
    3674:	0f 5f       	subi	r16, 0xFF	; 255
    3676:	1f 4f       	sbci	r17, 0xFF	; 255
    3678:	a1 96       	adiw	r28, 0x21	; 33
    367a:	04 30       	cpi	r16, 0x04	; 4
    367c:	11 05       	cpc	r17, r1
    367e:	89 f7       	brne	.-30     	; 0x3662 <nrk_start+0x38>
    3680:	08 94       	sec
    3682:	c1 1c       	adc	r12, r1
    3684:	d1 1c       	adc	r13, r1
    3686:	81 e2       	ldi	r24, 0x21	; 33
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	a8 0e       	add	r10, r24
    368c:	b9 1e       	adc	r11, r25
    368e:	94 e0       	ldi	r25, 0x04	; 4
    3690:	c9 16       	cp	r12, r25
    3692:	d1 04       	cpc	r13, r1
    3694:	e9 f6       	brne	.-70     	; 0x3650 <nrk_start+0x26>
    3696:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <nrk_get_high_ready_task_ID>
    369a:	28 2f       	mov	r18, r24
    369c:	33 27       	eor	r19, r19
    369e:	27 fd       	sbrc	r18, 7
    36a0:	30 95       	com	r19
    36a2:	f9 01       	movw	r30, r18
    36a4:	55 e0       	ldi	r21, 0x05	; 5
    36a6:	ee 0f       	add	r30, r30
    36a8:	ff 1f       	adc	r31, r31
    36aa:	5a 95       	dec	r21
    36ac:	e1 f7       	brne	.-8      	; 0x36a6 <nrk_start+0x7c>
    36ae:	e2 0f       	add	r30, r18
    36b0:	f3 1f       	adc	r31, r19
    36b2:	e0 52       	subi	r30, 0x20	; 32
    36b4:	fa 4f       	sbci	r31, 0xFA	; 250
    36b6:	32 85       	ldd	r19, Z+10	; 0x0a
    36b8:	30 93 7f 06 	sts	0x067F, r19
    36bc:	21 e2       	ldi	r18, 0x21	; 33
    36be:	82 02       	muls	r24, r18
    36c0:	c0 01       	movw	r24, r0
    36c2:	11 24       	eor	r1, r1
    36c4:	80 52       	subi	r24, 0x20	; 32
    36c6:	9a 4f       	sbci	r25, 0xFA	; 250
    36c8:	90 93 7e 06 	sts	0x067E, r25
    36cc:	80 93 7d 06 	sts	0x067D, r24
    36d0:	90 93 6f 06 	sts	0x066F, r25
    36d4:	80 93 6e 06 	sts	0x066E, r24
    36d8:	30 93 70 06 	sts	0x0670, r19
    36dc:	0e 94 33 2e 	call	0x5c66	; 0x5c66 <nrk_target_start>
    36e0:	0e 94 19 2e 	call	0x5c32	; 0x5c32 <nrk_stack_pointer_init>
    36e4:	0e 94 57 2e 	call	0x5cae	; 0x5cae <nrk_start_high_ready_task>
    36e8:	ff cf       	rjmp	.-2      	; 0x36e8 <nrk_start+0xbe>

000036ea <nrk_init>:
    36ea:	0f 93       	push	r16
    36ec:	1f 93       	push	r17
    36ee:	cf 93       	push	r28
    36f0:	df 93       	push	r29
    36f2:	cd b7       	in	r28, 0x3d	; 61
    36f4:	de b7       	in	r29, 0x3e	; 62
    36f6:	a3 97       	sbiw	r28, 0x23	; 35
    36f8:	0f b6       	in	r0, 0x3f	; 63
    36fa:	f8 94       	cli
    36fc:	de bf       	out	0x3e, r29	; 62
    36fe:	0f be       	out	0x3f, r0	; 63
    3700:	cd bf       	out	0x3d, r28	; 61
    3702:	0e 94 d3 1d 	call	0x3ba6	; 0x3ba6 <nrk_signal_create>
    3706:	80 93 6d 06 	sts	0x066D, r24
    370a:	8f 3f       	cpi	r24, 0xFF	; 255
    370c:	21 f4       	brne	.+8      	; 0x3716 <nrk_init+0x2c>
    370e:	60 e0       	ldi	r22, 0x00	; 0
    3710:	8e e0       	ldi	r24, 0x0E	; 14
    3712:	0e 94 cc 1c 	call	0x3998	; 0x3998 <nrk_kernel_error_add>
    3716:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <_nrk_startup_ok>
    371a:	88 23       	and	r24, r24
    371c:	21 f4       	brne	.+8      	; 0x3726 <nrk_init+0x3c>
    371e:	60 e0       	ldi	r22, 0x00	; 0
    3720:	86 e0       	ldi	r24, 0x06	; 6
    3722:	0e 94 cc 1c 	call	0x3998	; 0x3998 <nrk_kernel_error_add>
    3726:	10 92 70 06 	sts	0x0670, r1
    372a:	10 92 7e 06 	sts	0x067E, r1
    372e:	10 92 7d 06 	sts	0x067D, r1
    3732:	10 92 6f 06 	sts	0x066F, r1
    3736:	10 92 6e 06 	sts	0x066E, r1
    373a:	10 92 7f 06 	sts	0x067F, r1
    373e:	10 92 7c 06 	sts	0x067C, r1
    3742:	8f ef       	ldi	r24, 0xFF	; 255
    3744:	80 93 66 06 	sts	0x0666, r24
    3748:	80 93 68 06 	sts	0x0668, r24
    374c:	80 93 67 06 	sts	0x0667, r24
    3750:	80 93 69 06 	sts	0x0669, r24
    3754:	80 93 6b 06 	sts	0x066B, r24
    3758:	80 93 6a 06 	sts	0x066A, r24
    375c:	e0 ee       	ldi	r30, 0xE0	; 224
    375e:	f5 e0       	ldi	r31, 0x05	; 5
    3760:	83 e6       	ldi	r24, 0x63	; 99
    3762:	82 87       	std	Z+10, r24	; 0x0a
    3764:	8f ef       	ldi	r24, 0xFF	; 255
    3766:	80 87       	std	Z+8, r24	; 0x08
    3768:	b1 96       	adiw	r30, 0x21	; 33
    376a:	26 e0       	ldi	r18, 0x06	; 6
    376c:	e4 36       	cpi	r30, 0x64	; 100
    376e:	f2 07       	cpc	r31, r18
    3770:	b9 f7       	brne	.-18     	; 0x3760 <nrk_init+0x76>
    3772:	e0 e8       	ldi	r30, 0x80	; 128
    3774:	f6 e0       	ldi	r31, 0x06	; 6
    3776:	cf 01       	movw	r24, r30
    3778:	05 96       	adiw	r24, 0x05	; 5
    377a:	94 83       	std	Z+4, r25	; 0x04
    377c:	83 83       	std	Z+3, r24	; 0x03
    377e:	f7 83       	std	Z+7, r31	; 0x07
    3780:	e6 83       	std	Z+6, r30	; 0x06
    3782:	fc 01       	movw	r30, r24
    3784:	26 e0       	ldi	r18, 0x06	; 6
    3786:	84 39       	cpi	r24, 0x94	; 148
    3788:	92 07       	cpc	r25, r18
    378a:	a9 f7       	brne	.-22     	; 0x3776 <nrk_init+0x8c>
    378c:	10 92 82 06 	sts	0x0682, r1
    3790:	10 92 81 06 	sts	0x0681, r1
    3794:	10 92 98 06 	sts	0x0698, r1
    3798:	10 92 97 06 	sts	0x0697, r1
    379c:	10 92 73 06 	sts	0x0673, r1
    37a0:	10 92 72 06 	sts	0x0672, r1
    37a4:	44 97       	sbiw	r24, 0x14	; 20
    37a6:	90 93 df 05 	sts	0x05DF, r25
    37aa:	80 93 de 05 	sts	0x05DE, r24
    37ae:	60 e1       	ldi	r22, 0x10	; 16
    37b0:	77 e2       	ldi	r23, 0x27	; 39
    37b2:	8e 01       	movw	r16, r28
    37b4:	0f 5f       	subi	r16, 0xFF	; 255
    37b6:	1f 4f       	sbci	r17, 0xFF	; 255
    37b8:	c8 01       	movw	r24, r16
    37ba:	0e 94 d7 2d 	call	0x5bae	; 0x5bae <nrk_task_set_entry_function>
    37be:	40 e8       	ldi	r20, 0x80	; 128
    37c0:	50 e0       	ldi	r21, 0x00	; 0
    37c2:	69 e1       	ldi	r22, 0x19	; 25
    37c4:	75 e0       	ldi	r23, 0x05	; 5
    37c6:	c8 01       	movw	r24, r16
    37c8:	0e 94 38 2e 	call	0x5c70	; 0x5c70 <nrk_task_set_stk>
    37cc:	85 e5       	ldi	r24, 0x55	; 85
    37ce:	80 93 19 05 	sts	0x0519, r24
    37d2:	19 86       	std	Y+9, r1	; 0x09
    37d4:	1c 8e       	std	Y+28, r1	; 0x1c
    37d6:	1d 8e       	std	Y+29, r1	; 0x1d
    37d8:	1e 8e       	std	Y+30, r1	; 0x1e
    37da:	1f 8e       	std	Y+31, r1	; 0x1f
    37dc:	18 a2       	std	Y+32, r1	; 0x20
    37de:	19 a2       	std	Y+33, r1	; 0x21
    37e0:	1a a2       	std	Y+34, r1	; 0x22
    37e2:	1b a2       	std	Y+35, r1	; 0x23
    37e4:	91 e0       	ldi	r25, 0x01	; 1
    37e6:	98 87       	std	Y+8, r25	; 0x08
    37e8:	82 e0       	ldi	r24, 0x02	; 2
    37ea:	8a 87       	std	Y+10, r24	; 0x0a
    37ec:	9b 87       	std	Y+11, r25	; 0x0b
    37ee:	c8 01       	movw	r24, r16
    37f0:	0e 94 da 23 	call	0x47b4	; 0x47b4 <nrk_activate_task>
    37f4:	a3 96       	adiw	r28, 0x23	; 35
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	f8 94       	cli
    37fa:	de bf       	out	0x3e, r29	; 62
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	cd bf       	out	0x3d, r28	; 61
    3800:	df 91       	pop	r29
    3802:	cf 91       	pop	r28
    3804:	1f 91       	pop	r17
    3806:	0f 91       	pop	r16
    3808:	08 95       	ret

0000380a <nrk_halt>:
    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
    380a:	f8 94       	cli
    380c:	ff cf       	rjmp	.-2      	; 0x380c <nrk_halt+0x2>

0000380e <_nrk_errno_set>:
//	DESCRIPTION:
//		Waits for the crystal oscillator to become stable. The flag is polled via the SPI status byte.
//      
//      Note that this function will lock up if the SXOSCON command strobe has not been given before the
//      function call. Also note that global interrupts will always be enabled when this function 
//      returns.
    380e:	e0 91 7d 06 	lds	r30, 0x067D
    3812:	f0 91 7e 06 	lds	r31, 0x067E
    3816:	84 87       	std	Z+12, r24	; 0x0c
    3818:	08 95       	ret

0000381a <nrk_errno_get>:
//-------------------------------------------------------------------------------------------------------
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    381a:	e0 91 7d 06 	lds	r30, 0x067D
    381e:	f0 91 7e 06 	lds	r31, 0x067E
    3822:	84 85       	ldd	r24, Z+12	; 0x0c
    // Poll the SPI status byte until the crystal oscillator is stable
    do {
    3824:	99 27       	eor	r25, r25
    3826:	08 95       	ret

00003828 <nrk_error_get>:
    3828:	dc 01       	movw	r26, r24
    382a:	fb 01       	movw	r30, r22
    382c:	80 91 18 05 	lds	r24, 0x0518
    3830:	88 23       	and	r24, r24
    3832:	19 f4       	brne	.+6      	; 0x383a <nrk_error_get+0x12>
    3834:	80 e0       	ldi	r24, 0x00	; 0
    3836:	90 e0       	ldi	r25, 0x00	; 0
    3838:	08 95       	ret
    383a:	80 83       	st	Z, r24
    383c:	80 91 c5 03 	lds	r24, 0x03C5
    3840:	8c 93       	st	X, r24
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	08 95       	ret

00003848 <nrk_error_print>:
    3848:	1f 93       	push	r17
    384a:	80 91 18 05 	lds	r24, 0x0518
    384e:	88 23       	and	r24, r24
    3850:	09 f4       	brne	.+2      	; 0x3854 <nrk_error_print+0xc>
    3852:	9e c0       	rjmp	.+316    	; 0x3990 <nrk_error_print+0x148>
    3854:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <nrk_int_disable>
    3858:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <nrk_int_disable>
    385c:	80 ea       	ldi	r24, 0xA0	; 160
    385e:	93 e0       	ldi	r25, 0x03	; 3
    3860:	0e 94 ed 18 	call	0x31da	; 0x31da <nrk_kprintf>
    3864:	80 91 c5 03 	lds	r24, 0x03C5
    3868:	99 27       	eor	r25, r25
    386a:	9f 93       	push	r25
    386c:	8f 93       	push	r24
    386e:	89 e6       	ldi	r24, 0x69	; 105
    3870:	92 e0       	ldi	r25, 0x02	; 2
    3872:	9f 93       	push	r25
    3874:	8f 93       	push	r24
    3876:	0e 94 9f 30 	call	0x613e	; 0x613e <printf>
    387a:	8c e9       	ldi	r24, 0x9C	; 156
    387c:	93 e0       	ldi	r25, 0x03	; 3
    387e:	0e 94 ed 18 	call	0x31da	; 0x31da <nrk_kprintf>
    3882:	0f 90       	pop	r0
    3884:	0f 90       	pop	r0
    3886:	0f 90       	pop	r0
    3888:	0f 90       	pop	r0
    388a:	80 91 18 05 	lds	r24, 0x0518
    388e:	84 31       	cpi	r24, 0x14	; 20
    3890:	10 f0       	brcs	.+4      	; 0x3896 <nrk_error_print+0x4e>
    3892:	10 92 18 05 	sts	0x0518, r1
    3896:	80 91 18 05 	lds	r24, 0x0518
    389a:	99 27       	eor	r25, r25
    389c:	aa 27       	eor	r26, r26
    389e:	bb 27       	eor	r27, r27
    38a0:	fc 01       	movw	r30, r24
    38a2:	31 97       	sbiw	r30, 0x01	; 1
    38a4:	e2 31       	cpi	r30, 0x12	; 18
    38a6:	f1 05       	cpc	r31, r1
    38a8:	f0 f5       	brcc	.+124    	; 0x3926 <nrk_error_print+0xde>
    38aa:	ea 59       	subi	r30, 0x9A	; 154
    38ac:	ff 4f       	sbci	r31, 0xFF	; 255
    38ae:	ee 0f       	add	r30, r30
    38b0:	ff 1f       	adc	r31, r31
    38b2:	05 90       	lpm	r0, Z+
    38b4:	f4 91       	lpm	r31, Z
    38b6:	e0 2d       	mov	r30, r0
    38b8:	09 94       	ijmp
    38ba:	85 e7       	ldi	r24, 0x75	; 117
    38bc:	93 e0       	ldi	r25, 0x03	; 3
    38be:	35 c0       	rjmp	.+106    	; 0x392a <nrk_error_print+0xe2>
    38c0:	81 e6       	ldi	r24, 0x61	; 97
    38c2:	93 e0       	ldi	r25, 0x03	; 3
    38c4:	32 c0       	rjmp	.+100    	; 0x392a <nrk_error_print+0xe2>
    38c6:	8b e4       	ldi	r24, 0x4B	; 75
    38c8:	93 e0       	ldi	r25, 0x03	; 3
    38ca:	2f c0       	rjmp	.+94     	; 0x392a <nrk_error_print+0xe2>
    38cc:	80 e3       	ldi	r24, 0x30	; 48
    38ce:	93 e0       	ldi	r25, 0x03	; 3
    38d0:	2c c0       	rjmp	.+88     	; 0x392a <nrk_error_print+0xe2>
    38d2:	8a e1       	ldi	r24, 0x1A	; 26
    38d4:	93 e0       	ldi	r25, 0x03	; 3
    38d6:	29 c0       	rjmp	.+82     	; 0x392a <nrk_error_print+0xe2>
    38d8:	82 e0       	ldi	r24, 0x02	; 2
    38da:	93 e0       	ldi	r25, 0x03	; 3
    38dc:	26 c0       	rjmp	.+76     	; 0x392a <nrk_error_print+0xe2>
    38de:	8f ee       	ldi	r24, 0xEF	; 239
    38e0:	92 e0       	ldi	r25, 0x02	; 2
    38e2:	23 c0       	rjmp	.+70     	; 0x392a <nrk_error_print+0xe2>
    38e4:	8c ed       	ldi	r24, 0xDC	; 220
    38e6:	92 e0       	ldi	r25, 0x02	; 2
    38e8:	20 c0       	rjmp	.+64     	; 0x392a <nrk_error_print+0xe2>
    38ea:	8e eb       	ldi	r24, 0xBE	; 190
    38ec:	92 e0       	ldi	r25, 0x02	; 2
    38ee:	1d c0       	rjmp	.+58     	; 0x392a <nrk_error_print+0xe2>
    38f0:	89 e9       	ldi	r24, 0x99	; 153
    38f2:	92 e0       	ldi	r25, 0x02	; 2
    38f4:	1a c0       	rjmp	.+52     	; 0x392a <nrk_error_print+0xe2>
    38f6:	8d e8       	ldi	r24, 0x8D	; 141
    38f8:	92 e0       	ldi	r25, 0x02	; 2
    38fa:	17 c0       	rjmp	.+46     	; 0x392a <nrk_error_print+0xe2>
    38fc:	82 e7       	ldi	r24, 0x72	; 114
    38fe:	92 e0       	ldi	r25, 0x02	; 2
    3900:	14 c0       	rjmp	.+40     	; 0x392a <nrk_error_print+0xe2>
    3902:	83 e6       	ldi	r24, 0x63	; 99
    3904:	92 e0       	ldi	r25, 0x02	; 2
    3906:	11 c0       	rjmp	.+34     	; 0x392a <nrk_error_print+0xe2>
    3908:	82 e5       	ldi	r24, 0x52	; 82
    390a:	92 e0       	ldi	r25, 0x02	; 2
    390c:	0e c0       	rjmp	.+28     	; 0x392a <nrk_error_print+0xe2>
    390e:	8e e3       	ldi	r24, 0x3E	; 62
    3910:	92 e0       	ldi	r25, 0x02	; 2
    3912:	0b c0       	rjmp	.+22     	; 0x392a <nrk_error_print+0xe2>
    3914:	8e e1       	ldi	r24, 0x1E	; 30
    3916:	92 e0       	ldi	r25, 0x02	; 2
    3918:	08 c0       	rjmp	.+16     	; 0x392a <nrk_error_print+0xe2>
    391a:	86 e0       	ldi	r24, 0x06	; 6
    391c:	92 e0       	ldi	r25, 0x02	; 2
    391e:	05 c0       	rjmp	.+10     	; 0x392a <nrk_error_print+0xe2>
    3920:	8b ee       	ldi	r24, 0xEB	; 235
    3922:	91 e0       	ldi	r25, 0x01	; 1
    3924:	02 c0       	rjmp	.+4      	; 0x392a <nrk_error_print+0xe2>
    3926:	84 ee       	ldi	r24, 0xE4	; 228
    3928:	91 e0       	ldi	r25, 0x01	; 1
    392a:	0e 94 ed 18 	call	0x31da	; 0x31da <nrk_kprintf>
    392e:	60 91 a9 06 	lds	r22, 0x06A9
    3932:	70 91 aa 06 	lds	r23, 0x06AA
    3936:	8d e0       	ldi	r24, 0x0D	; 13
    3938:	90 e0       	ldi	r25, 0x00	; 0
    393a:	0e 94 72 30 	call	0x60e4	; 0x60e4 <fputc>
    393e:	60 91 a9 06 	lds	r22, 0x06A9
    3942:	70 91 aa 06 	lds	r23, 0x06AA
    3946:	8a e0       	ldi	r24, 0x0A	; 10
    3948:	90 e0       	ldi	r25, 0x00	; 0
    394a:	0e 94 72 30 	call	0x60e4	; 0x60e4 <fputc>
    394e:	82 e0       	ldi	r24, 0x02	; 2
    3950:	90 e0       	ldi	r25, 0x00	; 0
    3952:	0e 94 3f 18 	call	0x307e	; 0x307e <nrk_led_set>
    3956:	83 e0       	ldi	r24, 0x03	; 3
    3958:	90 e0       	ldi	r25, 0x00	; 0
    395a:	0e 94 22 18 	call	0x3044	; 0x3044 <nrk_led_clr>
    395e:	10 e0       	ldi	r17, 0x00	; 0
    3960:	88 ee       	ldi	r24, 0xE8	; 232
    3962:	93 e0       	ldi	r25, 0x03	; 3
    3964:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_spin_wait_us>
    3968:	1f 5f       	subi	r17, 0xFF	; 255
    396a:	14 36       	cpi	r17, 0x64	; 100
    396c:	c9 f7       	brne	.-14     	; 0x3960 <nrk_error_print+0x118>
    396e:	83 e0       	ldi	r24, 0x03	; 3
    3970:	90 e0       	ldi	r25, 0x00	; 0
    3972:	0e 94 3f 18 	call	0x307e	; 0x307e <nrk_led_set>
    3976:	82 e0       	ldi	r24, 0x02	; 2
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	0e 94 22 18 	call	0x3044	; 0x3044 <nrk_led_clr>
    397e:	10 e0       	ldi	r17, 0x00	; 0
    3980:	88 ee       	ldi	r24, 0xE8	; 232
    3982:	93 e0       	ldi	r25, 0x03	; 3
    3984:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_spin_wait_us>
    3988:	1f 5f       	subi	r17, 0xFF	; 255
    398a:	14 36       	cpi	r17, 0x64	; 100
    398c:	c9 f7       	brne	.-14     	; 0x3980 <nrk_error_print+0x138>
    398e:	df cf       	rjmp	.-66     	; 0x394e <nrk_error_print+0x106>
    3990:	80 e0       	ldi	r24, 0x00	; 0
    3992:	90 e0       	ldi	r25, 0x00	; 0
    3994:	1f 91       	pop	r17
    3996:	08 95       	ret

00003998 <nrk_kernel_error_add>:
    3998:	80 93 18 05 	sts	0x0518, r24
    399c:	60 93 c5 03 	sts	0x03C5, r22
    39a0:	0e 94 24 1c 	call	0x3848	; 0x3848 <nrk_error_print>
    39a4:	08 95       	ret

000039a6 <nrk_error_add>:
    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
    39a6:	80 93 18 05 	sts	0x0518, r24

    39aa:	e0 91 7d 06 	lds	r30, 0x067D
    39ae:	f0 91 7e 06 	lds	r31, 0x067E
    39b2:	80 85       	ldd	r24, Z+8	; 0x08
    39b4:	80 93 c5 03 	sts	0x03C5, r24
} // halRfWaitForCrystalOscillator

    39b8:	0e 94 24 1c 	call	0x3848	; 0x3848 <nrk_error_print>
    39bc:	08 95       	ret

000039be <nrk_stack_check_pid>:
    39be:	99 27       	eor	r25, r25
    39c0:	87 fd       	sbrc	r24, 7
    39c2:	90 95       	com	r25
    39c4:	fc 01       	movw	r30, r24
    39c6:	25 e0       	ldi	r18, 0x05	; 5
    39c8:	ee 0f       	add	r30, r30
    39ca:	ff 1f       	adc	r31, r31
    39cc:	2a 95       	dec	r18
    39ce:	e1 f7       	brne	.-8      	; 0x39c8 <nrk_stack_check_pid+0xa>
    39d0:	e8 0f       	add	r30, r24
    39d2:	f9 1f       	adc	r31, r25
    39d4:	e0 52       	subi	r30, 0x20	; 32
    39d6:	fa 4f       	sbci	r31, 0xFA	; 250
    39d8:	a2 81       	ldd	r26, Z+2	; 0x02
    39da:	b3 81       	ldd	r27, Z+3	; 0x03
    39dc:	8c 91       	ld	r24, X
    39de:	85 35       	cpi	r24, 0x55	; 85
    39e0:	29 f0       	breq	.+10     	; 0x39ec <nrk_stack_check_pid+0x2e>
    39e2:	85 e5       	ldi	r24, 0x55	; 85
    39e4:	8c 93       	st	X, r24
    39e6:	8f ef       	ldi	r24, 0xFF	; 255
    39e8:	9f ef       	ldi	r25, 0xFF	; 255
    39ea:	08 95       	ret
    39ec:	80 81       	ld	r24, Z
    39ee:	91 81       	ldd	r25, Z+1	; 0x01
    39f0:	80 50       	subi	r24, 0x00	; 0
    39f2:	92 42       	sbci	r25, 0x22	; 34
    39f4:	18 f4       	brcc	.+6      	; 0x39fc <nrk_stack_check_pid+0x3e>
    39f6:	81 e0       	ldi	r24, 0x01	; 1
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	08 95       	ret
    39fc:	82 e1       	ldi	r24, 0x12	; 18
    39fe:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <nrk_error_add>
    3a02:	8f ef       	ldi	r24, 0xFF	; 255
    3a04:	9f ef       	ldi	r25, 0xFF	; 255
    3a06:	08 95       	ret

00003a08 <dump_stack_info>:

//-------------------------------------------------------------------------------------------------------
//	void rfWaitForCrystalOscillator(void)
//
//	DESCRIPTION:
//		Waits for the crystal oscillator to become stable. The flag is polled via the SPI status byte.
    3a08:	6f 92       	push	r6
    3a0a:	7f 92       	push	r7
    3a0c:	8f 92       	push	r8
    3a0e:	9f 92       	push	r9
    3a10:	af 92       	push	r10
    3a12:	bf 92       	push	r11
    3a14:	cf 92       	push	r12
    3a16:	df 92       	push	r13
    3a18:	ef 92       	push	r14
    3a1a:	ff 92       	push	r15
    3a1c:	0f 93       	push	r16
    3a1e:	1f 93       	push	r17
    3a20:	cf 93       	push	r28
    3a22:	df 93       	push	r29
//      
//      Note that this function will lock up if the SXOSCON command strobe has not been given before the
//      function call. Also note that global interrupts will always be enabled when this function 
//      returns.
//-------------------------------------------------------------------------------------------------------
    3a24:	8c ea       	ldi	r24, 0xAC	; 172
    3a26:	93 e0       	ldi	r25, 0x03	; 3
    3a28:	0e 94 ed 18 	call	0x31da	; 0x31da <nrk_kprintf>
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;
    3a2c:	e0 91 7d 06 	lds	r30, 0x067D
    3a30:	f0 91 7e 06 	lds	r31, 0x067E
    3a34:	80 85       	ldd	r24, Z+8	; 0x08
    3a36:	99 27       	eor	r25, r25
    3a38:	87 fd       	sbrc	r24, 7
    3a3a:	90 95       	com	r25
    3a3c:	9f 93       	push	r25
    3a3e:	8f 93       	push	r24
    3a40:	8c e6       	ldi	r24, 0x6C	; 108
    3a42:	92 e0       	ldi	r25, 0x02	; 2
    3a44:	9f 93       	push	r25
    3a46:	8f 93       	push	r24
    3a48:	0e 94 9f 30 	call	0x613e	; 0x613e <printf>

    3a4c:	e0 91 7d 06 	lds	r30, 0x067D
    3a50:	f0 91 7e 06 	lds	r31, 0x067E
    3a54:	02 81       	ldd	r16, Z+2	; 0x02
    3a56:	13 81       	ldd	r17, Z+3	; 0x03
    // Poll the SPI status byte until the crystal oscillator is stable
    do {
    3a58:	1f 93       	push	r17
    3a5a:	0f 93       	push	r16
    3a5c:	85 e7       	ldi	r24, 0x75	; 117
    3a5e:	92 e0       	ldi	r25, 0x02	; 2
    3a60:	9f 93       	push	r25
    3a62:	8f 93       	push	r24
    3a64:	0e 94 9f 30 	call	0x613e	; 0x613e <printf>
	    DISABLE_GLOBAL_INT();
    3a68:	f8 01       	movw	r30, r16
    3a6a:	80 81       	ld	r24, Z
    3a6c:	99 27       	eor	r25, r25
    3a6e:	9f 93       	push	r25
    3a70:	8f 93       	push	r24
    3a72:	52 e8       	ldi	r21, 0x82	; 130
    3a74:	c5 2e       	mov	r12, r21
    3a76:	52 e0       	ldi	r21, 0x02	; 2
    3a78:	d5 2e       	mov	r13, r21
    3a7a:	df 92       	push	r13
    3a7c:	cf 92       	push	r12
    3a7e:	0e 94 9f 30 	call	0x613e	; 0x613e <printf>
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
    3a82:	e0 91 7d 06 	lds	r30, 0x067D
    3a86:	f0 91 7e 06 	lds	r31, 0x067E
    3a8a:	80 81       	ld	r24, Z
    3a8c:	91 81       	ldd	r25, Z+1	; 0x01
    3a8e:	9f 93       	push	r25
    3a90:	8f 93       	push	r24
    3a92:	4f e8       	ldi	r20, 0x8F	; 143
    3a94:	e4 2e       	mov	r14, r20
    3a96:	42 e0       	ldi	r20, 0x02	; 2
    3a98:	f4 2e       	mov	r15, r20
    3a9a:	ff 92       	push	r15
    3a9c:	ef 92       	push	r14
    3a9e:	0e 94 9f 30 	call	0x613e	; 0x613e <printf>

    3aa2:	80 91 7d 06 	lds	r24, 0x067D
    3aa6:	90 91 7e 06 	lds	r25, 0x067E
    3aaa:	9f 93       	push	r25
    3aac:	8f 93       	push	r24
    3aae:	09 e9       	ldi	r16, 0x99	; 153
    3ab0:	12 e0       	ldi	r17, 0x02	; 2
    3ab2:	1f 93       	push	r17
    3ab4:	0f 93       	push	r16
    3ab6:	0e 94 9f 30 	call	0x613e	; 0x613e <printf>
    3aba:	c0 ee       	ldi	r28, 0xE0	; 224
    3abc:	d5 e0       	ldi	r29, 0x05	; 5
    3abe:	aa 24       	eor	r10, r10
    3ac0:	bb 24       	eor	r11, r11
    3ac2:	8d b7       	in	r24, 0x3d	; 61
    3ac4:	9e b7       	in	r25, 0x3e	; 62
    3ac6:	44 96       	adiw	r24, 0x14	; 20
    3ac8:	0f b6       	in	r0, 0x3f	; 63
    3aca:	f8 94       	cli
    3acc:	9e bf       	out	0x3e, r25	; 62
    3ace:	0f be       	out	0x3f, r0	; 63
    3ad0:	8d bf       	out	0x3d, r24	; 61
} // halRfWaitForCrystalOscillator

    3ad2:	39 ea       	ldi	r19, 0xA9	; 169
    3ad4:	63 2e       	mov	r6, r19
    3ad6:	32 e0       	ldi	r19, 0x02	; 2
    3ad8:	73 2e       	mov	r7, r19
    3ada:	46 01       	movw	r8, r12
    3adc:	67 01       	movw	r12, r14
    3ade:	78 01       	movw	r14, r16
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

} // halRfWaitForCrystalOscillator

    3ae0:	0a 81       	ldd	r16, Y+2	; 0x02
    3ae2:	1b 81       	ldd	r17, Y+3	; 0x03
    3ae4:	1f 93       	push	r17
    3ae6:	0f 93       	push	r16
    3ae8:	bf 92       	push	r11
    3aea:	af 92       	push	r10
    3aec:	7f 92       	push	r7
    3aee:	6f 92       	push	r6
    3af0:	0e 94 9f 30 	call	0x613e	; 0x613e <printf>
    3af4:	f8 01       	movw	r30, r16
    3af6:	80 81       	ld	r24, Z
    3af8:	99 27       	eor	r25, r25
    3afa:	9f 93       	push	r25
    3afc:	8f 93       	push	r24
    3afe:	9f 92       	push	r9
    3b00:	8f 92       	push	r8
    3b02:	0e 94 9f 30 	call	0x613e	; 0x613e <printf>
    3b06:	88 81       	ld	r24, Y
    3b08:	99 81       	ldd	r25, Y+1	; 0x01
    3b0a:	9f 93       	push	r25
    3b0c:	8f 93       	push	r24
    3b0e:	df 92       	push	r13
    3b10:	cf 92       	push	r12
    3b12:	0e 94 9f 30 	call	0x613e	; 0x613e <printf>
    3b16:	df 93       	push	r29
    3b18:	cf 93       	push	r28
    3b1a:	ff 92       	push	r15
    3b1c:	ef 92       	push	r14
    3b1e:	0e 94 9f 30 	call	0x613e	; 0x613e <printf>
    3b22:	08 94       	sec
    3b24:	a1 1c       	adc	r10, r1
    3b26:	b1 1c       	adc	r11, r1
    3b28:	a1 96       	adiw	r28, 0x21	; 33
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

} // halRfWaitForCrystalOscillator

    3b2a:	8d b7       	in	r24, 0x3d	; 61
    3b2c:	9e b7       	in	r25, 0x3e	; 62
    3b2e:	42 96       	adiw	r24, 0x12	; 18
    3b30:	0f b6       	in	r0, 0x3f	; 63
    3b32:	f8 94       	cli
    3b34:	9e bf       	out	0x3e, r25	; 62
    3b36:	0f be       	out	0x3f, r0	; 63
    3b38:	8d bf       	out	0x3d, r24	; 61
    3b3a:	94 e0       	ldi	r25, 0x04	; 4
    3b3c:	a9 16       	cp	r10, r25
    3b3e:	b1 04       	cpc	r11, r1
    3b40:	79 f6       	brne	.-98     	; 0x3ae0 <dump_stack_info+0xd8>
    3b42:	df 91       	pop	r29
    3b44:	cf 91       	pop	r28
    3b46:	1f 91       	pop	r17
    3b48:	0f 91       	pop	r16
    3b4a:	ff 90       	pop	r15
    3b4c:	ef 90       	pop	r14
    3b4e:	df 90       	pop	r13
    3b50:	cf 90       	pop	r12
    3b52:	bf 90       	pop	r11
    3b54:	af 90       	pop	r10
    3b56:	9f 90       	pop	r9
    3b58:	8f 90       	pop	r8
    3b5a:	7f 90       	pop	r7
    3b5c:	6f 90       	pop	r6
    3b5e:	08 95       	ret

00003b60 <nrk_stack_check>:
    3b60:	cf 93       	push	r28
    3b62:	df 93       	push	r29
    3b64:	e0 91 7d 06 	lds	r30, 0x067D
    3b68:	f0 91 7e 06 	lds	r31, 0x067E
    3b6c:	c2 81       	ldd	r28, Z+2	; 0x02
    3b6e:	d3 81       	ldd	r29, Z+3	; 0x03
    3b70:	88 81       	ld	r24, Y
    3b72:	85 35       	cpi	r24, 0x55	; 85
    3b74:	39 f0       	breq	.+14     	; 0x3b84 <nrk_stack_check+0x24>
    3b76:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <dump_stack_info>
    3b7a:	81 e0       	ldi	r24, 0x01	; 1
    3b7c:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <nrk_error_add>
    3b80:	85 e5       	ldi	r24, 0x55	; 85
    3b82:	88 83       	st	Y, r24
    3b84:	e0 91 7d 06 	lds	r30, 0x067D
    3b88:	f0 91 7e 06 	lds	r31, 0x067E
    3b8c:	80 81       	ld	r24, Z
    3b8e:	91 81       	ldd	r25, Z+1	; 0x01
    3b90:	80 50       	subi	r24, 0x00	; 0
    3b92:	92 42       	sbci	r25, 0x22	; 34
    3b94:	28 f0       	brcs	.+10     	; 0x3ba0 <nrk_stack_check+0x40>
    3b96:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <dump_stack_info>
    3b9a:	82 e1       	ldi	r24, 0x12	; 18
    3b9c:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <nrk_error_add>
    3ba0:	df 91       	pop	r29
    3ba2:	cf 91       	pop	r28
    3ba4:	08 95       	ret

00003ba6 <nrk_signal_create>:
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
    3ba6:	40 91 f1 03 	lds	r20, 0x03F1
    3baa:	50 91 f2 03 	lds	r21, 0x03F2
    3bae:	60 91 f3 03 	lds	r22, 0x03F3
    3bb2:	70 91 f4 03 	lds	r23, 0x03F4
    3bb6:	20 e0       	ldi	r18, 0x00	; 0
    3bb8:	30 e0       	ldi	r19, 0x00	; 0
    3bba:	db 01       	movw	r26, r22
    3bbc:	ca 01       	movw	r24, r20
    3bbe:	02 2e       	mov	r0, r18
    3bc0:	04 c0       	rjmp	.+8      	; 0x3bca <nrk_signal_create+0x24>
    3bc2:	b6 95       	lsr	r27
    3bc4:	a7 95       	ror	r26
    3bc6:	97 95       	ror	r25
    3bc8:	87 95       	ror	r24
    3bca:	0a 94       	dec	r0
    3bcc:	d2 f7       	brpl	.-12     	; 0x3bc2 <nrk_signal_create+0x1c>
    3bce:	81 70       	andi	r24, 0x01	; 1
    3bd0:	90 70       	andi	r25, 0x00	; 0
    3bd2:	89 2b       	or	r24, r25
    3bd4:	e9 f4       	brne	.+58     	; 0x3c10 <nrk_signal_create+0x6a>
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	a0 e0       	ldi	r26, 0x00	; 0
    3bdc:	b0 e0       	ldi	r27, 0x00	; 0
    3bde:	02 2e       	mov	r0, r18
    3be0:	04 c0       	rjmp	.+8      	; 0x3bea <nrk_signal_create+0x44>
    3be2:	88 0f       	add	r24, r24
    3be4:	99 1f       	adc	r25, r25
    3be6:	aa 1f       	adc	r26, r26
    3be8:	bb 1f       	adc	r27, r27
    3bea:	0a 94       	dec	r0
    3bec:	d2 f7       	brpl	.-12     	; 0x3be2 <nrk_signal_create+0x3c>
    3bee:	84 2b       	or	r24, r20
    3bf0:	95 2b       	or	r25, r21
    3bf2:	a6 2b       	or	r26, r22
    3bf4:	b7 2b       	or	r27, r23
    3bf6:	80 93 f1 03 	sts	0x03F1, r24
    3bfa:	90 93 f2 03 	sts	0x03F2, r25
    3bfe:	a0 93 f3 03 	sts	0x03F3, r26
    3c02:	b0 93 f4 03 	sts	0x03F4, r27

    3c06:	82 2f       	mov	r24, r18
    3c08:	99 27       	eor	r25, r25
    3c0a:	87 fd       	sbrc	r24, 7
    3c0c:	90 95       	com	r25
    3c0e:	08 95       	ret
    3c10:	2f 5f       	subi	r18, 0xFF	; 255
    3c12:	3f 4f       	sbci	r19, 0xFF	; 255
//-------------------------------------------------------------------------------------------------------
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
    3c14:	20 32       	cpi	r18, 0x20	; 32
    3c16:	31 05       	cpc	r19, r1
    3c18:	81 f6       	brne	.-96     	; 0x3bba <nrk_signal_create+0x14>
    3c1a:	8f ef       	ldi	r24, 0xFF	; 255
    3c1c:	9f ef       	ldi	r25, 0xFF	; 255
} // halRfWaitForCrystalOscillator

    3c1e:	08 95       	ret

00003c20 <nrk_signal_get_registered_mask>:
    3c20:	e0 91 7d 06 	lds	r30, 0x067D
    3c24:	f0 91 7e 06 	lds	r31, 0x067E
    3c28:	65 85       	ldd	r22, Z+13	; 0x0d
    3c2a:	76 85       	ldd	r23, Z+14	; 0x0e
    3c2c:	87 85       	ldd	r24, Z+15	; 0x0f
    3c2e:	90 89       	ldd	r25, Z+16	; 0x10
    3c30:	08 95       	ret

00003c32 <nrk_signal_unregister>:
    3c32:	ef 92       	push	r14
    3c34:	ff 92       	push	r15
    3c36:	0f 93       	push	r16
    3c38:	1f 93       	push	r17
    3c3a:	21 e0       	ldi	r18, 0x01	; 1
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	40 e0       	ldi	r20, 0x00	; 0
    3c40:	50 e0       	ldi	r21, 0x00	; 0
    3c42:	04 c0       	rjmp	.+8      	; 0x3c4c <nrk_signal_unregister+0x1a>
    3c44:	22 0f       	add	r18, r18
    3c46:	33 1f       	adc	r19, r19
    3c48:	44 1f       	adc	r20, r20
    3c4a:	55 1f       	adc	r21, r21
    3c4c:	8a 95       	dec	r24
    3c4e:	d2 f7       	brpl	.-12     	; 0x3c44 <nrk_signal_unregister+0x12>
    3c50:	e0 91 7d 06 	lds	r30, 0x067D
    3c54:	f0 91 7e 06 	lds	r31, 0x067E
    3c58:	e5 84       	ldd	r14, Z+13	; 0x0d
    3c5a:	f6 84       	ldd	r15, Z+14	; 0x0e
    3c5c:	07 85       	ldd	r16, Z+15	; 0x0f
    3c5e:	10 89       	ldd	r17, Z+16	; 0x10
    3c60:	da 01       	movw	r26, r20
    3c62:	c9 01       	movw	r24, r18
    3c64:	8e 21       	and	r24, r14
    3c66:	9f 21       	and	r25, r15
    3c68:	a0 23       	and	r26, r16
    3c6a:	b1 23       	and	r27, r17
    3c6c:	00 97       	sbiw	r24, 0x00	; 0
    3c6e:	a1 05       	cpc	r26, r1
    3c70:	b1 05       	cpc	r27, r1
    3c72:	19 f4       	brne	.+6      	; 0x3c7a <nrk_signal_unregister+0x48>
    3c74:	8f ef       	ldi	r24, 0xFF	; 255
    3c76:	9f ef       	ldi	r25, 0xFF	; 255
    3c78:	1a c0       	rjmp	.+52     	; 0x3cae <nrk_signal_unregister+0x7c>
    3c7a:	20 95       	com	r18
    3c7c:	30 95       	com	r19
    3c7e:	40 95       	com	r20
    3c80:	50 95       	com	r21
    3c82:	e2 22       	and	r14, r18
    3c84:	f3 22       	and	r15, r19
    3c86:	04 23       	and	r16, r20
    3c88:	15 23       	and	r17, r21
    3c8a:	e5 86       	std	Z+13, r14	; 0x0d
    3c8c:	f6 86       	std	Z+14, r15	; 0x0e
    3c8e:	07 87       	std	Z+15, r16	; 0x0f
    3c90:	10 8b       	std	Z+16, r17	; 0x10
    3c92:	81 89       	ldd	r24, Z+17	; 0x11
    3c94:	92 89       	ldd	r25, Z+18	; 0x12
    3c96:	a3 89       	ldd	r26, Z+19	; 0x13
    3c98:	b4 89       	ldd	r27, Z+20	; 0x14
    3c9a:	82 23       	and	r24, r18
    3c9c:	93 23       	and	r25, r19
    3c9e:	a4 23       	and	r26, r20
    3ca0:	b5 23       	and	r27, r21
    3ca2:	81 8b       	std	Z+17, r24	; 0x11
    3ca4:	92 8b       	std	Z+18, r25	; 0x12
    3ca6:	a3 8b       	std	Z+19, r26	; 0x13
    3ca8:	b4 8b       	std	Z+20, r27	; 0x14
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	90 e0       	ldi	r25, 0x00	; 0
    3cae:	1f 91       	pop	r17
    3cb0:	0f 91       	pop	r16
    3cb2:	ff 90       	pop	r15
    3cb4:	ef 90       	pop	r14
    3cb6:	08 95       	ret

00003cb8 <nrk_signal_register>:
    3cb8:	68 2f       	mov	r22, r24
    3cba:	77 27       	eor	r23, r23
    3cbc:	67 fd       	sbrc	r22, 7
    3cbe:	70 95       	com	r23
    3cc0:	80 91 f1 03 	lds	r24, 0x03F1
    3cc4:	90 91 f2 03 	lds	r25, 0x03F2
    3cc8:	a0 91 f3 03 	lds	r26, 0x03F3
    3ccc:	b0 91 f4 03 	lds	r27, 0x03F4
    3cd0:	06 2e       	mov	r0, r22
    3cd2:	04 c0       	rjmp	.+8      	; 0x3cdc <nrk_signal_register+0x24>
    3cd4:	b6 95       	lsr	r27
    3cd6:	a7 95       	ror	r26
    3cd8:	97 95       	ror	r25
    3cda:	87 95       	ror	r24
    3cdc:	0a 94       	dec	r0
    3cde:	d2 f7       	brpl	.-12     	; 0x3cd4 <nrk_signal_register+0x1c>
    3ce0:	81 70       	andi	r24, 0x01	; 1
    3ce2:	90 70       	andi	r25, 0x00	; 0
    3ce4:	89 2b       	or	r24, r25
    3ce6:	19 f4       	brne	.+6      	; 0x3cee <nrk_signal_register+0x36>
    3ce8:	8f ef       	ldi	r24, 0xFF	; 255
    3cea:	9f ef       	ldi	r25, 0xFF	; 255
    3cec:	08 95       	ret
    3cee:	e0 91 7d 06 	lds	r30, 0x067D
    3cf2:	f0 91 7e 06 	lds	r31, 0x067E
    3cf6:	21 e0       	ldi	r18, 0x01	; 1
    3cf8:	30 e0       	ldi	r19, 0x00	; 0
    3cfa:	40 e0       	ldi	r20, 0x00	; 0
    3cfc:	50 e0       	ldi	r21, 0x00	; 0
    3cfe:	04 c0       	rjmp	.+8      	; 0x3d08 <nrk_signal_register+0x50>
    3d00:	22 0f       	add	r18, r18
    3d02:	33 1f       	adc	r19, r19
    3d04:	44 1f       	adc	r20, r20
    3d06:	55 1f       	adc	r21, r21
    3d08:	6a 95       	dec	r22
    3d0a:	d2 f7       	brpl	.-12     	; 0x3d00 <nrk_signal_register+0x48>
    3d0c:	85 85       	ldd	r24, Z+13	; 0x0d
    3d0e:	96 85       	ldd	r25, Z+14	; 0x0e
    3d10:	a7 85       	ldd	r26, Z+15	; 0x0f
    3d12:	b0 89       	ldd	r27, Z+16	; 0x10
    3d14:	82 2b       	or	r24, r18
    3d16:	93 2b       	or	r25, r19
    3d18:	a4 2b       	or	r26, r20
    3d1a:	b5 2b       	or	r27, r21
    3d1c:	85 87       	std	Z+13, r24	; 0x0d
    3d1e:	96 87       	std	Z+14, r25	; 0x0e
    3d20:	a7 87       	std	Z+15, r26	; 0x0f
    3d22:	b0 8b       	std	Z+16, r27	; 0x10
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	90 e0       	ldi	r25, 0x00	; 0
    3d28:	08 95       	ret

00003d2a <nrk_sem_create>:
    3d2a:	38 2f       	mov	r19, r24
    3d2c:	80 91 7c 06 	lds	r24, 0x067C
    3d30:	88 23       	and	r24, r24
    3d32:	19 f0       	breq	.+6      	; 0x3d3a <nrk_sem_create+0x10>
    3d34:	80 e0       	ldi	r24, 0x00	; 0
    3d36:	90 e0       	ldi	r25, 0x00	; 0
    3d38:	08 95       	ret
    3d3a:	80 91 66 06 	lds	r24, 0x0666
    3d3e:	8f 3f       	cpi	r24, 0xFF	; 255
    3d40:	11 f4       	brne	.+4      	; 0x3d46 <nrk_sem_create+0x1c>
    3d42:	20 e0       	ldi	r18, 0x00	; 0
    3d44:	07 c0       	rjmp	.+14     	; 0x3d54 <nrk_sem_create+0x2a>
    3d46:	80 91 69 06 	lds	r24, 0x0669
    3d4a:	8f 3f       	cpi	r24, 0xFF	; 255
    3d4c:	11 f0       	breq	.+4      	; 0x3d52 <nrk_sem_create+0x28>
    3d4e:	22 e0       	ldi	r18, 0x02	; 2
    3d50:	01 c0       	rjmp	.+2      	; 0x3d54 <nrk_sem_create+0x2a>
    3d52:	21 e0       	ldi	r18, 0x01	; 1
    3d54:	82 2f       	mov	r24, r18
    3d56:	99 27       	eor	r25, r25
    3d58:	fc 01       	movw	r30, r24
    3d5a:	ee 0f       	add	r30, r30
    3d5c:	ff 1f       	adc	r31, r31
    3d5e:	e8 0f       	add	r30, r24
    3d60:	f9 1f       	adc	r31, r25
    3d62:	ea 59       	subi	r30, 0x9A	; 154
    3d64:	f9 4f       	sbci	r31, 0xF9	; 249
    3d66:	32 83       	std	Z+2, r19	; 0x02
    3d68:	30 83       	st	Z, r19
    3d6a:	61 83       	std	Z+1, r22	; 0x01
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	80 93 7c 06 	sts	0x067C, r24
    3d72:	83 e0       	ldi	r24, 0x03	; 3
    3d74:	28 9f       	mul	r18, r24
    3d76:	c0 01       	movw	r24, r0
    3d78:	11 24       	eor	r1, r1
    3d7a:	8a 59       	subi	r24, 0x9A	; 154
    3d7c:	99 4f       	sbci	r25, 0xF9	; 249
    3d7e:	08 95       	ret

00003d80 <nrk_get_resource_index>:
    3d80:	26 e0       	ldi	r18, 0x06	; 6
    3d82:	86 36       	cpi	r24, 0x66	; 102
    3d84:	92 07       	cpc	r25, r18
    3d86:	11 f4       	brne	.+4      	; 0x3d8c <nrk_get_resource_index+0xc>
    3d88:	80 e0       	ldi	r24, 0x00	; 0
    3d8a:	07 c0       	rjmp	.+14     	; 0x3d9a <nrk_get_resource_index+0x1a>
    3d8c:	89 56       	subi	r24, 0x69	; 105
    3d8e:	96 40       	sbci	r25, 0x06	; 6
    3d90:	19 f0       	breq	.+6      	; 0x3d98 <nrk_get_resource_index+0x18>
    3d92:	8f ef       	ldi	r24, 0xFF	; 255
    3d94:	9f ef       	ldi	r25, 0xFF	; 255
    3d96:	08 95       	ret
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	99 27       	eor	r25, r25
    3d9c:	87 fd       	sbrc	r24, 7
    3d9e:	90 95       	com	r25
    3da0:	08 95       	ret

00003da2 <nrk_sem_delete>:
    3da2:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <nrk_get_resource_index>
    3da6:	8f 3f       	cpi	r24, 0xFF	; 255
    3da8:	11 f4       	brne	.+4      	; 0x3dae <nrk_sem_delete+0xc>
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	02 c0       	rjmp	.+4      	; 0x3db2 <nrk_sem_delete+0x10>
    3dae:	82 30       	cpi	r24, 0x02	; 2
    3db0:	29 f4       	brne	.+10     	; 0x3dbc <nrk_sem_delete+0x1a>
    3db2:	0e 94 07 1c 	call	0x380e	; 0x380e <_nrk_errno_set>
    3db6:	8f ef       	ldi	r24, 0xFF	; 255
    3db8:	9f ef       	ldi	r25, 0xFF	; 255
    3dba:	08 95       	ret
    3dbc:	99 27       	eor	r25, r25
    3dbe:	87 fd       	sbrc	r24, 7
    3dc0:	90 95       	com	r25
    3dc2:	fc 01       	movw	r30, r24
    3dc4:	ee 0f       	add	r30, r30
    3dc6:	ff 1f       	adc	r31, r31
    3dc8:	e8 0f       	add	r30, r24
    3dca:	f9 1f       	adc	r31, r25
    3dcc:	ea 59       	subi	r30, 0x9A	; 154
    3dce:	f9 4f       	sbci	r31, 0xF9	; 249
    3dd0:	8f ef       	ldi	r24, 0xFF	; 255
    3dd2:	80 83       	st	Z, r24
    3dd4:	82 83       	std	Z+2, r24	; 0x02
    3dd6:	81 83       	std	Z+1, r24	; 0x01
    3dd8:	80 91 7c 06 	lds	r24, 0x067C
    3ddc:	81 50       	subi	r24, 0x01	; 1
    3dde:	80 93 7c 06 	sts	0x067C, r24
    3de2:	81 e0       	ldi	r24, 0x01	; 1
    3de4:	90 e0       	ldi	r25, 0x00	; 0
    3de6:	08 95       	ret

00003de8 <nrk_sem_query>:
    3de8:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <nrk_get_resource_index>
    3dec:	8f 3f       	cpi	r24, 0xFF	; 255
    3dee:	11 f4       	brne	.+4      	; 0x3df4 <nrk_sem_query+0xc>
    3df0:	81 e0       	ldi	r24, 0x01	; 1
    3df2:	02 c0       	rjmp	.+4      	; 0x3df8 <nrk_sem_query+0x10>
    3df4:	82 30       	cpi	r24, 0x02	; 2
    3df6:	29 f4       	brne	.+10     	; 0x3e02 <nrk_sem_query+0x1a>
    3df8:	0e 94 07 1c 	call	0x380e	; 0x380e <_nrk_errno_set>
    3dfc:	8f ef       	ldi	r24, 0xFF	; 255
    3dfe:	9f ef       	ldi	r25, 0xFF	; 255
    3e00:	08 95       	ret
    3e02:	99 27       	eor	r25, r25
    3e04:	87 fd       	sbrc	r24, 7
    3e06:	90 95       	com	r25
    3e08:	fc 01       	movw	r30, r24
    3e0a:	ee 0f       	add	r30, r30
    3e0c:	ff 1f       	adc	r31, r31
    3e0e:	e8 0f       	add	r30, r24
    3e10:	f9 1f       	adc	r31, r25
    3e12:	ea 59       	subi	r30, 0x9A	; 154
    3e14:	f9 4f       	sbci	r31, 0xF9	; 249
    3e16:	82 81       	ldd	r24, Z+2	; 0x02
    3e18:	99 27       	eor	r25, r25
    3e1a:	87 fd       	sbrc	r24, 7
    3e1c:	90 95       	com	r25
    3e1e:	08 95       	ret

00003e20 <nrk_sem_post>:
    3e20:	1f 93       	push	r17
    3e22:	cf 93       	push	r28
    3e24:	df 93       	push	r29
    3e26:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <nrk_get_resource_index>
    3e2a:	18 2f       	mov	r17, r24
    3e2c:	8f 3f       	cpi	r24, 0xFF	; 255
    3e2e:	11 f4       	brne	.+4      	; 0x3e34 <nrk_sem_post+0x14>
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	03 c0       	rjmp	.+6      	; 0x3e3a <nrk_sem_post+0x1a>
    3e34:	82 30       	cpi	r24, 0x02	; 2
    3e36:	31 f4       	brne	.+12     	; 0x3e44 <nrk_sem_post+0x24>
    3e38:	82 e0       	ldi	r24, 0x02	; 2
    3e3a:	0e 94 07 1c 	call	0x380e	; 0x380e <_nrk_errno_set>
    3e3e:	8f ef       	ldi	r24, 0xFF	; 255
    3e40:	9f ef       	ldi	r25, 0xFF	; 255
    3e42:	3e c0       	rjmp	.+124    	; 0x3ec0 <nrk_sem_post+0xa0>
    3e44:	99 27       	eor	r25, r25
    3e46:	87 fd       	sbrc	r24, 7
    3e48:	90 95       	com	r25
    3e4a:	ec 01       	movw	r28, r24
    3e4c:	cc 0f       	add	r28, r28
    3e4e:	dd 1f       	adc	r29, r29
    3e50:	c8 0f       	add	r28, r24
    3e52:	d9 1f       	adc	r29, r25
    3e54:	ca 59       	subi	r28, 0x9A	; 154
    3e56:	d9 4f       	sbci	r29, 0xF9	; 249
    3e58:	9a 81       	ldd	r25, Y+2	; 0x02
    3e5a:	88 81       	ld	r24, Y
    3e5c:	98 17       	cp	r25, r24
    3e5e:	74 f5       	brge	.+92     	; 0x3ebc <nrk_sem_post+0x9c>
    3e60:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <nrk_int_disable>
    3e64:	8a 81       	ldd	r24, Y+2	; 0x02
    3e66:	8f 5f       	subi	r24, 0xFF	; 255
    3e68:	8a 83       	std	Y+2, r24	; 0x02
    3e6a:	e0 91 7d 06 	lds	r30, 0x067D
    3e6e:	f0 91 7e 06 	lds	r31, 0x067E
    3e72:	14 82       	std	Z+4, r1	; 0x04
    3e74:	e7 ee       	ldi	r30, 0xE7	; 231
    3e76:	f5 e0       	ldi	r31, 0x05	; 5
    3e78:	21 2f       	mov	r18, r17
    3e7a:	33 27       	eor	r19, r19
    3e7c:	27 fd       	sbrc	r18, 7
    3e7e:	30 95       	com	r19
    3e80:	43 2f       	mov	r20, r19
    3e82:	53 2f       	mov	r21, r19
    3e84:	80 81       	ld	r24, Z
    3e86:	82 30       	cpi	r24, 0x02	; 2
    3e88:	91 f4       	brne	.+36     	; 0x3eae <nrk_sem_post+0x8e>
    3e8a:	82 85       	ldd	r24, Z+10	; 0x0a
    3e8c:	93 85       	ldd	r25, Z+11	; 0x0b
    3e8e:	a4 85       	ldd	r26, Z+12	; 0x0c
    3e90:	b5 85       	ldd	r27, Z+13	; 0x0d
    3e92:	82 17       	cp	r24, r18
    3e94:	93 07       	cpc	r25, r19
    3e96:	a4 07       	cpc	r26, r20
    3e98:	b5 07       	cpc	r27, r21
    3e9a:	49 f4       	brne	.+18     	; 0x3eae <nrk_sem_post+0x8e>
    3e9c:	83 e0       	ldi	r24, 0x03	; 3
    3e9e:	82 83       	std	Z+2, r24	; 0x02
    3ea0:	17 86       	std	Z+15, r1	; 0x0f
    3ea2:	16 86       	std	Z+14, r1	; 0x0e
    3ea4:	10 82       	st	Z, r1
    3ea6:	12 86       	std	Z+10, r1	; 0x0a
    3ea8:	13 86       	std	Z+11, r1	; 0x0b
    3eaa:	14 86       	std	Z+12, r1	; 0x0c
    3eac:	15 86       	std	Z+13, r1	; 0x0d
    3eae:	b1 96       	adiw	r30, 0x21	; 33
    3eb0:	86 e0       	ldi	r24, 0x06	; 6
    3eb2:	eb 36       	cpi	r30, 0x6B	; 107
    3eb4:	f8 07       	cpc	r31, r24
    3eb6:	31 f7       	brne	.-52     	; 0x3e84 <nrk_sem_post+0x64>
    3eb8:	0e 94 e5 19 	call	0x33ca	; 0x33ca <nrk_int_enable>
    3ebc:	81 e0       	ldi	r24, 0x01	; 1
    3ebe:	90 e0       	ldi	r25, 0x00	; 0
    3ec0:	df 91       	pop	r29
    3ec2:	cf 91       	pop	r28
    3ec4:	1f 91       	pop	r17
    3ec6:	08 95       	ret

00003ec8 <nrk_event_signal>:
    3ec8:	df 92       	push	r13
    3eca:	ef 92       	push	r14
    3ecc:	ff 92       	push	r15
    3ece:	0f 93       	push	r16
    3ed0:	1f 93       	push	r17
    3ed2:	e1 e0       	ldi	r30, 0x01	; 1
    3ed4:	ee 2e       	mov	r14, r30
    3ed6:	f1 2c       	mov	r15, r1
    3ed8:	01 2d       	mov	r16, r1
    3eda:	11 2d       	mov	r17, r1
    3edc:	04 c0       	rjmp	.+8      	; 0x3ee6 <nrk_event_signal+0x1e>
    3ede:	ee 0c       	add	r14, r14
    3ee0:	ff 1c       	adc	r15, r15
    3ee2:	00 1f       	adc	r16, r16
    3ee4:	11 1f       	adc	r17, r17
    3ee6:	8a 95       	dec	r24
    3ee8:	d2 f7       	brpl	.-12     	; 0x3ede <nrk_event_signal+0x16>
    3eea:	80 91 f1 03 	lds	r24, 0x03F1
    3eee:	90 91 f2 03 	lds	r25, 0x03F2
    3ef2:	a0 91 f3 03 	lds	r26, 0x03F3
    3ef6:	b0 91 f4 03 	lds	r27, 0x03F4
    3efa:	8e 21       	and	r24, r14
    3efc:	9f 21       	and	r25, r15
    3efe:	a0 23       	and	r26, r16
    3f00:	b1 23       	and	r27, r17
    3f02:	00 97       	sbiw	r24, 0x00	; 0
    3f04:	a1 05       	cpc	r26, r1
    3f06:	b1 05       	cpc	r27, r1
    3f08:	11 f4       	brne	.+4      	; 0x3f0e <nrk_event_signal+0x46>
    3f0a:	81 e0       	ldi	r24, 0x01	; 1
    3f0c:	43 c0       	rjmp	.+134    	; 0x3f94 <nrk_event_signal+0xcc>
    3f0e:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <nrk_int_disable>
    3f12:	e7 ee       	ldi	r30, 0xE7	; 231
    3f14:	f5 e0       	ldi	r31, 0x05	; 5
    3f16:	dd 24       	eor	r13, r13
    3f18:	80 81       	ld	r24, Z
    3f1a:	81 30       	cpi	r24, 0x01	; 1
    3f1c:	b9 f4       	brne	.+46     	; 0x3f4c <nrk_event_signal+0x84>
    3f1e:	82 85       	ldd	r24, Z+10	; 0x0a
    3f20:	93 85       	ldd	r25, Z+11	; 0x0b
    3f22:	a4 85       	ldd	r26, Z+12	; 0x0c
    3f24:	b5 85       	ldd	r27, Z+13	; 0x0d
    3f26:	8e 21       	and	r24, r14
    3f28:	9f 21       	and	r25, r15
    3f2a:	a0 23       	and	r26, r16
    3f2c:	b1 23       	and	r27, r17
    3f2e:	00 97       	sbiw	r24, 0x00	; 0
    3f30:	a1 05       	cpc	r26, r1
    3f32:	b1 05       	cpc	r27, r1
    3f34:	59 f0       	breq	.+22     	; 0x3f4c <nrk_event_signal+0x84>
    3f36:	83 e0       	ldi	r24, 0x03	; 3
    3f38:	82 83       	std	Z+2, r24	; 0x02
    3f3a:	17 86       	std	Z+15, r1	; 0x0f
    3f3c:	16 86       	std	Z+14, r1	; 0x0e
    3f3e:	10 82       	st	Z, r1
    3f40:	e2 86       	std	Z+10, r14	; 0x0a
    3f42:	f3 86       	std	Z+11, r15	; 0x0b
    3f44:	04 87       	std	Z+12, r16	; 0x0c
    3f46:	15 87       	std	Z+13, r17	; 0x0d
    3f48:	dd 24       	eor	r13, r13
    3f4a:	d3 94       	inc	r13
    3f4c:	80 81       	ld	r24, Z
    3f4e:	82 30       	cpi	r24, 0x02	; 2
    3f50:	a1 f4       	brne	.+40     	; 0x3f7a <nrk_event_signal+0xb2>
    3f52:	82 85       	ldd	r24, Z+10	; 0x0a
    3f54:	93 85       	ldd	r25, Z+11	; 0x0b
    3f56:	a4 85       	ldd	r26, Z+12	; 0x0c
    3f58:	b5 85       	ldd	r27, Z+13	; 0x0d
    3f5a:	8e 15       	cp	r24, r14
    3f5c:	9f 05       	cpc	r25, r15
    3f5e:	a0 07       	cpc	r26, r16
    3f60:	b1 07       	cpc	r27, r17
    3f62:	59 f4       	brne	.+22     	; 0x3f7a <nrk_event_signal+0xb2>
    3f64:	83 e0       	ldi	r24, 0x03	; 3
    3f66:	82 83       	std	Z+2, r24	; 0x02
    3f68:	17 86       	std	Z+15, r1	; 0x0f
    3f6a:	16 86       	std	Z+14, r1	; 0x0e
    3f6c:	10 82       	st	Z, r1
    3f6e:	12 86       	std	Z+10, r1	; 0x0a
    3f70:	13 86       	std	Z+11, r1	; 0x0b
    3f72:	14 86       	std	Z+12, r1	; 0x0c
    3f74:	15 86       	std	Z+13, r1	; 0x0d
    3f76:	dd 24       	eor	r13, r13
    3f78:	d3 94       	inc	r13
    3f7a:	b1 96       	adiw	r30, 0x21	; 33
    3f7c:	86 e0       	ldi	r24, 0x06	; 6
    3f7e:	eb 36       	cpi	r30, 0x6B	; 107
    3f80:	f8 07       	cpc	r31, r24
    3f82:	51 f6       	brne	.-108    	; 0x3f18 <nrk_event_signal+0x50>
    3f84:	0e 94 e5 19 	call	0x33ca	; 0x33ca <nrk_int_enable>
    3f88:	dd 20       	and	r13, r13
    3f8a:	19 f0       	breq	.+6      	; 0x3f92 <nrk_event_signal+0xca>
    3f8c:	81 e0       	ldi	r24, 0x01	; 1
    3f8e:	90 e0       	ldi	r25, 0x00	; 0
    3f90:	05 c0       	rjmp	.+10     	; 0x3f9c <nrk_event_signal+0xd4>
    3f92:	82 e0       	ldi	r24, 0x02	; 2
    3f94:	0e 94 07 1c 	call	0x380e	; 0x380e <_nrk_errno_set>
    3f98:	8f ef       	ldi	r24, 0xFF	; 255
    3f9a:	9f ef       	ldi	r25, 0xFF	; 255
    3f9c:	1f 91       	pop	r17
    3f9e:	0f 91       	pop	r16
    3fa0:	ff 90       	pop	r15
    3fa2:	ef 90       	pop	r14
    3fa4:	df 90       	pop	r13
    3fa6:	08 95       	ret

00003fa8 <nrk_signal_delete>:
    3fa8:	ef 92       	push	r14
    3faa:	ff 92       	push	r15
    3fac:	0f 93       	push	r16
    3fae:	1f 93       	push	r17
    3fb0:	cf 93       	push	r28
    3fb2:	df 93       	push	r29
    3fb4:	c8 2f       	mov	r28, r24
    3fb6:	dd 27       	eor	r29, r29
    3fb8:	c7 fd       	sbrc	r28, 7
    3fba:	d0 95       	com	r29
    3fbc:	f1 e0       	ldi	r31, 0x01	; 1
    3fbe:	ef 2e       	mov	r14, r31
    3fc0:	f1 2c       	mov	r15, r1
    3fc2:	01 2d       	mov	r16, r1
    3fc4:	11 2d       	mov	r17, r1
    3fc6:	0c 2e       	mov	r0, r28
    3fc8:	04 c0       	rjmp	.+8      	; 0x3fd2 <nrk_signal_delete+0x2a>
    3fca:	ee 0c       	add	r14, r14
    3fcc:	ff 1c       	adc	r15, r15
    3fce:	00 1f       	adc	r16, r16
    3fd0:	11 1f       	adc	r17, r17
    3fd2:	0a 94       	dec	r0
    3fd4:	d2 f7       	brpl	.-12     	; 0x3fca <nrk_signal_delete+0x22>
    3fd6:	80 91 f1 03 	lds	r24, 0x03F1
    3fda:	90 91 f2 03 	lds	r25, 0x03F2
    3fde:	a0 91 f3 03 	lds	r26, 0x03F3
    3fe2:	b0 91 f4 03 	lds	r27, 0x03F4
    3fe6:	8e 21       	and	r24, r14
    3fe8:	9f 21       	and	r25, r15
    3fea:	a0 23       	and	r26, r16
    3fec:	b1 23       	and	r27, r17
    3fee:	00 97       	sbiw	r24, 0x00	; 0
    3ff0:	a1 05       	cpc	r26, r1
    3ff2:	b1 05       	cpc	r27, r1
    3ff4:	19 f4       	brne	.+6      	; 0x3ffc <nrk_signal_delete+0x54>
    3ff6:	8f ef       	ldi	r24, 0xFF	; 255
    3ff8:	9f ef       	ldi	r25, 0xFF	; 255
    3ffa:	5d c0       	rjmp	.+186    	; 0x40b6 <nrk_signal_delete+0x10e>
    3ffc:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <nrk_int_disable>
    4000:	e0 ee       	ldi	r30, 0xE0	; 224
    4002:	f5 e0       	ldi	r31, 0x05	; 5
    4004:	a8 01       	movw	r20, r16
    4006:	97 01       	movw	r18, r14
    4008:	20 95       	com	r18
    400a:	30 95       	com	r19
    400c:	40 95       	com	r20
    400e:	50 95       	com	r21
    4010:	80 85       	ldd	r24, Z+8	; 0x08
    4012:	8f 3f       	cpi	r24, 0xFF	; 255
    4014:	41 f1       	breq	.+80     	; 0x4066 <nrk_signal_delete+0xbe>
    4016:	85 85       	ldd	r24, Z+13	; 0x0d
    4018:	96 85       	ldd	r25, Z+14	; 0x0e
    401a:	a7 85       	ldd	r26, Z+15	; 0x0f
    401c:	b0 89       	ldd	r27, Z+16	; 0x10
    401e:	8e 15       	cp	r24, r14
    4020:	9f 05       	cpc	r25, r15
    4022:	a0 07       	cpc	r26, r16
    4024:	b1 07       	cpc	r27, r17
    4026:	39 f4       	brne	.+14     	; 0x4036 <nrk_signal_delete+0x8e>
    4028:	11 8a       	std	Z+17, r1	; 0x11
    402a:	12 8a       	std	Z+18, r1	; 0x12
    402c:	13 8a       	std	Z+19, r1	; 0x13
    402e:	14 8a       	std	Z+20, r1	; 0x14
    4030:	17 82       	std	Z+7, r1	; 0x07
    4032:	83 e0       	ldi	r24, 0x03	; 3
    4034:	81 87       	std	Z+9, r24	; 0x09
    4036:	85 85       	ldd	r24, Z+13	; 0x0d
    4038:	96 85       	ldd	r25, Z+14	; 0x0e
    403a:	a7 85       	ldd	r26, Z+15	; 0x0f
    403c:	b0 89       	ldd	r27, Z+16	; 0x10
    403e:	82 23       	and	r24, r18
    4040:	93 23       	and	r25, r19
    4042:	a4 23       	and	r26, r20
    4044:	b5 23       	and	r27, r21
    4046:	85 87       	std	Z+13, r24	; 0x0d
    4048:	96 87       	std	Z+14, r25	; 0x0e
    404a:	a7 87       	std	Z+15, r26	; 0x0f
    404c:	b0 8b       	std	Z+16, r27	; 0x10
    404e:	81 89       	ldd	r24, Z+17	; 0x11
    4050:	92 89       	ldd	r25, Z+18	; 0x12
    4052:	a3 89       	ldd	r26, Z+19	; 0x13
    4054:	b4 89       	ldd	r27, Z+20	; 0x14
    4056:	82 23       	and	r24, r18
    4058:	93 23       	and	r25, r19
    405a:	a4 23       	and	r26, r20
    405c:	b5 23       	and	r27, r21
    405e:	81 8b       	std	Z+17, r24	; 0x11
    4060:	92 8b       	std	Z+18, r25	; 0x12
    4062:	a3 8b       	std	Z+19, r26	; 0x13
    4064:	b4 8b       	std	Z+20, r27	; 0x14
    4066:	b1 96       	adiw	r30, 0x21	; 33
    4068:	86 e0       	ldi	r24, 0x06	; 6
    406a:	e4 36       	cpi	r30, 0x64	; 100
    406c:	f8 07       	cpc	r31, r24
    406e:	81 f6       	brne	.-96     	; 0x4010 <nrk_signal_delete+0x68>
    4070:	2e ef       	ldi	r18, 0xFE	; 254
    4072:	3f ef       	ldi	r19, 0xFF	; 255
    4074:	4f ef       	ldi	r20, 0xFF	; 255
    4076:	5f ef       	ldi	r21, 0xFF	; 255
    4078:	04 c0       	rjmp	.+8      	; 0x4082 <nrk_signal_delete+0xda>
    407a:	22 0f       	add	r18, r18
    407c:	33 1f       	adc	r19, r19
    407e:	44 1f       	adc	r20, r20
    4080:	55 1f       	adc	r21, r21
    4082:	ca 95       	dec	r28
    4084:	d2 f7       	brpl	.-12     	; 0x407a <nrk_signal_delete+0xd2>
    4086:	80 91 f1 03 	lds	r24, 0x03F1
    408a:	90 91 f2 03 	lds	r25, 0x03F2
    408e:	a0 91 f3 03 	lds	r26, 0x03F3
    4092:	b0 91 f4 03 	lds	r27, 0x03F4
    4096:	82 23       	and	r24, r18
    4098:	93 23       	and	r25, r19
    409a:	a4 23       	and	r26, r20
    409c:	b5 23       	and	r27, r21
    409e:	80 93 f1 03 	sts	0x03F1, r24
    40a2:	90 93 f2 03 	sts	0x03F2, r25
    40a6:	a0 93 f3 03 	sts	0x03F3, r26
    40aa:	b0 93 f4 03 	sts	0x03F4, r27
    40ae:	0e 94 e5 19 	call	0x33ca	; 0x33ca <nrk_int_enable>
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	90 e0       	ldi	r25, 0x00	; 0
    40b6:	df 91       	pop	r29
    40b8:	cf 91       	pop	r28
    40ba:	1f 91       	pop	r17
    40bc:	0f 91       	pop	r16
    40be:	ff 90       	pop	r15
    40c0:	ef 90       	pop	r14
    40c2:	08 95       	ret

000040c4 <nrk_sem_pend>:
    40c4:	1f 93       	push	r17
    40c6:	cf 93       	push	r28
    40c8:	df 93       	push	r29
    40ca:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <nrk_get_resource_index>
    40ce:	18 2f       	mov	r17, r24
    40d0:	8f 3f       	cpi	r24, 0xFF	; 255
    40d2:	11 f4       	brne	.+4      	; 0x40d8 <nrk_sem_pend+0x14>
    40d4:	81 e0       	ldi	r24, 0x01	; 1
    40d6:	03 c0       	rjmp	.+6      	; 0x40de <nrk_sem_pend+0x1a>
    40d8:	82 30       	cpi	r24, 0x02	; 2
    40da:	31 f4       	brne	.+12     	; 0x40e8 <nrk_sem_pend+0x24>
    40dc:	82 e0       	ldi	r24, 0x02	; 2
    40de:	0e 94 07 1c 	call	0x380e	; 0x380e <_nrk_errno_set>
    40e2:	8f ef       	ldi	r24, 0xFF	; 255
    40e4:	9f ef       	ldi	r25, 0xFF	; 255
    40e6:	3e c0       	rjmp	.+124    	; 0x4164 <nrk_sem_pend+0xa0>
    40e8:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <nrk_int_disable>
    40ec:	81 2f       	mov	r24, r17
    40ee:	99 27       	eor	r25, r25
    40f0:	87 fd       	sbrc	r24, 7
    40f2:	90 95       	com	r25
    40f4:	ec 01       	movw	r28, r24
    40f6:	cc 0f       	add	r28, r28
    40f8:	dd 1f       	adc	r29, r29
    40fa:	c8 0f       	add	r28, r24
    40fc:	d9 1f       	adc	r29, r25
    40fe:	ca 59       	subi	r28, 0x9A	; 154
    4100:	d9 4f       	sbci	r29, 0xF9	; 249
    4102:	8a 81       	ldd	r24, Y+2	; 0x02
    4104:	88 23       	and	r24, r24
    4106:	d9 f4       	brne	.+54     	; 0x413e <nrk_sem_pend+0x7a>
    4108:	e0 91 7d 06 	lds	r30, 0x067D
    410c:	f0 91 7e 06 	lds	r31, 0x067E
    4110:	87 81       	ldd	r24, Z+7	; 0x07
    4112:	82 60       	ori	r24, 0x02	; 2
    4114:	87 83       	std	Z+7, r24	; 0x07
    4116:	e0 91 7d 06 	lds	r30, 0x067D
    411a:	f0 91 7e 06 	lds	r31, 0x067E
    411e:	81 2f       	mov	r24, r17
    4120:	99 27       	eor	r25, r25
    4122:	87 fd       	sbrc	r24, 7
    4124:	90 95       	com	r25
    4126:	a9 2f       	mov	r26, r25
    4128:	b9 2f       	mov	r27, r25
    412a:	81 8b       	std	Z+17, r24	; 0x11
    412c:	92 8b       	std	Z+18, r25	; 0x12
    412e:	a3 8b       	std	Z+19, r26	; 0x13
    4130:	b4 8b       	std	Z+20, r27	; 0x14
    4132:	0e 94 e5 19 	call	0x33ca	; 0x33ca <nrk_int_enable>
    4136:	80 e0       	ldi	r24, 0x00	; 0
    4138:	90 e0       	ldi	r25, 0x00	; 0
    413a:	0e 94 07 23 	call	0x460e	; 0x460e <nrk_wait_until_ticks>
    413e:	8a 81       	ldd	r24, Y+2	; 0x02
    4140:	81 50       	subi	r24, 0x01	; 1
    4142:	8a 83       	std	Y+2, r24	; 0x02
    4144:	e0 91 7d 06 	lds	r30, 0x067D
    4148:	f0 91 7e 06 	lds	r31, 0x067E
    414c:	89 81       	ldd	r24, Y+1	; 0x01
    414e:	83 87       	std	Z+11, r24	; 0x0b
    4150:	e0 91 7d 06 	lds	r30, 0x067D
    4154:	f0 91 7e 06 	lds	r31, 0x067E
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	84 83       	std	Z+4, r24	; 0x04
    415c:	0e 94 e5 19 	call	0x33ca	; 0x33ca <nrk_int_enable>
    4160:	81 e0       	ldi	r24, 0x01	; 1
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	df 91       	pop	r29
    4166:	cf 91       	pop	r28
    4168:	1f 91       	pop	r17
    416a:	08 95       	ret

0000416c <nrk_event_wait>:
    416c:	9b 01       	movw	r18, r22
    416e:	ac 01       	movw	r20, r24
    4170:	e0 91 7d 06 	lds	r30, 0x067D
    4174:	f0 91 7e 06 	lds	r31, 0x067E
    4178:	85 85       	ldd	r24, Z+13	; 0x0d
    417a:	96 85       	ldd	r25, Z+14	; 0x0e
    417c:	a7 85       	ldd	r26, Z+15	; 0x0f
    417e:	b0 89       	ldd	r27, Z+16	; 0x10
    4180:	82 23       	and	r24, r18
    4182:	93 23       	and	r25, r19
    4184:	a4 23       	and	r26, r20
    4186:	b5 23       	and	r27, r21
    4188:	00 97       	sbiw	r24, 0x00	; 0
    418a:	a1 05       	cpc	r26, r1
    418c:	b1 05       	cpc	r27, r1
    418e:	29 f4       	brne	.+10     	; 0x419a <nrk_event_wait+0x2e>
    4190:	60 e0       	ldi	r22, 0x00	; 0
    4192:	70 e0       	ldi	r23, 0x00	; 0
    4194:	80 e0       	ldi	r24, 0x00	; 0
    4196:	90 e0       	ldi	r25, 0x00	; 0
    4198:	08 95       	ret
    419a:	21 8b       	std	Z+17, r18	; 0x11
    419c:	32 8b       	std	Z+18, r19	; 0x12
    419e:	43 8b       	std	Z+19, r20	; 0x13
    41a0:	54 8b       	std	Z+20, r21	; 0x14
    41a2:	81 e0       	ldi	r24, 0x01	; 1
    41a4:	87 83       	std	Z+7, r24	; 0x07
    41a6:	00 90 6d 06 	lds	r0, 0x066D
    41aa:	04 c0       	rjmp	.+8      	; 0x41b4 <nrk_event_wait+0x48>
    41ac:	56 95       	lsr	r21
    41ae:	47 95       	ror	r20
    41b0:	37 95       	ror	r19
    41b2:	27 95       	ror	r18
    41b4:	0a 94       	dec	r0
    41b6:	d2 f7       	brpl	.-12     	; 0x41ac <nrk_event_wait+0x40>
    41b8:	c9 01       	movw	r24, r18
    41ba:	81 70       	andi	r24, 0x01	; 1
    41bc:	90 70       	andi	r25, 0x00	; 0
    41be:	89 2b       	or	r24, r25
    41c0:	19 f0       	breq	.+6      	; 0x41c8 <nrk_event_wait+0x5c>
    41c2:	0e 94 a2 22 	call	0x4544	; 0x4544 <nrk_wait_until_nw>
    41c6:	04 c0       	rjmp	.+8      	; 0x41d0 <nrk_event_wait+0x64>
    41c8:	80 e0       	ldi	r24, 0x00	; 0
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	0e 94 07 23 	call	0x460e	; 0x460e <nrk_wait_until_ticks>
    41d0:	e0 91 7d 06 	lds	r30, 0x067D
    41d4:	f0 91 7e 06 	lds	r31, 0x067E
    41d8:	61 89       	ldd	r22, Z+17	; 0x11
    41da:	72 89       	ldd	r23, Z+18	; 0x12
    41dc:	83 89       	ldd	r24, Z+19	; 0x13
    41de:	94 89       	ldd	r25, Z+20	; 0x14
    41e0:	08 95       	ret

000041e2 <nrk_get_high_ready_task_ID>:
//      returns.
//-------------------------------------------------------------------------------------------------------
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    41e2:	e0 91 72 06 	lds	r30, 0x0672
    41e6:	f0 91 73 06 	lds	r31, 0x0673
    41ea:	80 81       	ld	r24, Z
    do {
	    DISABLE_GLOBAL_INT();
    41ec:	99 27       	eor	r25, r25
    41ee:	08 95       	ret

000041f0 <nrk_print_readyQ>:
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

} // halRfWaitForCrystalOscillator
    41f0:	e0 91 72 06 	lds	r30, 0x0672
    41f4:	f0 91 73 06 	lds	r31, 0x0673
    41f8:	03 c0       	rjmp	.+6      	; 0x4200 <nrk_print_readyQ+0x10>

    41fa:	03 80       	ldd	r0, Z+3	; 0x03
    41fc:	f4 81       	ldd	r31, Z+4	; 0x04
    41fe:	e0 2d       	mov	r30, r0
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

} // halRfWaitForCrystalOscillator

    4200:	30 97       	sbiw	r30, 0x00	; 0
    4202:	d9 f7       	brne	.-10     	; 0x41fa <nrk_print_readyQ+0xa>
    4204:	08 95       	ret

00004206 <nrk_add_to_readyQ>:
    4206:	cf 93       	push	r28
    4208:	df 93       	push	r29
    420a:	48 2f       	mov	r20, r24
    420c:	c0 91 de 05 	lds	r28, 0x05DE
    4210:	d0 91 df 05 	lds	r29, 0x05DF
    4214:	20 97       	sbiw	r28, 0x00	; 0
    4216:	09 f4       	brne	.+2      	; 0x421a <nrk_add_to_readyQ+0x14>
    4218:	7a c0       	rjmp	.+244    	; 0x430e <nrk_add_to_readyQ+0x108>
    421a:	a0 91 72 06 	lds	r26, 0x0672
    421e:	b0 91 73 06 	lds	r27, 0x0673
    4222:	10 97       	sbiw	r26, 0x00	; 0
    4224:	b9 f1       	breq	.+110    	; 0x4294 <nrk_add_to_readyQ+0x8e>
    4226:	99 27       	eor	r25, r25
    4228:	87 fd       	sbrc	r24, 7
    422a:	90 95       	com	r25
    422c:	9c 01       	movw	r18, r24
    422e:	65 e0       	ldi	r22, 0x05	; 5
    4230:	22 0f       	add	r18, r18
    4232:	33 1f       	adc	r19, r19
    4234:	6a 95       	dec	r22
    4236:	e1 f7       	brne	.-8      	; 0x4230 <nrk_add_to_readyQ+0x2a>
    4238:	28 0f       	add	r18, r24
    423a:	39 1f       	adc	r19, r25
    423c:	20 52       	subi	r18, 0x20	; 32
    423e:	3a 4f       	sbci	r19, 0xFA	; 250
    4240:	8c 91       	ld	r24, X
    4242:	99 27       	eor	r25, r25
    4244:	bc 01       	movw	r22, r24
    4246:	55 e0       	ldi	r21, 0x05	; 5
    4248:	66 0f       	add	r22, r22
    424a:	77 1f       	adc	r23, r23
    424c:	5a 95       	dec	r21
    424e:	e1 f7       	brne	.-8      	; 0x4248 <nrk_add_to_readyQ+0x42>
    4250:	68 0f       	add	r22, r24
    4252:	79 1f       	adc	r23, r25
    4254:	60 52       	subi	r22, 0x20	; 32
    4256:	7a 4f       	sbci	r23, 0xFA	; 250
    4258:	fb 01       	movw	r30, r22
    425a:	84 81       	ldd	r24, Z+4	; 0x04
    425c:	88 23       	and	r24, r24
    425e:	29 f0       	breq	.+10     	; 0x426a <nrk_add_to_readyQ+0x64>
    4260:	93 85       	ldd	r25, Z+11	; 0x0b
    4262:	f9 01       	movw	r30, r18
    4264:	82 85       	ldd	r24, Z+10	; 0x0a
    4266:	98 17       	cp	r25, r24
    4268:	a8 f0       	brcs	.+42     	; 0x4294 <nrk_add_to_readyQ+0x8e>
    426a:	f9 01       	movw	r30, r18
    426c:	84 81       	ldd	r24, Z+4	; 0x04
    426e:	88 23       	and	r24, r24
    4270:	31 f0       	breq	.+12     	; 0x427e <nrk_add_to_readyQ+0x78>
    4272:	fb 01       	movw	r30, r22
    4274:	92 85       	ldd	r25, Z+10	; 0x0a
    4276:	f9 01       	movw	r30, r18
    4278:	83 85       	ldd	r24, Z+11	; 0x0b
    427a:	98 17       	cp	r25, r24
    427c:	58 f0       	brcs	.+22     	; 0x4294 <nrk_add_to_readyQ+0x8e>
    427e:	fb 01       	movw	r30, r22
    4280:	92 85       	ldd	r25, Z+10	; 0x0a
    4282:	f9 01       	movw	r30, r18
    4284:	82 85       	ldd	r24, Z+10	; 0x0a
    4286:	98 17       	cp	r25, r24
    4288:	28 f0       	brcs	.+10     	; 0x4294 <nrk_add_to_readyQ+0x8e>
    428a:	fd 01       	movw	r30, r26
    428c:	a3 81       	ldd	r26, Z+3	; 0x03
    428e:	b4 81       	ldd	r27, Z+4	; 0x04
    4290:	10 97       	sbiw	r26, 0x00	; 0
    4292:	b1 f6       	brne	.-84     	; 0x4240 <nrk_add_to_readyQ+0x3a>
    4294:	48 83       	st	Y, r20
    4296:	e0 91 de 05 	lds	r30, 0x05DE
    429a:	f0 91 df 05 	lds	r31, 0x05DF
    429e:	23 81       	ldd	r18, Z+3	; 0x03
    42a0:	34 81       	ldd	r19, Z+4	; 0x04
    42a2:	30 93 df 05 	sts	0x05DF, r19
    42a6:	20 93 de 05 	sts	0x05DE, r18
    42aa:	80 91 72 06 	lds	r24, 0x0672
    42ae:	90 91 73 06 	lds	r25, 0x0673
    42b2:	a8 17       	cp	r26, r24
    42b4:	b9 07       	cpc	r27, r25
    42b6:	a1 f4       	brne	.+40     	; 0x42e0 <nrk_add_to_readyQ+0xda>
    42b8:	10 97       	sbiw	r26, 0x00	; 0
    42ba:	31 f0       	breq	.+12     	; 0x42c8 <nrk_add_to_readyQ+0xc2>
    42bc:	bc 83       	std	Y+4, r27	; 0x04
    42be:	ab 83       	std	Y+3, r26	; 0x03
    42c0:	1a 82       	std	Y+2, r1	; 0x02
    42c2:	19 82       	std	Y+1, r1	; 0x01
    42c4:	fd 01       	movw	r30, r26
    42c6:	05 c0       	rjmp	.+10     	; 0x42d2 <nrk_add_to_readyQ+0xcc>
    42c8:	1c 82       	std	Y+4, r1	; 0x04
    42ca:	1b 82       	std	Y+3, r1	; 0x03
    42cc:	1a 82       	std	Y+2, r1	; 0x02
    42ce:	19 82       	std	Y+1, r1	; 0x01
    42d0:	f9 01       	movw	r30, r18
    42d2:	d2 83       	std	Z+2, r29	; 0x02
    42d4:	c1 83       	std	Z+1, r28	; 0x01
    42d6:	d0 93 73 06 	sts	0x0673, r29
    42da:	c0 93 72 06 	sts	0x0672, r28
    42de:	17 c0       	rjmp	.+46     	; 0x430e <nrk_add_to_readyQ+0x108>
    42e0:	fd 01       	movw	r30, r26
    42e2:	81 81       	ldd	r24, Z+1	; 0x01
    42e4:	92 81       	ldd	r25, Z+2	; 0x02
    42e6:	a2 17       	cp	r26, r18
    42e8:	b3 07       	cpc	r27, r19
    42ea:	51 f0       	breq	.+20     	; 0x4300 <nrk_add_to_readyQ+0xfa>
    42ec:	9a 83       	std	Y+2, r25	; 0x02
    42ee:	89 83       	std	Y+1, r24	; 0x01
    42f0:	bc 83       	std	Y+4, r27	; 0x04
    42f2:	ab 83       	std	Y+3, r26	; 0x03
    42f4:	81 81       	ldd	r24, Z+1	; 0x01
    42f6:	92 81       	ldd	r25, Z+2	; 0x02
    42f8:	fc 01       	movw	r30, r24
    42fa:	d4 83       	std	Z+4, r29	; 0x04
    42fc:	c3 83       	std	Z+3, r28	; 0x03
    42fe:	04 c0       	rjmp	.+8      	; 0x4308 <nrk_add_to_readyQ+0x102>
    4300:	1c 82       	std	Y+4, r1	; 0x04
    4302:	1b 82       	std	Y+3, r1	; 0x03
    4304:	9a 83       	std	Y+2, r25	; 0x02
    4306:	89 83       	std	Y+1, r24	; 0x01
    4308:	fd 01       	movw	r30, r26
    430a:	d2 83       	std	Z+2, r29	; 0x02
    430c:	c1 83       	std	Z+1, r28	; 0x01
    430e:	df 91       	pop	r29
    4310:	cf 91       	pop	r28
    4312:	08 95       	ret

00004314 <nrk_rem_from_readyQ>:
    4314:	cf 93       	push	r28
    4316:	df 93       	push	r29
    4318:	a0 91 72 06 	lds	r26, 0x0672
    431c:	b0 91 73 06 	lds	r27, 0x0673
    4320:	10 97       	sbiw	r26, 0x00	; 0
    4322:	09 f4       	brne	.+2      	; 0x4326 <nrk_rem_from_readyQ+0x12>
    4324:	46 c0       	rjmp	.+140    	; 0x43b2 <nrk_rem_from_readyQ+0x9e>
    4326:	48 2f       	mov	r20, r24
    4328:	55 27       	eor	r21, r21
    432a:	47 fd       	sbrc	r20, 7
    432c:	50 95       	com	r21
    432e:	8c 91       	ld	r24, X
    4330:	99 27       	eor	r25, r25
    4332:	84 17       	cp	r24, r20
    4334:	95 07       	cpc	r25, r21
    4336:	69 f4       	brne	.+26     	; 0x4352 <nrk_rem_from_readyQ+0x3e>
    4338:	ed 01       	movw	r28, r26
    433a:	eb 81       	ldd	r30, Y+3	; 0x03
    433c:	fc 81       	ldd	r31, Y+4	; 0x04
    433e:	f0 93 73 06 	sts	0x0673, r31
    4342:	e0 93 72 06 	sts	0x0672, r30
    4346:	12 82       	std	Z+2, r1	; 0x02
    4348:	11 82       	std	Z+1, r1	; 0x01
    434a:	16 c0       	rjmp	.+44     	; 0x4378 <nrk_rem_from_readyQ+0x64>
    434c:	d9 01       	movw	r26, r18
    434e:	23 2b       	or	r18, r19
    4350:	81 f1       	breq	.+96     	; 0x43b2 <nrk_rem_from_readyQ+0x9e>
    4352:	8c 91       	ld	r24, X
    4354:	99 27       	eor	r25, r25
    4356:	fd 01       	movw	r30, r26
    4358:	23 81       	ldd	r18, Z+3	; 0x03
    435a:	34 81       	ldd	r19, Z+4	; 0x04
    435c:	84 17       	cp	r24, r20
    435e:	95 07       	cpc	r25, r21
    4360:	a9 f7       	brne	.-22     	; 0x434c <nrk_rem_from_readyQ+0x38>
    4362:	c1 81       	ldd	r28, Z+1	; 0x01
    4364:	d2 81       	ldd	r29, Z+2	; 0x02
    4366:	3c 83       	std	Y+4, r19	; 0x04
    4368:	2b 83       	std	Y+3, r18	; 0x03
    436a:	83 81       	ldd	r24, Z+3	; 0x03
    436c:	94 81       	ldd	r25, Z+4	; 0x04
    436e:	00 97       	sbiw	r24, 0x00	; 0
    4370:	19 f0       	breq	.+6      	; 0x4378 <nrk_rem_from_readyQ+0x64>
    4372:	fc 01       	movw	r30, r24
    4374:	d2 83       	std	Z+2, r29	; 0x02
    4376:	c1 83       	std	Z+1, r28	; 0x01
    4378:	e0 91 de 05 	lds	r30, 0x05DE
    437c:	f0 91 df 05 	lds	r31, 0x05DF
    4380:	30 97       	sbiw	r30, 0x00	; 0
    4382:	41 f4       	brne	.+16     	; 0x4394 <nrk_rem_from_readyQ+0x80>
    4384:	b0 93 df 05 	sts	0x05DF, r27
    4388:	a0 93 de 05 	sts	0x05DE, r26
    438c:	ed 01       	movw	r28, r26
    438e:	1c 82       	std	Y+4, r1	; 0x04
    4390:	1b 82       	std	Y+3, r1	; 0x03
    4392:	09 c0       	rjmp	.+18     	; 0x43a6 <nrk_rem_from_readyQ+0x92>
    4394:	ed 01       	movw	r28, r26
    4396:	fc 83       	std	Y+4, r31	; 0x04
    4398:	eb 83       	std	Y+3, r30	; 0x03
    439a:	b2 83       	std	Z+2, r27	; 0x02
    439c:	a1 83       	std	Z+1, r26	; 0x01
    439e:	b0 93 df 05 	sts	0x05DF, r27
    43a2:	a0 93 de 05 	sts	0x05DE, r26
    43a6:	e0 91 de 05 	lds	r30, 0x05DE
    43aa:	f0 91 df 05 	lds	r31, 0x05DF
    43ae:	12 82       	std	Z+2, r1	; 0x02
    43b0:	11 82       	std	Z+1, r1	; 0x01
    43b2:	df 91       	pop	r29
    43b4:	cf 91       	pop	r28
    43b6:	08 95       	ret

000043b8 <nrk_get_pid>:
    43b8:	e0 91 7d 06 	lds	r30, 0x067D
    43bc:	f0 91 7e 06 	lds	r31, 0x067E
    43c0:	80 85       	ldd	r24, Z+8	; 0x08
    43c2:	99 27       	eor	r25, r25
    43c4:	08 95       	ret

000043c6 <_nrk_wait_for_scheduler>:
    43c6:	0e 94 cc 2d 	call	0x5b98	; 0x5b98 <nrk_idle>
    43ca:	e0 91 7d 06 	lds	r30, 0x067D
    43ce:	f0 91 7e 06 	lds	r31, 0x067E
    43d2:	85 81       	ldd	r24, Z+5	; 0x05
    43d4:	88 23       	and	r24, r24
    43d6:	b9 f7       	brne	.-18     	; 0x43c6 <_nrk_wait_for_scheduler>
    43d8:	08 95       	ret

000043da <nrk_wait>:
    43da:	ff 92       	push	r15
    43dc:	0f 93       	push	r16
    43de:	1f 93       	push	r17
    43e0:	cf 93       	push	r28
    43e2:	df 93       	push	r29
    43e4:	cd b7       	in	r28, 0x3d	; 61
    43e6:	de b7       	in	r29, 0x3e	; 62
    43e8:	28 97       	sbiw	r28, 0x08	; 8
    43ea:	0f b6       	in	r0, 0x3f	; 63
    43ec:	f8 94       	cli
    43ee:	de bf       	out	0x3e, r29	; 62
    43f0:	0f be       	out	0x3f, r0	; 63
    43f2:	cd bf       	out	0x3d, r28	; 61
    43f4:	29 83       	std	Y+1, r18	; 0x01
    43f6:	3a 83       	std	Y+2, r19	; 0x02
    43f8:	4b 83       	std	Y+3, r20	; 0x03
    43fa:	5c 83       	std	Y+4, r21	; 0x04
    43fc:	6d 83       	std	Y+5, r22	; 0x05
    43fe:	7e 83       	std	Y+6, r23	; 0x06
    4400:	8f 83       	std	Y+7, r24	; 0x07
    4402:	98 87       	std	Y+8, r25	; 0x08
    4404:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <nrk_stack_check>
    4408:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <nrk_int_disable>
    440c:	e0 91 7d 06 	lds	r30, 0x067D
    4410:	f0 91 7e 06 	lds	r31, 0x067E
    4414:	81 e0       	ldi	r24, 0x01	; 1
    4416:	85 83       	std	Z+5, r24	; 0x05
    4418:	81 e0       	ldi	r24, 0x01	; 1
    441a:	90 e0       	ldi	r25, 0x00	; 0
    441c:	90 a3       	std	Z+32, r25	; 0x20
    441e:	87 8f       	std	Z+31, r24	; 0x1f
    4420:	0e 94 0b 2b 	call	0x5616	; 0x5616 <_nrk_os_timer_get>
    4424:	f8 2e       	mov	r15, r24
    4426:	29 81       	ldd	r18, Y+1	; 0x01
    4428:	3a 81       	ldd	r19, Y+2	; 0x02
    442a:	4b 81       	ldd	r20, Y+3	; 0x03
    442c:	5c 81       	ldd	r21, Y+4	; 0x04
    442e:	6d 81       	ldd	r22, Y+5	; 0x05
    4430:	7e 81       	ldd	r23, Y+6	; 0x06
    4432:	8f 81       	ldd	r24, Y+7	; 0x07
    4434:	98 85       	ldd	r25, Y+8	; 0x08
    4436:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <_nrk_time_to_ticks>
    443a:	e0 91 7d 06 	lds	r30, 0x067D
    443e:	f0 91 7e 06 	lds	r31, 0x067E
    4442:	0f 2d       	mov	r16, r15
    4444:	11 27       	eor	r17, r17
    4446:	80 0f       	add	r24, r16
    4448:	91 1f       	adc	r25, r17
    444a:	96 8b       	std	Z+22, r25	; 0x16
    444c:	85 8b       	std	Z+21, r24	; 0x15
    444e:	87 ef       	ldi	r24, 0xF7	; 247
    4450:	8f 15       	cp	r24, r15
    4452:	70 f0       	brcs	.+28     	; 0x4470 <nrk_wait+0x96>
    4454:	0e 94 97 2a 	call	0x552e	; 0x552e <_nrk_get_next_wakeup>
    4458:	0e 5f       	subi	r16, 0xFE	; 254
    445a:	1f 4f       	sbci	r17, 0xFF	; 255
    445c:	99 27       	eor	r25, r25
    445e:	80 17       	cp	r24, r16
    4460:	91 07       	cpc	r25, r17
    4462:	34 f0       	brlt	.+12     	; 0x4470 <nrk_wait+0x96>
    4464:	8f 2d       	mov	r24, r15
    4466:	8e 5f       	subi	r24, 0xFE	; 254
    4468:	80 93 ac 05 	sts	0x05AC, r24
    446c:	0e 94 9c 2a 	call	0x5538	; 0x5538 <_nrk_set_next_wakeup>
    4470:	0e 94 e5 19 	call	0x33ca	; 0x33ca <nrk_int_enable>
    4474:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <_nrk_wait_for_scheduler>
    4478:	81 e0       	ldi	r24, 0x01	; 1
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	28 96       	adiw	r28, 0x08	; 8
    447e:	0f b6       	in	r0, 0x3f	; 63
    4480:	f8 94       	cli
    4482:	de bf       	out	0x3e, r29	; 62
    4484:	0f be       	out	0x3f, r0	; 63
    4486:	cd bf       	out	0x3d, r28	; 61
    4488:	df 91       	pop	r29
    448a:	cf 91       	pop	r28
    448c:	1f 91       	pop	r17
    448e:	0f 91       	pop	r16
    4490:	ff 90       	pop	r15
    4492:	08 95       	ret

00004494 <nrk_wait_until>:
    4494:	8f 92       	push	r8
    4496:	9f 92       	push	r9
    4498:	af 92       	push	r10
    449a:	bf 92       	push	r11
    449c:	cf 92       	push	r12
    449e:	df 92       	push	r13
    44a0:	ef 92       	push	r14
    44a2:	ff 92       	push	r15
    44a4:	0f 93       	push	r16
    44a6:	1f 93       	push	r17
    44a8:	cf 93       	push	r28
    44aa:	df 93       	push	r29
    44ac:	cd b7       	in	r28, 0x3d	; 61
    44ae:	de b7       	in	r29, 0x3e	; 62
    44b0:	60 97       	sbiw	r28, 0x10	; 16
    44b2:	0f b6       	in	r0, 0x3f	; 63
    44b4:	f8 94       	cli
    44b6:	de bf       	out	0x3e, r29	; 62
    44b8:	0f be       	out	0x3f, r0	; 63
    44ba:	cd bf       	out	0x3d, r28	; 61
    44bc:	29 87       	std	Y+9, r18	; 0x09
    44be:	3a 87       	std	Y+10, r19	; 0x0a
    44c0:	4b 87       	std	Y+11, r20	; 0x0b
    44c2:	5c 87       	std	Y+12, r21	; 0x0c
    44c4:	6d 87       	std	Y+13, r22	; 0x0d
    44c6:	7e 87       	std	Y+14, r23	; 0x0e
    44c8:	8f 87       	std	Y+15, r24	; 0x0f
    44ca:	98 8b       	std	Y+16, r25	; 0x10
    44cc:	ce 01       	movw	r24, r28
    44ce:	01 96       	adiw	r24, 0x01	; 1
    44d0:	0e 94 b5 26 	call	0x4d6a	; 0x4d6a <nrk_time_get>
    44d4:	89 80       	ldd	r8, Y+1	; 0x01
    44d6:	9a 80       	ldd	r9, Y+2	; 0x02
    44d8:	ab 80       	ldd	r10, Y+3	; 0x03
    44da:	bc 80       	ldd	r11, Y+4	; 0x04
    44dc:	cd 80       	ldd	r12, Y+5	; 0x05
    44de:	de 80       	ldd	r13, Y+6	; 0x06
    44e0:	ef 80       	ldd	r14, Y+7	; 0x07
    44e2:	f8 84       	ldd	r15, Y+8	; 0x08
    44e4:	09 85       	ldd	r16, Y+9	; 0x09
    44e6:	1a 85       	ldd	r17, Y+10	; 0x0a
    44e8:	2b 85       	ldd	r18, Y+11	; 0x0b
    44ea:	3c 85       	ldd	r19, Y+12	; 0x0c
    44ec:	4d 85       	ldd	r20, Y+13	; 0x0d
    44ee:	5e 85       	ldd	r21, Y+14	; 0x0e
    44f0:	6f 85       	ldd	r22, Y+15	; 0x0f
    44f2:	78 89       	ldd	r23, Y+16	; 0x10
    44f4:	ce 01       	movw	r24, r28
    44f6:	09 96       	adiw	r24, 0x09	; 9
    44f8:	0e 94 30 24 	call	0x4860	; 0x4860 <nrk_time_sub>
    44fc:	88 23       	and	r24, r24
    44fe:	19 f4       	brne	.+6      	; 0x4506 <nrk_wait_until+0x72>
    4500:	8f ef       	ldi	r24, 0xFF	; 255
    4502:	9f ef       	ldi	r25, 0xFF	; 255
    4504:	0c c0       	rjmp	.+24     	; 0x451e <nrk_wait_until+0x8a>
    4506:	29 85       	ldd	r18, Y+9	; 0x09
    4508:	3a 85       	ldd	r19, Y+10	; 0x0a
    450a:	4b 85       	ldd	r20, Y+11	; 0x0b
    450c:	5c 85       	ldd	r21, Y+12	; 0x0c
    450e:	6d 85       	ldd	r22, Y+13	; 0x0d
    4510:	7e 85       	ldd	r23, Y+14	; 0x0e
    4512:	8f 85       	ldd	r24, Y+15	; 0x0f
    4514:	98 89       	ldd	r25, Y+16	; 0x10
    4516:	0e 94 ed 21 	call	0x43da	; 0x43da <nrk_wait>
    451a:	81 e0       	ldi	r24, 0x01	; 1
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	60 96       	adiw	r28, 0x10	; 16
    4520:	0f b6       	in	r0, 0x3f	; 63
    4522:	f8 94       	cli
    4524:	de bf       	out	0x3e, r29	; 62
    4526:	0f be       	out	0x3f, r0	; 63
    4528:	cd bf       	out	0x3d, r28	; 61
    452a:	df 91       	pop	r29
    452c:	cf 91       	pop	r28
    452e:	1f 91       	pop	r17
    4530:	0f 91       	pop	r16
    4532:	ff 90       	pop	r15
    4534:	ef 90       	pop	r14
    4536:	df 90       	pop	r13
    4538:	cf 90       	pop	r12
    453a:	bf 90       	pop	r11
    453c:	af 90       	pop	r10
    453e:	9f 90       	pop	r9
    4540:	8f 90       	pop	r8
    4542:	08 95       	ret

00004544 <nrk_wait_until_nw>:
    4544:	1f 93       	push	r17
    4546:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <nrk_int_disable>
    454a:	e0 91 7d 06 	lds	r30, 0x067D
    454e:	f0 91 7e 06 	lds	r31, 0x067E
    4552:	81 e0       	ldi	r24, 0x01	; 1
    4554:	85 83       	std	Z+5, r24	; 0x05
    4556:	86 83       	std	Z+6, r24	; 0x06
    4558:	0e 94 0b 2b 	call	0x5616	; 0x5616 <_nrk_os_timer_get>
    455c:	18 2f       	mov	r17, r24
    455e:	88 3f       	cpi	r24, 0xF8	; 248
    4560:	80 f4       	brcc	.+32     	; 0x4582 <nrk_wait_until_nw+0x3e>
    4562:	0e 94 97 2a 	call	0x552e	; 0x552e <_nrk_get_next_wakeup>
    4566:	21 2f       	mov	r18, r17
    4568:	33 27       	eor	r19, r19
    456a:	2e 5f       	subi	r18, 0xFE	; 254
    456c:	3f 4f       	sbci	r19, 0xFF	; 255
    456e:	99 27       	eor	r25, r25
    4570:	82 17       	cp	r24, r18
    4572:	93 07       	cpc	r25, r19
    4574:	34 f0       	brlt	.+12     	; 0x4582 <nrk_wait_until_nw+0x3e>
    4576:	81 2f       	mov	r24, r17
    4578:	8e 5f       	subi	r24, 0xFE	; 254
    457a:	80 93 ac 05 	sts	0x05AC, r24
    457e:	0e 94 9c 2a 	call	0x5538	; 0x5538 <_nrk_set_next_wakeup>
    4582:	0e 94 e5 19 	call	0x33ca	; 0x33ca <nrk_int_enable>
    4586:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <_nrk_wait_for_scheduler>
    458a:	81 e0       	ldi	r24, 0x01	; 1
    458c:	90 e0       	ldi	r25, 0x00	; 0
    458e:	1f 91       	pop	r17
    4590:	08 95       	ret

00004592 <nrk_set_next_wakeup>:
    4592:	1f 93       	push	r17
    4594:	cf 93       	push	r28
    4596:	df 93       	push	r29
    4598:	cd b7       	in	r28, 0x3d	; 61
    459a:	de b7       	in	r29, 0x3e	; 62
    459c:	28 97       	sbiw	r28, 0x08	; 8
    459e:	0f b6       	in	r0, 0x3f	; 63
    45a0:	f8 94       	cli
    45a2:	de bf       	out	0x3e, r29	; 62
    45a4:	0f be       	out	0x3f, r0	; 63
    45a6:	cd bf       	out	0x3d, r28	; 61
    45a8:	29 83       	std	Y+1, r18	; 0x01
    45aa:	3a 83       	std	Y+2, r19	; 0x02
    45ac:	4b 83       	std	Y+3, r20	; 0x03
    45ae:	5c 83       	std	Y+4, r21	; 0x04
    45b0:	6d 83       	std	Y+5, r22	; 0x05
    45b2:	7e 83       	std	Y+6, r23	; 0x06
    45b4:	8f 83       	std	Y+7, r24	; 0x07
    45b6:	98 87       	std	Y+8, r25	; 0x08
    45b8:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <nrk_int_disable>
    45bc:	0e 94 0b 2b 	call	0x5616	; 0x5616 <_nrk_os_timer_get>
    45c0:	18 2f       	mov	r17, r24
    45c2:	29 81       	ldd	r18, Y+1	; 0x01
    45c4:	3a 81       	ldd	r19, Y+2	; 0x02
    45c6:	4b 81       	ldd	r20, Y+3	; 0x03
    45c8:	5c 81       	ldd	r21, Y+4	; 0x04
    45ca:	6d 81       	ldd	r22, Y+5	; 0x05
    45cc:	7e 81       	ldd	r23, Y+6	; 0x06
    45ce:	8f 81       	ldd	r24, Y+7	; 0x07
    45d0:	98 85       	ldd	r25, Y+8	; 0x08
    45d2:	0e 94 4f 25 	call	0x4a9e	; 0x4a9e <_nrk_time_to_ticks>
    45d6:	83 30       	cpi	r24, 0x03	; 3
    45d8:	91 05       	cpc	r25, r1
    45da:	18 f4       	brcc	.+6      	; 0x45e2 <nrk_set_next_wakeup+0x50>
    45dc:	8f ef       	ldi	r24, 0xFF	; 255
    45de:	9f ef       	ldi	r25, 0xFF	; 255
    45e0:	0c c0       	rjmp	.+24     	; 0x45fa <nrk_set_next_wakeup+0x68>
    45e2:	e0 91 7d 06 	lds	r30, 0x067D
    45e6:	f0 91 7e 06 	lds	r31, 0x067E
    45ea:	81 0f       	add	r24, r17
    45ec:	91 1d       	adc	r25, r1
    45ee:	96 8b       	std	Z+22, r25	; 0x16
    45f0:	85 8b       	std	Z+21, r24	; 0x15
    45f2:	0e 94 e5 19 	call	0x33ca	; 0x33ca <nrk_int_enable>
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	90 e0       	ldi	r25, 0x00	; 0
    45fa:	28 96       	adiw	r28, 0x08	; 8
    45fc:	0f b6       	in	r0, 0x3f	; 63
    45fe:	f8 94       	cli
    4600:	de bf       	out	0x3e, r29	; 62
    4602:	0f be       	out	0x3f, r0	; 63
    4604:	cd bf       	out	0x3d, r28	; 61
    4606:	df 91       	pop	r29
    4608:	cf 91       	pop	r28
    460a:	1f 91       	pop	r17
    460c:	08 95       	ret

0000460e <nrk_wait_until_ticks>:
    460e:	0f 93       	push	r16
    4610:	1f 93       	push	r17
    4612:	8c 01       	movw	r16, r24
    4614:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <nrk_int_disable>
    4618:	e0 91 7d 06 	lds	r30, 0x067D
    461c:	f0 91 7e 06 	lds	r31, 0x067E
    4620:	81 e0       	ldi	r24, 0x01	; 1
    4622:	85 83       	std	Z+5, r24	; 0x05
    4624:	16 8b       	std	Z+22, r17	; 0x16
    4626:	05 8b       	std	Z+21, r16	; 0x15
    4628:	0e 94 0b 2b 	call	0x5616	; 0x5616 <_nrk_os_timer_get>
    462c:	08 2f       	mov	r16, r24
    462e:	88 3f       	cpi	r24, 0xF8	; 248
    4630:	80 f4       	brcc	.+32     	; 0x4652 <nrk_wait_until_ticks+0x44>
    4632:	0e 94 97 2a 	call	0x552e	; 0x552e <_nrk_get_next_wakeup>
    4636:	20 2f       	mov	r18, r16
    4638:	33 27       	eor	r19, r19
    463a:	2e 5f       	subi	r18, 0xFE	; 254
    463c:	3f 4f       	sbci	r19, 0xFF	; 255
    463e:	99 27       	eor	r25, r25
    4640:	82 17       	cp	r24, r18
    4642:	93 07       	cpc	r25, r19
    4644:	34 f0       	brlt	.+12     	; 0x4652 <nrk_wait_until_ticks+0x44>
    4646:	80 2f       	mov	r24, r16
    4648:	8e 5f       	subi	r24, 0xFE	; 254
    464a:	80 93 ac 05 	sts	0x05AC, r24
    464e:	0e 94 9c 2a 	call	0x5538	; 0x5538 <_nrk_set_next_wakeup>
    4652:	0e 94 e5 19 	call	0x33ca	; 0x33ca <nrk_int_enable>
    4656:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <_nrk_wait_for_scheduler>
    465a:	81 e0       	ldi	r24, 0x01	; 1
    465c:	90 e0       	ldi	r25, 0x00	; 0
    465e:	1f 91       	pop	r17
    4660:	0f 91       	pop	r16
    4662:	08 95       	ret

00004664 <nrk_wait_ticks>:
    4664:	ff 92       	push	r15
    4666:	0f 93       	push	r16
    4668:	1f 93       	push	r17
    466a:	cf 93       	push	r28
    466c:	df 93       	push	r29
    466e:	8c 01       	movw	r16, r24
    4670:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <nrk_int_disable>
    4674:	e0 91 7d 06 	lds	r30, 0x067D
    4678:	f0 91 7e 06 	lds	r31, 0x067E
    467c:	81 e0       	ldi	r24, 0x01	; 1
    467e:	85 83       	std	Z+5, r24	; 0x05
    4680:	0e 94 0b 2b 	call	0x5616	; 0x5616 <_nrk_os_timer_get>
    4684:	f8 2e       	mov	r15, r24
    4686:	e0 91 7d 06 	lds	r30, 0x067D
    468a:	f0 91 7e 06 	lds	r31, 0x067E
    468e:	c8 2f       	mov	r28, r24
    4690:	dd 27       	eor	r29, r29
    4692:	0c 0f       	add	r16, r28
    4694:	1d 1f       	adc	r17, r29
    4696:	16 8b       	std	Z+22, r17	; 0x16
    4698:	05 8b       	std	Z+21, r16	; 0x15
    469a:	87 ef       	ldi	r24, 0xF7	; 247
    469c:	8f 15       	cp	r24, r15
    469e:	68 f0       	brcs	.+26     	; 0x46ba <nrk_wait_ticks+0x56>
    46a0:	0e 94 97 2a 	call	0x552e	; 0x552e <_nrk_get_next_wakeup>
    46a4:	22 96       	adiw	r28, 0x02	; 2
    46a6:	99 27       	eor	r25, r25
    46a8:	8c 17       	cp	r24, r28
    46aa:	9d 07       	cpc	r25, r29
    46ac:	34 f0       	brlt	.+12     	; 0x46ba <nrk_wait_ticks+0x56>
    46ae:	8f 2d       	mov	r24, r15
    46b0:	8e 5f       	subi	r24, 0xFE	; 254
    46b2:	80 93 ac 05 	sts	0x05AC, r24
    46b6:	0e 94 9c 2a 	call	0x5538	; 0x5538 <_nrk_set_next_wakeup>
    46ba:	0e 94 e5 19 	call	0x33ca	; 0x33ca <nrk_int_enable>
    46be:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <_nrk_wait_for_scheduler>
    46c2:	81 e0       	ldi	r24, 0x01	; 1
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	df 91       	pop	r29
    46c8:	cf 91       	pop	r28
    46ca:	1f 91       	pop	r17
    46cc:	0f 91       	pop	r16
    46ce:	ff 90       	pop	r15
    46d0:	08 95       	ret

000046d2 <nrk_wait_until_next_n_periods>:
    46d2:	1f 93       	push	r17
    46d4:	cf 93       	push	r28
    46d6:	df 93       	push	r29
    46d8:	ec 01       	movw	r28, r24
    46da:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <nrk_stack_check>
    46de:	20 97       	sbiw	r28, 0x00	; 0
    46e0:	11 f4       	brne	.+4      	; 0x46e6 <nrk_wait_until_next_n_periods+0x14>
    46e2:	c1 e0       	ldi	r28, 0x01	; 1
    46e4:	d0 e0       	ldi	r29, 0x00	; 0
    46e6:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <nrk_int_disable>
    46ea:	e0 91 7d 06 	lds	r30, 0x067D
    46ee:	f0 91 7e 06 	lds	r31, 0x067E
    46f2:	81 e0       	ldi	r24, 0x01	; 1
    46f4:	85 83       	std	Z+5, r24	; 0x05
    46f6:	d0 a3       	std	Z+32, r29	; 0x20
    46f8:	c7 8f       	std	Z+31, r28	; 0x1f
    46fa:	0e 94 0b 2b 	call	0x5616	; 0x5616 <_nrk_os_timer_get>
    46fe:	18 2f       	mov	r17, r24
    4700:	88 3f       	cpi	r24, 0xF8	; 248
    4702:	80 f4       	brcc	.+32     	; 0x4724 <nrk_wait_until_next_n_periods+0x52>
    4704:	0e 94 97 2a 	call	0x552e	; 0x552e <_nrk_get_next_wakeup>
    4708:	21 2f       	mov	r18, r17
    470a:	33 27       	eor	r19, r19
    470c:	2e 5f       	subi	r18, 0xFE	; 254
    470e:	3f 4f       	sbci	r19, 0xFF	; 255
    4710:	99 27       	eor	r25, r25
    4712:	82 17       	cp	r24, r18
    4714:	93 07       	cpc	r25, r19
    4716:	34 f0       	brlt	.+12     	; 0x4724 <nrk_wait_until_next_n_periods+0x52>
    4718:	81 2f       	mov	r24, r17
    471a:	8e 5f       	subi	r24, 0xFE	; 254
    471c:	80 93 ac 05 	sts	0x05AC, r24
    4720:	0e 94 9c 2a 	call	0x5538	; 0x5538 <_nrk_set_next_wakeup>
    4724:	0e 94 e5 19 	call	0x33ca	; 0x33ca <nrk_int_enable>
    4728:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <_nrk_wait_for_scheduler>
    472c:	81 e0       	ldi	r24, 0x01	; 1
    472e:	90 e0       	ldi	r25, 0x00	; 0
    4730:	df 91       	pop	r29
    4732:	cf 91       	pop	r28
    4734:	1f 91       	pop	r17
    4736:	08 95       	ret

00004738 <nrk_wait_until_next_period>:
    4738:	1f 93       	push	r17
    473a:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <nrk_stack_check>
    473e:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <nrk_int_disable>
    4742:	e0 91 7d 06 	lds	r30, 0x067D
    4746:	f0 91 7e 06 	lds	r31, 0x067E
    474a:	81 e0       	ldi	r24, 0x01	; 1
    474c:	90 e0       	ldi	r25, 0x00	; 0
    474e:	90 a3       	std	Z+32, r25	; 0x20
    4750:	87 8f       	std	Z+31, r24	; 0x1f
    4752:	81 e0       	ldi	r24, 0x01	; 1
    4754:	85 83       	std	Z+5, r24	; 0x05
    4756:	0e 94 0b 2b 	call	0x5616	; 0x5616 <_nrk_os_timer_get>
    475a:	18 2f       	mov	r17, r24
    475c:	88 3f       	cpi	r24, 0xF8	; 248
    475e:	80 f4       	brcc	.+32     	; 0x4780 <nrk_wait_until_next_period+0x48>
    4760:	0e 94 97 2a 	call	0x552e	; 0x552e <_nrk_get_next_wakeup>
    4764:	21 2f       	mov	r18, r17
    4766:	33 27       	eor	r19, r19
    4768:	2e 5f       	subi	r18, 0xFE	; 254
    476a:	3f 4f       	sbci	r19, 0xFF	; 255
    476c:	99 27       	eor	r25, r25
    476e:	82 17       	cp	r24, r18
    4770:	93 07       	cpc	r25, r19
    4772:	34 f0       	brlt	.+12     	; 0x4780 <nrk_wait_until_next_period+0x48>
    4774:	81 2f       	mov	r24, r17
    4776:	8e 5f       	subi	r24, 0xFE	; 254
    4778:	80 93 ac 05 	sts	0x05AC, r24
    477c:	0e 94 9c 2a 	call	0x5538	; 0x5538 <_nrk_set_next_wakeup>
    4780:	0e 94 e5 19 	call	0x33ca	; 0x33ca <nrk_int_enable>
    4784:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <_nrk_wait_for_scheduler>
    4788:	81 e0       	ldi	r24, 0x01	; 1
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	1f 91       	pop	r17
    478e:	08 95       	ret

00004790 <nrk_terminate_task>:
    4790:	e0 91 7d 06 	lds	r30, 0x067D
    4794:	f0 91 7e 06 	lds	r31, 0x067E
    4798:	80 85       	ldd	r24, Z+8	; 0x08
    479a:	0e 94 8a 21 	call	0x4314	; 0x4314 <nrk_rem_from_readyQ>
    479e:	e0 91 7d 06 	lds	r30, 0x067D
    47a2:	f0 91 7e 06 	lds	r31, 0x067E
    47a6:	84 e0       	ldi	r24, 0x04	; 4
    47a8:	81 87       	std	Z+9, r24	; 0x09
    47aa:	0e 94 9c 23 	call	0x4738	; 0x4738 <nrk_wait_until_next_period>
    47ae:	81 e0       	ldi	r24, 0x01	; 1
    47b0:	90 e0       	ldi	r25, 0x00	; 0
    47b2:	08 95       	ret

000047b4 <nrk_activate_task>:
    47b4:	ef 92       	push	r14
    47b6:	ff 92       	push	r15
    47b8:	0f 93       	push	r16
    47ba:	1f 93       	push	r17
    47bc:	cf 93       	push	r28
    47be:	df 93       	push	r29
    47c0:	ec 01       	movw	r28, r24
    47c2:	4b 81       	ldd	r20, Y+3	; 0x03
    47c4:	5c 81       	ldd	r21, Y+4	; 0x04
    47c6:	69 81       	ldd	r22, Y+1	; 0x01
    47c8:	7a 81       	ldd	r23, Y+2	; 0x02
    47ca:	8d 81       	ldd	r24, Y+5	; 0x05
    47cc:	9e 81       	ldd	r25, Y+6	; 0x06
    47ce:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <nrk_task_stk_init>
    47d2:	bc 01       	movw	r22, r24
    47d4:	8f 81       	ldd	r24, Y+7	; 0x07
    47d6:	88 23       	and	r24, r24
    47d8:	69 f0       	breq	.+26     	; 0x47f4 <nrk_activate_task+0x40>
    47da:	4b 81       	ldd	r20, Y+3	; 0x03
    47dc:	5c 81       	ldd	r21, Y+4	; 0x04
    47de:	ee 24       	eor	r14, r14
    47e0:	ff 24       	eor	r15, r15
    47e2:	00 e0       	ldi	r16, 0x00	; 0
    47e4:	10 e0       	ldi	r17, 0x00	; 0
    47e6:	20 e0       	ldi	r18, 0x00	; 0
    47e8:	30 e0       	ldi	r19, 0x00	; 0
    47ea:	ce 01       	movw	r24, r28
    47ec:	0e 94 ed 19 	call	0x33da	; 0x33da <nrk_TCB_init>
    47f0:	1f 82       	std	Y+7, r1	; 0x07
    47f2:	16 c0       	rjmp	.+44     	; 0x4820 <nrk_activate_task+0x6c>
    47f4:	88 81       	ld	r24, Y
    47f6:	99 27       	eor	r25, r25
    47f8:	87 fd       	sbrc	r24, 7
    47fa:	90 95       	com	r25
    47fc:	fc 01       	movw	r30, r24
    47fe:	a5 e0       	ldi	r26, 0x05	; 5
    4800:	ee 0f       	add	r30, r30
    4802:	ff 1f       	adc	r31, r31
    4804:	aa 95       	dec	r26
    4806:	e1 f7       	brne	.-8      	; 0x4800 <nrk_activate_task+0x4c>
    4808:	e8 0f       	add	r30, r24
    480a:	f9 1f       	adc	r31, r25
    480c:	e0 52       	subi	r30, 0x20	; 32
    480e:	fa 4f       	sbci	r31, 0xFA	; 250
    4810:	81 85       	ldd	r24, Z+9	; 0x09
    4812:	83 30       	cpi	r24, 0x03	; 3
    4814:	19 f0       	breq	.+6      	; 0x481c <nrk_activate_task+0x68>
    4816:	8f ef       	ldi	r24, 0xFF	; 255
    4818:	9f ef       	ldi	r25, 0xFF	; 255
    481a:	1b c0       	rjmp	.+54     	; 0x4852 <nrk_activate_task+0x9e>
    481c:	71 83       	std	Z+1, r23	; 0x01
    481e:	60 83       	st	Z, r22
    4820:	88 81       	ld	r24, Y
    4822:	99 27       	eor	r25, r25
    4824:	87 fd       	sbrc	r24, 7
    4826:	90 95       	com	r25
    4828:	fc 01       	movw	r30, r24
    482a:	75 e0       	ldi	r23, 0x05	; 5
    482c:	ee 0f       	add	r30, r30
    482e:	ff 1f       	adc	r31, r31
    4830:	7a 95       	dec	r23
    4832:	e1 f7       	brne	.-8      	; 0x482c <nrk_activate_task+0x78>
    4834:	e8 0f       	add	r30, r24
    4836:	f9 1f       	adc	r31, r25
    4838:	e0 52       	subi	r30, 0x20	; 32
    483a:	fa 4f       	sbci	r31, 0xFA	; 250
    483c:	85 89       	ldd	r24, Z+21	; 0x15
    483e:	96 89       	ldd	r25, Z+22	; 0x16
    4840:	89 2b       	or	r24, r25
    4842:	29 f4       	brne	.+10     	; 0x484e <nrk_activate_task+0x9a>
    4844:	82 e0       	ldi	r24, 0x02	; 2
    4846:	81 87       	std	Z+9, r24	; 0x09
    4848:	88 81       	ld	r24, Y
    484a:	0e 94 03 21 	call	0x4206	; 0x4206 <nrk_add_to_readyQ>
    484e:	81 e0       	ldi	r24, 0x01	; 1
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	df 91       	pop	r29
    4854:	cf 91       	pop	r28
    4856:	1f 91       	pop	r17
    4858:	0f 91       	pop	r16
    485a:	ff 90       	pop	r15
    485c:	ef 90       	pop	r14
    485e:	08 95       	ret

00004860 <nrk_time_sub>:
    4860:	8f 92       	push	r8
    4862:	9f 92       	push	r9
    4864:	af 92       	push	r10
    4866:	bf 92       	push	r11
    4868:	cf 92       	push	r12
    486a:	df 92       	push	r13
    486c:	ef 92       	push	r14
    486e:	ff 92       	push	r15
    4870:	0f 93       	push	r16
    4872:	1f 93       	push	r17
    4874:	cf 93       	push	r28
    4876:	df 93       	push	r29
    4878:	cd b7       	in	r28, 0x3d	; 61
    487a:	de b7       	in	r29, 0x3e	; 62
    487c:	60 97       	sbiw	r28, 0x10	; 16
    487e:	0f b6       	in	r0, 0x3f	; 63
    4880:	f8 94       	cli
    4882:	de bf       	out	0x3e, r29	; 62
    4884:	0f be       	out	0x3f, r0	; 63
    4886:	cd bf       	out	0x3d, r28	; 61
    4888:	fc 01       	movw	r30, r24
    488a:	09 83       	std	Y+1, r16	; 0x01
    488c:	1a 83       	std	Y+2, r17	; 0x02
    488e:	2b 83       	std	Y+3, r18	; 0x03
    4890:	3c 83       	std	Y+4, r19	; 0x04
    4892:	4d 83       	std	Y+5, r20	; 0x05
    4894:	5e 83       	std	Y+6, r21	; 0x06
    4896:	6f 83       	std	Y+7, r22	; 0x07
    4898:	78 87       	std	Y+8, r23	; 0x08
    489a:	89 86       	std	Y+9, r8	; 0x09
    489c:	9a 86       	std	Y+10, r9	; 0x0a
    489e:	ab 86       	std	Y+11, r10	; 0x0b
    48a0:	bc 86       	std	Y+12, r11	; 0x0c
    48a2:	cd 86       	std	Y+13, r12	; 0x0d
    48a4:	de 86       	std	Y+14, r13	; 0x0e
    48a6:	ef 86       	std	Y+15, r14	; 0x0f
    48a8:	f8 8a       	std	Y+16, r15	; 0x10
    48aa:	2d 81       	ldd	r18, Y+5	; 0x05
    48ac:	3e 81       	ldd	r19, Y+6	; 0x06
    48ae:	4f 81       	ldd	r20, Y+7	; 0x07
    48b0:	58 85       	ldd	r21, Y+8	; 0x08
    48b2:	89 81       	ldd	r24, Y+1	; 0x01
    48b4:	9a 81       	ldd	r25, Y+2	; 0x02
    48b6:	ab 81       	ldd	r26, Y+3	; 0x03
    48b8:	bc 81       	ldd	r27, Y+4	; 0x04
    48ba:	ad 84       	ldd	r10, Y+13	; 0x0d
    48bc:	be 84       	ldd	r11, Y+14	; 0x0e
    48be:	cf 84       	ldd	r12, Y+15	; 0x0f
    48c0:	d8 88       	ldd	r13, Y+16	; 0x10
    48c2:	e9 84       	ldd	r14, Y+9	; 0x09
    48c4:	fa 84       	ldd	r15, Y+10	; 0x0a
    48c6:	0b 85       	ldd	r16, Y+11	; 0x0b
    48c8:	1c 85       	ldd	r17, Y+12	; 0x0c
    48ca:	8e 15       	cp	r24, r14
    48cc:	9f 05       	cpc	r25, r15
    48ce:	a0 07       	cpc	r26, r16
    48d0:	b1 07       	cpc	r27, r17
    48d2:	08 f4       	brcc	.+2      	; 0x48d6 <nrk_time_sub+0x76>
    48d4:	3f c0       	rjmp	.+126    	; 0x4954 <nrk_time_sub+0xf4>
    48d6:	e8 16       	cp	r14, r24
    48d8:	f9 06       	cpc	r15, r25
    48da:	0a 07       	cpc	r16, r26
    48dc:	1b 07       	cpc	r17, r27
    48de:	91 f4       	brne	.+36     	; 0x4904 <nrk_time_sub+0xa4>
    48e0:	2a 15       	cp	r18, r10
    48e2:	3b 05       	cpc	r19, r11
    48e4:	4c 05       	cpc	r20, r12
    48e6:	5d 05       	cpc	r21, r13
    48e8:	a8 f1       	brcs	.+106    	; 0x4954 <nrk_time_sub+0xf4>
    48ea:	2a 19       	sub	r18, r10
    48ec:	3b 09       	sbc	r19, r11
    48ee:	4c 09       	sbc	r20, r12
    48f0:	5d 09       	sbc	r21, r13
    48f2:	24 83       	std	Z+4, r18	; 0x04
    48f4:	35 83       	std	Z+5, r19	; 0x05
    48f6:	46 83       	std	Z+6, r20	; 0x06
    48f8:	57 83       	std	Z+7, r21	; 0x07
    48fa:	10 82       	st	Z, r1
    48fc:	11 82       	std	Z+1, r1	; 0x01
    48fe:	12 82       	std	Z+2, r1	; 0x02
    4900:	13 82       	std	Z+3, r1	; 0x03
    4902:	1c c0       	rjmp	.+56     	; 0x493c <nrk_time_sub+0xdc>
    4904:	2a 15       	cp	r18, r10
    4906:	3b 05       	cpc	r19, r11
    4908:	4c 05       	cpc	r20, r12
    490a:	5d 05       	cpc	r21, r13
    490c:	d0 f4       	brcc	.+52     	; 0x4942 <nrk_time_sub+0xe2>
    490e:	01 97       	sbiw	r24, 0x01	; 1
    4910:	a1 09       	sbc	r26, r1
    4912:	b1 09       	sbc	r27, r1
    4914:	8e 19       	sub	r24, r14
    4916:	9f 09       	sbc	r25, r15
    4918:	a0 0b       	sbc	r26, r16
    491a:	b1 0b       	sbc	r27, r17
    491c:	80 83       	st	Z, r24
    491e:	91 83       	std	Z+1, r25	; 0x01
    4920:	a2 83       	std	Z+2, r26	; 0x02
    4922:	b3 83       	std	Z+3, r27	; 0x03
    4924:	20 50       	subi	r18, 0x00	; 0
    4926:	36 43       	sbci	r19, 0x36	; 54
    4928:	45 46       	sbci	r20, 0x65	; 101
    492a:	54 4c       	sbci	r21, 0xC4	; 196
    492c:	2a 19       	sub	r18, r10
    492e:	3b 09       	sbc	r19, r11
    4930:	4c 09       	sbc	r20, r12
    4932:	5d 09       	sbc	r21, r13
    4934:	24 83       	std	Z+4, r18	; 0x04
    4936:	35 83       	std	Z+5, r19	; 0x05
    4938:	46 83       	std	Z+6, r20	; 0x06
    493a:	57 83       	std	Z+7, r21	; 0x07
    493c:	81 e0       	ldi	r24, 0x01	; 1
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	0b c0       	rjmp	.+22     	; 0x4958 <nrk_time_sub+0xf8>
    4942:	8e 19       	sub	r24, r14
    4944:	9f 09       	sbc	r25, r15
    4946:	a0 0b       	sbc	r26, r16
    4948:	b1 0b       	sbc	r27, r17
    494a:	80 83       	st	Z, r24
    494c:	91 83       	std	Z+1, r25	; 0x01
    494e:	a2 83       	std	Z+2, r26	; 0x02
    4950:	b3 83       	std	Z+3, r27	; 0x03
    4952:	ec cf       	rjmp	.-40     	; 0x492c <nrk_time_sub+0xcc>
    4954:	80 e0       	ldi	r24, 0x00	; 0
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	60 96       	adiw	r28, 0x10	; 16
    495a:	0f b6       	in	r0, 0x3f	; 63
    495c:	f8 94       	cli
    495e:	de bf       	out	0x3e, r29	; 62
    4960:	0f be       	out	0x3f, r0	; 63
    4962:	cd bf       	out	0x3d, r28	; 61
    4964:	df 91       	pop	r29
    4966:	cf 91       	pop	r28
    4968:	1f 91       	pop	r17
    496a:	0f 91       	pop	r16
    496c:	ff 90       	pop	r15
    496e:	ef 90       	pop	r14
    4970:	df 90       	pop	r13
    4972:	cf 90       	pop	r12
    4974:	bf 90       	pop	r11
    4976:	af 90       	pop	r10
    4978:	9f 90       	pop	r9
    497a:	8f 90       	pop	r8
    497c:	08 95       	ret

0000497e <nrk_time_compact_nanos>:
    497e:	fc 01       	movw	r30, r24
    4980:	13 c0       	rjmp	.+38     	; 0x49a8 <nrk_time_compact_nanos+0x2a>
    4982:	80 50       	subi	r24, 0x00	; 0
    4984:	9a 4c       	sbci	r25, 0xCA	; 202
    4986:	aa 49       	sbci	r26, 0x9A	; 154
    4988:	bb 43       	sbci	r27, 0x3B	; 59
    498a:	84 83       	std	Z+4, r24	; 0x04
    498c:	95 83       	std	Z+5, r25	; 0x05
    498e:	a6 83       	std	Z+6, r26	; 0x06
    4990:	b7 83       	std	Z+7, r27	; 0x07
    4992:	80 81       	ld	r24, Z
    4994:	91 81       	ldd	r25, Z+1	; 0x01
    4996:	a2 81       	ldd	r26, Z+2	; 0x02
    4998:	b3 81       	ldd	r27, Z+3	; 0x03
    499a:	01 96       	adiw	r24, 0x01	; 1
    499c:	a1 1d       	adc	r26, r1
    499e:	b1 1d       	adc	r27, r1
    49a0:	80 83       	st	Z, r24
    49a2:	91 83       	std	Z+1, r25	; 0x01
    49a4:	a2 83       	std	Z+2, r26	; 0x02
    49a6:	b3 83       	std	Z+3, r27	; 0x03
    49a8:	84 81       	ldd	r24, Z+4	; 0x04
    49aa:	95 81       	ldd	r25, Z+5	; 0x05
    49ac:	a6 81       	ldd	r26, Z+6	; 0x06
    49ae:	b7 81       	ldd	r27, Z+7	; 0x07
    49b0:	80 30       	cpi	r24, 0x00	; 0
    49b2:	2a ec       	ldi	r18, 0xCA	; 202
    49b4:	92 07       	cpc	r25, r18
    49b6:	2a e9       	ldi	r18, 0x9A	; 154
    49b8:	a2 07       	cpc	r26, r18
    49ba:	2b e3       	ldi	r18, 0x3B	; 59
    49bc:	b2 07       	cpc	r27, r18
    49be:	08 f7       	brcc	.-62     	; 0x4982 <nrk_time_compact_nanos+0x4>
    49c0:	08 95       	ret

000049c2 <nrk_time_add>:
    49c2:	8f 92       	push	r8
    49c4:	9f 92       	push	r9
    49c6:	af 92       	push	r10
    49c8:	bf 92       	push	r11
    49ca:	cf 92       	push	r12
    49cc:	df 92       	push	r13
    49ce:	ef 92       	push	r14
    49d0:	ff 92       	push	r15
    49d2:	0f 93       	push	r16
    49d4:	1f 93       	push	r17
    49d6:	cf 93       	push	r28
    49d8:	df 93       	push	r29
    49da:	cd b7       	in	r28, 0x3d	; 61
    49dc:	de b7       	in	r29, 0x3e	; 62
    49de:	60 97       	sbiw	r28, 0x10	; 16
    49e0:	0f b6       	in	r0, 0x3f	; 63
    49e2:	f8 94       	cli
    49e4:	de bf       	out	0x3e, r29	; 62
    49e6:	0f be       	out	0x3f, r0	; 63
    49e8:	cd bf       	out	0x3d, r28	; 61
    49ea:	fc 01       	movw	r30, r24
    49ec:	09 83       	std	Y+1, r16	; 0x01
    49ee:	1a 83       	std	Y+2, r17	; 0x02
    49f0:	2b 83       	std	Y+3, r18	; 0x03
    49f2:	3c 83       	std	Y+4, r19	; 0x04
    49f4:	4d 83       	std	Y+5, r20	; 0x05
    49f6:	5e 83       	std	Y+6, r21	; 0x06
    49f8:	6f 83       	std	Y+7, r22	; 0x07
    49fa:	78 87       	std	Y+8, r23	; 0x08
    49fc:	89 86       	std	Y+9, r8	; 0x09
    49fe:	9a 86       	std	Y+10, r9	; 0x0a
    4a00:	ab 86       	std	Y+11, r10	; 0x0b
    4a02:	bc 86       	std	Y+12, r11	; 0x0c
    4a04:	cd 86       	std	Y+13, r12	; 0x0d
    4a06:	de 86       	std	Y+14, r13	; 0x0e
    4a08:	ef 86       	std	Y+15, r14	; 0x0f
    4a0a:	f8 8a       	std	Y+16, r15	; 0x10
    4a0c:	ad 80       	ldd	r10, Y+5	; 0x05
    4a0e:	be 80       	ldd	r11, Y+6	; 0x06
    4a10:	cf 80       	ldd	r12, Y+7	; 0x07
    4a12:	d8 84       	ldd	r13, Y+8	; 0x08
    4a14:	ed 84       	ldd	r14, Y+13	; 0x0d
    4a16:	fe 84       	ldd	r15, Y+14	; 0x0e
    4a18:	0f 85       	ldd	r16, Y+15	; 0x0f
    4a1a:	18 89       	ldd	r17, Y+16	; 0x10
    4a1c:	89 85       	ldd	r24, Y+9	; 0x09
    4a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    4a20:	ab 85       	ldd	r26, Y+11	; 0x0b
    4a22:	bc 85       	ldd	r27, Y+12	; 0x0c
    4a24:	29 81       	ldd	r18, Y+1	; 0x01
    4a26:	3a 81       	ldd	r19, Y+2	; 0x02
    4a28:	4b 81       	ldd	r20, Y+3	; 0x03
    4a2a:	5c 81       	ldd	r21, Y+4	; 0x04
    4a2c:	82 0f       	add	r24, r18
    4a2e:	93 1f       	adc	r25, r19
    4a30:	a4 1f       	adc	r26, r20
    4a32:	b5 1f       	adc	r27, r21
    4a34:	80 83       	st	Z, r24
    4a36:	91 83       	std	Z+1, r25	; 0x01
    4a38:	a2 83       	std	Z+2, r26	; 0x02
    4a3a:	b3 83       	std	Z+3, r27	; 0x03
    4a3c:	ea 0c       	add	r14, r10
    4a3e:	fb 1c       	adc	r15, r11
    4a40:	0c 1d       	adc	r16, r12
    4a42:	1d 1d       	adc	r17, r13
    4a44:	e4 82       	std	Z+4, r14	; 0x04
    4a46:	f5 82       	std	Z+5, r15	; 0x05
    4a48:	06 83       	std	Z+6, r16	; 0x06
    4a4a:	17 83       	std	Z+7, r17	; 0x07
    4a4c:	cf 01       	movw	r24, r30
    4a4e:	0e 94 bf 24 	call	0x497e	; 0x497e <nrk_time_compact_nanos>
    4a52:	81 e0       	ldi	r24, 0x01	; 1
    4a54:	90 e0       	ldi	r25, 0x00	; 0
    4a56:	60 96       	adiw	r28, 0x10	; 16
    4a58:	0f b6       	in	r0, 0x3f	; 63
    4a5a:	f8 94       	cli
    4a5c:	de bf       	out	0x3e, r29	; 62
    4a5e:	0f be       	out	0x3f, r0	; 63
    4a60:	cd bf       	out	0x3d, r28	; 61
    4a62:	df 91       	pop	r29
    4a64:	cf 91       	pop	r28
    4a66:	1f 91       	pop	r17
    4a68:	0f 91       	pop	r16
    4a6a:	ff 90       	pop	r15
    4a6c:	ef 90       	pop	r14
    4a6e:	df 90       	pop	r13
    4a70:	cf 90       	pop	r12
    4a72:	bf 90       	pop	r11
    4a74:	af 90       	pop	r10
    4a76:	9f 90       	pop	r9
    4a78:	8f 90       	pop	r8
    4a7a:	08 95       	ret

00004a7c <nrk_time_set>:
    4a7c:	60 93 74 06 	sts	0x0674, r22
    4a80:	70 93 75 06 	sts	0x0675, r23
    4a84:	80 93 76 06 	sts	0x0676, r24
    4a88:	90 93 77 06 	sts	0x0677, r25
    4a8c:	20 93 78 06 	sts	0x0678, r18
    4a90:	30 93 79 06 	sts	0x0679, r19
    4a94:	40 93 7a 06 	sts	0x067A, r20
    4a98:	50 93 7b 06 	sts	0x067B, r21
    4a9c:	08 95       	ret

00004a9e <_nrk_time_to_ticks>:
    4a9e:	8f 92       	push	r8
    4aa0:	9f 92       	push	r9
    4aa2:	af 92       	push	r10
    4aa4:	bf 92       	push	r11
    4aa6:	cf 92       	push	r12
    4aa8:	df 92       	push	r13
    4aaa:	ef 92       	push	r14
    4aac:	ff 92       	push	r15
    4aae:	0f 93       	push	r16
    4ab0:	1f 93       	push	r17
    4ab2:	cf 93       	push	r28
    4ab4:	df 93       	push	r29
    4ab6:	cd b7       	in	r28, 0x3d	; 61
    4ab8:	de b7       	in	r29, 0x3e	; 62
    4aba:	28 97       	sbiw	r28, 0x08	; 8
    4abc:	0f b6       	in	r0, 0x3f	; 63
    4abe:	f8 94       	cli
    4ac0:	de bf       	out	0x3e, r29	; 62
    4ac2:	0f be       	out	0x3f, r0	; 63
    4ac4:	cd bf       	out	0x3d, r28	; 61
    4ac6:	29 83       	std	Y+1, r18	; 0x01
    4ac8:	3a 83       	std	Y+2, r19	; 0x02
    4aca:	4b 83       	std	Y+3, r20	; 0x03
    4acc:	5c 83       	std	Y+4, r21	; 0x04
    4ace:	6d 83       	std	Y+5, r22	; 0x05
    4ad0:	7e 83       	std	Y+6, r23	; 0x06
    4ad2:	8f 83       	std	Y+7, r24	; 0x07
    4ad4:	98 87       	std	Y+8, r25	; 0x08
    4ad6:	8d 80       	ldd	r8, Y+5	; 0x05
    4ad8:	9e 80       	ldd	r9, Y+6	; 0x06
    4ada:	af 80       	ldd	r10, Y+7	; 0x07
    4adc:	b8 84       	ldd	r11, Y+8	; 0x08
    4ade:	e9 80       	ldd	r14, Y+1	; 0x01
    4ae0:	fa 80       	ldd	r15, Y+2	; 0x02
    4ae2:	0b 81       	ldd	r16, Y+3	; 0x03
    4ae4:	1c 81       	ldd	r17, Y+4	; 0x04
    4ae6:	e1 14       	cp	r14, r1
    4ae8:	f1 04       	cpc	r15, r1
    4aea:	01 05       	cpc	r16, r1
    4aec:	11 05       	cpc	r17, r1
    4aee:	01 f1       	breq	.+64     	; 0x4b30 <_nrk_time_to_ticks+0x92>
    4af0:	80 e0       	ldi	r24, 0x00	; 0
    4af2:	9a ec       	ldi	r25, 0xCA	; 202
    4af4:	aa e9       	ldi	r26, 0x9A	; 154
    4af6:	bb e3       	ldi	r27, 0x3B	; 59
    4af8:	88 0e       	add	r8, r24
    4afa:	99 1e       	adc	r9, r25
    4afc:	aa 1e       	adc	r10, r26
    4afe:	bb 1e       	adc	r11, r27
    4b00:	c5 01       	movw	r24, r10
    4b02:	b4 01       	movw	r22, r8
    4b04:	23 eb       	ldi	r18, 0xB3	; 179
    4b06:	36 ee       	ldi	r19, 0xE6	; 230
    4b08:	4e e0       	ldi	r20, 0x0E	; 14
    4b0a:	50 e0       	ldi	r21, 0x00	; 0
    4b0c:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    4b10:	69 01       	movw	r12, r18
    4b12:	08 94       	sec
    4b14:	e1 08       	sbc	r14, r1
    4b16:	f1 08       	sbc	r15, r1
    4b18:	01 09       	sbc	r16, r1
    4b1a:	11 09       	sbc	r17, r1
    4b1c:	8a e0       	ldi	r24, 0x0A	; 10
    4b1e:	ee 0c       	add	r14, r14
    4b20:	ff 1c       	adc	r15, r15
    4b22:	00 1f       	adc	r16, r16
    4b24:	11 1f       	adc	r17, r17
    4b26:	8a 95       	dec	r24
    4b28:	d1 f7       	brne	.-12     	; 0x4b1e <_nrk_time_to_ticks+0x80>
    4b2a:	ce 0c       	add	r12, r14
    4b2c:	df 1c       	adc	r13, r15
    4b2e:	09 c0       	rjmp	.+18     	; 0x4b42 <_nrk_time_to_ticks+0xa4>
    4b30:	c5 01       	movw	r24, r10
    4b32:	b4 01       	movw	r22, r8
    4b34:	23 eb       	ldi	r18, 0xB3	; 179
    4b36:	36 ee       	ldi	r19, 0xE6	; 230
    4b38:	4e e0       	ldi	r20, 0x0E	; 14
    4b3a:	50 e0       	ldi	r21, 0x00	; 0
    4b3c:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    4b40:	69 01       	movw	r12, r18
    4b42:	b6 01       	movw	r22, r12
    4b44:	02 c0       	rjmp	.+4      	; 0x4b4a <_nrk_time_to_ticks+0xac>
    4b46:	60 50       	subi	r22, 0x00	; 0
    4b48:	74 40       	sbci	r23, 0x04	; 4
    4b4a:	94 e0       	ldi	r25, 0x04	; 4
    4b4c:	61 30       	cpi	r22, 0x01	; 1
    4b4e:	79 07       	cpc	r23, r25
    4b50:	d0 f7       	brcc	.-12     	; 0x4b46 <_nrk_time_to_ticks+0xa8>
    4b52:	88 27       	eor	r24, r24
    4b54:	99 27       	eor	r25, r25
    4b56:	23 eb       	ldi	r18, 0xB3	; 179
    4b58:	36 ee       	ldi	r19, 0xE6	; 230
    4b5a:	4e e0       	ldi	r20, 0x0E	; 14
    4b5c:	50 e0       	ldi	r21, 0x00	; 0
    4b5e:	0e 94 8d 32 	call	0x651a	; 0x651a <__mulsi3>
    4b62:	67 5a       	subi	r22, 0xA7	; 167
    4b64:	7c 48       	sbci	r23, 0x8C	; 140
    4b66:	88 4f       	sbci	r24, 0xF8	; 248
    4b68:	9f 4f       	sbci	r25, 0xFF	; 255
    4b6a:	68 15       	cp	r22, r8
    4b6c:	79 05       	cpc	r23, r9
    4b6e:	8a 05       	cpc	r24, r10
    4b70:	9b 05       	cpc	r25, r11
    4b72:	18 f4       	brcc	.+6      	; 0x4b7a <_nrk_time_to_ticks+0xdc>
    4b74:	08 94       	sec
    4b76:	c1 1c       	adc	r12, r1
    4b78:	d1 1c       	adc	r13, r1
    4b7a:	c6 01       	movw	r24, r12
    4b7c:	28 96       	adiw	r28, 0x08	; 8
    4b7e:	0f b6       	in	r0, 0x3f	; 63
    4b80:	f8 94       	cli
    4b82:	de bf       	out	0x3e, r29	; 62
    4b84:	0f be       	out	0x3f, r0	; 63
    4b86:	cd bf       	out	0x3d, r28	; 61
    4b88:	df 91       	pop	r29
    4b8a:	cf 91       	pop	r28
    4b8c:	1f 91       	pop	r17
    4b8e:	0f 91       	pop	r16
    4b90:	ff 90       	pop	r15
    4b92:	ef 90       	pop	r14
    4b94:	df 90       	pop	r13
    4b96:	cf 90       	pop	r12
    4b98:	bf 90       	pop	r11
    4b9a:	af 90       	pop	r10
    4b9c:	9f 90       	pop	r9
    4b9e:	8f 90       	pop	r8
    4ba0:	08 95       	ret

00004ba2 <_nrk_ticks_to_time>:
    4ba2:	2f 92       	push	r2
    4ba4:	3f 92       	push	r3
    4ba6:	4f 92       	push	r4
    4ba8:	5f 92       	push	r5
    4baa:	6f 92       	push	r6
    4bac:	7f 92       	push	r7
    4bae:	8f 92       	push	r8
    4bb0:	9f 92       	push	r9
    4bb2:	af 92       	push	r10
    4bb4:	bf 92       	push	r11
    4bb6:	cf 92       	push	r12
    4bb8:	df 92       	push	r13
    4bba:	ef 92       	push	r14
    4bbc:	ff 92       	push	r15
    4bbe:	0f 93       	push	r16
    4bc0:	1f 93       	push	r17
    4bc2:	cf 93       	push	r28
    4bc4:	df 93       	push	r29
    4bc6:	cd b7       	in	r28, 0x3d	; 61
    4bc8:	de b7       	in	r29, 0x3e	; 62
    4bca:	28 97       	sbiw	r28, 0x08	; 8
    4bcc:	0f b6       	in	r0, 0x3f	; 63
    4bce:	f8 94       	cli
    4bd0:	de bf       	out	0x3e, r29	; 62
    4bd2:	0f be       	out	0x3f, r0	; 63
    4bd4:	cd bf       	out	0x3d, r28	; 61
    4bd6:	7b 01       	movw	r14, r22
    4bd8:	8c 01       	movw	r16, r24
    4bda:	73 70       	andi	r23, 0x03	; 3
    4bdc:	80 70       	andi	r24, 0x00	; 0
    4bde:	90 70       	andi	r25, 0x00	; 0
    4be0:	23 eb       	ldi	r18, 0xB3	; 179
    4be2:	36 ee       	ldi	r19, 0xE6	; 230
    4be4:	4e e0       	ldi	r20, 0x0E	; 14
    4be6:	50 e0       	ldi	r21, 0x00	; 0
    4be8:	0e 94 8d 32 	call	0x651a	; 0x651a <__mulsi3>
    4bec:	6d 83       	std	Y+5, r22	; 0x05
    4bee:	7e 83       	std	Y+6, r23	; 0x06
    4bf0:	8f 83       	std	Y+7, r24	; 0x07
    4bf2:	98 87       	std	Y+8, r25	; 0x08
    4bf4:	9a e0       	ldi	r25, 0x0A	; 10
    4bf6:	16 95       	lsr	r17
    4bf8:	07 95       	ror	r16
    4bfa:	f7 94       	ror	r15
    4bfc:	e7 94       	ror	r14
    4bfe:	9a 95       	dec	r25
    4c00:	d1 f7       	brne	.-12     	; 0x4bf6 <_nrk_ticks_to_time+0x54>
    4c02:	e9 82       	std	Y+1, r14	; 0x01
    4c04:	fa 82       	std	Y+2, r15	; 0x02
    4c06:	0b 83       	std	Y+3, r16	; 0x03
    4c08:	1c 83       	std	Y+4, r17	; 0x04
    4c0a:	98 85       	ldd	r25, Y+8	; 0x08
    4c0c:	29 80       	ldd	r2, Y+1	; 0x01
    4c0e:	3a 80       	ldd	r3, Y+2	; 0x02
    4c10:	4b 80       	ldd	r4, Y+3	; 0x03
    4c12:	5c 80       	ldd	r5, Y+4	; 0x04
    4c14:	6d 80       	ldd	r6, Y+5	; 0x05
    4c16:	7e 80       	ldd	r7, Y+6	; 0x06
    4c18:	8f 80       	ldd	r8, Y+7	; 0x07
    4c1a:	22 2d       	mov	r18, r2
    4c1c:	33 2d       	mov	r19, r3
    4c1e:	44 2d       	mov	r20, r4
    4c20:	55 2d       	mov	r21, r5
    4c22:	66 2d       	mov	r22, r6
    4c24:	77 2d       	mov	r23, r7
    4c26:	88 2d       	mov	r24, r8
    4c28:	28 96       	adiw	r28, 0x08	; 8
    4c2a:	0f b6       	in	r0, 0x3f	; 63
    4c2c:	f8 94       	cli
    4c2e:	de bf       	out	0x3e, r29	; 62
    4c30:	0f be       	out	0x3f, r0	; 63
    4c32:	cd bf       	out	0x3d, r28	; 61
    4c34:	df 91       	pop	r29
    4c36:	cf 91       	pop	r28
    4c38:	1f 91       	pop	r17
    4c3a:	0f 91       	pop	r16
    4c3c:	ff 90       	pop	r15
    4c3e:	ef 90       	pop	r14
    4c40:	df 90       	pop	r13
    4c42:	cf 90       	pop	r12
    4c44:	bf 90       	pop	r11
    4c46:	af 90       	pop	r10
    4c48:	9f 90       	pop	r9
    4c4a:	8f 90       	pop	r8
    4c4c:	7f 90       	pop	r7
    4c4e:	6f 90       	pop	r6
    4c50:	5f 90       	pop	r5
    4c52:	4f 90       	pop	r4
    4c54:	3f 90       	pop	r3
    4c56:	2f 90       	pop	r2
    4c58:	08 95       	ret

00004c5a <_nrk_time_to_ticks_long>:
    4c5a:	af 92       	push	r10
    4c5c:	bf 92       	push	r11
    4c5e:	cf 92       	push	r12
    4c60:	df 92       	push	r13
    4c62:	ef 92       	push	r14
    4c64:	ff 92       	push	r15
    4c66:	0f 93       	push	r16
    4c68:	1f 93       	push	r17
    4c6a:	cf 93       	push	r28
    4c6c:	df 93       	push	r29
    4c6e:	cd b7       	in	r28, 0x3d	; 61
    4c70:	de b7       	in	r29, 0x3e	; 62
    4c72:	28 97       	sbiw	r28, 0x08	; 8
    4c74:	0f b6       	in	r0, 0x3f	; 63
    4c76:	f8 94       	cli
    4c78:	de bf       	out	0x3e, r29	; 62
    4c7a:	0f be       	out	0x3f, r0	; 63
    4c7c:	cd bf       	out	0x3d, r28	; 61
    4c7e:	29 83       	std	Y+1, r18	; 0x01
    4c80:	3a 83       	std	Y+2, r19	; 0x02
    4c82:	4b 83       	std	Y+3, r20	; 0x03
    4c84:	5c 83       	std	Y+4, r21	; 0x04
    4c86:	6d 83       	std	Y+5, r22	; 0x05
    4c88:	7e 83       	std	Y+6, r23	; 0x06
    4c8a:	8f 83       	std	Y+7, r24	; 0x07
    4c8c:	98 87       	std	Y+8, r25	; 0x08
    4c8e:	ad 80       	ldd	r10, Y+5	; 0x05
    4c90:	be 80       	ldd	r11, Y+6	; 0x06
    4c92:	cf 80       	ldd	r12, Y+7	; 0x07
    4c94:	d8 84       	ldd	r13, Y+8	; 0x08
    4c96:	e9 80       	ldd	r14, Y+1	; 0x01
    4c98:	fa 80       	ldd	r15, Y+2	; 0x02
    4c9a:	0b 81       	ldd	r16, Y+3	; 0x03
    4c9c:	1c 81       	ldd	r17, Y+4	; 0x04
    4c9e:	e1 14       	cp	r14, r1
    4ca0:	f1 04       	cpc	r15, r1
    4ca2:	01 05       	cpc	r16, r1
    4ca4:	11 05       	cpc	r17, r1
    4ca6:	09 f1       	breq	.+66     	; 0x4cea <_nrk_time_to_ticks_long+0x90>
    4ca8:	80 e0       	ldi	r24, 0x00	; 0
    4caa:	9a ec       	ldi	r25, 0xCA	; 202
    4cac:	aa e9       	ldi	r26, 0x9A	; 154
    4cae:	bb e3       	ldi	r27, 0x3B	; 59
    4cb0:	a8 0e       	add	r10, r24
    4cb2:	b9 1e       	adc	r11, r25
    4cb4:	ca 1e       	adc	r12, r26
    4cb6:	db 1e       	adc	r13, r27
    4cb8:	c6 01       	movw	r24, r12
    4cba:	b5 01       	movw	r22, r10
    4cbc:	23 eb       	ldi	r18, 0xB3	; 179
    4cbe:	36 ee       	ldi	r19, 0xE6	; 230
    4cc0:	4e e0       	ldi	r20, 0x0E	; 14
    4cc2:	50 e0       	ldi	r21, 0x00	; 0
    4cc4:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    4cc8:	08 94       	sec
    4cca:	e1 08       	sbc	r14, r1
    4ccc:	f1 08       	sbc	r15, r1
    4cce:	01 09       	sbc	r16, r1
    4cd0:	11 09       	sbc	r17, r1
    4cd2:	6a e0       	ldi	r22, 0x0A	; 10
    4cd4:	ee 0c       	add	r14, r14
    4cd6:	ff 1c       	adc	r15, r15
    4cd8:	00 1f       	adc	r16, r16
    4cda:	11 1f       	adc	r17, r17
    4cdc:	6a 95       	dec	r22
    4cde:	d1 f7       	brne	.-12     	; 0x4cd4 <_nrk_time_to_ticks_long+0x7a>
    4ce0:	e2 0e       	add	r14, r18
    4ce2:	f3 1e       	adc	r15, r19
    4ce4:	04 1f       	adc	r16, r20
    4ce6:	15 1f       	adc	r17, r21
    4ce8:	0a c0       	rjmp	.+20     	; 0x4cfe <_nrk_time_to_ticks_long+0xa4>
    4cea:	c6 01       	movw	r24, r12
    4cec:	b5 01       	movw	r22, r10
    4cee:	23 eb       	ldi	r18, 0xB3	; 179
    4cf0:	36 ee       	ldi	r19, 0xE6	; 230
    4cf2:	4e e0       	ldi	r20, 0x0E	; 14
    4cf4:	50 e0       	ldi	r21, 0x00	; 0
    4cf6:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    4cfa:	79 01       	movw	r14, r18
    4cfc:	8a 01       	movw	r16, r20
    4cfe:	c8 01       	movw	r24, r16
    4d00:	b7 01       	movw	r22, r14
    4d02:	04 c0       	rjmp	.+8      	; 0x4d0c <_nrk_time_to_ticks_long+0xb2>
    4d04:	60 50       	subi	r22, 0x00	; 0
    4d06:	74 40       	sbci	r23, 0x04	; 4
    4d08:	80 40       	sbci	r24, 0x00	; 0
    4d0a:	90 40       	sbci	r25, 0x00	; 0
    4d0c:	61 30       	cpi	r22, 0x01	; 1
    4d0e:	a4 e0       	ldi	r26, 0x04	; 4
    4d10:	7a 07       	cpc	r23, r26
    4d12:	a0 e0       	ldi	r26, 0x00	; 0
    4d14:	8a 07       	cpc	r24, r26
    4d16:	a0 e0       	ldi	r26, 0x00	; 0
    4d18:	9a 07       	cpc	r25, r26
    4d1a:	a0 f7       	brcc	.-24     	; 0x4d04 <_nrk_time_to_ticks_long+0xaa>
    4d1c:	23 eb       	ldi	r18, 0xB3	; 179
    4d1e:	36 ee       	ldi	r19, 0xE6	; 230
    4d20:	4e e0       	ldi	r20, 0x0E	; 14
    4d22:	50 e0       	ldi	r21, 0x00	; 0
    4d24:	0e 94 8d 32 	call	0x651a	; 0x651a <__mulsi3>
    4d28:	67 5a       	subi	r22, 0xA7	; 167
    4d2a:	7c 48       	sbci	r23, 0x8C	; 140
    4d2c:	88 4f       	sbci	r24, 0xF8	; 248
    4d2e:	9f 4f       	sbci	r25, 0xFF	; 255
    4d30:	6a 15       	cp	r22, r10
    4d32:	7b 05       	cpc	r23, r11
    4d34:	8c 05       	cpc	r24, r12
    4d36:	9d 05       	cpc	r25, r13
    4d38:	28 f4       	brcc	.+10     	; 0x4d44 <_nrk_time_to_ticks_long+0xea>
    4d3a:	08 94       	sec
    4d3c:	e1 1c       	adc	r14, r1
    4d3e:	f1 1c       	adc	r15, r1
    4d40:	01 1d       	adc	r16, r1
    4d42:	11 1d       	adc	r17, r1
    4d44:	c8 01       	movw	r24, r16
    4d46:	b7 01       	movw	r22, r14
    4d48:	28 96       	adiw	r28, 0x08	; 8
    4d4a:	0f b6       	in	r0, 0x3f	; 63
    4d4c:	f8 94       	cli
    4d4e:	de bf       	out	0x3e, r29	; 62
    4d50:	0f be       	out	0x3f, r0	; 63
    4d52:	cd bf       	out	0x3d, r28	; 61
    4d54:	df 91       	pop	r29
    4d56:	cf 91       	pop	r28
    4d58:	1f 91       	pop	r17
    4d5a:	0f 91       	pop	r16
    4d5c:	ff 90       	pop	r15
    4d5e:	ef 90       	pop	r14
    4d60:	df 90       	pop	r13
    4d62:	cf 90       	pop	r12
    4d64:	bf 90       	pop	r11
    4d66:	af 90       	pop	r10
    4d68:	08 95       	ret

00004d6a <nrk_time_get>:
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
    4d6a:	ef 92       	push	r14
    4d6c:	ff 92       	push	r15
    4d6e:	0f 93       	push	r16
    4d70:	1f 93       	push	r17
    4d72:	cf 93       	push	r28
    4d74:	df 93       	push	r29
    4d76:	ec 01       	movw	r28, r24
	    FASTSPI_UPD_STATUS(spiStatusByte);
    4d78:	80 91 74 06 	lds	r24, 0x0674
    4d7c:	90 91 75 06 	lds	r25, 0x0675
    4d80:	a0 91 76 06 	lds	r26, 0x0676
    4d84:	b0 91 77 06 	lds	r27, 0x0677
    4d88:	88 83       	st	Y, r24
    4d8a:	99 83       	std	Y+1, r25	; 0x01
    4d8c:	aa 83       	std	Y+2, r26	; 0x02
    4d8e:	bb 83       	std	Y+3, r27	; 0x03
	    ENABLE_GLOBAL_INT();
    4d90:	e0 90 78 06 	lds	r14, 0x0678
    4d94:	f0 90 79 06 	lds	r15, 0x0679
    4d98:	00 91 7a 06 	lds	r16, 0x067A
    4d9c:	10 91 7b 06 	lds	r17, 0x067B
    4da0:	ec 82       	std	Y+4, r14	; 0x04
    4da2:	fd 82       	std	Y+5, r15	; 0x05
    4da4:	0e 83       	std	Y+6, r16	; 0x06
    4da6:	1f 83       	std	Y+7, r17	; 0x07
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

    4da8:	0e 94 0b 2b 	call	0x5616	; 0x5616 <_nrk_os_timer_get>
    4dac:	99 27       	eor	r25, r25
    4dae:	aa 27       	eor	r26, r26
    4db0:	bb 27       	eor	r27, r27
    4db2:	bc 01       	movw	r22, r24
    4db4:	cd 01       	movw	r24, r26
    4db6:	23 eb       	ldi	r18, 0xB3	; 179
    4db8:	36 ee       	ldi	r19, 0xE6	; 230
    4dba:	4e e0       	ldi	r20, 0x0E	; 14
    4dbc:	50 e0       	ldi	r21, 0x00	; 0
    4dbe:	0e 94 8d 32 	call	0x651a	; 0x651a <__mulsi3>
    4dc2:	e6 0e       	add	r14, r22
    4dc4:	f7 1e       	adc	r15, r23
    4dc6:	08 1f       	adc	r16, r24
    4dc8:	19 1f       	adc	r17, r25
    4dca:	ec 82       	std	Y+4, r14	; 0x04
    4dcc:	fd 82       	std	Y+5, r15	; 0x05
    4dce:	0e 83       	std	Y+6, r16	; 0x06
    4dd0:	1f 83       	std	Y+7, r17	; 0x07
    4dd2:	13 c0       	rjmp	.+38     	; 0x4dfa <nrk_time_get+0x90>
} // halRfWaitForCrystalOscillator

    4dd4:	80 50       	subi	r24, 0x00	; 0
    4dd6:	9a 4c       	sbci	r25, 0xCA	; 202
    4dd8:	aa 49       	sbci	r26, 0x9A	; 154
    4dda:	bb 43       	sbci	r27, 0x3B	; 59
    4ddc:	8c 83       	std	Y+4, r24	; 0x04
    4dde:	9d 83       	std	Y+5, r25	; 0x05
    4de0:	ae 83       	std	Y+6, r26	; 0x06
    4de2:	bf 83       	std	Y+7, r27	; 0x07
    4de4:	88 81       	ld	r24, Y
    4de6:	99 81       	ldd	r25, Y+1	; 0x01
    4de8:	aa 81       	ldd	r26, Y+2	; 0x02
    4dea:	bb 81       	ldd	r27, Y+3	; 0x03
    4dec:	01 96       	adiw	r24, 0x01	; 1
    4dee:	a1 1d       	adc	r26, r1
    4df0:	b1 1d       	adc	r27, r1
    4df2:	88 83       	st	Y, r24
    4df4:	99 83       	std	Y+1, r25	; 0x01
    4df6:	aa 83       	std	Y+2, r26	; 0x02
    4df8:	bb 83       	std	Y+3, r27	; 0x03
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

} // halRfWaitForCrystalOscillator
    4dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    4dfc:	9d 81       	ldd	r25, Y+5	; 0x05
    4dfe:	ae 81       	ldd	r26, Y+6	; 0x06
    4e00:	bf 81       	ldd	r27, Y+7	; 0x07
    4e02:	80 30       	cpi	r24, 0x00	; 0
    4e04:	2a ec       	ldi	r18, 0xCA	; 202
    4e06:	92 07       	cpc	r25, r18
    4e08:	2a e9       	ldi	r18, 0x9A	; 154
    4e0a:	a2 07       	cpc	r26, r18
    4e0c:	2b e3       	ldi	r18, 0x3B	; 59
    4e0e:	b2 07       	cpc	r27, r18
    4e10:	08 f7       	brcc	.-62     	; 0x4dd4 <nrk_time_get+0x6a>
    4e12:	df 91       	pop	r29
    4e14:	cf 91       	pop	r28
    4e16:	1f 91       	pop	r17
    4e18:	0f 91       	pop	r16
    4e1a:	ff 90       	pop	r15
    4e1c:	ef 90       	pop	r14
    4e1e:	08 95       	ret

00004e20 <nrk_idle_task>:
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
    4e20:	0e 94 b0 1d 	call	0x3b60	; 0x3b60 <nrk_stack_check>
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    4e24:	0e 94 97 2a 	call	0x552e	; 0x552e <_nrk_get_next_wakeup>
    4e28:	8b 30       	cpi	r24, 0x0B	; 11
    4e2a:	30 f4       	brcc	.+12     	; 0x4e38 <nrk_idle_task+0x18>
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

    4e2c:	81 e0       	ldi	r24, 0x01	; 1
    4e2e:	80 93 71 06 	sts	0x0671, r24
} // halRfWaitForCrystalOscillator
    4e32:	0e 94 cc 2d 	call	0x5b98	; 0x5b98 <nrk_idle>
    4e36:	09 c0       	rjmp	.+18     	; 0x4e4a <nrk_idle_task+0x2a>

    4e38:	8a e0       	ldi	r24, 0x0A	; 10
    4e3a:	90 e0       	ldi	r25, 0x00	; 0
    4e3c:	0e 94 45 2a 	call	0x548a	; 0x548a <nrk_spin_wait_us>
    4e40:	82 e0       	ldi	r24, 0x02	; 2
    4e42:	80 93 71 06 	sts	0x0671, r24
    4e46:	0e 94 c0 2d 	call	0x5b80	; 0x5b80 <nrk_sleep>
    4e4a:	80 91 19 05 	lds	r24, 0x0519
    4e4e:	85 35       	cpi	r24, 0x55	; 85
    4e50:	19 f0       	breq	.+6      	; 0x4e58 <nrk_idle_task+0x38>
    4e52:	88 e0       	ldi	r24, 0x08	; 8
    4e54:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <nrk_error_add>
    4e58:	80 91 7e 21 	lds	r24, 0x217E
    4e5c:	85 35       	cpi	r24, 0x55	; 85
    4e5e:	01 f3       	breq	.-64     	; 0x4e20 <nrk_idle_task>
    4e60:	88 e0       	ldi	r24, 0x08	; 8
    4e62:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <nrk_error_add>
    4e66:	dc cf       	rjmp	.-72     	; 0x4e20 <nrk_idle_task>

00004e68 <_nrk_scheduler>:
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

} // halRfWaitForCrystalOscillator
    4e68:	8f 92       	push	r8
    4e6a:	9f 92       	push	r9
    4e6c:	af 92       	push	r10
    4e6e:	bf 92       	push	r11
    4e70:	cf 92       	push	r12
    4e72:	df 92       	push	r13
    4e74:	ef 92       	push	r14
    4e76:	ff 92       	push	r15
    4e78:	0f 93       	push	r16
    4e7a:	1f 93       	push	r17
    4e7c:	cf 93       	push	r28
    4e7e:	df 93       	push	r29

    4e80:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <nrk_int_disable>
    4e84:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <_nrk_high_speed_timer_reset>
    4e88:	0e 94 5b 2a 	call	0x54b6	; 0x54b6 <_nrk_high_speed_timer_get>
    4e8c:	4c 01       	movw	r8, r24
    4e8e:	8a ef       	ldi	r24, 0xFA	; 250
    4e90:	0e 94 9c 2a 	call	0x5538	; 0x5538 <_nrk_set_next_wakeup>
    4e94:	60 91 ac 05 	lds	r22, 0x05AC
    4e98:	77 27       	eor	r23, r23
    4e9a:	88 27       	eor	r24, r24
    4e9c:	99 27       	eor	r25, r25
    4e9e:	23 eb       	ldi	r18, 0xB3	; 179
    4ea0:	36 ee       	ldi	r19, 0xE6	; 230
    4ea2:	4e e0       	ldi	r20, 0x0E	; 14
    4ea4:	50 e0       	ldi	r21, 0x00	; 0
    4ea6:	0e 94 8d 32 	call	0x651a	; 0x651a <__mulsi3>
    4eaa:	7b 01       	movw	r14, r22
    4eac:	8c 01       	movw	r16, r24
    4eae:	80 91 78 06 	lds	r24, 0x0678
    4eb2:	90 91 79 06 	lds	r25, 0x0679
    4eb6:	a0 91 7a 06 	lds	r26, 0x067A
    4eba:	b0 91 7b 06 	lds	r27, 0x067B
    4ebe:	e8 0e       	add	r14, r24
    4ec0:	f9 1e       	adc	r15, r25
    4ec2:	0a 1f       	adc	r16, r26
    4ec4:	1b 1f       	adc	r17, r27
    4ec6:	c8 01       	movw	r24, r16
    4ec8:	b7 01       	movw	r22, r14
    4eca:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    4ece:	a8 01       	movw	r20, r16
    4ed0:	97 01       	movw	r18, r14
    4ed2:	26 1b       	sub	r18, r22
    4ed4:	37 0b       	sbc	r19, r23
    4ed6:	48 0b       	sbc	r20, r24
    4ed8:	59 0b       	sbc	r21, r25
    4eda:	80 91 74 06 	lds	r24, 0x0674
    4ede:	90 91 75 06 	lds	r25, 0x0675
    4ee2:	a0 91 76 06 	lds	r26, 0x0676
    4ee6:	b0 91 77 06 	lds	r27, 0x0677
    4eea:	1b c0       	rjmp	.+54     	; 0x4f22 <_nrk_scheduler+0xba>
    4eec:	e1 2c       	mov	r14, r1
    4eee:	66 e3       	ldi	r22, 0x36	; 54
    4ef0:	f6 2e       	mov	r15, r22
    4ef2:	65 e6       	ldi	r22, 0x65	; 101
    4ef4:	06 2f       	mov	r16, r22
    4ef6:	64 ec       	ldi	r22, 0xC4	; 196
    4ef8:	16 2f       	mov	r17, r22
    4efa:	e2 0e       	add	r14, r18
    4efc:	f3 1e       	adc	r15, r19
    4efe:	04 1f       	adc	r16, r20
    4f00:	15 1f       	adc	r17, r21
    4f02:	c8 01       	movw	r24, r16
    4f04:	b7 01       	movw	r22, r14
    4f06:	23 eb       	ldi	r18, 0xB3	; 179
    4f08:	36 ee       	ldi	r19, 0xE6	; 230
    4f0a:	4e e0       	ldi	r20, 0x0E	; 14
    4f0c:	50 e0       	ldi	r21, 0x00	; 0
    4f0e:	0e 94 d3 32 	call	0x65a6	; 0x65a6 <__udivmodsi4>
    4f12:	a8 01       	movw	r20, r16
    4f14:	97 01       	movw	r18, r14
    4f16:	26 1b       	sub	r18, r22
    4f18:	37 0b       	sbc	r19, r23
    4f1a:	48 0b       	sbc	r20, r24
    4f1c:	59 0b       	sbc	r21, r25
    4f1e:	d6 01       	movw	r26, r12
    4f20:	c5 01       	movw	r24, r10
    4f22:	5c 01       	movw	r10, r24
    4f24:	6d 01       	movw	r12, r26
    4f26:	08 94       	sec
    4f28:	a1 1c       	adc	r10, r1
    4f2a:	b1 1c       	adc	r11, r1
    4f2c:	c1 1c       	adc	r12, r1
    4f2e:	d1 1c       	adc	r13, r1
    4f30:	20 30       	cpi	r18, 0x00	; 0
    4f32:	6a ec       	ldi	r22, 0xCA	; 202
    4f34:	36 07       	cpc	r19, r22
    4f36:	6a e9       	ldi	r22, 0x9A	; 154
    4f38:	46 07       	cpc	r20, r22
    4f3a:	6b e3       	ldi	r22, 0x3B	; 59
    4f3c:	56 07       	cpc	r21, r22
    4f3e:	b0 f6       	brcc	.-84     	; 0x4eec <_nrk_scheduler+0x84>
    4f40:	80 93 74 06 	sts	0x0674, r24
    4f44:	90 93 75 06 	sts	0x0675, r25
    4f48:	a0 93 76 06 	sts	0x0676, r26
    4f4c:	b0 93 77 06 	sts	0x0677, r27
    4f50:	20 93 78 06 	sts	0x0678, r18
    4f54:	30 93 79 06 	sts	0x0679, r19
    4f58:	40 93 7a 06 	sts	0x067A, r20
    4f5c:	50 93 7b 06 	sts	0x067B, r21
    4f60:	e0 91 7d 06 	lds	r30, 0x067D
    4f64:	f0 91 7e 06 	lds	r31, 0x067E
    4f68:	85 81       	ldd	r24, Z+5	; 0x05
    4f6a:	88 23       	and	r24, r24
    4f6c:	19 f1       	breq	.+70     	; 0x4fb4 <_nrk_scheduler+0x14c>
    4f6e:	81 85       	ldd	r24, Z+9	; 0x09
    4f70:	84 30       	cpi	r24, 0x04	; 4
    4f72:	01 f1       	breq	.+64     	; 0x4fb4 <_nrk_scheduler+0x14c>
    4f74:	87 81       	ldd	r24, Z+7	; 0x07
    4f76:	82 30       	cpi	r24, 0x02	; 2
    4f78:	29 f0       	breq	.+10     	; 0x4f84 <_nrk_scheduler+0x11c>
    4f7a:	88 23       	and	r24, r24
    4f7c:	41 f0       	breq	.+16     	; 0x4f8e <_nrk_scheduler+0x126>
    4f7e:	86 81       	ldd	r24, Z+6	; 0x06
    4f80:	88 23       	and	r24, r24
    4f82:	11 f4       	brne	.+4      	; 0x4f88 <_nrk_scheduler+0x120>
    4f84:	85 e0       	ldi	r24, 0x05	; 5
    4f86:	01 c0       	rjmp	.+2      	; 0x4f8a <_nrk_scheduler+0x122>
    4f88:	83 e0       	ldi	r24, 0x03	; 3
    4f8a:	81 87       	std	Z+9, r24	; 0x09
    4f8c:	0c c0       	rjmp	.+24     	; 0x4fa6 <_nrk_scheduler+0x13e>
    4f8e:	83 e0       	ldi	r24, 0x03	; 3
    4f90:	81 87       	std	Z+9, r24	; 0x09
    4f92:	e0 91 7d 06 	lds	r30, 0x067D
    4f96:	f0 91 7e 06 	lds	r31, 0x067E
    4f9a:	17 82       	std	Z+7, r1	; 0x07
    4f9c:	e0 91 7d 06 	lds	r30, 0x067D
    4fa0:	f0 91 7e 06 	lds	r31, 0x067E
    4fa4:	16 82       	std	Z+6, r1	; 0x06
    4fa6:	e0 91 7d 06 	lds	r30, 0x067D
    4faa:	f0 91 7e 06 	lds	r31, 0x067E
    4fae:	80 85       	ldd	r24, Z+8	; 0x08
    4fb0:	0e 94 8a 21 	call	0x4314	; 0x4314 <nrk_rem_from_readyQ>
    4fb4:	e0 91 7d 06 	lds	r30, 0x067D
    4fb8:	f0 91 7e 06 	lds	r31, 0x067E
    4fbc:	85 8d       	ldd	r24, Z+29	; 0x1d
    4fbe:	96 8d       	ldd	r25, Z+30	; 0x1e
    4fc0:	89 2b       	or	r24, r25
    4fc2:	91 f1       	breq	.+100    	; 0x5028 <_nrk_scheduler+0x1c0>
    4fc4:	60 85       	ldd	r22, Z+8	; 0x08
    4fc6:	66 23       	and	r22, r22
    4fc8:	79 f1       	breq	.+94     	; 0x5028 <_nrk_scheduler+0x1c0>
    4fca:	81 85       	ldd	r24, Z+9	; 0x09
    4fcc:	84 30       	cpi	r24, 0x04	; 4
    4fce:	61 f1       	breq	.+88     	; 0x5028 <_nrk_scheduler+0x1c0>
    4fd0:	21 8d       	ldd	r18, Z+25	; 0x19
    4fd2:	32 8d       	ldd	r19, Z+26	; 0x1a
    4fd4:	80 91 ac 05 	lds	r24, 0x05AC
    4fd8:	99 27       	eor	r25, r25
    4fda:	28 17       	cp	r18, r24
    4fdc:	39 07       	cpc	r19, r25
    4fde:	50 f4       	brcc	.+20     	; 0x4ff4 <_nrk_scheduler+0x18c>
    4fe0:	82 e0       	ldi	r24, 0x02	; 2
    4fe2:	0e 94 cc 1c 	call	0x3998	; 0x3998 <nrk_kernel_error_add>
    4fe6:	e0 91 7d 06 	lds	r30, 0x067D
    4fea:	f0 91 7e 06 	lds	r31, 0x067E
    4fee:	12 8e       	std	Z+26, r1	; 0x1a
    4ff0:	11 8e       	std	Z+25, r1	; 0x19
    4ff2:	04 c0       	rjmp	.+8      	; 0x4ffc <_nrk_scheduler+0x194>
    4ff4:	28 1b       	sub	r18, r24
    4ff6:	39 0b       	sbc	r19, r25
    4ff8:	32 8f       	std	Z+26, r19	; 0x1a
    4ffa:	21 8f       	std	Z+25, r18	; 0x19
    4ffc:	e0 91 7d 06 	lds	r30, 0x067D
    5000:	f0 91 7e 06 	lds	r31, 0x067E
    5004:	10 85       	ldd	r17, Z+8	; 0x08
    5006:	81 8d       	ldd	r24, Z+25	; 0x19
    5008:	92 8d       	ldd	r25, Z+26	; 0x1a
    500a:	89 2b       	or	r24, r25
    500c:	69 f4       	brne	.+26     	; 0x5028 <_nrk_scheduler+0x1c0>
    500e:	61 2f       	mov	r22, r17
    5010:	83 e0       	ldi	r24, 0x03	; 3
    5012:	0e 94 cc 1c 	call	0x3998	; 0x3998 <nrk_kernel_error_add>
    5016:	e0 91 7d 06 	lds	r30, 0x067D
    501a:	f0 91 7e 06 	lds	r31, 0x067E
    501e:	83 e0       	ldi	r24, 0x03	; 3
    5020:	81 87       	std	Z+9, r24	; 0x09
    5022:	81 2f       	mov	r24, r17
    5024:	0e 94 8a 21 	call	0x4314	; 0x4314 <nrk_rem_from_readyQ>
    5028:	c0 ee       	ldi	r28, 0xE0	; 224
    502a:	d5 e0       	ldi	r29, 0x05	; 5
    502c:	00 e6       	ldi	r16, 0x60	; 96
    502e:	1a ee       	ldi	r17, 0xEA	; 234
    5030:	cc 24       	eor	r12, r12
    5032:	dd 24       	eor	r13, r13
    5034:	4c 2d       	mov	r20, r12
    5036:	88 85       	ldd	r24, Y+8	; 0x08
    5038:	8f 3f       	cpi	r24, 0xFF	; 255
    503a:	09 f4       	brne	.+2      	; 0x503e <_nrk_scheduler+0x1d6>
    503c:	89 c0       	rjmp	.+274    	; 0x5150 <_nrk_scheduler+0x2e8>
    503e:	1d 82       	std	Y+5, r1	; 0x05
    5040:	88 23       	and	r24, r24
    5042:	91 f1       	breq	.+100    	; 0x50a8 <_nrk_scheduler+0x240>
    5044:	89 85       	ldd	r24, Y+9	; 0x09
    5046:	84 30       	cpi	r24, 0x04	; 4
    5048:	79 f1       	breq	.+94     	; 0x50a8 <_nrk_scheduler+0x240>
    504a:	2d 89       	ldd	r18, Y+21	; 0x15
    504c:	3e 89       	ldd	r19, Y+22	; 0x16
    504e:	80 91 ac 05 	lds	r24, 0x05AC
    5052:	99 27       	eor	r25, r25
    5054:	28 17       	cp	r18, r24
    5056:	39 07       	cpc	r19, r25
    5058:	28 f0       	brcs	.+10     	; 0x5064 <_nrk_scheduler+0x1fc>
    505a:	28 1b       	sub	r18, r24
    505c:	39 0b       	sbc	r19, r25
    505e:	3e 8b       	std	Y+22, r19	; 0x16
    5060:	2d 8b       	std	Y+21, r18	; 0x15
    5062:	02 c0       	rjmp	.+4      	; 0x5068 <_nrk_scheduler+0x200>
    5064:	1e 8a       	std	Y+22, r1	; 0x16
    5066:	1d 8a       	std	Y+21, r1	; 0x15
    5068:	2f 89       	ldd	r18, Y+23	; 0x17
    506a:	38 8d       	ldd	r19, Y+24	; 0x18
    506c:	28 17       	cp	r18, r24
    506e:	39 07       	cpc	r19, r25
    5070:	28 f0       	brcs	.+10     	; 0x507c <_nrk_scheduler+0x214>
    5072:	28 1b       	sub	r18, r24
    5074:	39 0b       	sbc	r19, r25
    5076:	38 8f       	std	Y+24, r19	; 0x18
    5078:	2f 8b       	std	Y+23, r18	; 0x17
    507a:	0e c0       	rjmp	.+28     	; 0x5098 <_nrk_scheduler+0x230>
    507c:	6b 8d       	ldd	r22, Y+27	; 0x1b
    507e:	7c 8d       	ldd	r23, Y+28	; 0x1c
    5080:	86 17       	cp	r24, r22
    5082:	97 07       	cpc	r25, r23
    5084:	28 f4       	brcc	.+10     	; 0x5090 <_nrk_scheduler+0x228>
    5086:	68 1b       	sub	r22, r24
    5088:	79 0b       	sbc	r23, r25
    508a:	78 8f       	std	Y+24, r23	; 0x18
    508c:	6f 8b       	std	Y+23, r22	; 0x17
    508e:	04 c0       	rjmp	.+8      	; 0x5098 <_nrk_scheduler+0x230>
    5090:	0e 94 ac 32 	call	0x6558	; 0x6558 <__udivmodhi4>
    5094:	98 8f       	std	Y+24, r25	; 0x18
    5096:	8f 8b       	std	Y+23, r24	; 0x17
    5098:	8f 89       	ldd	r24, Y+23	; 0x17
    509a:	98 8d       	ldd	r25, Y+24	; 0x18
    509c:	89 2b       	or	r24, r25
    509e:	21 f4       	brne	.+8      	; 0x50a8 <_nrk_scheduler+0x240>
    50a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    50a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    50a4:	98 8f       	std	Y+24, r25	; 0x18
    50a6:	8f 8b       	std	Y+23, r24	; 0x17
    50a8:	89 85       	ldd	r24, Y+9	; 0x09
    50aa:	83 30       	cpi	r24, 0x03	; 3
    50ac:	09 f0       	breq	.+2      	; 0x50b0 <_nrk_scheduler+0x248>
    50ae:	50 c0       	rjmp	.+160    	; 0x5150 <_nrk_scheduler+0x2e8>
    50b0:	8d 89       	ldd	r24, Y+21	; 0x15
    50b2:	9e 89       	ldd	r25, Y+22	; 0x16
    50b4:	89 2b       	or	r24, r25
    50b6:	09 f0       	breq	.+2      	; 0x50ba <_nrk_scheduler+0x252>
    50b8:	43 c0       	rjmp	.+134    	; 0x5140 <_nrk_scheduler+0x2d8>
    50ba:	8f 81       	ldd	r24, Y+7	; 0x07
    50bc:	88 23       	and	r24, r24
    50be:	a1 f0       	breq	.+40     	; 0x50e8 <_nrk_scheduler+0x280>
    50c0:	8e 81       	ldd	r24, Y+6	; 0x06
    50c2:	88 23       	and	r24, r24
    50c4:	89 f0       	breq	.+34     	; 0x50e8 <_nrk_scheduler+0x280>
    50c6:	81 e0       	ldi	r24, 0x01	; 1
    50c8:	90 e0       	ldi	r25, 0x00	; 0
    50ca:	a0 e0       	ldi	r26, 0x00	; 0
    50cc:	b0 e0       	ldi	r27, 0x00	; 0
    50ce:	00 90 6d 06 	lds	r0, 0x066D
    50d2:	04 c0       	rjmp	.+8      	; 0x50dc <_nrk_scheduler+0x274>
    50d4:	88 0f       	add	r24, r24
    50d6:	99 1f       	adc	r25, r25
    50d8:	aa 1f       	adc	r26, r26
    50da:	bb 1f       	adc	r27, r27
    50dc:	0a 94       	dec	r0
    50de:	d2 f7       	brpl	.-12     	; 0x50d4 <_nrk_scheduler+0x26c>
    50e0:	89 8b       	std	Y+17, r24	; 0x11
    50e2:	9a 8b       	std	Y+18, r25	; 0x12
    50e4:	ab 8b       	std	Y+19, r26	; 0x13
    50e6:	bc 8b       	std	Y+20, r27	; 0x14
    50e8:	1f 82       	std	Y+7, r1	; 0x07
    50ea:	1e 82       	std	Y+6, r1	; 0x06
    50ec:	1d 82       	std	Y+5, r1	; 0x05
    50ee:	2f 8d       	ldd	r18, Y+31	; 0x1f
    50f0:	38 a1       	ldd	r19, Y+32	; 0x20
    50f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    50f6:	21 30       	cpi	r18, 0x01	; 1
    50f8:	31 05       	cpc	r19, r1
    50fa:	61 f4       	brne	.+24     	; 0x5114 <_nrk_scheduler+0x2ac>
    50fc:	9a 8f       	std	Y+26, r25	; 0x1a
    50fe:	89 8f       	std	Y+25, r24	; 0x19
    5100:	82 e0       	ldi	r24, 0x02	; 2
    5102:	89 87       	std	Y+9, r24	; 0x09
    5104:	8f 89       	ldd	r24, Y+23	; 0x17
    5106:	98 8d       	ldd	r25, Y+24	; 0x18
    5108:	9e 8b       	std	Y+22, r25	; 0x16
    510a:	8d 8b       	std	Y+21, r24	; 0x15
    510c:	84 2f       	mov	r24, r20
    510e:	0e 94 03 21 	call	0x4206	; 0x4206 <nrk_add_to_readyQ>
    5112:	16 c0       	rjmp	.+44     	; 0x5140 <_nrk_scheduler+0x2d8>
    5114:	9a 8f       	std	Y+26, r25	; 0x1a
    5116:	89 8f       	std	Y+25, r24	; 0x19
    5118:	21 50       	subi	r18, 0x01	; 1
    511a:	30 40       	sbci	r19, 0x00	; 0
    511c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    511e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5120:	ac 01       	movw	r20, r24
    5122:	24 9f       	mul	r18, r20
    5124:	c0 01       	movw	r24, r0
    5126:	25 9f       	mul	r18, r21
    5128:	90 0d       	add	r25, r0
    512a:	34 9f       	mul	r19, r20
    512c:	90 0d       	add	r25, r0
    512e:	11 24       	eor	r1, r1
    5130:	9e 8b       	std	Y+22, r25	; 0x16
    5132:	8d 8b       	std	Y+21, r24	; 0x15
    5134:	98 8f       	std	Y+24, r25	; 0x18
    5136:	8f 8b       	std	Y+23, r24	; 0x17
    5138:	81 e0       	ldi	r24, 0x01	; 1
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	98 a3       	std	Y+32, r25	; 0x20
    513e:	8f 8f       	std	Y+31, r24	; 0x1f
    5140:	8d 89       	ldd	r24, Y+21	; 0x15
    5142:	9e 89       	ldd	r25, Y+22	; 0x16
    5144:	00 97       	sbiw	r24, 0x00	; 0
    5146:	21 f0       	breq	.+8      	; 0x5150 <_nrk_scheduler+0x2e8>
    5148:	80 17       	cp	r24, r16
    514a:	91 07       	cpc	r25, r17
    514c:	08 f4       	brcc	.+2      	; 0x5150 <_nrk_scheduler+0x2e8>
    514e:	8c 01       	movw	r16, r24
    5150:	08 94       	sec
    5152:	c1 1c       	adc	r12, r1
    5154:	d1 1c       	adc	r13, r1
    5156:	a1 96       	adiw	r28, 0x21	; 33
    5158:	54 e0       	ldi	r21, 0x04	; 4
    515a:	c5 16       	cp	r12, r21
    515c:	d1 04       	cpc	r13, r1
    515e:	09 f0       	breq	.+2      	; 0x5162 <_nrk_scheduler+0x2fa>
    5160:	69 cf       	rjmp	.-302    	; 0x5034 <_nrk_scheduler+0x1cc>
    5162:	0e 94 f1 20 	call	0x41e2	; 0x41e2 <nrk_get_high_ready_task_ID>
    5166:	e8 2e       	mov	r14, r24
    5168:	99 27       	eor	r25, r25
    516a:	87 fd       	sbrc	r24, 7
    516c:	90 95       	com	r25
    516e:	fc 01       	movw	r30, r24
    5170:	25 e0       	ldi	r18, 0x05	; 5
    5172:	ee 0f       	add	r30, r30
    5174:	ff 1f       	adc	r31, r31
    5176:	2a 95       	dec	r18
    5178:	e1 f7       	brne	.-8      	; 0x5172 <_nrk_scheduler+0x30a>
    517a:	e8 0f       	add	r30, r24
    517c:	f9 1f       	adc	r31, r25
    517e:	e0 52       	subi	r30, 0x20	; 32
    5180:	fa 4f       	sbci	r31, 0xFA	; 250
    5182:	42 85       	ldd	r20, Z+10	; 0x0a
    5184:	40 93 7f 06 	sts	0x067F, r20
    5188:	81 e2       	ldi	r24, 0x21	; 33
    518a:	6e 2d       	mov	r22, r14
    518c:	68 02       	muls	r22, r24
    518e:	90 01       	movw	r18, r0
    5190:	11 24       	eor	r1, r1
    5192:	20 52       	subi	r18, 0x20	; 32
    5194:	3a 4f       	sbci	r19, 0xFA	; 250
    5196:	30 93 6f 06 	sts	0x066F, r19
    519a:	20 93 6e 06 	sts	0x066E, r18
    519e:	ee 20       	and	r14, r14
    51a0:	91 f0       	breq	.+36     	; 0x51c6 <_nrk_scheduler+0x35e>
    51a2:	85 8d       	ldd	r24, Z+29	; 0x1d
    51a4:	96 8d       	ldd	r25, Z+30	; 0x1e
    51a6:	89 2b       	or	r24, r25
    51a8:	51 f0       	breq	.+20     	; 0x51be <_nrk_scheduler+0x356>
    51aa:	81 8d       	ldd	r24, Z+25	; 0x19
    51ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    51ae:	8a 3f       	cpi	r24, 0xFA	; 250
    51b0:	91 05       	cpc	r25, r1
    51b2:	28 f4       	brcc	.+10     	; 0x51be <_nrk_scheduler+0x356>
    51b4:	80 17       	cp	r24, r16
    51b6:	91 07       	cpc	r25, r17
    51b8:	e0 f4       	brcc	.+56     	; 0x51f2 <_nrk_scheduler+0x38a>
    51ba:	8c 01       	movw	r16, r24
    51bc:	1a c0       	rjmp	.+52     	; 0x51f2 <_nrk_scheduler+0x38a>
    51be:	0b 3f       	cpi	r16, 0xFB	; 251
    51c0:	11 05       	cpc	r17, r1
    51c2:	b8 f0       	brcs	.+46     	; 0x51f2 <_nrk_scheduler+0x38a>
    51c4:	14 c0       	rjmp	.+40     	; 0x51ee <_nrk_scheduler+0x386>
    51c6:	0b 30       	cpi	r16, 0x0B	; 11
    51c8:	11 05       	cpc	r17, r1
    51ca:	98 f0       	brcs	.+38     	; 0x51f2 <_nrk_scheduler+0x38a>
    51cc:	c8 01       	movw	r24, r16
    51ce:	0a 97       	sbiw	r24, 0x0a	; 10
    51d0:	8a 3f       	cpi	r24, 0xFA	; 250
    51d2:	91 05       	cpc	r25, r1
    51d4:	30 f4       	brcc	.+12     	; 0x51e2 <_nrk_scheduler+0x37a>
    51d6:	8c 01       	movw	r16, r24
    51d8:	09 97       	sbiw	r24, 0x09	; 9
    51da:	58 f4       	brcc	.+22     	; 0x51f2 <_nrk_scheduler+0x38a>
    51dc:	09 e0       	ldi	r16, 0x09	; 9
    51de:	10 e0       	ldi	r17, 0x00	; 0
    51e0:	08 c0       	rjmp	.+16     	; 0x51f2 <_nrk_scheduler+0x38a>
    51e2:	05 50       	subi	r16, 0x05	; 5
    51e4:	11 40       	sbci	r17, 0x01	; 1
    51e6:	18 f4       	brcc	.+6      	; 0x51ee <_nrk_scheduler+0x386>
    51e8:	00 ef       	ldi	r16, 0xF0	; 240
    51ea:	10 e0       	ldi	r17, 0x00	; 0
    51ec:	02 c0       	rjmp	.+4      	; 0x51f2 <_nrk_scheduler+0x38a>
    51ee:	0a ef       	ldi	r16, 0xFA	; 250
    51f0:	10 e0       	ldi	r17, 0x00	; 0
    51f2:	40 93 70 06 	sts	0x0670, r20
    51f6:	30 93 7e 06 	sts	0x067E, r19
    51fa:	20 93 7d 06 	sts	0x067D, r18
    51fe:	00 93 ac 05 	sts	0x05AC, r16
    5202:	0e 94 0b 2b 	call	0x5616	; 0x5616 <_nrk_os_timer_get>
    5206:	99 27       	eor	r25, r25
    5208:	80 17       	cp	r24, r16
    520a:	91 07       	cpc	r25, r17
    520c:	40 f0       	brcs	.+16     	; 0x521e <_nrk_scheduler+0x3b6>
    520e:	0e 94 0b 2b 	call	0x5616	; 0x5616 <_nrk_os_timer_get>
    5212:	08 2f       	mov	r16, r24
    5214:	11 27       	eor	r17, r17
    5216:	0e 5f       	subi	r16, 0xFE	; 254
    5218:	1f 4f       	sbci	r17, 0xFF	; 255
    521a:	00 93 ac 05 	sts	0x05AC, r16
    521e:	ee 20       	and	r14, r14
    5220:	11 f0       	breq	.+4      	; 0x5226 <_nrk_scheduler+0x3be>
    5222:	10 92 71 06 	sts	0x0671, r1
    5226:	80 2f       	mov	r24, r16
    5228:	0e 94 9c 2a 	call	0x5538	; 0x5538 <_nrk_set_next_wakeup>
    522c:	6e ee       	ldi	r22, 0xEE	; 238
    522e:	72 e0       	ldi	r23, 0x02	; 2
    5230:	c4 01       	movw	r24, r8
    5232:	0e 94 90 2b 	call	0x5720	; 0x5720 <nrk_high_speed_timer_wait>
    5236:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <nrk_stack_pointer_restore>
    523a:	0e 94 57 2e 	call	0x5cae	; 0x5cae <nrk_start_high_ready_task>
    523e:	df 91       	pop	r29
    5240:	cf 91       	pop	r28
    5242:	1f 91       	pop	r17
    5244:	0f 91       	pop	r16
    5246:	ff 90       	pop	r15
    5248:	ef 90       	pop	r14
    524a:	df 90       	pop	r13
    524c:	cf 90       	pop	r12
    524e:	bf 90       	pop	r11
    5250:	af 90       	pop	r10
    5252:	9f 90       	pop	r9
    5254:	8f 90       	pop	r8
    5256:	08 95       	ret

00005258 <nrk_register_driver>:
    5258:	20 91 99 06 	lds	r18, 0x0699
    525c:	12 16       	cp	r1, r18
    525e:	1c f4       	brge	.+6      	; 0x5266 <nrk_register_driver+0xe>
    5260:	8f ef       	ldi	r24, 0xFF	; 255
    5262:	9f ef       	ldi	r25, 0xFF	; 255
    5264:	08 95       	ret
    5266:	e2 2f       	mov	r30, r18
    5268:	ff 27       	eor	r31, r31
    526a:	e7 fd       	sbrc	r30, 7
    526c:	f0 95       	com	r31
    526e:	ee 0f       	add	r30, r30
    5270:	ff 1f       	adc	r31, r31
    5272:	ee 0f       	add	r30, r30
    5274:	ff 1f       	adc	r31, r31
    5276:	df 01       	movw	r26, r30
    5278:	a6 56       	subi	r26, 0x66	; 102
    527a:	b9 4f       	sbci	r27, 0xF9	; 249
    527c:	6c 93       	st	X, r22
    527e:	e4 56       	subi	r30, 0x64	; 100
    5280:	f9 4f       	sbci	r31, 0xF9	; 249
    5282:	91 83       	std	Z+1, r25	; 0x01
    5284:	80 83       	st	Z, r24
    5286:	2f 5f       	subi	r18, 0xFF	; 255
    5288:	20 93 99 06 	sts	0x0699, r18
    528c:	81 e0       	ldi	r24, 0x01	; 1
    528e:	90 e0       	ldi	r25, 0x00	; 0
    5290:	08 95       	ret

00005292 <nrk_open>:
    5292:	0f 93       	push	r16
    5294:	1f 93       	push	r17
    5296:	cf 93       	push	r28
    5298:	df 93       	push	r29
    529a:	06 2f       	mov	r16, r22
    529c:	90 91 99 06 	lds	r25, 0x0699
    52a0:	a9 2f       	mov	r26, r25
    52a2:	bb 27       	eor	r27, r27
    52a4:	a7 fd       	sbrc	r26, 7
    52a6:	b0 95       	com	r27
    52a8:	40 e0       	ldi	r20, 0x00	; 0
    52aa:	50 e0       	ldi	r21, 0x00	; 0
    52ac:	68 2f       	mov	r22, r24
    52ae:	77 27       	eor	r23, r23
    52b0:	34 c0       	rjmp	.+104    	; 0x531a <nrk_open+0x88>
    52b2:	4f 5f       	subi	r20, 0xFF	; 255
    52b4:	5f 4f       	sbci	r21, 0xFF	; 255
    52b6:	e9 01       	movw	r28, r18
    52b8:	cc 0f       	add	r28, r28
    52ba:	dd 1f       	adc	r29, r29
    52bc:	cc 0f       	add	r28, r28
    52be:	dd 1f       	adc	r29, r29
    52c0:	fe 01       	movw	r30, r28
    52c2:	e6 56       	subi	r30, 0x66	; 102
    52c4:	f9 4f       	sbci	r31, 0xF9	; 249
    52c6:	80 81       	ld	r24, Z
    52c8:	99 27       	eor	r25, r25
    52ca:	87 fd       	sbrc	r24, 7
    52cc:	90 95       	com	r25
    52ce:	86 17       	cp	r24, r22
    52d0:	97 07       	cpc	r25, r23
    52d2:	19 f5       	brne	.+70     	; 0x531a <nrk_open+0x88>
    52d4:	f9 01       	movw	r30, r18
    52d6:	e2 56       	subi	r30, 0x62	; 98
    52d8:	f9 4f       	sbci	r31, 0xF9	; 249
    52da:	80 81       	ld	r24, Z
    52dc:	88 23       	and	r24, r24
    52de:	71 f4       	brne	.+28     	; 0x52fc <nrk_open+0x6a>
    52e0:	81 e0       	ldi	r24, 0x01	; 1
    52e2:	80 83       	st	Z, r24
    52e4:	fe 01       	movw	r30, r28
    52e6:	e4 56       	subi	r30, 0x64	; 100
    52e8:	f9 4f       	sbci	r31, 0xF9	; 249
    52ea:	01 90       	ld	r0, Z+
    52ec:	f0 81       	ld	r31, Z
    52ee:	e0 2d       	mov	r30, r0
    52f0:	20 e0       	ldi	r18, 0x00	; 0
    52f2:	40 e0       	ldi	r20, 0x00	; 0
    52f4:	50 e0       	ldi	r21, 0x00	; 0
    52f6:	60 2f       	mov	r22, r16
    52f8:	80 e0       	ldi	r24, 0x00	; 0
    52fa:	09 95       	icall
    52fc:	c4 56       	subi	r28, 0x64	; 100
    52fe:	d9 4f       	sbci	r29, 0xF9	; 249
    5300:	e8 81       	ld	r30, Y
    5302:	f9 81       	ldd	r31, Y+1	; 0x01
    5304:	20 e0       	ldi	r18, 0x00	; 0
    5306:	40 e0       	ldi	r20, 0x00	; 0
    5308:	50 e0       	ldi	r21, 0x00	; 0
    530a:	60 2f       	mov	r22, r16
    530c:	81 e0       	ldi	r24, 0x01	; 1
    530e:	09 95       	icall
    5310:	81 2f       	mov	r24, r17
    5312:	99 27       	eor	r25, r25
    5314:	87 fd       	sbrc	r24, 7
    5316:	90 95       	com	r25
    5318:	08 c0       	rjmp	.+16     	; 0x532a <nrk_open+0x98>
    531a:	14 2f       	mov	r17, r20
    531c:	24 2f       	mov	r18, r20
    531e:	33 27       	eor	r19, r19
    5320:	2a 17       	cp	r18, r26
    5322:	3b 07       	cpc	r19, r27
    5324:	34 f2       	brlt	.-116    	; 0x52b2 <nrk_open+0x20>
    5326:	8f ef       	ldi	r24, 0xFF	; 255
    5328:	9f ef       	ldi	r25, 0xFF	; 255
    532a:	df 91       	pop	r29
    532c:	cf 91       	pop	r28
    532e:	1f 91       	pop	r17
    5330:	0f 91       	pop	r16
    5332:	08 95       	ret

00005334 <nrk_get_status>:
    5334:	e8 2f       	mov	r30, r24
    5336:	ff 27       	eor	r31, r31
    5338:	80 91 99 06 	lds	r24, 0x0699
    533c:	99 27       	eor	r25, r25
    533e:	87 fd       	sbrc	r24, 7
    5340:	90 95       	com	r25
    5342:	8e 17       	cp	r24, r30
    5344:	9f 07       	cpc	r25, r31
    5346:	34 f4       	brge	.+12     	; 0x5354 <nrk_get_status+0x20>
    5348:	81 e0       	ldi	r24, 0x01	; 1
    534a:	0e 94 07 1c 	call	0x380e	; 0x380e <_nrk_errno_set>
    534e:	8f ef       	ldi	r24, 0xFF	; 255
    5350:	9f ef       	ldi	r25, 0xFF	; 255
    5352:	08 95       	ret
    5354:	ee 0f       	add	r30, r30
    5356:	ff 1f       	adc	r31, r31
    5358:	ee 0f       	add	r30, r30
    535a:	ff 1f       	adc	r31, r31
    535c:	e4 56       	subi	r30, 0x64	; 100
    535e:	f9 4f       	sbci	r31, 0xF9	; 249
    5360:	01 90       	ld	r0, Z+
    5362:	f0 81       	ld	r31, Z
    5364:	e0 2d       	mov	r30, r0
    5366:	20 e0       	ldi	r18, 0x00	; 0
    5368:	40 e0       	ldi	r20, 0x00	; 0
    536a:	50 e0       	ldi	r21, 0x00	; 0
    536c:	83 e0       	ldi	r24, 0x03	; 3
    536e:	09 95       	icall
    5370:	99 27       	eor	r25, r25
    5372:	87 fd       	sbrc	r24, 7
    5374:	90 95       	com	r25
    5376:	08 95       	ret

00005378 <nrk_set_status>:
    5378:	24 2f       	mov	r18, r20
    537a:	e8 2f       	mov	r30, r24
    537c:	ff 27       	eor	r31, r31
    537e:	80 91 99 06 	lds	r24, 0x0699
    5382:	99 27       	eor	r25, r25
    5384:	87 fd       	sbrc	r24, 7
    5386:	90 95       	com	r25
    5388:	8e 17       	cp	r24, r30
    538a:	9f 07       	cpc	r25, r31
    538c:	34 f4       	brge	.+12     	; 0x539a <nrk_set_status+0x22>
    538e:	81 e0       	ldi	r24, 0x01	; 1
    5390:	0e 94 07 1c 	call	0x380e	; 0x380e <_nrk_errno_set>
    5394:	8f ef       	ldi	r24, 0xFF	; 255
    5396:	9f ef       	ldi	r25, 0xFF	; 255
    5398:	08 95       	ret
    539a:	ee 0f       	add	r30, r30
    539c:	ff 1f       	adc	r31, r31
    539e:	ee 0f       	add	r30, r30
    53a0:	ff 1f       	adc	r31, r31
    53a2:	e4 56       	subi	r30, 0x64	; 100
    53a4:	f9 4f       	sbci	r31, 0xF9	; 249
    53a6:	01 90       	ld	r0, Z+
    53a8:	f0 81       	ld	r31, Z
    53aa:	e0 2d       	mov	r30, r0
    53ac:	40 e0       	ldi	r20, 0x00	; 0
    53ae:	50 e0       	ldi	r21, 0x00	; 0
    53b0:	84 e0       	ldi	r24, 0x04	; 4
    53b2:	09 95       	icall
    53b4:	99 27       	eor	r25, r25
    53b6:	87 fd       	sbrc	r24, 7
    53b8:	90 95       	com	r25
    53ba:	08 95       	ret

000053bc <nrk_read>:
    53bc:	24 2f       	mov	r18, r20
    53be:	e8 2f       	mov	r30, r24
    53c0:	ff 27       	eor	r31, r31
    53c2:	80 91 99 06 	lds	r24, 0x0699
    53c6:	99 27       	eor	r25, r25
    53c8:	87 fd       	sbrc	r24, 7
    53ca:	90 95       	com	r25
    53cc:	8e 17       	cp	r24, r30
    53ce:	9f 07       	cpc	r25, r31
    53d0:	34 f4       	brge	.+12     	; 0x53de <nrk_read+0x22>
    53d2:	81 e0       	ldi	r24, 0x01	; 1
    53d4:	0e 94 07 1c 	call	0x380e	; 0x380e <_nrk_errno_set>
    53d8:	8f ef       	ldi	r24, 0xFF	; 255
    53da:	9f ef       	ldi	r25, 0xFF	; 255
    53dc:	08 95       	ret
    53de:	ee 0f       	add	r30, r30
    53e0:	ff 1f       	adc	r31, r31
    53e2:	ee 0f       	add	r30, r30
    53e4:	ff 1f       	adc	r31, r31
    53e6:	e4 56       	subi	r30, 0x64	; 100
    53e8:	f9 4f       	sbci	r31, 0xF9	; 249
    53ea:	01 90       	ld	r0, Z+
    53ec:	f0 81       	ld	r31, Z
    53ee:	e0 2d       	mov	r30, r0
    53f0:	ab 01       	movw	r20, r22
    53f2:	60 e0       	ldi	r22, 0x00	; 0
    53f4:	85 e0       	ldi	r24, 0x05	; 5
    53f6:	09 95       	icall
    53f8:	99 27       	eor	r25, r25
    53fa:	87 fd       	sbrc	r24, 7
    53fc:	90 95       	com	r25
    53fe:	08 95       	ret

00005400 <nrk_write>:
    5400:	24 2f       	mov	r18, r20
    5402:	e8 2f       	mov	r30, r24
    5404:	ff 27       	eor	r31, r31
    5406:	80 91 99 06 	lds	r24, 0x0699
    540a:	99 27       	eor	r25, r25
    540c:	87 fd       	sbrc	r24, 7
    540e:	90 95       	com	r25
    5410:	8e 17       	cp	r24, r30
    5412:	9f 07       	cpc	r25, r31
    5414:	34 f4       	brge	.+12     	; 0x5422 <nrk_write+0x22>
    5416:	81 e0       	ldi	r24, 0x01	; 1
    5418:	0e 94 07 1c 	call	0x380e	; 0x380e <_nrk_errno_set>
    541c:	8f ef       	ldi	r24, 0xFF	; 255
    541e:	9f ef       	ldi	r25, 0xFF	; 255
    5420:	08 95       	ret
    5422:	ee 0f       	add	r30, r30
    5424:	ff 1f       	adc	r31, r31
    5426:	ee 0f       	add	r30, r30
    5428:	ff 1f       	adc	r31, r31
    542a:	e4 56       	subi	r30, 0x64	; 100
    542c:	f9 4f       	sbci	r31, 0xF9	; 249
    542e:	01 90       	ld	r0, Z+
    5430:	f0 81       	ld	r31, Z
    5432:	e0 2d       	mov	r30, r0
    5434:	ab 01       	movw	r20, r22
    5436:	60 e0       	ldi	r22, 0x00	; 0
    5438:	86 e0       	ldi	r24, 0x06	; 6
    543a:	09 95       	icall
    543c:	99 27       	eor	r25, r25
    543e:	87 fd       	sbrc	r24, 7
    5440:	90 95       	com	r25
    5442:	08 95       	ret

00005444 <nrk_close>:
    5444:	e8 2f       	mov	r30, r24
    5446:	ff 27       	eor	r31, r31
    5448:	80 91 99 06 	lds	r24, 0x0699
    544c:	99 27       	eor	r25, r25
    544e:	87 fd       	sbrc	r24, 7
    5450:	90 95       	com	r25
    5452:	8e 17       	cp	r24, r30
    5454:	9f 07       	cpc	r25, r31
    5456:	34 f4       	brge	.+12     	; 0x5464 <nrk_close+0x20>
    5458:	81 e0       	ldi	r24, 0x01	; 1
    545a:	0e 94 07 1c 	call	0x380e	; 0x380e <_nrk_errno_set>
    545e:	8f ef       	ldi	r24, 0xFF	; 255
    5460:	9f ef       	ldi	r25, 0xFF	; 255
    5462:	08 95       	ret
    5464:	ee 0f       	add	r30, r30
    5466:	ff 1f       	adc	r31, r31
    5468:	ee 0f       	add	r30, r30
    546a:	ff 1f       	adc	r31, r31
    546c:	e4 56       	subi	r30, 0x64	; 100
    546e:	f9 4f       	sbci	r31, 0xF9	; 249
    5470:	01 90       	ld	r0, Z+
    5472:	f0 81       	ld	r31, Z
    5474:	e0 2d       	mov	r30, r0
    5476:	20 e0       	ldi	r18, 0x00	; 0
    5478:	40 e0       	ldi	r20, 0x00	; 0
    547a:	50 e0       	ldi	r21, 0x00	; 0
    547c:	60 e0       	ldi	r22, 0x00	; 0
    547e:	82 e0       	ldi	r24, 0x02	; 2
    5480:	09 95       	icall
    5482:	99 27       	eor	r25, r25
    5484:	87 fd       	sbrc	r24, 7
    5486:	90 95       	com	r25
    5488:	08 95       	ret

0000548a <nrk_spin_wait_us>:
	...
//      returns.
//-------------------------------------------------------------------------------------------------------
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    5492:	01 97       	sbiw	r24, 0x01	; 1
    5494:	d1 f7       	brne	.-12     	; 0x548a <nrk_spin_wait_us>
    5496:	08 95       	ret

00005498 <_nrk_high_speed_timer_stop>:
    5498:	10 92 81 00 	sts	0x0081, r1
    549c:	08 95       	ret

0000549e <_nrk_high_speed_timer_start>:
    549e:	81 e0       	ldi	r24, 0x01	; 1
    54a0:	80 93 81 00 	sts	0x0081, r24
    54a4:	08 95       	ret

000054a6 <_nrk_high_speed_timer_reset>:
    54a6:	83 b5       	in	r24, 0x23	; 35
    54a8:	81 60       	ori	r24, 0x01	; 1
    54aa:	83 bd       	out	0x23, r24	; 35
    54ac:	10 92 85 00 	sts	0x0085, r1
    54b0:	10 92 84 00 	sts	0x0084, r1
    54b4:	08 95       	ret

000054b6 <_nrk_high_speed_timer_get>:
    54b6:	cf 93       	push	r28
    54b8:	df 93       	push	r29
    54ba:	cd b7       	in	r28, 0x3d	; 61
    54bc:	de b7       	in	r29, 0x3e	; 62
    54be:	22 97       	sbiw	r28, 0x02	; 2
    54c0:	0f b6       	in	r0, 0x3f	; 63
    54c2:	f8 94       	cli
    54c4:	de bf       	out	0x3e, r29	; 62
    54c6:	0f be       	out	0x3f, r0	; 63
    54c8:	cd bf       	out	0x3d, r28	; 61
    54ca:	80 91 84 00 	lds	r24, 0x0084
    54ce:	90 91 85 00 	lds	r25, 0x0085
    54d2:	9a 83       	std	Y+2, r25	; 0x02
    54d4:	89 83       	std	Y+1, r24	; 0x01
    54d6:	89 81       	ldd	r24, Y+1	; 0x01
    54d8:	9a 81       	ldd	r25, Y+2	; 0x02
    54da:	22 96       	adiw	r28, 0x02	; 2
    54dc:	0f b6       	in	r0, 0x3f	; 63
    54de:	f8 94       	cli
    54e0:	de bf       	out	0x3e, r29	; 62
    54e2:	0f be       	out	0x3f, r0	; 63
    54e4:	cd bf       	out	0x3d, r28	; 61
    54e6:	df 91       	pop	r29
    54e8:	cf 91       	pop	r28
    54ea:	08 95       	ret

000054ec <_nrk_os_timer_stop>:
    54ec:	10 92 b1 00 	sts	0x00B1, r1
    54f0:	e0 e7       	ldi	r30, 0x70	; 112
    54f2:	f0 e0       	ldi	r31, 0x00	; 0
    54f4:	80 81       	ld	r24, Z
    54f6:	8d 7f       	andi	r24, 0xFD	; 253
    54f8:	80 83       	st	Z, r24
    54fa:	80 81       	ld	r24, Z
    54fc:	8e 7f       	andi	r24, 0xFE	; 254
    54fe:	80 83       	st	Z, r24
    5500:	08 95       	ret

00005502 <_nrk_os_timer_set>:
    5502:	80 93 b2 00 	sts	0x00B2, r24
    5506:	08 95       	ret

00005508 <_nrk_os_timer_start>:
    5508:	e0 e7       	ldi	r30, 0x70	; 112
    550a:	f0 e0       	ldi	r31, 0x00	; 0
    550c:	80 81       	ld	r24, Z
    550e:	83 60       	ori	r24, 0x03	; 3
    5510:	80 83       	st	Z, r24
    5512:	83 e0       	ldi	r24, 0x03	; 3
    5514:	80 93 b1 00 	sts	0x00B1, r24
    5518:	08 95       	ret

0000551a <_nrk_os_timer_reset>:
    551a:	83 b5       	in	r24, 0x23	; 35
    551c:	82 60       	ori	r24, 0x02	; 2
    551e:	83 bd       	out	0x23, r24	; 35
    5520:	10 92 b2 00 	sts	0x00B2, r1
    5524:	10 92 a0 05 	sts	0x05A0, r1
    5528:	10 92 ac 05 	sts	0x05AC, r1
    552c:	08 95       	ret

0000552e <_nrk_get_next_wakeup>:
    552e:	80 91 b3 00 	lds	r24, 0x00B3
    5532:	8f 5f       	subi	r24, 0xFF	; 255
    5534:	99 27       	eor	r25, r25
    5536:	08 95       	ret

00005538 <_nrk_set_next_wakeup>:
    5538:	81 50       	subi	r24, 0x01	; 1
    553a:	80 93 b3 00 	sts	0x00B3, r24
    553e:	08 95       	ret

00005540 <nrk_timer_int_stop>:
    5540:	88 23       	and	r24, r24
    5542:	11 f4       	brne	.+4      	; 0x5548 <nrk_timer_int_stop+0x8>
    5544:	10 92 71 00 	sts	0x0071, r1
    5548:	8f ef       	ldi	r24, 0xFF	; 255
    554a:	9f ef       	ldi	r25, 0xFF	; 255
    554c:	08 95       	ret

0000554e <nrk_timer_int_reset>:
    554e:	88 23       	and	r24, r24
    5550:	19 f0       	breq	.+6      	; 0x5558 <nrk_timer_int_reset+0xa>
    5552:	8f ef       	ldi	r24, 0xFF	; 255
    5554:	9f ef       	ldi	r25, 0xFF	; 255
    5556:	08 95       	ret
    5558:	10 92 95 00 	sts	0x0095, r1
    555c:	10 92 94 00 	sts	0x0094, r1
    5560:	81 e0       	ldi	r24, 0x01	; 1
    5562:	90 e0       	ldi	r25, 0x00	; 0
    5564:	08 95       	ret

00005566 <nrk_timer_int_read>:
    5566:	88 23       	and	r24, r24
    5568:	19 f0       	breq	.+6      	; 0x5570 <nrk_timer_int_read+0xa>
    556a:	80 e0       	ldi	r24, 0x00	; 0
    556c:	90 e0       	ldi	r25, 0x00	; 0
    556e:	08 95       	ret
    5570:	80 91 94 00 	lds	r24, 0x0094
    5574:	90 91 95 00 	lds	r25, 0x0095
    5578:	08 95       	ret

0000557a <nrk_timer_int_start>:
    557a:	88 23       	and	r24, r24
    557c:	19 f0       	breq	.+6      	; 0x5584 <nrk_timer_int_start+0xa>
    557e:	8f ef       	ldi	r24, 0xFF	; 255
    5580:	9f ef       	ldi	r25, 0xFF	; 255
    5582:	08 95       	ret
    5584:	82 e0       	ldi	r24, 0x02	; 2
    5586:	80 93 71 00 	sts	0x0071, r24
    558a:	81 e0       	ldi	r24, 0x01	; 1
    558c:	90 e0       	ldi	r25, 0x00	; 0
    558e:	08 95       	ret

00005590 <nrk_timer_int_configure>:
    5590:	88 23       	and	r24, r24
    5592:	19 f0       	breq	.+6      	; 0x559a <nrk_timer_int_configure+0xa>
    5594:	8f ef       	ldi	r24, 0xFF	; 255
    5596:	9f ef       	ldi	r25, 0xFF	; 255
    5598:	08 95       	ret
    559a:	cb 01       	movw	r24, r22
    559c:	01 97       	sbiw	r24, 0x01	; 1
    559e:	05 97       	sbiw	r24, 0x05	; 5
    55a0:	10 f4       	brcc	.+4      	; 0x55a6 <nrk_timer_int_configure+0x16>
    55a2:	60 93 aa 05 	sts	0x05AA, r22
    55a6:	10 92 90 00 	sts	0x0090, r1
    55aa:	88 e0       	ldi	r24, 0x08	; 8
    55ac:	80 93 91 00 	sts	0x0091, r24
    55b0:	85 2f       	mov	r24, r21
    55b2:	99 27       	eor	r25, r25
    55b4:	80 93 99 00 	sts	0x0099, r24
    55b8:	40 93 98 00 	sts	0x0098, r20
    55bc:	30 93 9c 05 	sts	0x059C, r19
    55c0:	20 93 9b 05 	sts	0x059B, r18
    55c4:	80 91 aa 05 	lds	r24, 0x05AA
    55c8:	81 30       	cpi	r24, 0x01	; 1
    55ca:	21 f4       	brne	.+8      	; 0x55d4 <nrk_timer_int_configure+0x44>
    55cc:	80 91 91 00 	lds	r24, 0x0091
    55d0:	81 60       	ori	r24, 0x01	; 1
    55d2:	0b c0       	rjmp	.+22     	; 0x55ea <nrk_timer_int_configure+0x5a>
    55d4:	82 30       	cpi	r24, 0x02	; 2
    55d6:	21 f4       	brne	.+8      	; 0x55e0 <nrk_timer_int_configure+0x50>
    55d8:	80 91 91 00 	lds	r24, 0x0091
    55dc:	82 60       	ori	r24, 0x02	; 2
    55de:	05 c0       	rjmp	.+10     	; 0x55ea <nrk_timer_int_configure+0x5a>
    55e0:	83 30       	cpi	r24, 0x03	; 3
    55e2:	31 f4       	brne	.+12     	; 0x55f0 <nrk_timer_int_configure+0x60>
    55e4:	80 91 91 00 	lds	r24, 0x0091
    55e8:	83 60       	ori	r24, 0x03	; 3
    55ea:	80 93 91 00 	sts	0x0091, r24
    55ee:	08 c0       	rjmp	.+16     	; 0x5600 <nrk_timer_int_configure+0x70>
    55f0:	84 30       	cpi	r24, 0x04	; 4
    55f2:	21 f4       	brne	.+8      	; 0x55fc <nrk_timer_int_configure+0x6c>
    55f4:	80 91 91 00 	lds	r24, 0x0091
    55f8:	84 60       	ori	r24, 0x04	; 4
    55fa:	f7 cf       	rjmp	.-18     	; 0x55ea <nrk_timer_int_configure+0x5a>
    55fc:	85 30       	cpi	r24, 0x05	; 5
    55fe:	19 f0       	breq	.+6      	; 0x5606 <nrk_timer_int_configure+0x76>
    5600:	81 e0       	ldi	r24, 0x01	; 1
    5602:	90 e0       	ldi	r25, 0x00	; 0
    5604:	08 95       	ret
    5606:	80 91 91 00 	lds	r24, 0x0091
    560a:	85 60       	ori	r24, 0x05	; 5
    560c:	80 93 91 00 	sts	0x0091, r24
    5610:	81 e0       	ldi	r24, 0x01	; 1
    5612:	90 e0       	ldi	r25, 0x00	; 0
    5614:	08 95       	ret

00005616 <_nrk_os_timer_get>:
    5616:	80 91 b2 00 	lds	r24, 0x00B2
    561a:	99 27       	eor	r25, r25
    561c:	08 95       	ret

0000561e <__vector_13>:
    561e:	0f 92       	push	r0
    5620:	0f b6       	in	r0, 0x3f	; 63
    5622:	0f 92       	push	r0
    5624:	1f 92       	push	r1
    5626:	2f 92       	push	r2
    5628:	3f 92       	push	r3
    562a:	4f 92       	push	r4
    562c:	5f 92       	push	r5
    562e:	6f 92       	push	r6
    5630:	7f 92       	push	r7
    5632:	8f 92       	push	r8
    5634:	9f 92       	push	r9
    5636:	af 92       	push	r10
    5638:	bf 92       	push	r11
    563a:	cf 92       	push	r12
    563c:	df 92       	push	r13
    563e:	ef 92       	push	r14
    5640:	ff 92       	push	r15
    5642:	0f 93       	push	r16
    5644:	1f 93       	push	r17
    5646:	2f 93       	push	r18
    5648:	3f 93       	push	r19
    564a:	4f 93       	push	r20
    564c:	5f 93       	push	r21
    564e:	6f 93       	push	r22
    5650:	7f 93       	push	r23
    5652:	8f 93       	push	r24
    5654:	9f 93       	push	r25
    5656:	af 93       	push	r26
    5658:	bf 93       	push	r27
    565a:	cf 93       	push	r28
    565c:	df 93       	push	r29
    565e:	ef 93       	push	r30
    5660:	ff 93       	push	r31
    5662:	a0 91 7d 06 	lds	r26, 0x067D
    5666:	b0 91 7e 06 	lds	r27, 0x067E
    566a:	0d b6       	in	r0, 0x3d	; 61
    566c:	0d 92       	st	X+, r0
    566e:	0e b6       	in	r0, 0x3e	; 62
    5670:	0d 92       	st	X+, r0
    5672:	1f 92       	push	r1
    5674:	a0 91 f6 03 	lds	r26, 0x03F6
    5678:	b0 91 f7 03 	lds	r27, 0x03F7
    567c:	1e 90       	ld	r1, -X
    567e:	be bf       	out	0x3e, r27	; 62
    5680:	ad bf       	out	0x3d, r26	; 61
    5682:	08 95       	ret

00005684 <__vector_17>:
    5684:	1f 92       	push	r1
    5686:	0f 92       	push	r0
    5688:	0f b6       	in	r0, 0x3f	; 63
    568a:	0f 92       	push	r0
    568c:	11 24       	eor	r1, r1
    568e:	0f 90       	pop	r0
    5690:	0f be       	out	0x3f, r0	; 63
    5692:	0f 90       	pop	r0
    5694:	1f 90       	pop	r1
    5696:	18 95       	reti

00005698 <__vector_32>:
    5698:	1f 92       	push	r1
    569a:	0f 92       	push	r0
    569c:	0f b6       	in	r0, 0x3f	; 63
    569e:	0f 92       	push	r0
    56a0:	11 24       	eor	r1, r1
    56a2:	2f 93       	push	r18
    56a4:	3f 93       	push	r19
    56a6:	4f 93       	push	r20
    56a8:	5f 93       	push	r21
    56aa:	6f 93       	push	r22
    56ac:	7f 93       	push	r23
    56ae:	8f 93       	push	r24
    56b0:	9f 93       	push	r25
    56b2:	af 93       	push	r26
    56b4:	bf 93       	push	r27
    56b6:	ef 93       	push	r30
    56b8:	ff 93       	push	r31
    56ba:	e0 91 9b 05 	lds	r30, 0x059B
    56be:	f0 91 9c 05 	lds	r31, 0x059C
    56c2:	30 97       	sbiw	r30, 0x00	; 0
    56c4:	11 f0       	breq	.+4      	; 0x56ca <__vector_32+0x32>
    56c6:	09 95       	icall
    56c8:	04 c0       	rjmp	.+8      	; 0x56d2 <__vector_32+0x3a>
    56ca:	60 e0       	ldi	r22, 0x00	; 0
    56cc:	8a e0       	ldi	r24, 0x0A	; 10
    56ce:	0e 94 cc 1c 	call	0x3998	; 0x3998 <nrk_kernel_error_add>
    56d2:	ff 91       	pop	r31
    56d4:	ef 91       	pop	r30
    56d6:	bf 91       	pop	r27
    56d8:	af 91       	pop	r26
    56da:	9f 91       	pop	r25
    56dc:	8f 91       	pop	r24
    56de:	7f 91       	pop	r23
    56e0:	6f 91       	pop	r22
    56e2:	5f 91       	pop	r21
    56e4:	4f 91       	pop	r20
    56e6:	3f 91       	pop	r19
    56e8:	2f 91       	pop	r18
    56ea:	0f 90       	pop	r0
    56ec:	0f be       	out	0x3f, r0	; 63
    56ee:	0f 90       	pop	r0
    56f0:	1f 90       	pop	r1
    56f2:	18 95       	reti

000056f4 <__vector_default>:
    56f4:	1f 92       	push	r1
    56f6:	0f 92       	push	r0
    56f8:	0f b6       	in	r0, 0x3f	; 63
    56fa:	0f 92       	push	r0
    56fc:	11 24       	eor	r1, r1
    56fe:	2f 93       	push	r18
    5700:	3f 93       	push	r19
    5702:	4f 93       	push	r20
    5704:	5f 93       	push	r21
    5706:	6f 93       	push	r22
    5708:	7f 93       	push	r23
    570a:	8f 93       	push	r24
    570c:	9f 93       	push	r25
    570e:	af 93       	push	r26
    5710:	bf 93       	push	r27
    5712:	ef 93       	push	r30
    5714:	ff 93       	push	r31
    5716:	60 e0       	ldi	r22, 0x00	; 0
    5718:	8a e0       	ldi	r24, 0x0A	; 10
    571a:	0e 94 cc 1c 	call	0x3998	; 0x3998 <nrk_kernel_error_add>
    571e:	ff cf       	rjmp	.-2      	; 0x571e <__vector_default+0x2a>

00005720 <nrk_high_speed_timer_wait>:
    5720:	cf 93       	push	r28
    5722:	df 93       	push	r29
    5724:	cd b7       	in	r28, 0x3d	; 61
    5726:	de b7       	in	r29, 0x3e	; 62
    5728:	22 97       	sbiw	r28, 0x02	; 2
    572a:	0f b6       	in	r0, 0x3f	; 63
    572c:	f8 94       	cli
    572e:	de bf       	out	0x3e, r29	; 62
    5730:	0f be       	out	0x3f, r0	; 63
    5732:	cd bf       	out	0x3d, r28	; 61
    5734:	fc 01       	movw	r30, r24
    5736:	8f ef       	ldi	r24, 0xFF	; 255
    5738:	e9 37       	cpi	r30, 0x79	; 121
    573a:	f8 07       	cpc	r31, r24
    573c:	10 f0       	brcs	.+4      	; 0x5742 <nrk_high_speed_timer_wait+0x22>
    573e:	e0 e0       	ldi	r30, 0x00	; 0
    5740:	f0 e0       	ldi	r31, 0x00	; 0
    5742:	9f 01       	movw	r18, r30
    5744:	44 27       	eor	r20, r20
    5746:	55 27       	eor	r21, r21
    5748:	cb 01       	movw	r24, r22
    574a:	aa 27       	eor	r26, r26
    574c:	bb 27       	eor	r27, r27
    574e:	28 0f       	add	r18, r24
    5750:	39 1f       	adc	r19, r25
    5752:	4a 1f       	adc	r20, r26
    5754:	5b 1f       	adc	r21, r27
    5756:	21 30       	cpi	r18, 0x01	; 1
    5758:	80 e0       	ldi	r24, 0x00	; 0
    575a:	38 07       	cpc	r19, r24
    575c:	81 e0       	ldi	r24, 0x01	; 1
    575e:	48 07       	cpc	r20, r24
    5760:	80 e0       	ldi	r24, 0x00	; 0
    5762:	58 07       	cpc	r21, r24
    5764:	78 f0       	brcs	.+30     	; 0x5784 <nrk_high_speed_timer_wait+0x64>
    5766:	80 91 84 00 	lds	r24, 0x0084
    576a:	90 91 85 00 	lds	r25, 0x0085
    576e:	9a 83       	std	Y+2, r25	; 0x02
    5770:	89 83       	std	Y+1, r24	; 0x01
    5772:	89 81       	ldd	r24, Y+1	; 0x01
    5774:	9a 81       	ldd	r25, Y+2	; 0x02
    5776:	e8 17       	cp	r30, r24
    5778:	f9 07       	cpc	r31, r25
    577a:	a8 f3       	brcs	.-22     	; 0x5766 <nrk_high_speed_timer_wait+0x46>
    577c:	20 50       	subi	r18, 0x00	; 0
    577e:	30 40       	sbci	r19, 0x00	; 0
    5780:	41 40       	sbci	r20, 0x01	; 1
    5782:	50 40       	sbci	r21, 0x00	; 0
    5784:	80 91 84 00 	lds	r24, 0x0084
    5788:	90 91 85 00 	lds	r25, 0x0085
    578c:	9a 83       	std	Y+2, r25	; 0x02
    578e:	89 83       	std	Y+1, r24	; 0x01
    5790:	89 81       	ldd	r24, Y+1	; 0x01
    5792:	9a 81       	ldd	r25, Y+2	; 0x02
    5794:	82 17       	cp	r24, r18
    5796:	93 07       	cpc	r25, r19
    5798:	a8 f3       	brcs	.-22     	; 0x5784 <nrk_high_speed_timer_wait+0x64>
    579a:	22 96       	adiw	r28, 0x02	; 2
    579c:	0f b6       	in	r0, 0x3f	; 63
    579e:	f8 94       	cli
    57a0:	de bf       	out	0x3e, r29	; 62
    57a2:	0f be       	out	0x3f, r0	; 63
    57a4:	cd bf       	out	0x3d, r28	; 61
    57a6:	df 91       	pop	r29
    57a8:	cf 91       	pop	r28
    57aa:	08 95       	ret

000057ac <_nrk_setup_timer>:
    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
    57ac:	ef 92       	push	r14
    57ae:	ff 92       	push	r15
    57b0:	1f 93       	push	r17

    57b2:	9e ef       	ldi	r25, 0xFE	; 254
    57b4:	90 93 ac 05 	sts	0x05AC, r25
} // halRfWaitForCrystalOscillator

    57b8:	80 e2       	ldi	r24, 0x20	; 32
    57ba:	80 93 b6 00 	sts	0x00B6, r24
    57be:	90 93 b3 00 	sts	0x00B3, r25
    57c2:	13 e0       	ldi	r17, 0x03	; 3
    57c4:	17 bb       	out	0x17, r17	; 23
    57c6:	82 e0       	ldi	r24, 0x02	; 2
    57c8:	80 93 b0 00 	sts	0x00B0, r24
    57cc:	91 eb       	ldi	r25, 0xB1	; 177
    57ce:	e9 2e       	mov	r14, r25
    57d0:	f1 2c       	mov	r15, r1
    57d2:	f7 01       	movw	r30, r14
    57d4:	10 83       	st	Z, r17
    57d6:	83 b5       	in	r24, 0x23	; 35
    57d8:	82 60       	ori	r24, 0x02	; 2
    57da:	83 bd       	out	0x23, r24	; 35
    57dc:	17 bb       	out	0x17, r17	; 23
    57de:	14 bd       	out	0x24, r17	; 36
    57e0:	83 b5       	in	r24, 0x23	; 35
    57e2:	82 60       	ori	r24, 0x02	; 2
    57e4:	83 bd       	out	0x23, r24	; 35
    57e6:	10 92 80 00 	sts	0x0080, r1
    57ea:	81 e0       	ldi	r24, 0x01	; 1
    57ec:	80 93 81 00 	sts	0x0081, r24
    57f0:	10 92 85 00 	sts	0x0085, r1
    57f4:	10 92 84 00 	sts	0x0084, r1
    57f8:	83 b5       	in	r24, 0x23	; 35
    57fa:	82 60       	ori	r24, 0x02	; 2
    57fc:	83 bd       	out	0x23, r24	; 35
    57fe:	83 b5       	in	r24, 0x23	; 35
    5800:	81 60       	ori	r24, 0x01	; 1
    5802:	83 bd       	out	0x23, r24	; 35
    5804:	0e 94 8d 2a 	call	0x551a	; 0x551a <_nrk_os_timer_reset>
    5808:	e0 e7       	ldi	r30, 0x70	; 112
    580a:	f0 e0       	ldi	r31, 0x00	; 0
    580c:	80 81       	ld	r24, Z
    580e:	83 60       	ori	r24, 0x03	; 3
    5810:	80 83       	st	Z, r24
    5812:	f7 01       	movw	r30, r14
    5814:	10 83       	st	Z, r17
    5816:	10 92 a0 05 	sts	0x05A0, r1
    581a:	1f 91       	pop	r17
    581c:	ff 90       	pop	r15
    581e:	ef 90       	pop	r14
    5820:	08 95       	ret

00005822 <nrk_ext_int_enable>:
//
//	DESCRIPTION:
//		Waits for the crystal oscillator to become stable. The flag is polled via the SPI status byte.
//      
//      Note that this function will lock up if the SXOSCON command strobe has not been given before the
//      function call. Also note that global interrupts will always be enabled when this function 
    5822:	88 23       	and	r24, r24
    5824:	11 f4       	brne	.+4      	; 0x582a <nrk_ext_int_enable+0x8>
    5826:	e8 9a       	sbi	0x1d, 0	; 29
    5828:	33 c0       	rjmp	.+102    	; 0x5890 <nrk_ext_int_enable+0x6e>
//      returns.
    582a:	81 30       	cpi	r24, 0x01	; 1
    582c:	11 f4       	brne	.+4      	; 0x5832 <nrk_ext_int_enable+0x10>
    582e:	e9 9a       	sbi	0x1d, 1	; 29
    5830:	2f c0       	rjmp	.+94     	; 0x5890 <nrk_ext_int_enable+0x6e>
//-------------------------------------------------------------------------------------------------------
    5832:	82 30       	cpi	r24, 0x02	; 2
    5834:	11 f4       	brne	.+4      	; 0x583a <nrk_ext_int_enable+0x18>
    5836:	ea 9a       	sbi	0x1d, 2	; 29
    5838:	2b c0       	rjmp	.+86     	; 0x5890 <nrk_ext_int_enable+0x6e>
void halRfWaitForCrystalOscillator(void) {
    583a:	83 30       	cpi	r24, 0x03	; 3
    583c:	21 f4       	brne	.+8      	; 0x5846 <nrk_ext_int_enable+0x24>
    583e:	80 91 6b 00 	lds	r24, 0x006B
    5842:	81 60       	ori	r24, 0x01	; 1
    5844:	23 c0       	rjmp	.+70     	; 0x588c <nrk_ext_int_enable+0x6a>
    uint8_t spiStatusByte;
    5846:	84 30       	cpi	r24, 0x04	; 4
    5848:	21 f4       	brne	.+8      	; 0x5852 <nrk_ext_int_enable+0x30>
    584a:	80 91 6b 00 	lds	r24, 0x006B
    584e:	82 60       	ori	r24, 0x02	; 2
    5850:	1d c0       	rjmp	.+58     	; 0x588c <nrk_ext_int_enable+0x6a>

    5852:	85 30       	cpi	r24, 0x05	; 5
    5854:	21 f4       	brne	.+8      	; 0x585e <nrk_ext_int_enable+0x3c>
    5856:	80 91 6b 00 	lds	r24, 0x006B
    585a:	84 60       	ori	r24, 0x04	; 4
    585c:	17 c0       	rjmp	.+46     	; 0x588c <nrk_ext_int_enable+0x6a>
    // Poll the SPI status byte until the crystal oscillator is stable
    585e:	86 30       	cpi	r24, 0x06	; 6
    5860:	21 f4       	brne	.+8      	; 0x586a <nrk_ext_int_enable+0x48>
    5862:	80 91 6b 00 	lds	r24, 0x006B
    5866:	88 60       	ori	r24, 0x08	; 8
    5868:	11 c0       	rjmp	.+34     	; 0x588c <nrk_ext_int_enable+0x6a>
    do {
    586a:	87 30       	cpi	r24, 0x07	; 7
    586c:	21 f4       	brne	.+8      	; 0x5876 <nrk_ext_int_enable+0x54>
    586e:	80 91 6b 00 	lds	r24, 0x006B
    5872:	80 61       	ori	r24, 0x10	; 16
    5874:	0b c0       	rjmp	.+22     	; 0x588c <nrk_ext_int_enable+0x6a>
	    DISABLE_GLOBAL_INT();
    5876:	88 30       	cpi	r24, 0x08	; 8
    5878:	21 f4       	brne	.+8      	; 0x5882 <nrk_ext_int_enable+0x60>
    587a:	80 91 6b 00 	lds	r24, 0x006B
    587e:	80 62       	ori	r24, 0x20	; 32
    5880:	05 c0       	rjmp	.+10     	; 0x588c <nrk_ext_int_enable+0x6a>
	    FASTSPI_UPD_STATUS(spiStatusByte);
    5882:	89 30       	cpi	r24, 0x09	; 9
    5884:	41 f4       	brne	.+16     	; 0x5896 <nrk_ext_int_enable+0x74>
    5886:	80 91 6b 00 	lds	r24, 0x006B
    588a:	80 64       	ori	r24, 0x40	; 64
    588c:	80 93 6b 00 	sts	0x006B, r24
    5890:	81 e0       	ldi	r24, 0x01	; 1
    5892:	90 e0       	ldi	r25, 0x00	; 0
    5894:	08 95       	ret
	    ENABLE_GLOBAL_INT();
    5896:	8a 30       	cpi	r24, 0x0A	; 10
    5898:	19 f0       	breq	.+6      	; 0x58a0 <nrk_ext_int_enable+0x7e>
    589a:	8f ef       	ldi	r24, 0xFF	; 255
    589c:	9f ef       	ldi	r25, 0xFF	; 255
    589e:	08 95       	ret
    58a0:	80 91 6b 00 	lds	r24, 0x006B
    58a4:	80 68       	ori	r24, 0x80	; 128
    58a6:	80 93 6b 00 	sts	0x006B, r24
    58aa:	81 e0       	ldi	r24, 0x01	; 1
    58ac:	90 e0       	ldi	r25, 0x00	; 0
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

    58ae:	08 95       	ret

000058b0 <nrk_ext_int_disable>:
} // halRfWaitForCrystalOscillator

    58b0:	88 23       	and	r24, r24
    58b2:	11 f4       	brne	.+4      	; 0x58b8 <nrk_ext_int_disable+0x8>
    58b4:	e8 98       	cbi	0x1d, 0	; 29
    58b6:	31 c0       	rjmp	.+98     	; 0x591a <nrk_ext_int_disable+0x6a>
    58b8:	81 30       	cpi	r24, 0x01	; 1
    58ba:	11 f0       	breq	.+4      	; 0x58c0 <nrk_ext_int_disable+0x10>
    58bc:	82 30       	cpi	r24, 0x02	; 2
    58be:	11 f4       	brne	.+4      	; 0x58c4 <nrk_ext_int_disable+0x14>
    58c0:	e9 98       	cbi	0x1d, 1	; 29
    58c2:	2b c0       	rjmp	.+86     	; 0x591a <nrk_ext_int_disable+0x6a>
    58c4:	83 30       	cpi	r24, 0x03	; 3
    58c6:	21 f4       	brne	.+8      	; 0x58d0 <nrk_ext_int_disable+0x20>
    58c8:	80 91 6b 00 	lds	r24, 0x006B
    58cc:	8e 7f       	andi	r24, 0xFE	; 254
    58ce:	23 c0       	rjmp	.+70     	; 0x5916 <nrk_ext_int_disable+0x66>
    58d0:	84 30       	cpi	r24, 0x04	; 4
    58d2:	21 f4       	brne	.+8      	; 0x58dc <nrk_ext_int_disable+0x2c>
    58d4:	80 91 6b 00 	lds	r24, 0x006B
    58d8:	8d 7f       	andi	r24, 0xFD	; 253
    58da:	1d c0       	rjmp	.+58     	; 0x5916 <nrk_ext_int_disable+0x66>
    58dc:	85 30       	cpi	r24, 0x05	; 5
    58de:	21 f4       	brne	.+8      	; 0x58e8 <nrk_ext_int_disable+0x38>
    58e0:	80 91 6b 00 	lds	r24, 0x006B
    58e4:	8b 7f       	andi	r24, 0xFB	; 251
    58e6:	17 c0       	rjmp	.+46     	; 0x5916 <nrk_ext_int_disable+0x66>
    58e8:	86 30       	cpi	r24, 0x06	; 6
    58ea:	21 f4       	brne	.+8      	; 0x58f4 <nrk_ext_int_disable+0x44>
    58ec:	80 91 6b 00 	lds	r24, 0x006B
    58f0:	87 7f       	andi	r24, 0xF7	; 247
    58f2:	11 c0       	rjmp	.+34     	; 0x5916 <nrk_ext_int_disable+0x66>
    58f4:	87 30       	cpi	r24, 0x07	; 7
    58f6:	21 f4       	brne	.+8      	; 0x5900 <nrk_ext_int_disable+0x50>
    58f8:	80 91 6b 00 	lds	r24, 0x006B
    58fc:	8f 7e       	andi	r24, 0xEF	; 239
    58fe:	0b c0       	rjmp	.+22     	; 0x5916 <nrk_ext_int_disable+0x66>
    5900:	88 30       	cpi	r24, 0x08	; 8
    5902:	21 f4       	brne	.+8      	; 0x590c <nrk_ext_int_disable+0x5c>
    5904:	80 91 6b 00 	lds	r24, 0x006B
    5908:	8f 7d       	andi	r24, 0xDF	; 223
    590a:	05 c0       	rjmp	.+10     	; 0x5916 <nrk_ext_int_disable+0x66>
    590c:	89 30       	cpi	r24, 0x09	; 9
    590e:	41 f4       	brne	.+16     	; 0x5920 <nrk_ext_int_disable+0x70>
    5910:	80 91 6b 00 	lds	r24, 0x006B
    5914:	8f 7b       	andi	r24, 0xBF	; 191
    5916:	80 93 6b 00 	sts	0x006B, r24
    591a:	81 e0       	ldi	r24, 0x01	; 1
    591c:	90 e0       	ldi	r25, 0x00	; 0
    591e:	08 95       	ret
    5920:	8a 30       	cpi	r24, 0x0A	; 10
    5922:	19 f0       	breq	.+6      	; 0x592a <nrk_ext_int_disable+0x7a>
    5924:	8f ef       	ldi	r24, 0xFF	; 255
    5926:	9f ef       	ldi	r25, 0xFF	; 255
    5928:	08 95       	ret
    592a:	80 91 6b 00 	lds	r24, 0x006B
    592e:	8f 77       	andi	r24, 0x7F	; 127
    5930:	80 93 6b 00 	sts	0x006B, r24
    5934:	81 e0       	ldi	r24, 0x01	; 1
    5936:	90 e0       	ldi	r25, 0x00	; 0
    5938:	08 95       	ret

0000593a <nrk_ext_int_configure>:
    593a:	88 23       	and	r24, r24
    593c:	39 f5       	brne	.+78     	; 0x598c <nrk_ext_int_configure+0x52>
    593e:	50 93 a2 06 	sts	0x06A2, r21
    5942:	40 93 a1 06 	sts	0x06A1, r20
    5946:	66 23       	and	r22, r22
    5948:	21 f4       	brne	.+8      	; 0x5952 <nrk_ext_int_configure+0x18>
    594a:	80 91 69 00 	lds	r24, 0x0069
    594e:	8c 7f       	andi	r24, 0xFC	; 252
    5950:	45 c0       	rjmp	.+138    	; 0x59dc <nrk_ext_int_configure+0xa2>
    5952:	61 30       	cpi	r22, 0x01	; 1
    5954:	49 f4       	brne	.+18     	; 0x5968 <nrk_ext_int_configure+0x2e>
    5956:	80 91 69 00 	lds	r24, 0x0069
    595a:	8d 7f       	andi	r24, 0xFD	; 253
    595c:	80 93 69 00 	sts	0x0069, r24
    5960:	80 91 69 00 	lds	r24, 0x0069
    5964:	81 60       	ori	r24, 0x01	; 1
    5966:	3a c0       	rjmp	.+116    	; 0x59dc <nrk_ext_int_configure+0xa2>
    5968:	62 30       	cpi	r22, 0x02	; 2
    596a:	49 f4       	brne	.+18     	; 0x597e <nrk_ext_int_configure+0x44>
    596c:	80 91 69 00 	lds	r24, 0x0069
    5970:	82 60       	ori	r24, 0x02	; 2
    5972:	80 93 69 00 	sts	0x0069, r24
    5976:	80 91 69 00 	lds	r24, 0x0069
    597a:	8e 7f       	andi	r24, 0xFE	; 254
    597c:	2f c0       	rjmp	.+94     	; 0x59dc <nrk_ext_int_configure+0xa2>
    597e:	63 30       	cpi	r22, 0x03	; 3
    5980:	09 f0       	breq	.+2      	; 0x5984 <nrk_ext_int_configure+0x4a>
    5982:	69 c0       	rjmp	.+210    	; 0x5a56 <nrk_ext_int_configure+0x11c>
    5984:	80 91 69 00 	lds	r24, 0x0069
    5988:	83 60       	ori	r24, 0x03	; 3
    598a:	28 c0       	rjmp	.+80     	; 0x59dc <nrk_ext_int_configure+0xa2>
    598c:	81 30       	cpi	r24, 0x01	; 1
    598e:	49 f5       	brne	.+82     	; 0x59e2 <nrk_ext_int_configure+0xa8>
    5990:	50 93 a0 06 	sts	0x06A0, r21
    5994:	40 93 9f 06 	sts	0x069F, r20
    5998:	66 23       	and	r22, r22
    599a:	21 f4       	brne	.+8      	; 0x59a4 <nrk_ext_int_configure+0x6a>
    599c:	80 91 69 00 	lds	r24, 0x0069
    59a0:	83 7f       	andi	r24, 0xF3	; 243
    59a2:	1c c0       	rjmp	.+56     	; 0x59dc <nrk_ext_int_configure+0xa2>
    59a4:	61 30       	cpi	r22, 0x01	; 1
    59a6:	49 f4       	brne	.+18     	; 0x59ba <nrk_ext_int_configure+0x80>
    59a8:	80 91 69 00 	lds	r24, 0x0069
    59ac:	87 7f       	andi	r24, 0xF7	; 247
    59ae:	80 93 69 00 	sts	0x0069, r24
    59b2:	80 91 69 00 	lds	r24, 0x0069
    59b6:	84 60       	ori	r24, 0x04	; 4
    59b8:	11 c0       	rjmp	.+34     	; 0x59dc <nrk_ext_int_configure+0xa2>
    59ba:	62 30       	cpi	r22, 0x02	; 2
    59bc:	49 f4       	brne	.+18     	; 0x59d0 <nrk_ext_int_configure+0x96>
    59be:	80 91 69 00 	lds	r24, 0x0069
    59c2:	88 60       	ori	r24, 0x08	; 8
    59c4:	80 93 69 00 	sts	0x0069, r24
    59c8:	80 91 69 00 	lds	r24, 0x0069
    59cc:	8b 7f       	andi	r24, 0xFB	; 251
    59ce:	06 c0       	rjmp	.+12     	; 0x59dc <nrk_ext_int_configure+0xa2>
    59d0:	63 30       	cpi	r22, 0x03	; 3
    59d2:	09 f0       	breq	.+2      	; 0x59d6 <nrk_ext_int_configure+0x9c>
    59d4:	40 c0       	rjmp	.+128    	; 0x5a56 <nrk_ext_int_configure+0x11c>
    59d6:	80 91 69 00 	lds	r24, 0x0069
    59da:	8c 60       	ori	r24, 0x0C	; 12
    59dc:	80 93 69 00 	sts	0x0069, r24
    59e0:	37 c0       	rjmp	.+110    	; 0x5a50 <nrk_ext_int_configure+0x116>
    59e2:	82 30       	cpi	r24, 0x02	; 2
    59e4:	31 f5       	brne	.+76     	; 0x5a32 <nrk_ext_int_configure+0xf8>
    59e6:	50 93 a0 06 	sts	0x06A0, r21
    59ea:	40 93 9f 06 	sts	0x069F, r20
    59ee:	66 23       	and	r22, r22
    59f0:	21 f4       	brne	.+8      	; 0x59fa <nrk_ext_int_configure+0xc0>
    59f2:	80 91 69 00 	lds	r24, 0x0069
    59f6:	8f 7c       	andi	r24, 0xCF	; 207
    59f8:	f1 cf       	rjmp	.-30     	; 0x59dc <nrk_ext_int_configure+0xa2>
    59fa:	61 30       	cpi	r22, 0x01	; 1
    59fc:	49 f4       	brne	.+18     	; 0x5a10 <nrk_ext_int_configure+0xd6>
    59fe:	80 91 69 00 	lds	r24, 0x0069
    5a02:	8f 7d       	andi	r24, 0xDF	; 223
    5a04:	80 93 69 00 	sts	0x0069, r24
    5a08:	80 91 69 00 	lds	r24, 0x0069
    5a0c:	80 61       	ori	r24, 0x10	; 16
    5a0e:	e6 cf       	rjmp	.-52     	; 0x59dc <nrk_ext_int_configure+0xa2>
    5a10:	62 30       	cpi	r22, 0x02	; 2
    5a12:	49 f4       	brne	.+18     	; 0x5a26 <nrk_ext_int_configure+0xec>
    5a14:	80 91 69 00 	lds	r24, 0x0069
    5a18:	80 62       	ori	r24, 0x20	; 32
    5a1a:	80 93 69 00 	sts	0x0069, r24
    5a1e:	80 91 69 00 	lds	r24, 0x0069
    5a22:	8f 7e       	andi	r24, 0xEF	; 239
    5a24:	db cf       	rjmp	.-74     	; 0x59dc <nrk_ext_int_configure+0xa2>
    5a26:	63 30       	cpi	r22, 0x03	; 3
    5a28:	b1 f4       	brne	.+44     	; 0x5a56 <nrk_ext_int_configure+0x11c>
    5a2a:	80 91 69 00 	lds	r24, 0x0069
    5a2e:	80 63       	ori	r24, 0x30	; 48
    5a30:	d5 cf       	rjmp	.-86     	; 0x59dc <nrk_ext_int_configure+0xa2>
    5a32:	83 50       	subi	r24, 0x03	; 3
    5a34:	88 30       	cpi	r24, 0x08	; 8
    5a36:	18 f0       	brcs	.+6      	; 0x5a3e <nrk_ext_int_configure+0x104>
    5a38:	8f ef       	ldi	r24, 0xFF	; 255
    5a3a:	9f ef       	ldi	r25, 0xFF	; 255
    5a3c:	08 95       	ret
    5a3e:	80 91 68 00 	lds	r24, 0x0068
    5a42:	81 60       	ori	r24, 0x01	; 1
    5a44:	80 93 68 00 	sts	0x0068, r24
    5a48:	50 93 a6 06 	sts	0x06A6, r21
    5a4c:	40 93 a5 06 	sts	0x06A5, r20
    5a50:	81 e0       	ldi	r24, 0x01	; 1
    5a52:	90 e0       	ldi	r25, 0x00	; 0
    5a54:	08 95       	ret
    5a56:	81 e0       	ldi	r24, 0x01	; 1
    5a58:	90 e0       	ldi	r25, 0x00	; 0
    5a5a:	08 95       	ret

00005a5c <__vector_1>:
    5a5c:	1f 92       	push	r1
    5a5e:	0f 92       	push	r0
    5a60:	0f b6       	in	r0, 0x3f	; 63
    5a62:	0f 92       	push	r0
    5a64:	11 24       	eor	r1, r1
    5a66:	2f 93       	push	r18
    5a68:	3f 93       	push	r19
    5a6a:	4f 93       	push	r20
    5a6c:	5f 93       	push	r21
    5a6e:	6f 93       	push	r22
    5a70:	7f 93       	push	r23
    5a72:	8f 93       	push	r24
    5a74:	9f 93       	push	r25
    5a76:	af 93       	push	r26
    5a78:	bf 93       	push	r27
    5a7a:	ef 93       	push	r30
    5a7c:	ff 93       	push	r31
    5a7e:	e0 91 a1 06 	lds	r30, 0x06A1
    5a82:	f0 91 a2 06 	lds	r31, 0x06A2
    5a86:	30 97       	sbiw	r30, 0x00	; 0
    5a88:	11 f0       	breq	.+4      	; 0x5a8e <__vector_1+0x32>
    5a8a:	09 95       	icall
    5a8c:	04 c0       	rjmp	.+8      	; 0x5a96 <__vector_1+0x3a>
    5a8e:	60 e0       	ldi	r22, 0x00	; 0
    5a90:	8a e0       	ldi	r24, 0x0A	; 10
    5a92:	0e 94 cc 1c 	call	0x3998	; 0x3998 <nrk_kernel_error_add>
    5a96:	ff 91       	pop	r31
    5a98:	ef 91       	pop	r30
    5a9a:	bf 91       	pop	r27
    5a9c:	af 91       	pop	r26
    5a9e:	9f 91       	pop	r25
    5aa0:	8f 91       	pop	r24
    5aa2:	7f 91       	pop	r23
    5aa4:	6f 91       	pop	r22
    5aa6:	5f 91       	pop	r21
    5aa8:	4f 91       	pop	r20
    5aaa:	3f 91       	pop	r19
    5aac:	2f 91       	pop	r18
    5aae:	0f 90       	pop	r0
    5ab0:	0f be       	out	0x3f, r0	; 63
    5ab2:	0f 90       	pop	r0
    5ab4:	1f 90       	pop	r1
    5ab6:	18 95       	reti

00005ab8 <__vector_9>:
    5ab8:	1f 92       	push	r1
    5aba:	0f 92       	push	r0
    5abc:	0f b6       	in	r0, 0x3f	; 63
    5abe:	0f 92       	push	r0
    5ac0:	11 24       	eor	r1, r1
    5ac2:	2f 93       	push	r18
    5ac4:	3f 93       	push	r19
    5ac6:	4f 93       	push	r20
    5ac8:	5f 93       	push	r21
    5aca:	6f 93       	push	r22
    5acc:	7f 93       	push	r23
    5ace:	8f 93       	push	r24
    5ad0:	9f 93       	push	r25
    5ad2:	af 93       	push	r26
    5ad4:	bf 93       	push	r27
    5ad6:	ef 93       	push	r30
    5ad8:	ff 93       	push	r31
    5ada:	e0 91 a5 06 	lds	r30, 0x06A5
    5ade:	f0 91 a6 06 	lds	r31, 0x06A6
    5ae2:	30 97       	sbiw	r30, 0x00	; 0
    5ae4:	11 f0       	breq	.+4      	; 0x5aea <__vector_9+0x32>
    5ae6:	09 95       	icall
    5ae8:	04 c0       	rjmp	.+8      	; 0x5af2 <__vector_9+0x3a>
    5aea:	60 e0       	ldi	r22, 0x00	; 0
    5aec:	8a e0       	ldi	r24, 0x0A	; 10
    5aee:	0e 94 cc 1c 	call	0x3998	; 0x3998 <nrk_kernel_error_add>
    5af2:	ff 91       	pop	r31
    5af4:	ef 91       	pop	r30
    5af6:	bf 91       	pop	r27
    5af8:	af 91       	pop	r26
    5afa:	9f 91       	pop	r25
    5afc:	8f 91       	pop	r24
    5afe:	7f 91       	pop	r23
    5b00:	6f 91       	pop	r22
    5b02:	5f 91       	pop	r21
    5b04:	4f 91       	pop	r20
    5b06:	3f 91       	pop	r19
    5b08:	2f 91       	pop	r18
    5b0a:	0f 90       	pop	r0
    5b0c:	0f be       	out	0x3f, r0	; 63
    5b0e:	0f 90       	pop	r0
    5b10:	1f 90       	pop	r1
    5b12:	18 95       	reti

00005b14 <_nrk_startup_ok>:
//-------------------------------------------------------------------------------------------------------
//	void rfWaitForCrystalOscillator(void)
//
//	DESCRIPTION:
//		Waits for the crystal oscillator to become stable. The flag is polled via the SPI status byte.
//      
    5b14:	80 91 b0 00 	lds	r24, 0x00B0
    5b18:	90 e0       	ldi	r25, 0x00	; 0
    5b1a:	81 11       	cpse	r24, r1
    5b1c:	91 e0       	ldi	r25, 0x01	; 1
    5b1e:	81 e0       	ldi	r24, 0x01	; 1
    5b20:	98 27       	eor	r25, r24
//      Note that this function will lock up if the SXOSCON command strobe has not been given before the
//      function call. Also note that global interrupts will always be enabled when this function 
    5b22:	89 2f       	mov	r24, r25
    5b24:	99 27       	eor	r25, r25
    5b26:	08 95       	ret

00005b28 <update_watchdog>:
//      returns.
//-------------------------------------------------------------------------------------------------------
void halRfWaitForCrystalOscillator(void) {
    5b28:	08 95       	ret

00005b2a <nrk_watchdog_check>:
    5b2a:	04 b6       	in	r0, 0x34	; 52
    5b2c:	03 fc       	sbrc	r0, 3
    5b2e:	03 c0       	rjmp	.+6      	; 0x5b36 <nrk_watchdog_check+0xc>
    5b30:	81 e0       	ldi	r24, 0x01	; 1
    5b32:	90 e0       	ldi	r25, 0x00	; 0
    5b34:	08 95       	ret
    5b36:	8f ef       	ldi	r24, 0xFF	; 255
    5b38:	9f ef       	ldi	r25, 0xFF	; 255
    5b3a:	08 95       	ret

00005b3c <nrk_watchdog_reset>:
    5b3c:	a8 95       	wdr
    5b3e:	08 95       	ret

00005b40 <nrk_watchdog_disable>:
//-------------------------------------------------------------------------------------------------------
//	void rfWaitForCrystalOscillator(void)
//
//	DESCRIPTION:
//		Waits for the crystal oscillator to become stable. The flag is polled via the SPI status byte.
//      
    5b40:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <nrk_int_disable>
    5b44:	a8 95       	wdr
//
//	DESCRIPTION:
//		Waits for the crystal oscillator to become stable. The flag is polled via the SPI status byte.
//      
//      Note that this function will lock up if the SXOSCON command strobe has not been given before the
//      function call. Also note that global interrupts will always be enabled when this function 
    5b46:	84 b7       	in	r24, 0x34	; 52
    5b48:	87 7f       	andi	r24, 0xF7	; 247
    5b4a:	84 bf       	out	0x34, r24	; 52
//      returns.
    5b4c:	e0 e6       	ldi	r30, 0x60	; 96
    5b4e:	f0 e0       	ldi	r31, 0x00	; 0
    5b50:	80 81       	ld	r24, Z
    5b52:	88 61       	ori	r24, 0x18	; 24
    5b54:	80 83       	st	Z, r24
//-------------------------------------------------------------------------------------------------------
    5b56:	10 82       	st	Z, r1
void halRfWaitForCrystalOscillator(void) {
    5b58:	0e 94 e5 19 	call	0x33ca	; 0x33ca <nrk_int_enable>
    5b5c:	08 95       	ret

00005b5e <nrk_watchdog_enable>:

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    5b5e:	0e 94 e3 19 	call	0x33c6	; 0x33c6 <nrk_int_disable>
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
    5b62:	84 b7       	in	r24, 0x34	; 52
    5b64:	87 7f       	andi	r24, 0xF7	; 247
    5b66:	84 bf       	out	0x34, r24	; 52
    5b68:	a8 95       	wdr
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

} // halRfWaitForCrystalOscillator
    5b6a:	e0 e6       	ldi	r30, 0x60	; 96
    5b6c:	f0 e0       	ldi	r31, 0x00	; 0
    5b6e:	80 81       	ld	r24, Z
    5b70:	88 61       	ori	r24, 0x18	; 24
    5b72:	80 83       	st	Z, r24

    5b74:	8d e0       	ldi	r24, 0x0D	; 13
    5b76:	80 83       	st	Z, r24
    5b78:	0e 94 e5 19 	call	0x33ca	; 0x33ca <nrk_int_enable>
    5b7c:	08 95       	ret

00005b7e <nrk_battery_save>:
    5b7e:	08 95       	ret

00005b80 <nrk_sleep>:
    5b80:	83 b7       	in	r24, 0x33	; 51
    5b82:	81 7f       	andi	r24, 0xF1	; 241
    5b84:	86 60       	ori	r24, 0x06	; 6
    5b86:	83 bf       	out	0x33, r24	; 51
    5b88:	83 b7       	in	r24, 0x33	; 51
    5b8a:	81 60       	ori	r24, 0x01	; 1
    5b8c:	83 bf       	out	0x33, r24	; 51
    5b8e:	88 95       	sleep
    5b90:	83 b7       	in	r24, 0x33	; 51
    5b92:	8e 7f       	andi	r24, 0xFE	; 254
    5b94:	83 bf       	out	0x33, r24	; 51
    5b96:	08 95       	ret

00005b98 <nrk_idle>:
    5b98:	83 b7       	in	r24, 0x33	; 51
    5b9a:	81 7f       	andi	r24, 0xF1	; 241
    5b9c:	83 bf       	out	0x33, r24	; 51
    5b9e:	83 b7       	in	r24, 0x33	; 51
    5ba0:	81 60       	ori	r24, 0x01	; 1
    5ba2:	83 bf       	out	0x33, r24	; 51
    5ba4:	88 95       	sleep
    5ba6:	83 b7       	in	r24, 0x33	; 51
    5ba8:	8e 7f       	andi	r24, 0xFE	; 254
    5baa:	83 bf       	out	0x33, r24	; 51
    5bac:	08 95       	ret

00005bae <nrk_task_set_entry_function>:
    5bae:	fc 01       	movw	r30, r24
    5bb0:	76 83       	std	Z+6, r23	; 0x06
    5bb2:	65 83       	std	Z+5, r22	; 0x05
    5bb4:	08 95       	ret

00005bb6 <nrk_task_stk_init>:
    5bb6:	fb 01       	movw	r30, r22
    5bb8:	da 01       	movw	r26, r20
    5bba:	25 e5       	ldi	r18, 0x55	; 85
    5bbc:	2c 93       	st	X, r18
    5bbe:	32 97       	sbiw	r30, 0x02	; 2
    5bc0:	29 2f       	mov	r18, r25
    5bc2:	33 27       	eor	r19, r19
    5bc4:	20 83       	st	Z, r18
    5bc6:	81 83       	std	Z+1, r24	; 0x01
    5bc8:	32 97       	sbiw	r30, 0x02	; 2
    5bca:	11 82       	std	Z+1, r1	; 0x01
    5bcc:	10 82       	st	Z, r1
    5bce:	32 97       	sbiw	r30, 0x02	; 2
    5bd0:	11 82       	std	Z+1, r1	; 0x01
    5bd2:	10 82       	st	Z, r1
    5bd4:	32 97       	sbiw	r30, 0x02	; 2
    5bd6:	11 82       	std	Z+1, r1	; 0x01
    5bd8:	10 82       	st	Z, r1
    5bda:	32 97       	sbiw	r30, 0x02	; 2
    5bdc:	11 82       	std	Z+1, r1	; 0x01
    5bde:	10 82       	st	Z, r1
    5be0:	32 97       	sbiw	r30, 0x02	; 2
    5be2:	11 82       	std	Z+1, r1	; 0x01
    5be4:	10 82       	st	Z, r1
    5be6:	32 97       	sbiw	r30, 0x02	; 2
    5be8:	11 82       	std	Z+1, r1	; 0x01
    5bea:	10 82       	st	Z, r1
    5bec:	32 97       	sbiw	r30, 0x02	; 2
    5bee:	11 82       	std	Z+1, r1	; 0x01
    5bf0:	10 82       	st	Z, r1
    5bf2:	32 97       	sbiw	r30, 0x02	; 2
    5bf4:	11 82       	std	Z+1, r1	; 0x01
    5bf6:	10 82       	st	Z, r1
    5bf8:	32 97       	sbiw	r30, 0x02	; 2
    5bfa:	11 82       	std	Z+1, r1	; 0x01
    5bfc:	10 82       	st	Z, r1
    5bfe:	32 97       	sbiw	r30, 0x02	; 2
    5c00:	11 82       	std	Z+1, r1	; 0x01
    5c02:	10 82       	st	Z, r1
    5c04:	32 97       	sbiw	r30, 0x02	; 2
    5c06:	11 82       	std	Z+1, r1	; 0x01
    5c08:	10 82       	st	Z, r1
    5c0a:	32 97       	sbiw	r30, 0x02	; 2
    5c0c:	11 82       	std	Z+1, r1	; 0x01
    5c0e:	10 82       	st	Z, r1
    5c10:	32 97       	sbiw	r30, 0x02	; 2
    5c12:	11 82       	std	Z+1, r1	; 0x01
    5c14:	10 82       	st	Z, r1
    5c16:	32 97       	sbiw	r30, 0x02	; 2
    5c18:	11 82       	std	Z+1, r1	; 0x01
    5c1a:	10 82       	st	Z, r1
    5c1c:	32 97       	sbiw	r30, 0x02	; 2
    5c1e:	11 82       	std	Z+1, r1	; 0x01
    5c20:	10 82       	st	Z, r1
    5c22:	32 97       	sbiw	r30, 0x02	; 2
    5c24:	11 82       	std	Z+1, r1	; 0x01
    5c26:	10 82       	st	Z, r1
    5c28:	32 97       	sbiw	r30, 0x02	; 2
    5c2a:	11 82       	std	Z+1, r1	; 0x01
    5c2c:	10 82       	st	Z, r1
    5c2e:	cf 01       	movw	r24, r30
    5c30:	08 95       	ret

00005c32 <nrk_stack_pointer_init>:
    5c32:	85 e5       	ldi	r24, 0x55	; 85
    5c34:	80 93 7e 21 	sts	0x217E, r24
    5c38:	ee ef       	ldi	r30, 0xFE	; 254
    5c3a:	f1 e2       	ldi	r31, 0x21	; 33
    5c3c:	f0 93 f7 03 	sts	0x03F7, r31
    5c40:	e0 93 f6 03 	sts	0x03F6, r30
    5c44:	2a ee       	ldi	r18, 0xEA	; 234
    5c46:	39 e1       	ldi	r19, 0x19	; 25
    5c48:	83 2f       	mov	r24, r19
    5c4a:	99 27       	eor	r25, r25
    5c4c:	80 83       	st	Z, r24
    5c4e:	20 93 ff 21 	sts	0x21FF, r18
    5c52:	08 95       	ret

00005c54 <nrk_stack_pointer_restore>:
    5c54:	2a ee       	ldi	r18, 0xEA	; 234
    5c56:	39 e1       	ldi	r19, 0x19	; 25
    5c58:	83 2f       	mov	r24, r19
    5c5a:	99 27       	eor	r25, r25
    5c5c:	80 93 fe 21 	sts	0x21FE, r24
    5c60:	20 93 ff 21 	sts	0x21FF, r18
    5c64:	08 95       	ret

00005c66 <nrk_target_start>:
    5c66:	0e 94 d6 2b 	call	0x57ac	; 0x57ac <_nrk_setup_timer>
    5c6a:	0e 94 e5 19 	call	0x33ca	; 0x33ca <nrk_int_enable>
    5c6e:	08 95       	ret

00005c70 <nrk_task_set_stk>:
    5c70:	ef 92       	push	r14
    5c72:	ff 92       	push	r15
    5c74:	0f 93       	push	r16
    5c76:	1f 93       	push	r17
    5c78:	cf 93       	push	r28
    5c7a:	df 93       	push	r29
    5c7c:	7c 01       	movw	r14, r24
    5c7e:	8b 01       	movw	r16, r22
    5c80:	ea 01       	movw	r28, r20
    5c82:	40 32       	cpi	r20, 0x20	; 32
    5c84:	51 05       	cpc	r21, r1
    5c86:	18 f4       	brcc	.+6      	; 0x5c8e <nrk_task_set_stk+0x1e>
    5c88:	81 e1       	ldi	r24, 0x11	; 17
    5c8a:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <nrk_error_add>
    5c8e:	c8 01       	movw	r24, r16
    5c90:	01 97       	sbiw	r24, 0x01	; 1
    5c92:	8c 0f       	add	r24, r28
    5c94:	9d 1f       	adc	r25, r29
    5c96:	f7 01       	movw	r30, r14
    5c98:	92 83       	std	Z+2, r25	; 0x02
    5c9a:	81 83       	std	Z+1, r24	; 0x01
    5c9c:	14 83       	std	Z+4, r17	; 0x04
    5c9e:	03 83       	std	Z+3, r16	; 0x03
    5ca0:	df 91       	pop	r29
    5ca2:	cf 91       	pop	r28
    5ca4:	1f 91       	pop	r17
    5ca6:	0f 91       	pop	r16
    5ca8:	ff 90       	pop	r15
    5caa:	ef 90       	pop	r14
    5cac:	08 95       	ret

00005cae <nrk_start_high_ready_task>:

.global nrk_start_high_ready_task 

nrk_start_high_ready_task:

	lds r26,nrk_high_ready_TCB		
    5cae:	a0 91 6e 06 	lds	r26, 0x066E
	lds r27,nrk_high_ready_TCB+1
    5cb2:	b0 91 6f 06 	lds	r27, 0x066F

    	;x points to &OSTCB[x]
    
	ld r28,x+
    5cb6:	cd 91       	ld	r28, X+
	out __SP_L__, r28
    5cb8:	cd bf       	out	0x3d, r28	; 61
	ld r29,x+
    5cba:	dd 91       	ld	r29, X+
	out __SP_H__, r29
    5cbc:	de bf       	out	0x3e, r29	; 62
  
	pop r31	
    5cbe:	ff 91       	pop	r31
	pop r30
    5cc0:	ef 91       	pop	r30
	pop r29
    5cc2:	df 91       	pop	r29
	pop r28
    5cc4:	cf 91       	pop	r28
	pop r27
    5cc6:	bf 91       	pop	r27
	pop r26
    5cc8:	af 91       	pop	r26
	pop r25
    5cca:	9f 91       	pop	r25
	pop r24			
    5ccc:	8f 91       	pop	r24
	pop r23
    5cce:	7f 91       	pop	r23
	pop r22
    5cd0:	6f 91       	pop	r22
	pop r21
    5cd2:	5f 91       	pop	r21
	pop r20	
    5cd4:	4f 91       	pop	r20
	pop r19
    5cd6:	3f 91       	pop	r19
	pop r18	
    5cd8:	2f 91       	pop	r18
	pop r17
    5cda:	1f 91       	pop	r17
	pop r16
    5cdc:	0f 91       	pop	r16
	pop r15
    5cde:	ff 90       	pop	r15
	pop r14
    5ce0:	ef 90       	pop	r14
	pop r13
    5ce2:	df 90       	pop	r13
	pop r12
    5ce4:	cf 90       	pop	r12
	pop r11
    5ce6:	bf 90       	pop	r11
	pop r10
    5ce8:	af 90       	pop	r10
	pop r9
    5cea:	9f 90       	pop	r9
	pop r8
    5cec:	8f 90       	pop	r8
	pop r7
    5cee:	7f 90       	pop	r7
	pop r6
    5cf0:	6f 90       	pop	r6
	pop r5
    5cf2:	5f 90       	pop	r5
	pop r4
    5cf4:	4f 90       	pop	r4
	pop r3
    5cf6:	3f 90       	pop	r3
	pop r2
    5cf8:	2f 90       	pop	r2
	pop r1
    5cfa:	1f 90       	pop	r1
	pop r0
    5cfc:	0f 90       	pop	r0
	out __SREG__, r0
    5cfe:	0f be       	out	0x3f, r0	; 63
	pop r0	
    5d00:	0f 90       	pop	r0
	   
    	reti 
    5d02:	18 95       	reti

00005d04 <vfprintf>:
    5d04:	ab e0       	ldi	r26, 0x0B	; 11
    5d06:	b0 e0       	ldi	r27, 0x00	; 0
    5d08:	e8 e8       	ldi	r30, 0x88	; 136
    5d0a:	fe e2       	ldi	r31, 0x2E	; 46
    5d0c:	0c 94 f5 32 	jmp	0x65ea	; 0x65ea <__prologue_saves__>
    5d10:	4c 01       	movw	r8, r24
    5d12:	6b 01       	movw	r12, r22
    5d14:	7a 01       	movw	r14, r20
    5d16:	fc 01       	movw	r30, r24
    5d18:	17 82       	std	Z+7, r1	; 0x07
    5d1a:	16 82       	std	Z+6, r1	; 0x06
    5d1c:	83 81       	ldd	r24, Z+3	; 0x03
    5d1e:	81 fd       	sbrc	r24, 1
    5d20:	08 c0       	rjmp	.+16     	; 0x5d32 <vfprintf+0x2e>
    5d22:	8f ef       	ldi	r24, 0xFF	; 255
    5d24:	9f ef       	ldi	r25, 0xFF	; 255
    5d26:	1a c1       	rjmp	.+564    	; 0x5f5c <vfprintf+0x258>
    5d28:	22 e0       	ldi	r18, 0x02	; 2
    5d2a:	30 e0       	ldi	r19, 0x00	; 0
    5d2c:	e2 0e       	add	r14, r18
    5d2e:	f3 1e       	adc	r15, r19
    5d30:	0c c0       	rjmp	.+24     	; 0x5d4a <vfprintf+0x46>
    5d32:	92 ec       	ldi	r25, 0xC2	; 194
    5d34:	29 2e       	mov	r2, r25
    5d36:	93 e0       	ldi	r25, 0x03	; 3
    5d38:	39 2e       	mov	r3, r25
    5d3a:	3e 01       	movw	r6, r28
    5d3c:	08 94       	sec
    5d3e:	61 1c       	adc	r6, r1
    5d40:	71 1c       	adc	r7, r1
    5d42:	8b eb       	ldi	r24, 0xBB	; 187
    5d44:	48 2e       	mov	r4, r24
    5d46:	83 e0       	ldi	r24, 0x03	; 3
    5d48:	58 2e       	mov	r5, r24
    5d4a:	f4 01       	movw	r30, r8
    5d4c:	03 81       	ldd	r16, Z+3	; 0x03
    5d4e:	f6 01       	movw	r30, r12
    5d50:	03 fd       	sbrc	r16, 3
    5d52:	85 91       	lpm	r24, Z+
    5d54:	03 ff       	sbrs	r16, 3
    5d56:	81 91       	ld	r24, Z+
    5d58:	6f 01       	movw	r12, r30
    5d5a:	88 23       	and	r24, r24
    5d5c:	09 f4       	brne	.+2      	; 0x5d60 <vfprintf+0x5c>
    5d5e:	fb c0       	rjmp	.+502    	; 0x5f56 <vfprintf+0x252>
    5d60:	85 32       	cpi	r24, 0x25	; 37
    5d62:	59 f4       	brne	.+22     	; 0x5d7a <vfprintf+0x76>
    5d64:	03 fd       	sbrc	r16, 3
    5d66:	65 91       	lpm	r22, Z+
    5d68:	03 ff       	sbrs	r16, 3
    5d6a:	61 91       	ld	r22, Z+
    5d6c:	6f 01       	movw	r12, r30
    5d6e:	65 32       	cpi	r22, 0x25	; 37
    5d70:	19 f0       	breq	.+6      	; 0x5d78 <vfprintf+0x74>
    5d72:	16 2f       	mov	r17, r22
    5d74:	bb 24       	eor	r11, r11
    5d76:	1c c0       	rjmp	.+56     	; 0x5db0 <vfprintf+0xac>
    5d78:	85 e2       	ldi	r24, 0x25	; 37
    5d7a:	b4 01       	movw	r22, r8
    5d7c:	99 27       	eor	r25, r25
    5d7e:	2a c0       	rjmp	.+84     	; 0x5dd4 <vfprintf+0xd0>
    5d80:	11 23       	and	r17, r17
    5d82:	59 f1       	breq	.+86     	; 0x5dda <vfprintf+0xd6>
    5d84:	61 2f       	mov	r22, r17
    5d86:	77 27       	eor	r23, r23
    5d88:	c1 01       	movw	r24, r2
    5d8a:	0e 94 19 30 	call	0x6032	; 0x6032 <strchr_P>
    5d8e:	89 2b       	or	r24, r25
    5d90:	49 f4       	brne	.+18     	; 0x5da4 <vfprintf+0xa0>
    5d92:	13 32       	cpi	r17, 0x23	; 35
    5d94:	19 f4       	brne	.+6      	; 0x5d9c <vfprintf+0x98>
    5d96:	f0 e1       	ldi	r31, 0x10	; 16
    5d98:	bf 2a       	or	r11, r31
    5d9a:	04 c0       	rjmp	.+8      	; 0x5da4 <vfprintf+0xa0>
    5d9c:	1c 36       	cpi	r17, 0x6C	; 108
    5d9e:	61 f4       	brne	.+24     	; 0x5db8 <vfprintf+0xb4>
    5da0:	20 e8       	ldi	r18, 0x80	; 128
    5da2:	b2 2a       	or	r11, r18
    5da4:	f6 01       	movw	r30, r12
    5da6:	03 fd       	sbrc	r16, 3
    5da8:	15 91       	lpm	r17, Z+
    5daa:	03 ff       	sbrs	r16, 3
    5dac:	11 91       	ld	r17, Z+
    5dae:	6f 01       	movw	r12, r30
    5db0:	b7 fe       	sbrs	r11, 7
    5db2:	e6 cf       	rjmp	.-52     	; 0x5d80 <vfprintf+0x7c>
    5db4:	11 23       	and	r17, r17
    5db6:	89 f0       	breq	.+34     	; 0x5dda <vfprintf+0xd6>
    5db8:	61 2f       	mov	r22, r17
    5dba:	77 27       	eor	r23, r23
    5dbc:	c2 01       	movw	r24, r4
    5dbe:	0e 94 19 30 	call	0x6032	; 0x6032 <strchr_P>
    5dc2:	89 2b       	or	r24, r25
    5dc4:	51 f0       	breq	.+20     	; 0x5dda <vfprintf+0xd6>
    5dc6:	24 e0       	ldi	r18, 0x04	; 4
    5dc8:	30 e0       	ldi	r19, 0x00	; 0
    5dca:	e2 0e       	add	r14, r18
    5dcc:	f3 1e       	adc	r15, r19
    5dce:	b4 01       	movw	r22, r8
    5dd0:	8f e3       	ldi	r24, 0x3F	; 63
    5dd2:	90 e0       	ldi	r25, 0x00	; 0
    5dd4:	0e 94 72 30 	call	0x60e4	; 0x60e4 <fputc>
    5dd8:	b8 cf       	rjmp	.-144    	; 0x5d4a <vfprintf+0x46>
    5dda:	13 36       	cpi	r17, 0x63	; 99
    5ddc:	29 f0       	breq	.+10     	; 0x5de8 <vfprintf+0xe4>
    5dde:	13 37       	cpi	r17, 0x73	; 115
    5de0:	81 f0       	breq	.+32     	; 0x5e02 <vfprintf+0xfe>
    5de2:	13 35       	cpi	r17, 0x53	; 83
    5de4:	f9 f4       	brne	.+62     	; 0x5e24 <vfprintf+0x120>
    5de6:	0b c0       	rjmp	.+22     	; 0x5dfe <vfprintf+0xfa>
    5de8:	87 01       	movw	r16, r14
    5dea:	0e 5f       	subi	r16, 0xFE	; 254
    5dec:	1f 4f       	sbci	r17, 0xFF	; 255
    5dee:	b4 01       	movw	r22, r8
    5df0:	f7 01       	movw	r30, r14
    5df2:	80 81       	ld	r24, Z
    5df4:	91 81       	ldd	r25, Z+1	; 0x01
    5df6:	0e 94 72 30 	call	0x60e4	; 0x60e4 <fputc>
    5dfa:	78 01       	movw	r14, r16
    5dfc:	a6 cf       	rjmp	.-180    	; 0x5d4a <vfprintf+0x46>
    5dfe:	f1 e0       	ldi	r31, 0x01	; 1
    5e00:	bf 2a       	or	r11, r31
    5e02:	f7 01       	movw	r30, r14
    5e04:	00 81       	ld	r16, Z
    5e06:	11 81       	ldd	r17, Z+1	; 0x01
    5e08:	04 c0       	rjmp	.+8      	; 0x5e12 <vfprintf+0x10e>
    5e0a:	b4 01       	movw	r22, r8
    5e0c:	99 27       	eor	r25, r25
    5e0e:	0e 94 72 30 	call	0x60e4	; 0x60e4 <fputc>
    5e12:	f8 01       	movw	r30, r16
    5e14:	b0 fc       	sbrc	r11, 0
    5e16:	85 91       	lpm	r24, Z+
    5e18:	b0 fe       	sbrs	r11, 0
    5e1a:	81 91       	ld	r24, Z+
    5e1c:	8f 01       	movw	r16, r30
    5e1e:	88 23       	and	r24, r24
    5e20:	a1 f7       	brne	.-24     	; 0x5e0a <vfprintf+0x106>
    5e22:	82 cf       	rjmp	.-252    	; 0x5d28 <vfprintf+0x24>
    5e24:	14 36       	cpi	r17, 0x64	; 100
    5e26:	11 f0       	breq	.+4      	; 0x5e2c <vfprintf+0x128>
    5e28:	19 36       	cpi	r17, 0x69	; 105
    5e2a:	49 f5       	brne	.+82     	; 0x5e7e <vfprintf+0x17a>
    5e2c:	b7 fe       	sbrs	r11, 7
    5e2e:	0a c0       	rjmp	.+20     	; 0x5e44 <vfprintf+0x140>
    5e30:	f7 01       	movw	r30, r14
    5e32:	60 81       	ld	r22, Z
    5e34:	71 81       	ldd	r23, Z+1	; 0x01
    5e36:	82 81       	ldd	r24, Z+2	; 0x02
    5e38:	93 81       	ldd	r25, Z+3	; 0x03
    5e3a:	24 e0       	ldi	r18, 0x04	; 4
    5e3c:	30 e0       	ldi	r19, 0x00	; 0
    5e3e:	e2 0e       	add	r14, r18
    5e40:	f3 1e       	adc	r15, r19
    5e42:	0d c0       	rjmp	.+26     	; 0x5e5e <vfprintf+0x15a>
    5e44:	f7 01       	movw	r30, r14
    5e46:	80 81       	ld	r24, Z
    5e48:	91 81       	ldd	r25, Z+1	; 0x01
    5e4a:	9c 01       	movw	r18, r24
    5e4c:	b9 01       	movw	r22, r18
    5e4e:	88 27       	eor	r24, r24
    5e50:	77 fd       	sbrc	r23, 7
    5e52:	80 95       	com	r24
    5e54:	98 2f       	mov	r25, r24
    5e56:	42 e0       	ldi	r20, 0x02	; 2
    5e58:	50 e0       	ldi	r21, 0x00	; 0
    5e5a:	e4 0e       	add	r14, r20
    5e5c:	f5 1e       	adc	r15, r21
    5e5e:	5f ee       	ldi	r21, 0xEF	; 239
    5e60:	b5 22       	and	r11, r21
    5e62:	97 ff       	sbrs	r25, 7
    5e64:	09 c0       	rjmp	.+18     	; 0x5e78 <vfprintf+0x174>
    5e66:	90 95       	com	r25
    5e68:	80 95       	com	r24
    5e6a:	70 95       	com	r23
    5e6c:	61 95       	neg	r22
    5e6e:	7f 4f       	sbci	r23, 0xFF	; 255
    5e70:	8f 4f       	sbci	r24, 0xFF	; 255
    5e72:	9f 4f       	sbci	r25, 0xFF	; 255
    5e74:	e0 e4       	ldi	r30, 0x40	; 64
    5e76:	be 2a       	or	r11, r30
    5e78:	2a e0       	ldi	r18, 0x0A	; 10
    5e7a:	30 e0       	ldi	r19, 0x00	; 0
    5e7c:	3a c0       	rjmp	.+116    	; 0x5ef2 <vfprintf+0x1ee>
    5e7e:	10 37       	cpi	r17, 0x70	; 112
    5e80:	b1 f0       	breq	.+44     	; 0x5eae <vfprintf+0x1aa>
    5e82:	11 37       	cpi	r17, 0x71	; 113
    5e84:	30 f4       	brcc	.+12     	; 0x5e92 <vfprintf+0x18e>
    5e86:	18 35       	cpi	r17, 0x58	; 88
    5e88:	c9 f0       	breq	.+50     	; 0x5ebc <vfprintf+0x1b8>
    5e8a:	1f 36       	cpi	r17, 0x6F	; 111
    5e8c:	09 f0       	breq	.+2      	; 0x5e90 <vfprintf+0x18c>
    5e8e:	63 c0       	rjmp	.+198    	; 0x5f56 <vfprintf+0x252>
    5e90:	06 c0       	rjmp	.+12     	; 0x5e9e <vfprintf+0x19a>
    5e92:	15 37       	cpi	r17, 0x75	; 117
    5e94:	39 f0       	breq	.+14     	; 0x5ea4 <vfprintf+0x1a0>
    5e96:	18 37       	cpi	r17, 0x78	; 120
    5e98:	09 f0       	breq	.+2      	; 0x5e9c <vfprintf+0x198>
    5e9a:	5d c0       	rjmp	.+186    	; 0x5f56 <vfprintf+0x252>
    5e9c:	0a c0       	rjmp	.+20     	; 0x5eb2 <vfprintf+0x1ae>
    5e9e:	28 e0       	ldi	r18, 0x08	; 8
    5ea0:	30 e0       	ldi	r19, 0x00	; 0
    5ea2:	10 c0       	rjmp	.+32     	; 0x5ec4 <vfprintf+0x1c0>
    5ea4:	ff ee       	ldi	r31, 0xEF	; 239
    5ea6:	bf 22       	and	r11, r31
    5ea8:	2a e0       	ldi	r18, 0x0A	; 10
    5eaa:	30 e0       	ldi	r19, 0x00	; 0
    5eac:	0b c0       	rjmp	.+22     	; 0x5ec4 <vfprintf+0x1c0>
    5eae:	20 e1       	ldi	r18, 0x10	; 16
    5eb0:	b2 2a       	or	r11, r18
    5eb2:	34 e2       	ldi	r19, 0x24	; 36
    5eb4:	b3 2a       	or	r11, r19
    5eb6:	20 e1       	ldi	r18, 0x10	; 16
    5eb8:	30 e0       	ldi	r19, 0x00	; 0
    5eba:	04 c0       	rjmp	.+8      	; 0x5ec4 <vfprintf+0x1c0>
    5ebc:	44 e0       	ldi	r20, 0x04	; 4
    5ebe:	b4 2a       	or	r11, r20
    5ec0:	20 e1       	ldi	r18, 0x10	; 16
    5ec2:	32 e0       	ldi	r19, 0x02	; 2
    5ec4:	b7 fe       	sbrs	r11, 7
    5ec6:	0a c0       	rjmp	.+20     	; 0x5edc <vfprintf+0x1d8>
    5ec8:	f7 01       	movw	r30, r14
    5eca:	60 81       	ld	r22, Z
    5ecc:	71 81       	ldd	r23, Z+1	; 0x01
    5ece:	82 81       	ldd	r24, Z+2	; 0x02
    5ed0:	93 81       	ldd	r25, Z+3	; 0x03
    5ed2:	44 e0       	ldi	r20, 0x04	; 4
    5ed4:	50 e0       	ldi	r21, 0x00	; 0
    5ed6:	e4 0e       	add	r14, r20
    5ed8:	f5 1e       	adc	r15, r21
    5eda:	0b c0       	rjmp	.+22     	; 0x5ef2 <vfprintf+0x1ee>
    5edc:	f7 01       	movw	r30, r14
    5ede:	80 81       	ld	r24, Z
    5ee0:	91 81       	ldd	r25, Z+1	; 0x01
    5ee2:	ac 01       	movw	r20, r24
    5ee4:	ba 01       	movw	r22, r20
    5ee6:	88 27       	eor	r24, r24
    5ee8:	99 27       	eor	r25, r25
    5eea:	e2 e0       	ldi	r30, 0x02	; 2
    5eec:	f0 e0       	ldi	r31, 0x00	; 0
    5eee:	ee 0e       	add	r14, r30
    5ef0:	ff 1e       	adc	r15, r31
    5ef2:	a3 01       	movw	r20, r6
    5ef4:	0e 94 0e 31 	call	0x621c	; 0x621c <__ultoa_invert>
    5ef8:	a8 2e       	mov	r10, r24
    5efa:	a6 18       	sub	r10, r6
    5efc:	0b 2d       	mov	r16, r11
    5efe:	11 27       	eor	r17, r17
    5f00:	06 ff       	sbrs	r16, 6
    5f02:	05 c0       	rjmp	.+10     	; 0x5f0e <vfprintf+0x20a>
    5f04:	b4 01       	movw	r22, r8
    5f06:	8d e2       	ldi	r24, 0x2D	; 45
    5f08:	90 e0       	ldi	r25, 0x00	; 0
    5f0a:	0e 94 72 30 	call	0x60e4	; 0x60e4 <fputc>
    5f0e:	04 ff       	sbrs	r16, 4
    5f10:	15 c0       	rjmp	.+42     	; 0x5f3c <vfprintf+0x238>
    5f12:	fe 01       	movw	r30, r28
    5f14:	ea 0d       	add	r30, r10
    5f16:	f1 1d       	adc	r31, r1
    5f18:	80 81       	ld	r24, Z
    5f1a:	80 33       	cpi	r24, 0x30	; 48
    5f1c:	79 f0       	breq	.+30     	; 0x5f3c <vfprintf+0x238>
    5f1e:	b4 01       	movw	r22, r8
    5f20:	80 e3       	ldi	r24, 0x30	; 48
    5f22:	90 e0       	ldi	r25, 0x00	; 0
    5f24:	0e 94 72 30 	call	0x60e4	; 0x60e4 <fputc>
    5f28:	02 ff       	sbrs	r16, 2
    5f2a:	08 c0       	rjmp	.+16     	; 0x5f3c <vfprintf+0x238>
    5f2c:	00 72       	andi	r16, 0x20	; 32
    5f2e:	10 70       	andi	r17, 0x00	; 0
    5f30:	b4 01       	movw	r22, r8
    5f32:	c8 01       	movw	r24, r16
    5f34:	88 5a       	subi	r24, 0xA8	; 168
    5f36:	9f 4f       	sbci	r25, 0xFF	; 255
    5f38:	0e 94 72 30 	call	0x60e4	; 0x60e4 <fputc>
    5f3c:	aa 94       	dec	r10
    5f3e:	f3 01       	movw	r30, r6
    5f40:	ea 0d       	add	r30, r10
    5f42:	f1 1d       	adc	r31, r1
    5f44:	80 81       	ld	r24, Z
    5f46:	b4 01       	movw	r22, r8
    5f48:	99 27       	eor	r25, r25
    5f4a:	0e 94 72 30 	call	0x60e4	; 0x60e4 <fputc>
    5f4e:	aa 20       	and	r10, r10
    5f50:	09 f4       	brne	.+2      	; 0x5f54 <vfprintf+0x250>
    5f52:	fb ce       	rjmp	.-522    	; 0x5d4a <vfprintf+0x46>
    5f54:	f3 cf       	rjmp	.-26     	; 0x5f3c <vfprintf+0x238>
    5f56:	f4 01       	movw	r30, r8
    5f58:	86 81       	ldd	r24, Z+6	; 0x06
    5f5a:	97 81       	ldd	r25, Z+7	; 0x07
    5f5c:	e2 e1       	ldi	r30, 0x12	; 18
    5f5e:	2b 96       	adiw	r28, 0x0b	; 11
    5f60:	0c 94 11 33 	jmp	0x6622	; 0x6622 <__epilogue_restores__>

00005f64 <do_rand>:
//-------------------------------------------------------------------------------------------------------
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
    5f64:	a0 e0       	ldi	r26, 0x00	; 0
    5f66:	b0 e0       	ldi	r27, 0x00	; 0
    5f68:	e8 eb       	ldi	r30, 0xB8	; 184
    5f6a:	ff e2       	ldi	r31, 0x2F	; 47
    5f6c:	0c 94 fd 32 	jmp	0x65fa	; 0x65fa <__prologue_saves__+0x10>
    5f70:	ec 01       	movw	r28, r24
    5f72:	68 81       	ld	r22, Y
    5f74:	79 81       	ldd	r23, Y+1	; 0x01
    5f76:	8a 81       	ldd	r24, Y+2	; 0x02
    5f78:	9b 81       	ldd	r25, Y+3	; 0x03
    5f7a:	61 15       	cp	r22, r1
    5f7c:	71 05       	cpc	r23, r1
    5f7e:	81 05       	cpc	r24, r1
    5f80:	91 05       	cpc	r25, r1
    5f82:	49 f4       	brne	.+18     	; 0x5f96 <do_rand+0x32>
    5f84:	84 e2       	ldi	r24, 0x24	; 36
    5f86:	a8 2e       	mov	r10, r24
    5f88:	89 ed       	ldi	r24, 0xD9	; 217
    5f8a:	b8 2e       	mov	r11, r24
    5f8c:	8b e5       	ldi	r24, 0x5B	; 91
    5f8e:	c8 2e       	mov	r12, r24
    5f90:	87 e0       	ldi	r24, 0x07	; 7
    5f92:	d8 2e       	mov	r13, r24
    5f94:	02 c0       	rjmp	.+4      	; 0x5f9a <do_rand+0x36>
    5f96:	5b 01       	movw	r10, r22
    5f98:	6c 01       	movw	r12, r24
    5f9a:	c6 01       	movw	r24, r12
    5f9c:	b5 01       	movw	r22, r10
    5f9e:	2d e1       	ldi	r18, 0x1D	; 29
    5fa0:	33 ef       	ldi	r19, 0xF3	; 243
    5fa2:	41 e0       	ldi	r20, 0x01	; 1
    5fa4:	50 e0       	ldi	r21, 0x00	; 0
    5fa6:	0e 94 40 33 	call	0x6680	; 0x6680 <__divmodsi4>
    5faa:	27 ea       	ldi	r18, 0xA7	; 167
    5fac:	31 e4       	ldi	r19, 0x41	; 65
    5fae:	40 e0       	ldi	r20, 0x00	; 0
    5fb0:	50 e0       	ldi	r21, 0x00	; 0
    5fb2:	0e 94 8d 32 	call	0x651a	; 0x651a <__mulsi3>
    5fb6:	7b 01       	movw	r14, r22
    5fb8:	8c 01       	movw	r16, r24
    5fba:	c6 01       	movw	r24, r12
    5fbc:	b5 01       	movw	r22, r10
    5fbe:	2d e1       	ldi	r18, 0x1D	; 29
    5fc0:	33 ef       	ldi	r19, 0xF3	; 243
    5fc2:	41 e0       	ldi	r20, 0x01	; 1
    5fc4:	50 e0       	ldi	r21, 0x00	; 0
    5fc6:	0e 94 40 33 	call	0x6680	; 0x6680 <__divmodsi4>
    5fca:	ca 01       	movw	r24, r20
    5fcc:	b9 01       	movw	r22, r18
    5fce:	24 e1       	ldi	r18, 0x14	; 20
    5fd0:	3b e0       	ldi	r19, 0x0B	; 11
    5fd2:	40 e0       	ldi	r20, 0x00	; 0
    5fd4:	50 e0       	ldi	r21, 0x00	; 0
    5fd6:	0e 94 8d 32 	call	0x651a	; 0x651a <__mulsi3>
    5fda:	e6 1a       	sub	r14, r22
    5fdc:	f7 0a       	sbc	r15, r23
    5fde:	08 0b       	sbc	r16, r24
    5fe0:	19 0b       	sbc	r17, r25
    5fe2:	17 ff       	sbrs	r17, 7
    5fe4:	08 c0       	rjmp	.+16     	; 0x5ff6 <do_rand+0x92>
    5fe6:	8f ef       	ldi	r24, 0xFF	; 255
    5fe8:	9f ef       	ldi	r25, 0xFF	; 255
    5fea:	af ef       	ldi	r26, 0xFF	; 255
    5fec:	bf e7       	ldi	r27, 0x7F	; 127
    5fee:	e8 0e       	add	r14, r24
    5ff0:	f9 1e       	adc	r15, r25
    5ff2:	0a 1f       	adc	r16, r26
    5ff4:	1b 1f       	adc	r17, r27
    5ff6:	e8 82       	st	Y, r14
    5ff8:	f9 82       	std	Y+1, r15	; 0x01
    5ffa:	0a 83       	std	Y+2, r16	; 0x02
    5ffc:	1b 83       	std	Y+3, r17	; 0x03
    5ffe:	c7 01       	movw	r24, r14
    6000:	9f 77       	andi	r25, 0x7F	; 127
    6002:	ea e0       	ldi	r30, 0x0A	; 10
    6004:	cd b7       	in	r28, 0x3d	; 61
    6006:	de b7       	in	r29, 0x3e	; 62
    6008:	0c 94 19 33 	jmp	0x6632	; 0x6632 <__epilogue_restores__+0x10>

0000600c <rand_r>:
    600c:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <do_rand>
    6010:	08 95       	ret

00006012 <rand>:
    6012:	8a eb       	ldi	r24, 0xBA	; 186
    6014:	92 e0       	ldi	r25, 0x02	; 2
    6016:	0e 94 b2 2f 	call	0x5f64	; 0x5f64 <do_rand>
    601a:	08 95       	ret

0000601c <srand>:
    601c:	aa 27       	eor	r26, r26
    601e:	bb 27       	eor	r27, r27
    6020:	80 93 ba 02 	sts	0x02BA, r24
    6024:	90 93 bb 02 	sts	0x02BB, r25
    6028:	a0 93 bc 02 	sts	0x02BC, r26
    602c:	b0 93 bd 02 	sts	0x02BD, r27
    6030:	08 95       	ret

00006032 <strchr_P>:
    6032:	fc 01       	movw	r30, r24
    6034:	05 90       	lpm	r0, Z+
    6036:	06 16       	cp	r0, r22
    6038:	21 f0       	breq	.+8      	; 0x6042 <strchr_P+0x10>
    603a:	00 20       	and	r0, r0
    603c:	d9 f7       	brne	.-10     	; 0x6034 <strchr_P+0x2>
    603e:	c0 01       	movw	r24, r0
    6040:	08 95       	ret
    6042:	31 97       	sbiw	r30, 0x01	; 1
    6044:	cf 01       	movw	r24, r30
    6046:	08 95       	ret

00006048 <fdevopen>:
    6048:	ef 92       	push	r14
    604a:	ff 92       	push	r15
    604c:	0f 93       	push	r16
    604e:	1f 93       	push	r17
    6050:	cf 93       	push	r28
    6052:	df 93       	push	r29
    6054:	8c 01       	movw	r16, r24
    6056:	7b 01       	movw	r14, r22
    6058:	89 2b       	or	r24, r25
    605a:	11 f4       	brne	.+4      	; 0x6060 <fdevopen+0x18>
    605c:	67 2b       	or	r22, r23
    605e:	d1 f1       	breq	.+116    	; 0x60d4 <fdevopen+0x8c>
    6060:	6e e0       	ldi	r22, 0x0E	; 14
    6062:	70 e0       	ldi	r23, 0x00	; 0
    6064:	81 e0       	ldi	r24, 0x01	; 1
    6066:	90 e0       	ldi	r25, 0x00	; 0
    6068:	0e 94 6c 31 	call	0x62d8	; 0x62d8 <calloc>
    606c:	fc 01       	movw	r30, r24
    606e:	00 97       	sbiw	r24, 0x00	; 0
    6070:	89 f1       	breq	.+98     	; 0x60d4 <fdevopen+0x8c>
    6072:	dc 01       	movw	r26, r24
    6074:	80 e8       	ldi	r24, 0x80	; 128
    6076:	83 83       	std	Z+3, r24	; 0x03
    6078:	e1 14       	cp	r14, r1
    607a:	f1 04       	cpc	r15, r1
    607c:	71 f0       	breq	.+28     	; 0x609a <fdevopen+0x52>
    607e:	f3 86       	std	Z+11, r15	; 0x0b
    6080:	e2 86       	std	Z+10, r14	; 0x0a
    6082:	81 e8       	ldi	r24, 0x81	; 129
    6084:	83 83       	std	Z+3, r24	; 0x03
    6086:	80 91 a7 06 	lds	r24, 0x06A7
    608a:	90 91 a8 06 	lds	r25, 0x06A8
    608e:	89 2b       	or	r24, r25
    6090:	21 f4       	brne	.+8      	; 0x609a <fdevopen+0x52>
    6092:	f0 93 a8 06 	sts	0x06A8, r31
    6096:	e0 93 a7 06 	sts	0x06A7, r30
    609a:	01 15       	cp	r16, r1
    609c:	11 05       	cpc	r17, r1
    609e:	e1 f0       	breq	.+56     	; 0x60d8 <fdevopen+0x90>
    60a0:	11 87       	std	Z+9, r17	; 0x09
    60a2:	00 87       	std	Z+8, r16	; 0x08
    60a4:	83 81       	ldd	r24, Z+3	; 0x03
    60a6:	82 60       	ori	r24, 0x02	; 2
    60a8:	83 83       	std	Z+3, r24	; 0x03
    60aa:	80 91 a9 06 	lds	r24, 0x06A9
    60ae:	90 91 aa 06 	lds	r25, 0x06AA
    60b2:	89 2b       	or	r24, r25
    60b4:	89 f4       	brne	.+34     	; 0x60d8 <fdevopen+0x90>
    60b6:	f0 93 aa 06 	sts	0x06AA, r31
    60ba:	e0 93 a9 06 	sts	0x06A9, r30
    60be:	80 91 ab 06 	lds	r24, 0x06AB
    60c2:	90 91 ac 06 	lds	r25, 0x06AC
    60c6:	89 2b       	or	r24, r25
    60c8:	39 f4       	brne	.+14     	; 0x60d8 <fdevopen+0x90>
    60ca:	f0 93 ac 06 	sts	0x06AC, r31
    60ce:	e0 93 ab 06 	sts	0x06AB, r30
    60d2:	02 c0       	rjmp	.+4      	; 0x60d8 <fdevopen+0x90>
    60d4:	a0 e0       	ldi	r26, 0x00	; 0
    60d6:	b0 e0       	ldi	r27, 0x00	; 0
    60d8:	cd 01       	movw	r24, r26
    60da:	e6 e0       	ldi	r30, 0x06	; 6
    60dc:	cd b7       	in	r28, 0x3d	; 61
    60de:	de b7       	in	r29, 0x3e	; 62
    60e0:	0c 94 1d 33 	jmp	0x663a	; 0x663a <__epilogue_restores__+0x18>

000060e4 <fputc>:
//		Waits for the crystal oscillator to become stable. The flag is polled via the SPI status byte.
//      
//      Note that this function will lock up if the SXOSCON command strobe has not been given before the
//      function call. Also note that global interrupts will always be enabled when this function 
//      returns.
//-------------------------------------------------------------------------------------------------------
    60e4:	0f 93       	push	r16
    60e6:	1f 93       	push	r17
    60e8:	cf 93       	push	r28
    60ea:	df 93       	push	r29
    60ec:	8c 01       	movw	r16, r24
    60ee:	eb 01       	movw	r28, r22
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;
    60f0:	8b 81       	ldd	r24, Y+3	; 0x03
    60f2:	99 27       	eor	r25, r25
    60f4:	81 ff       	sbrs	r24, 1
    60f6:	1b c0       	rjmp	.+54     	; 0x612e <fputc+0x4a>

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
    60f8:	82 ff       	sbrs	r24, 2
    60fa:	0d c0       	rjmp	.+26     	; 0x6116 <fputc+0x32>
	    DISABLE_GLOBAL_INT();
    60fc:	2e 81       	ldd	r18, Y+6	; 0x06
    60fe:	3f 81       	ldd	r19, Y+7	; 0x07
    6100:	8c 81       	ldd	r24, Y+4	; 0x04
    6102:	9d 81       	ldd	r25, Y+5	; 0x05
    6104:	28 17       	cp	r18, r24
    6106:	39 07       	cpc	r19, r25
    6108:	64 f4       	brge	.+24     	; 0x6122 <fputc+0x3e>
	    FASTSPI_UPD_STATUS(spiStatusByte);
    610a:	e8 81       	ld	r30, Y
    610c:	f9 81       	ldd	r31, Y+1	; 0x01
    610e:	01 93       	st	Z+, r16
    6110:	f9 83       	std	Y+1, r31	; 0x01
    6112:	e8 83       	st	Y, r30
    6114:	06 c0       	rjmp	.+12     	; 0x6122 <fputc+0x3e>
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

} // halRfWaitForCrystalOscillator
    6116:	e8 85       	ldd	r30, Y+8	; 0x08
    6118:	f9 85       	ldd	r31, Y+9	; 0x09
    611a:	80 2f       	mov	r24, r16
    611c:	09 95       	icall
    611e:	89 2b       	or	r24, r25
    6120:	31 f4       	brne	.+12     	; 0x612e <fputc+0x4a>

    6122:	8e 81       	ldd	r24, Y+6	; 0x06
    6124:	9f 81       	ldd	r25, Y+7	; 0x07
    6126:	01 96       	adiw	r24, 0x01	; 1
    6128:	9f 83       	std	Y+7, r25	; 0x07
    612a:	8e 83       	std	Y+6, r24	; 0x06
    612c:	02 c0       	rjmp	.+4      	; 0x6132 <fputc+0x4e>
    612e:	0f ef       	ldi	r16, 0xFF	; 255
    6130:	1f ef       	ldi	r17, 0xFF	; 255
    6132:	c8 01       	movw	r24, r16
    6134:	df 91       	pop	r29
    6136:	cf 91       	pop	r28
    6138:	1f 91       	pop	r17
    613a:	0f 91       	pop	r16
    613c:	08 95       	ret

0000613e <printf>:
//	DESCRIPTION:
//		Waits for the crystal oscillator to become stable. The flag is polled via the SPI status byte.
//      
//      Note that this function will lock up if the SXOSCON command strobe has not been given before the
//      function call. Also note that global interrupts will always be enabled when this function 
//      returns.
    613e:	a2 e0       	ldi	r26, 0x02	; 2
    6140:	b0 e0       	ldi	r27, 0x00	; 0
    6142:	e5 ea       	ldi	r30, 0xA5	; 165
    6144:	f0 e3       	ldi	r31, 0x30	; 48
    6146:	0c 94 05 33 	jmp	0x660a	; 0x660a <__prologue_saves__+0x20>
    614a:	fe 01       	movw	r30, r28
    614c:	37 96       	adiw	r30, 0x07	; 7
    614e:	61 91       	ld	r22, Z+
    6150:	71 91       	ld	r23, Z+
//-------------------------------------------------------------------------------------------------------
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    6152:	fa 83       	std	Y+2, r31	; 0x02
    6154:	e9 83       	std	Y+1, r30	; 0x01
    // Poll the SPI status byte until the crystal oscillator is stable
    6156:	af 01       	movw	r20, r30
    6158:	80 91 a9 06 	lds	r24, 0x06A9
    615c:	90 91 aa 06 	lds	r25, 0x06AA
    6160:	0e 94 82 2e 	call	0x5d04	; 0x5d04 <vfprintf>
    6164:	e2 e0       	ldi	r30, 0x02	; 2
    6166:	22 96       	adiw	r28, 0x02	; 2
    6168:	0c 94 21 33 	jmp	0x6642	; 0x6642 <__epilogue_restores__+0x20>

0000616c <puts>:
//		Waits for the crystal oscillator to become stable. The flag is polled via the SPI status byte.
//      
//      Note that this function will lock up if the SXOSCON command strobe has not been given before the
//      function call. Also note that global interrupts will always be enabled when this function 
//      returns.
//-------------------------------------------------------------------------------------------------------
    616c:	0f 93       	push	r16
    616e:	1f 93       	push	r17
    6170:	cf 93       	push	r28
    6172:	df 93       	push	r29
    6174:	8c 01       	movw	r16, r24
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    6176:	e0 91 a9 06 	lds	r30, 0x06A9
    617a:	f0 91 aa 06 	lds	r31, 0x06AA
    617e:	83 81       	ldd	r24, Z+3	; 0x03
    6180:	81 ff       	sbrs	r24, 1
    6182:	1f c0       	rjmp	.+62     	; 0x61c2 <puts+0x56>
    6184:	c0 e0       	ldi	r28, 0x00	; 0
    6186:	d0 e0       	ldi	r29, 0x00	; 0
    6188:	0a c0       	rjmp	.+20     	; 0x619e <puts+0x32>
    do {
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
	    ENABLE_GLOBAL_INT();
    618a:	fd 01       	movw	r30, r26
    618c:	20 85       	ldd	r18, Z+8	; 0x08
    618e:	31 85       	ldd	r19, Z+9	; 0x09
    6190:	bd 01       	movw	r22, r26
    6192:	f9 01       	movw	r30, r18
    6194:	09 95       	icall
    6196:	89 2b       	or	r24, r25
    6198:	11 f0       	breq	.+4      	; 0x619e <puts+0x32>
    619a:	cf ef       	ldi	r28, 0xFF	; 255
    619c:	df ef       	ldi	r29, 0xFF	; 255
    uint8_t spiStatusByte;

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
    619e:	f8 01       	movw	r30, r16
    61a0:	81 91       	ld	r24, Z+
    61a2:	8f 01       	movw	r16, r30
    61a4:	a0 91 a9 06 	lds	r26, 0x06A9
    61a8:	b0 91 aa 06 	lds	r27, 0x06AA
    61ac:	88 23       	and	r24, r24
    61ae:	69 f7       	brne	.-38     	; 0x618a <puts+0x1e>
	    ENABLE_GLOBAL_INT();
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));

    61b0:	fd 01       	movw	r30, r26
    61b2:	20 85       	ldd	r18, Z+8	; 0x08
    61b4:	31 85       	ldd	r19, Z+9	; 0x09
    61b6:	bd 01       	movw	r22, r26
    61b8:	8a e0       	ldi	r24, 0x0A	; 10
    61ba:	f9 01       	movw	r30, r18
    61bc:	09 95       	icall
    61be:	89 2b       	or	r24, r25
    61c0:	11 f0       	breq	.+4      	; 0x61c6 <puts+0x5a>
    61c2:	cf ef       	ldi	r28, 0xFF	; 255
    61c4:	df ef       	ldi	r29, 0xFF	; 255
} // halRfWaitForCrystalOscillator

    61c6:	ce 01       	movw	r24, r28
    61c8:	df 91       	pop	r29
    61ca:	cf 91       	pop	r28
    61cc:	1f 91       	pop	r17
    61ce:	0f 91       	pop	r16
    61d0:	08 95       	ret

000061d2 <sprintf>:
//      Note that this function will lock up if the SXOSCON command strobe has not been given before the
//      function call. Also note that global interrupts will always be enabled when this function 
//      returns.
//-------------------------------------------------------------------------------------------------------
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;
    61d2:	a0 e1       	ldi	r26, 0x10	; 16
    61d4:	b0 e0       	ldi	r27, 0x00	; 0
    61d6:	ef ee       	ldi	r30, 0xEF	; 239
    61d8:	f0 e3       	ldi	r31, 0x30	; 48
    61da:	0c 94 03 33 	jmp	0x6606	; 0x6606 <__prologue_saves__+0x1c>
    61de:	0f 89       	ldd	r16, Y+23	; 0x17
    61e0:	18 8d       	ldd	r17, Y+24	; 0x18

    // Poll the SPI status byte until the crystal oscillator is stable
    do {
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
    61e2:	86 e0       	ldi	r24, 0x06	; 6
    61e4:	8e 83       	std	Y+6, r24	; 0x06
	    ENABLE_GLOBAL_INT();
    61e6:	1c 83       	std	Y+4, r17	; 0x04
    61e8:	0b 83       	std	Y+3, r16	; 0x03
    } while (!(spiStatusByte & (BM(CC2420_XOSC16M_STABLE))));
    61ea:	8f ef       	ldi	r24, 0xFF	; 255
    61ec:	9f e7       	ldi	r25, 0x7F	; 127
    61ee:	98 87       	std	Y+8, r25	; 0x08
    61f0:	8f 83       	std	Y+7, r24	; 0x07

    61f2:	ae 01       	movw	r20, r28
    61f4:	45 5e       	subi	r20, 0xE5	; 229
    61f6:	5f 4f       	sbci	r21, 0xFF	; 255
    61f8:	5a 83       	std	Y+2, r21	; 0x02
    61fa:	49 83       	std	Y+1, r20	; 0x01
} // halRfWaitForCrystalOscillator
    61fc:	69 8d       	ldd	r22, Y+25	; 0x19
    61fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6200:	ce 01       	movw	r24, r28
    6202:	03 96       	adiw	r24, 0x03	; 3
    6204:	0e 94 82 2e 	call	0x5d04	; 0x5d04 <vfprintf>

    6208:	29 85       	ldd	r18, Y+9	; 0x09
    620a:	3a 85       	ldd	r19, Y+10	; 0x0a
    620c:	02 0f       	add	r16, r18
    620e:	13 1f       	adc	r17, r19
    6210:	f8 01       	movw	r30, r16
    6212:	10 82       	st	Z, r1
    6214:	e4 e0       	ldi	r30, 0x04	; 4
    6216:	60 96       	adiw	r28, 0x10	; 16
    6218:	0c 94 1f 33 	jmp	0x663e	; 0x663e <__epilogue_restores__+0x1c>

0000621c <__ultoa_invert>:
    621c:	fa 01       	movw	r30, r20
    621e:	aa 27       	eor	r26, r26
    6220:	28 30       	cpi	r18, 0x08	; 8
    6222:	51 f1       	breq	.+84     	; 0x6278 <__ultoa_invert+0x5c>
    6224:	20 31       	cpi	r18, 0x10	; 16
    6226:	81 f1       	breq	.+96     	; 0x6288 <__ultoa_invert+0x6c>
    6228:	e8 94       	clt
    622a:	6f 93       	push	r22
    622c:	6e 7f       	andi	r22, 0xFE	; 254
    622e:	6e 5f       	subi	r22, 0xFE	; 254
    6230:	7f 4f       	sbci	r23, 0xFF	; 255
    6232:	8f 4f       	sbci	r24, 0xFF	; 255
    6234:	9f 4f       	sbci	r25, 0xFF	; 255
    6236:	af 4f       	sbci	r26, 0xFF	; 255
    6238:	b1 e0       	ldi	r27, 0x01	; 1
    623a:	3e d0       	rcall	.+124    	; 0x62b8 <__ultoa_invert+0x9c>
    623c:	b4 e0       	ldi	r27, 0x04	; 4
    623e:	3c d0       	rcall	.+120    	; 0x62b8 <__ultoa_invert+0x9c>
    6240:	67 0f       	add	r22, r23
    6242:	78 1f       	adc	r23, r24
    6244:	89 1f       	adc	r24, r25
    6246:	9a 1f       	adc	r25, r26
    6248:	a1 1d       	adc	r26, r1
    624a:	68 0f       	add	r22, r24
    624c:	79 1f       	adc	r23, r25
    624e:	8a 1f       	adc	r24, r26
    6250:	91 1d       	adc	r25, r1
    6252:	a1 1d       	adc	r26, r1
    6254:	6a 0f       	add	r22, r26
    6256:	71 1d       	adc	r23, r1
    6258:	81 1d       	adc	r24, r1
    625a:	91 1d       	adc	r25, r1
    625c:	a1 1d       	adc	r26, r1
    625e:	20 d0       	rcall	.+64     	; 0x62a0 <__ultoa_invert+0x84>
    6260:	09 f4       	brne	.+2      	; 0x6264 <__ultoa_invert+0x48>
    6262:	68 94       	set
    6264:	3f 91       	pop	r19
    6266:	2a e0       	ldi	r18, 0x0A	; 10
    6268:	26 9f       	mul	r18, r22
    626a:	11 24       	eor	r1, r1
    626c:	30 19       	sub	r19, r0
    626e:	30 5d       	subi	r19, 0xD0	; 208
    6270:	31 93       	st	Z+, r19
    6272:	de f6       	brtc	.-74     	; 0x622a <__ultoa_invert+0xe>
    6274:	cf 01       	movw	r24, r30
    6276:	08 95       	ret
    6278:	46 2f       	mov	r20, r22
    627a:	47 70       	andi	r20, 0x07	; 7
    627c:	40 5d       	subi	r20, 0xD0	; 208
    627e:	41 93       	st	Z+, r20
    6280:	b3 e0       	ldi	r27, 0x03	; 3
    6282:	0f d0       	rcall	.+30     	; 0x62a2 <__ultoa_invert+0x86>
    6284:	c9 f7       	brne	.-14     	; 0x6278 <__ultoa_invert+0x5c>
    6286:	f6 cf       	rjmp	.-20     	; 0x6274 <__ultoa_invert+0x58>
    6288:	46 2f       	mov	r20, r22
    628a:	4f 70       	andi	r20, 0x0F	; 15
    628c:	40 5d       	subi	r20, 0xD0	; 208
    628e:	4a 33       	cpi	r20, 0x3A	; 58
    6290:	18 f0       	brcs	.+6      	; 0x6298 <__ultoa_invert+0x7c>
    6292:	49 5d       	subi	r20, 0xD9	; 217
    6294:	31 fd       	sbrc	r19, 1
    6296:	40 52       	subi	r20, 0x20	; 32
    6298:	41 93       	st	Z+, r20
    629a:	02 d0       	rcall	.+4      	; 0x62a0 <__ultoa_invert+0x84>
    629c:	a9 f7       	brne	.-22     	; 0x6288 <__ultoa_invert+0x6c>
    629e:	ea cf       	rjmp	.-44     	; 0x6274 <__ultoa_invert+0x58>
    62a0:	b4 e0       	ldi	r27, 0x04	; 4
    62a2:	a6 95       	lsr	r26
    62a4:	97 95       	ror	r25
    62a6:	87 95       	ror	r24
    62a8:	77 95       	ror	r23
    62aa:	67 95       	ror	r22
    62ac:	ba 95       	dec	r27
    62ae:	c9 f7       	brne	.-14     	; 0x62a2 <__ultoa_invert+0x86>
    62b0:	00 97       	sbiw	r24, 0x00	; 0
    62b2:	61 05       	cpc	r22, r1
    62b4:	71 05       	cpc	r23, r1
    62b6:	08 95       	ret
    62b8:	9b 01       	movw	r18, r22
    62ba:	ac 01       	movw	r20, r24
    62bc:	0a 2e       	mov	r0, r26
    62be:	06 94       	lsr	r0
    62c0:	57 95       	ror	r21
    62c2:	47 95       	ror	r20
    62c4:	37 95       	ror	r19
    62c6:	27 95       	ror	r18
    62c8:	ba 95       	dec	r27
    62ca:	c9 f7       	brne	.-14     	; 0x62be <__ultoa_invert+0xa2>
    62cc:	62 0f       	add	r22, r18
    62ce:	73 1f       	adc	r23, r19
    62d0:	84 1f       	adc	r24, r20
    62d2:	95 1f       	adc	r25, r21
    62d4:	a0 1d       	adc	r26, r0
    62d6:	08 95       	ret

000062d8 <calloc>:
//		Waits for the crystal oscillator to become stable. The flag is polled via the SPI status byte.
//      
//      Note that this function will lock up if the SXOSCON command strobe has not been given before the
//      function call. Also note that global interrupts will always be enabled when this function 
//      returns.
//-------------------------------------------------------------------------------------------------------
    62d8:	0f 93       	push	r16
    62da:	1f 93       	push	r17
    62dc:	cf 93       	push	r28
    62de:	df 93       	push	r29
void halRfWaitForCrystalOscillator(void) {
    uint8_t spiStatusByte;

    62e0:	68 9f       	mul	r22, r24
    62e2:	80 01       	movw	r16, r0
    62e4:	69 9f       	mul	r22, r25
    62e6:	10 0d       	add	r17, r0
    62e8:	78 9f       	mul	r23, r24
    62ea:	10 0d       	add	r17, r0
    62ec:	11 24       	eor	r1, r1
    62ee:	c8 01       	movw	r24, r16
    62f0:	0e 94 88 31 	call	0x6310	; 0x6310 <malloc>
    62f4:	ec 01       	movw	r28, r24
    62f6:	00 97       	sbiw	r24, 0x00	; 0
    62f8:	29 f0       	breq	.+10     	; 0x6304 <calloc+0x2c>
    // Poll the SPI status byte until the crystal oscillator is stable
    do {
    62fa:	a8 01       	movw	r20, r16
    62fc:	60 e0       	ldi	r22, 0x00	; 0
    62fe:	70 e0       	ldi	r23, 0x00	; 0
    6300:	0e 94 86 32 	call	0x650c	; 0x650c <memset>
	    DISABLE_GLOBAL_INT();
	    FASTSPI_UPD_STATUS(spiStatusByte);
    6304:	ce 01       	movw	r24, r28
    6306:	df 91       	pop	r29
    6308:	cf 91       	pop	r28
    630a:	1f 91       	pop	r17
    630c:	0f 91       	pop	r16
    630e:	08 95       	ret

00006310 <malloc>:
    6310:	cf 93       	push	r28
    6312:	df 93       	push	r29
    6314:	ac 01       	movw	r20, r24
    6316:	02 97       	sbiw	r24, 0x02	; 2
    6318:	10 f4       	brcc	.+4      	; 0x631e <malloc+0xe>
    631a:	42 e0       	ldi	r20, 0x02	; 2
    631c:	50 e0       	ldi	r21, 0x00	; 0
    631e:	a0 91 af 06 	lds	r26, 0x06AF
    6322:	b0 91 b0 06 	lds	r27, 0x06B0
    6326:	fd 01       	movw	r30, r26
    6328:	c0 e0       	ldi	r28, 0x00	; 0
    632a:	d0 e0       	ldi	r29, 0x00	; 0
    632c:	20 e0       	ldi	r18, 0x00	; 0
    632e:	30 e0       	ldi	r19, 0x00	; 0
    6330:	20 c0       	rjmp	.+64     	; 0x6372 <malloc+0x62>
    6332:	80 81       	ld	r24, Z
    6334:	91 81       	ldd	r25, Z+1	; 0x01
    6336:	84 17       	cp	r24, r20
    6338:	95 07       	cpc	r25, r21
    633a:	69 f4       	brne	.+26     	; 0x6356 <malloc+0x46>
    633c:	82 81       	ldd	r24, Z+2	; 0x02
    633e:	93 81       	ldd	r25, Z+3	; 0x03
    6340:	20 97       	sbiw	r28, 0x00	; 0
    6342:	19 f0       	breq	.+6      	; 0x634a <malloc+0x3a>
    6344:	9b 83       	std	Y+3, r25	; 0x03
    6346:	8a 83       	std	Y+2, r24	; 0x02
    6348:	04 c0       	rjmp	.+8      	; 0x6352 <malloc+0x42>
    634a:	90 93 b0 06 	sts	0x06B0, r25
    634e:	80 93 af 06 	sts	0x06AF, r24
    6352:	9f 01       	movw	r18, r30
    6354:	32 c0       	rjmp	.+100    	; 0x63ba <malloc+0xaa>
    6356:	48 17       	cp	r20, r24
    6358:	59 07       	cpc	r21, r25
    635a:	38 f4       	brcc	.+14     	; 0x636a <malloc+0x5a>
    635c:	21 15       	cp	r18, r1
    635e:	31 05       	cpc	r19, r1
    6360:	19 f0       	breq	.+6      	; 0x6368 <malloc+0x58>
    6362:	82 17       	cp	r24, r18
    6364:	93 07       	cpc	r25, r19
    6366:	08 f4       	brcc	.+2      	; 0x636a <malloc+0x5a>
    6368:	9c 01       	movw	r18, r24
    636a:	ef 01       	movw	r28, r30
    636c:	02 80       	ldd	r0, Z+2	; 0x02
    636e:	f3 81       	ldd	r31, Z+3	; 0x03
    6370:	e0 2d       	mov	r30, r0
    6372:	30 97       	sbiw	r30, 0x00	; 0
    6374:	f1 f6       	brne	.-68     	; 0x6332 <malloc+0x22>
    6376:	21 15       	cp	r18, r1
    6378:	31 05       	cpc	r19, r1
    637a:	99 f1       	breq	.+102    	; 0x63e2 <malloc+0xd2>
    637c:	c9 01       	movw	r24, r18
    637e:	84 1b       	sub	r24, r20
    6380:	95 0b       	sbc	r25, r21
    6382:	04 97       	sbiw	r24, 0x04	; 4
    6384:	08 f4       	brcc	.+2      	; 0x6388 <malloc+0x78>
    6386:	a9 01       	movw	r20, r18
    6388:	e0 e0       	ldi	r30, 0x00	; 0
    638a:	f0 e0       	ldi	r31, 0x00	; 0
    638c:	28 c0       	rjmp	.+80     	; 0x63de <malloc+0xce>
    638e:	8d 91       	ld	r24, X+
    6390:	9c 91       	ld	r25, X
    6392:	11 97       	sbiw	r26, 0x01	; 1
    6394:	82 17       	cp	r24, r18
    6396:	93 07       	cpc	r25, r19
    6398:	f9 f4       	brne	.+62     	; 0x63d8 <malloc+0xc8>
    639a:	48 17       	cp	r20, r24
    639c:	59 07       	cpc	r21, r25
    639e:	81 f4       	brne	.+32     	; 0x63c0 <malloc+0xb0>
    63a0:	ed 01       	movw	r28, r26
    63a2:	8a 81       	ldd	r24, Y+2	; 0x02
    63a4:	9b 81       	ldd	r25, Y+3	; 0x03
    63a6:	30 97       	sbiw	r30, 0x00	; 0
    63a8:	19 f0       	breq	.+6      	; 0x63b0 <malloc+0xa0>
    63aa:	93 83       	std	Z+3, r25	; 0x03
    63ac:	82 83       	std	Z+2, r24	; 0x02
    63ae:	04 c0       	rjmp	.+8      	; 0x63b8 <malloc+0xa8>
    63b0:	90 93 b0 06 	sts	0x06B0, r25
    63b4:	80 93 af 06 	sts	0x06AF, r24
    63b8:	9d 01       	movw	r18, r26
    63ba:	2e 5f       	subi	r18, 0xFE	; 254
    63bc:	3f 4f       	sbci	r19, 0xFF	; 255
    63be:	4c c0       	rjmp	.+152    	; 0x6458 <malloc+0x148>
    63c0:	84 1b       	sub	r24, r20
    63c2:	95 0b       	sbc	r25, r21
    63c4:	fd 01       	movw	r30, r26
    63c6:	e8 0f       	add	r30, r24
    63c8:	f9 1f       	adc	r31, r25
    63ca:	41 93       	st	Z+, r20
    63cc:	51 93       	st	Z+, r21
    63ce:	02 97       	sbiw	r24, 0x02	; 2
    63d0:	8d 93       	st	X+, r24
    63d2:	9c 93       	st	X, r25
    63d4:	9f 01       	movw	r18, r30
    63d6:	40 c0       	rjmp	.+128    	; 0x6458 <malloc+0x148>
    63d8:	fd 01       	movw	r30, r26
    63da:	a2 81       	ldd	r26, Z+2	; 0x02
    63dc:	b3 81       	ldd	r27, Z+3	; 0x03
    63de:	10 97       	sbiw	r26, 0x00	; 0
    63e0:	b1 f6       	brne	.-84     	; 0x638e <malloc+0x7e>
    63e2:	80 91 ad 06 	lds	r24, 0x06AD
    63e6:	90 91 ae 06 	lds	r25, 0x06AE
    63ea:	89 2b       	or	r24, r25
    63ec:	41 f4       	brne	.+16     	; 0x63fe <malloc+0xee>
    63ee:	80 91 c0 02 	lds	r24, 0x02C0
    63f2:	90 91 c1 02 	lds	r25, 0x02C1
    63f6:	90 93 ae 06 	sts	0x06AE, r25
    63fa:	80 93 ad 06 	sts	0x06AD, r24
    63fe:	20 91 c2 02 	lds	r18, 0x02C2
    6402:	30 91 c3 02 	lds	r19, 0x02C3
    6406:	21 15       	cp	r18, r1
    6408:	31 05       	cpc	r19, r1
    640a:	49 f4       	brne	.+18     	; 0x641e <malloc+0x10e>
    640c:	8d b7       	in	r24, 0x3d	; 61
    640e:	28 2f       	mov	r18, r24
    6410:	33 27       	eor	r19, r19
    6412:	80 91 be 02 	lds	r24, 0x02BE
    6416:	90 91 bf 02 	lds	r25, 0x02BF
    641a:	28 1b       	sub	r18, r24
    641c:	39 0b       	sbc	r19, r25
    641e:	a0 91 ad 06 	lds	r26, 0x06AD
    6422:	b0 91 ae 06 	lds	r27, 0x06AE
    6426:	2a 1b       	sub	r18, r26
    6428:	3b 0b       	sbc	r19, r27
    642a:	24 17       	cp	r18, r20
    642c:	35 07       	cpc	r19, r21
    642e:	90 f0       	brcs	.+36     	; 0x6454 <malloc+0x144>
    6430:	ca 01       	movw	r24, r20
    6432:	02 96       	adiw	r24, 0x02	; 2
    6434:	28 17       	cp	r18, r24
    6436:	39 07       	cpc	r19, r25
    6438:	68 f0       	brcs	.+26     	; 0x6454 <malloc+0x144>
    643a:	9d 01       	movw	r18, r26
    643c:	2e 5f       	subi	r18, 0xFE	; 254
    643e:	3f 4f       	sbci	r19, 0xFF	; 255
    6440:	c9 01       	movw	r24, r18
    6442:	84 0f       	add	r24, r20
    6444:	95 1f       	adc	r25, r21
    6446:	90 93 ae 06 	sts	0x06AE, r25
    644a:	80 93 ad 06 	sts	0x06AD, r24
    644e:	4d 93       	st	X+, r20
    6450:	5c 93       	st	X, r21
    6452:	02 c0       	rjmp	.+4      	; 0x6458 <malloc+0x148>
    6454:	20 e0       	ldi	r18, 0x00	; 0
    6456:	30 e0       	ldi	r19, 0x00	; 0
    6458:	c9 01       	movw	r24, r18
    645a:	df 91       	pop	r29
    645c:	cf 91       	pop	r28
    645e:	08 95       	ret

00006460 <free>:
    6460:	cf 93       	push	r28
    6462:	df 93       	push	r29
    6464:	00 97       	sbiw	r24, 0x00	; 0
    6466:	09 f4       	brne	.+2      	; 0x646a <free+0xa>
    6468:	4e c0       	rjmp	.+156    	; 0x6506 <free+0xa6>
    646a:	ec 01       	movw	r28, r24
    646c:	22 97       	sbiw	r28, 0x02	; 2
    646e:	1b 82       	std	Y+3, r1	; 0x03
    6470:	1a 82       	std	Y+2, r1	; 0x02
    6472:	a0 91 af 06 	lds	r26, 0x06AF
    6476:	b0 91 b0 06 	lds	r27, 0x06B0
    647a:	10 97       	sbiw	r26, 0x00	; 0
    647c:	11 f1       	breq	.+68     	; 0x64c2 <free+0x62>
    647e:	40 e0       	ldi	r20, 0x00	; 0
    6480:	50 e0       	ldi	r21, 0x00	; 0
    6482:	01 c0       	rjmp	.+2      	; 0x6486 <free+0x26>
    6484:	dc 01       	movw	r26, r24
    6486:	ac 17       	cp	r26, r28
    6488:	bd 07       	cpc	r27, r29
    648a:	00 f1       	brcs	.+64     	; 0x64cc <free+0x6c>
    648c:	bb 83       	std	Y+3, r27	; 0x03
    648e:	aa 83       	std	Y+2, r26	; 0x02
    6490:	fe 01       	movw	r30, r28
    6492:	21 91       	ld	r18, Z+
    6494:	31 91       	ld	r19, Z+
    6496:	e2 0f       	add	r30, r18
    6498:	f3 1f       	adc	r31, r19
    649a:	ea 17       	cp	r30, r26
    649c:	fb 07       	cpc	r31, r27
    649e:	71 f4       	brne	.+28     	; 0x64bc <free+0x5c>
    64a0:	8d 91       	ld	r24, X+
    64a2:	9c 91       	ld	r25, X
    64a4:	11 97       	sbiw	r26, 0x01	; 1
    64a6:	28 0f       	add	r18, r24
    64a8:	39 1f       	adc	r19, r25
    64aa:	2e 5f       	subi	r18, 0xFE	; 254
    64ac:	3f 4f       	sbci	r19, 0xFF	; 255
    64ae:	39 83       	std	Y+1, r19	; 0x01
    64b0:	28 83       	st	Y, r18
    64b2:	fd 01       	movw	r30, r26
    64b4:	82 81       	ldd	r24, Z+2	; 0x02
    64b6:	93 81       	ldd	r25, Z+3	; 0x03
    64b8:	9b 83       	std	Y+3, r25	; 0x03
    64ba:	8a 83       	std	Y+2, r24	; 0x02
    64bc:	41 15       	cp	r20, r1
    64be:	51 05       	cpc	r21, r1
    64c0:	59 f4       	brne	.+22     	; 0x64d8 <free+0x78>
    64c2:	d0 93 b0 06 	sts	0x06B0, r29
    64c6:	c0 93 af 06 	sts	0x06AF, r28
    64ca:	1d c0       	rjmp	.+58     	; 0x6506 <free+0xa6>
    64cc:	fd 01       	movw	r30, r26
    64ce:	82 81       	ldd	r24, Z+2	; 0x02
    64d0:	93 81       	ldd	r25, Z+3	; 0x03
    64d2:	ad 01       	movw	r20, r26
    64d4:	00 97       	sbiw	r24, 0x00	; 0
    64d6:	b1 f6       	brne	.-84     	; 0x6484 <free+0x24>
    64d8:	fa 01       	movw	r30, r20
    64da:	d3 83       	std	Z+3, r29	; 0x03
    64dc:	c2 83       	std	Z+2, r28	; 0x02
    64de:	21 91       	ld	r18, Z+
    64e0:	31 91       	ld	r19, Z+
    64e2:	e2 0f       	add	r30, r18
    64e4:	f3 1f       	adc	r31, r19
    64e6:	ec 17       	cp	r30, r28
    64e8:	fd 07       	cpc	r31, r29
    64ea:	69 f4       	brne	.+26     	; 0x6506 <free+0xa6>
    64ec:	88 81       	ld	r24, Y
    64ee:	99 81       	ldd	r25, Y+1	; 0x01
    64f0:	28 0f       	add	r18, r24
    64f2:	39 1f       	adc	r19, r25
    64f4:	2e 5f       	subi	r18, 0xFE	; 254
    64f6:	3f 4f       	sbci	r19, 0xFF	; 255
    64f8:	fa 01       	movw	r30, r20
    64fa:	31 83       	std	Z+1, r19	; 0x01
    64fc:	20 83       	st	Z, r18
    64fe:	8a 81       	ldd	r24, Y+2	; 0x02
    6500:	9b 81       	ldd	r25, Y+3	; 0x03
    6502:	93 83       	std	Z+3, r25	; 0x03
    6504:	82 83       	std	Z+2, r24	; 0x02
    6506:	df 91       	pop	r29
    6508:	cf 91       	pop	r28
    650a:	08 95       	ret

0000650c <memset>:
    650c:	dc 01       	movw	r26, r24
    650e:	01 c0       	rjmp	.+2      	; 0x6512 <memset+0x6>
    6510:	6d 93       	st	X+, r22
    6512:	41 50       	subi	r20, 0x01	; 1
    6514:	50 40       	sbci	r21, 0x00	; 0
    6516:	e0 f7       	brcc	.-8      	; 0x6510 <memset+0x4>
    6518:	08 95       	ret

0000651a <__mulsi3>:
    651a:	62 9f       	mul	r22, r18
    651c:	d0 01       	movw	r26, r0
    651e:	73 9f       	mul	r23, r19
    6520:	f0 01       	movw	r30, r0
    6522:	82 9f       	mul	r24, r18
    6524:	e0 0d       	add	r30, r0
    6526:	f1 1d       	adc	r31, r1
    6528:	64 9f       	mul	r22, r20
    652a:	e0 0d       	add	r30, r0
    652c:	f1 1d       	adc	r31, r1
    652e:	92 9f       	mul	r25, r18
    6530:	f0 0d       	add	r31, r0
    6532:	83 9f       	mul	r24, r19
    6534:	f0 0d       	add	r31, r0
    6536:	74 9f       	mul	r23, r20
    6538:	f0 0d       	add	r31, r0
    653a:	65 9f       	mul	r22, r21
    653c:	f0 0d       	add	r31, r0
    653e:	99 27       	eor	r25, r25
    6540:	72 9f       	mul	r23, r18
    6542:	b0 0d       	add	r27, r0
    6544:	e1 1d       	adc	r30, r1
    6546:	f9 1f       	adc	r31, r25
    6548:	63 9f       	mul	r22, r19
    654a:	b0 0d       	add	r27, r0
    654c:	e1 1d       	adc	r30, r1
    654e:	f9 1f       	adc	r31, r25
    6550:	bd 01       	movw	r22, r26
    6552:	cf 01       	movw	r24, r30
    6554:	11 24       	eor	r1, r1
    6556:	08 95       	ret

00006558 <__udivmodhi4>:
    6558:	aa 1b       	sub	r26, r26
    655a:	bb 1b       	sub	r27, r27
    655c:	51 e1       	ldi	r21, 0x11	; 17
    655e:	07 c0       	rjmp	.+14     	; 0x656e <__udivmodhi4_ep>

00006560 <__udivmodhi4_loop>:
    6560:	aa 1f       	adc	r26, r26
    6562:	bb 1f       	adc	r27, r27
    6564:	a6 17       	cp	r26, r22
    6566:	b7 07       	cpc	r27, r23
    6568:	10 f0       	brcs	.+4      	; 0x656e <__udivmodhi4_ep>
    656a:	a6 1b       	sub	r26, r22
    656c:	b7 0b       	sbc	r27, r23

0000656e <__udivmodhi4_ep>:
    656e:	88 1f       	adc	r24, r24
    6570:	99 1f       	adc	r25, r25
    6572:	5a 95       	dec	r21
    6574:	a9 f7       	brne	.-22     	; 0x6560 <__udivmodhi4_loop>
    6576:	80 95       	com	r24
    6578:	90 95       	com	r25
    657a:	bc 01       	movw	r22, r24
    657c:	cd 01       	movw	r24, r26
    657e:	08 95       	ret

00006580 <__divmodhi4>:
    6580:	97 fb       	bst	r25, 7
    6582:	09 2e       	mov	r0, r25
    6584:	07 26       	eor	r0, r23
    6586:	0a d0       	rcall	.+20     	; 0x659c <__divmodhi4_neg1>
    6588:	77 fd       	sbrc	r23, 7
    658a:	04 d0       	rcall	.+8      	; 0x6594 <__divmodhi4_neg2>
    658c:	e5 df       	rcall	.-54     	; 0x6558 <__udivmodhi4>
    658e:	06 d0       	rcall	.+12     	; 0x659c <__divmodhi4_neg1>
    6590:	00 20       	and	r0, r0
    6592:	1a f4       	brpl	.+6      	; 0x659a <__divmodhi4_exit>

00006594 <__divmodhi4_neg2>:
    6594:	70 95       	com	r23
    6596:	61 95       	neg	r22
    6598:	7f 4f       	sbci	r23, 0xFF	; 255

0000659a <__divmodhi4_exit>:
    659a:	08 95       	ret

0000659c <__divmodhi4_neg1>:
    659c:	f6 f7       	brtc	.-4      	; 0x659a <__divmodhi4_exit>
    659e:	90 95       	com	r25
    65a0:	81 95       	neg	r24
    65a2:	9f 4f       	sbci	r25, 0xFF	; 255
    65a4:	08 95       	ret

000065a6 <__udivmodsi4>:
    65a6:	a1 e2       	ldi	r26, 0x21	; 33
    65a8:	1a 2e       	mov	r1, r26
    65aa:	aa 1b       	sub	r26, r26
    65ac:	bb 1b       	sub	r27, r27
    65ae:	fd 01       	movw	r30, r26
    65b0:	0d c0       	rjmp	.+26     	; 0x65cc <__udivmodsi4_ep>

000065b2 <__udivmodsi4_loop>:
    65b2:	aa 1f       	adc	r26, r26
    65b4:	bb 1f       	adc	r27, r27
    65b6:	ee 1f       	adc	r30, r30
    65b8:	ff 1f       	adc	r31, r31
    65ba:	a2 17       	cp	r26, r18
    65bc:	b3 07       	cpc	r27, r19
    65be:	e4 07       	cpc	r30, r20
    65c0:	f5 07       	cpc	r31, r21
    65c2:	20 f0       	brcs	.+8      	; 0x65cc <__udivmodsi4_ep>
    65c4:	a2 1b       	sub	r26, r18
    65c6:	b3 0b       	sbc	r27, r19
    65c8:	e4 0b       	sbc	r30, r20
    65ca:	f5 0b       	sbc	r31, r21

000065cc <__udivmodsi4_ep>:
    65cc:	66 1f       	adc	r22, r22
    65ce:	77 1f       	adc	r23, r23
    65d0:	88 1f       	adc	r24, r24
    65d2:	99 1f       	adc	r25, r25
    65d4:	1a 94       	dec	r1
    65d6:	69 f7       	brne	.-38     	; 0x65b2 <__udivmodsi4_loop>
    65d8:	60 95       	com	r22
    65da:	70 95       	com	r23
    65dc:	80 95       	com	r24
    65de:	90 95       	com	r25
    65e0:	9b 01       	movw	r18, r22
    65e2:	ac 01       	movw	r20, r24
    65e4:	bd 01       	movw	r22, r26
    65e6:	cf 01       	movw	r24, r30
    65e8:	08 95       	ret

000065ea <__prologue_saves__>:
    65ea:	2f 92       	push	r2
    65ec:	3f 92       	push	r3
    65ee:	4f 92       	push	r4
    65f0:	5f 92       	push	r5
    65f2:	6f 92       	push	r6
    65f4:	7f 92       	push	r7
    65f6:	8f 92       	push	r8
    65f8:	9f 92       	push	r9
    65fa:	af 92       	push	r10
    65fc:	bf 92       	push	r11
    65fe:	cf 92       	push	r12
    6600:	df 92       	push	r13
    6602:	ef 92       	push	r14
    6604:	ff 92       	push	r15
    6606:	0f 93       	push	r16
    6608:	1f 93       	push	r17
    660a:	cf 93       	push	r28
    660c:	df 93       	push	r29
    660e:	cd b7       	in	r28, 0x3d	; 61
    6610:	de b7       	in	r29, 0x3e	; 62
    6612:	ca 1b       	sub	r28, r26
    6614:	db 0b       	sbc	r29, r27
    6616:	0f b6       	in	r0, 0x3f	; 63
    6618:	f8 94       	cli
    661a:	de bf       	out	0x3e, r29	; 62
    661c:	0f be       	out	0x3f, r0	; 63
    661e:	cd bf       	out	0x3d, r28	; 61
    6620:	09 94       	ijmp

00006622 <__epilogue_restores__>:
    6622:	2a 88       	ldd	r2, Y+18	; 0x12
    6624:	39 88       	ldd	r3, Y+17	; 0x11
    6626:	48 88       	ldd	r4, Y+16	; 0x10
    6628:	5f 84       	ldd	r5, Y+15	; 0x0f
    662a:	6e 84       	ldd	r6, Y+14	; 0x0e
    662c:	7d 84       	ldd	r7, Y+13	; 0x0d
    662e:	8c 84       	ldd	r8, Y+12	; 0x0c
    6630:	9b 84       	ldd	r9, Y+11	; 0x0b
    6632:	aa 84       	ldd	r10, Y+10	; 0x0a
    6634:	b9 84       	ldd	r11, Y+9	; 0x09
    6636:	c8 84       	ldd	r12, Y+8	; 0x08
    6638:	df 80       	ldd	r13, Y+7	; 0x07
    663a:	ee 80       	ldd	r14, Y+6	; 0x06
    663c:	fd 80       	ldd	r15, Y+5	; 0x05
    663e:	0c 81       	ldd	r16, Y+4	; 0x04
    6640:	1b 81       	ldd	r17, Y+3	; 0x03
    6642:	aa 81       	ldd	r26, Y+2	; 0x02
    6644:	b9 81       	ldd	r27, Y+1	; 0x01
    6646:	ce 0f       	add	r28, r30
    6648:	d1 1d       	adc	r29, r1
    664a:	0f b6       	in	r0, 0x3f	; 63
    664c:	f8 94       	cli
    664e:	de bf       	out	0x3e, r29	; 62
    6650:	0f be       	out	0x3f, r0	; 63
    6652:	cd bf       	out	0x3d, r28	; 61
    6654:	ed 01       	movw	r28, r26
    6656:	08 95       	ret

00006658 <__eeprom_read_byte_1F2021>:
    6658:	f9 99       	sbic	0x1f, 1	; 31
    665a:	fe cf       	rjmp	.-4      	; 0x6658 <__eeprom_read_byte_1F2021>
    665c:	b2 bd       	out	0x22, r27	; 34
    665e:	a1 bd       	out	0x21, r26	; 33
    6660:	f8 9a       	sbi	0x1f, 0	; 31
    6662:	11 96       	adiw	r26, 0x01	; 1
    6664:	00 b4       	in	r0, 0x20	; 32
    6666:	08 95       	ret

00006668 <__eeprom_write_byte_1F2021>:
    6668:	f9 99       	sbic	0x1f, 1	; 31
    666a:	fe cf       	rjmp	.-4      	; 0x6668 <__eeprom_write_byte_1F2021>
    666c:	b2 bd       	out	0x22, r27	; 34
    666e:	a1 bd       	out	0x21, r26	; 33
    6670:	00 bc       	out	0x20, r0	; 32
    6672:	11 96       	adiw	r26, 0x01	; 1
    6674:	0f b6       	in	r0, 0x3f	; 63
    6676:	f8 94       	cli
    6678:	fa 9a       	sbi	0x1f, 2	; 31
    667a:	f9 9a       	sbi	0x1f, 1	; 31
    667c:	0f be       	out	0x3f, r0	; 63
    667e:	08 95       	ret

00006680 <__divmodsi4>:
    6680:	97 fb       	bst	r25, 7
    6682:	09 2e       	mov	r0, r25
    6684:	05 26       	eor	r0, r21
    6686:	0e d0       	rcall	.+28     	; 0x66a4 <__divmodsi4_neg1>
    6688:	57 fd       	sbrc	r21, 7
    668a:	04 d0       	rcall	.+8      	; 0x6694 <__divmodsi4_neg2>
    668c:	8c df       	rcall	.-232    	; 0x65a6 <__udivmodsi4>
    668e:	0a d0       	rcall	.+20     	; 0x66a4 <__divmodsi4_neg1>
    6690:	00 1c       	adc	r0, r0
    6692:	38 f4       	brcc	.+14     	; 0x66a2 <__divmodsi4_exit>

00006694 <__divmodsi4_neg2>:
    6694:	50 95       	com	r21
    6696:	40 95       	com	r20
    6698:	30 95       	com	r19
    669a:	21 95       	neg	r18
    669c:	3f 4f       	sbci	r19, 0xFF	; 255
    669e:	4f 4f       	sbci	r20, 0xFF	; 255
    66a0:	5f 4f       	sbci	r21, 0xFF	; 255

000066a2 <__divmodsi4_exit>:
    66a2:	08 95       	ret

000066a4 <__divmodsi4_neg1>:
    66a4:	f6 f7       	brtc	.-4      	; 0x66a2 <__divmodsi4_exit>
    66a6:	90 95       	com	r25
    66a8:	80 95       	com	r24
    66aa:	70 95       	com	r23
    66ac:	61 95       	neg	r22
    66ae:	7f 4f       	sbci	r23, 0xFF	; 255
    66b0:	8f 4f       	sbci	r24, 0xFF	; 255
    66b2:	9f 4f       	sbci	r25, 0xFF	; 255
    66b4:	08 95       	ret

000066b6 <_exit>:
    66b6:	ff cf       	rjmp	.-2      	; 0x66b6 <_exit>
